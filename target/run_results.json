{"results": [{"node": {"raw_sql": "with balance_transaction_joined as (\n\n    select *\n    from {{ ref('stripe_balance_transaction_joined') }}  \n\n), quarterly_balance_transactions as (\n\n  select\n    date_trunc(date(case when type = 'payout' then available_on else created_at end), quarter) as quarter,\n    sum(case when type in ('charge', 'payment') then amount else 0 end) as sales,\n    sum(case when type in ('payment_refund', 'refund') then amount else 0 end) as refunds,\n    sum(case when type = 'adjustment' then amount else 0 end) as adjustments,\n    sum(case when type not in ('charge', 'payment', 'payment_refund', 'refund', 'adjustment', 'payout') and type not like '%transfer%' then amount else 0 end) as other,\n    sum(case when type <> 'payout' and type not like '%transfer%' then amount else 0 end) as gross_transactions,\n    sum(case when type <> 'payout' and type not like '%transfer%' then net else 0 end) as net_transactions,\n    sum(case when type = 'payout' or type like '%transfer%' then fee * -1.0 else 0 end) as payout_fees,\n    sum(case when type = 'payout' or type like '%transfer%' then amount else 0 end) as gross_payouts,\n    sum(case when type = 'payout' or type like '%transfer%' then fee * -1.0 else net end) as quarterly_net_activity,\n    sum(if(type in ('payment', 'charge'), 1, 0)) as sales_count,\n    sum(if(type = 'payout', 1, 0)) as payouts_count,\n    count(distinct case when type = 'adjustment' then source end) as adjustments_count\n  from balance_transaction_joined\n  group by 1\n\n)\n\nselect\n  quarter,\n  sales/100.0 as sales,\n  refunds/100.0 as refunds,\n  adjustments/100.0 as adjustments,\n  other/100.0 as other,\n  gross_transactions/100.0 as gross_transactions,\n  net_transactions/100.0 as net_transactions,\n  payout_fees/100.0 as payout_fees,\n  gross_payouts/100.0 as gross_payouts,\n  quarterly_net_activity/100.0 as quarterly_net_activity,\n  (quarterly_net_activity + gross_payouts)/100.0 as quarterly_end_balance,\n  sales_count,\n  payouts_count,\n  adjustments_count\nfrom quarterly_balance_transactions\norder by 1 desc", "database": "dbt-package-testing", "schema": "dbt_erik", "fqn": ["stripe", "quarterly_overview"], "unique_id": "model.stripe.quarterly_overview", "package_name": "stripe", "root_path": "/Users/erikm/dbt_stripe", "path": "quarterly_overview.sql", "original_file_path": "models/quarterly_overview.sql", "name": "quarterly_overview", "resource_type": "model", "alias": "quarterly_overview", "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "tags": []}, "tags": [], "refs": [["stripe_balance_transaction_joined"]], "sources": [], "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.persist_docs"], "nodes": ["model.stripe.stripe_balance_transaction_joined"]}, "description": "", "columns": {"quarter": {"name": "quarter", "description": "The calander quarter associated with the transactions.  The available_at field is used for payouts, and the transaction created_at is used for all others.", "meta": {}, "data_type": null, "tags": []}, "sales": {"name": "sales", "description": "The sum of all sales during the reporting period.", "meta": {}, "data_type": null, "tags": []}, "refunds": {"name": "refunds", "description": "The sum of all refunds during the reporting period.", "meta": {}, "data_type": null, "tags": []}, "adjustments": {"name": "adjustments", "description": "The sum of all adjustments during the reporting period.", "meta": {}, "data_type": null, "tags": []}, "other": {"name": "other", "description": "The sum of all other transactions during the reporting period.", "meta": {}, "data_type": null, "tags": []}, "gross_transactions": {"name": "gross_transactions", "description": "Gross amount of all transactions (excluding payouts and transfers)", "meta": {}, "data_type": null, "tags": []}, "net_transactions": {"name": "net_transactions", "description": "Net amount of all transactions (excluding payouts and transfers)", "meta": {}, "data_type": null, "tags": []}, "payout_fees": {"name": "payout_fees", "description": "Fees associated with all payouts and transfers during the reporting period.", "meta": {}, "data_type": null, "tags": []}, "gross_payouts": {"name": "gross_payouts", "description": "Total amount of all payouts and transfers during the reporting period.", "meta": {}, "data_type": null, "tags": []}, "quarterly_net_activity": {"name": "quarterly_net_activity", "description": "Total balance transaction activity during the reporting period.", "meta": {}, "data_type": null, "tags": []}, "quarterly_end_balance": {"name": "quarterly_end_balance", "description": "Accout balance at the end of the reporting period.", "meta": {}, "data_type": null, "tags": []}, "sales_count": {"name": "sales_count", "description": "Number of sales transactions during the reporting period.", "meta": {}, "data_type": null, "tags": []}, "payouts_count": {"name": "payouts_count", "description": "Number of payouts made during the reporting period.", "meta": {}, "data_type": null, "tags": []}, "adjustments_count": {"name": "adjustments_count", "description": "Number of adjustments made during the reporting period.", "meta": {}, "data_type": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/stripe.yml", "build_path": "target/run/stripe/models/quarterly_overview.sql", "compiled": true, "compiled_sql": "with balance_transaction_joined as (\n\n    select *\n    from __dbt__CTE__stripe_balance_transaction_joined  \n\n), quarterly_balance_transactions as (\n\n  select\n    date_trunc(date(case when type = 'payout' then available_on else created_at end), quarter) as quarter,\n    sum(case when type in ('charge', 'payment') then amount else 0 end) as sales,\n    sum(case when type in ('payment_refund', 'refund') then amount else 0 end) as refunds,\n    sum(case when type = 'adjustment' then amount else 0 end) as adjustments,\n    sum(case when type not in ('charge', 'payment', 'payment_refund', 'refund', 'adjustment', 'payout') and type not like '%transfer%' then amount else 0 end) as other,\n    sum(case when type <> 'payout' and type not like '%transfer%' then amount else 0 end) as gross_transactions,\n    sum(case when type <> 'payout' and type not like '%transfer%' then net else 0 end) as net_transactions,\n    sum(case when type = 'payout' or type like '%transfer%' then fee * -1.0 else 0 end) as payout_fees,\n    sum(case when type = 'payout' or type like '%transfer%' then amount else 0 end) as gross_payouts,\n    sum(case when type = 'payout' or type like '%transfer%' then fee * -1.0 else net end) as quarterly_net_activity,\n    sum(if(type in ('payment', 'charge'), 1, 0)) as sales_count,\n    sum(if(type = 'payout', 1, 0)) as payouts_count,\n    count(distinct case when type = 'adjustment' then source end) as adjustments_count\n  from balance_transaction_joined\n  group by 1\n\n)\n\nselect\n  quarter,\n  sales/100.0 as sales,\n  refunds/100.0 as refunds,\n  adjustments/100.0 as adjustments,\n  other/100.0 as other,\n  gross_transactions/100.0 as gross_transactions,\n  net_transactions/100.0 as net_transactions,\n  payout_fees/100.0 as payout_fees,\n  gross_payouts/100.0 as gross_payouts,\n  quarterly_net_activity/100.0 as quarterly_net_activity,\n  (quarterly_net_activity + gross_payouts)/100.0 as quarterly_end_balance,\n  sales_count,\n  payouts_count,\n  adjustments_count\nfrom quarterly_balance_transactions\norder by 1 desc", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.stripe_source.stg_stripe_balance_transaction", "sql": " __dbt__CTE__stg_stripe_balance_transaction as (\nwith balance_transaction as (\n\n    select *\n    from `dbt-package-testing`.`stripe`.`balance_transaction`\n\n), fields as (\n\n    select \n      id as balance_transaction_id,\n      amount,\n      available_on,\n      created as created_at,\n      currency,\n      description,\n      exchange_rate,\n      fee,\n      net,\n      source,\n      status,\n      type\n    from balance_transaction\n)\n\nselect *\nfrom fields\n)"}, {"id": "model.stripe_source.stg_stripe_charge", "sql": " __dbt__CTE__stg_stripe_charge as (\nwith charge as (\n\n    select *\n    from `dbt-package-testing`.`stripe`.`charge`\n\n), fields as (\n\n    select \n      id as charge_id, \n      amount,\n      amount_refunded,\n      application_fee_amount,\n      balance_transaction_id,\n      captured as is_captured,\n      card_id,\n      created as created_at,\n      customer_id,\n      currency,\n      description,\n      failure_code,\n      failure_message,\n      paid as is_paid,\n      payment_intent_id,\n      receipt_email,\n      receipt_number,\n      refunded as is_refunded,\n      status\n    from charge\n    \n)\n\nselect *\nfrom fields\n)"}, {"id": "model.stripe_source.stg_stripe_payment_intent", "sql": " __dbt__CTE__stg_stripe_payment_intent as (\nwith payment_intent as (\n\n    select *\n    from `dbt-package-testing`.`stripe`.`payment_intent`\n\n), fields as (\n\n    select \n      id as payment_intent_id,\n      amount,\n      amount_capturable,\n      amount_received,\n      application,\n      application_fee_amount,\n      canceled_at,\n      cancellation_reason,\n      capture_method,\n      confirmation_method,\n      created as created_at,\n      currency,\n      customer_id,\n      description,\n      payment_method_id,\n      receipt_email,\n      statement_descriptor,\n      status\n    from payment_intent\n\n)\n\nselect *\nfrom fields\n)"}, {"id": "model.stripe_source.stg_stripe_payment_method", "sql": " __dbt__CTE__stg_stripe_payment_method as (\nwith payment_method as (\n\n    select *\n    from `dbt-package-testing`.`stripe`.`payment_method`\n\n), fields as (\n\n    select \n      id as payment_method_id,\n      created as created_at,\n      customer_id,\n      type\n    from payment_method\n    where not is_deleted\n\n)\n\nselect *\nfrom fields\n)"}, {"id": "model.stripe_source.stg_stripe_card", "sql": " __dbt__CTE__stg_stripe_card as (\nwith card as (\n\n    select *\n    from `dbt-package-testing`.`stripe`.`card`\n\n), fields as (\n\n    select \n      id as card_id,\n      brand,\n      country,\n      created as created_at,\n      customer_id,\n      name,\n      recipient,\n      funding\n    from card\n    where not is_deleted\n\n)\n\nselect *\nfrom fields\n)"}, {"id": "model.stripe_source.stg_stripe_payout", "sql": " __dbt__CTE__stg_stripe_payout as (\nwith payout as (\n\n    select *\n    from `dbt-package-testing`.`stripe`.`payout`\n\n), fields as (\n\n    select \n      id as payout_id,\n      amount,\n      arrival_date,\n      automatic as is_automatic,\n      balance_transaction_id,\n      created as created_at,\n      currency,\n      description,\n      method,\n      source_type,\n      status,\n      type\n    from payout\n\n)\n\nselect *\nfrom fields\n)"}, {"id": "model.stripe_source.stg_stripe_refund", "sql": " __dbt__CTE__stg_stripe_refund as (\nwith refund as (\n\n    select *\n    from `dbt-package-testing`.`stripe`.`refund`\n\n), fields as (\n\n    select \n      id as refund_id,\n      amount,\n      balance_transaction_id,\n      charge_id,\n      created as created_at,\n      currency,\n      description,\n      reason,\n      receipt_number,\n      status\n    from refund\n\n)\n\nselect *\nfrom fields\n)"}, {"id": "model.stripe_source.stg_stripe_customer", "sql": " __dbt__CTE__stg_stripe_customer as (\nwith customer as (\n\n    select *\n    from `dbt-package-testing`.`stripe`.`customer`\n\n), fields as (\n\n    select \n      id as customer_id,\n      account_balance,\n      created as created_at,\n      currency,\n      default_card_id,\n      delinquent as is_deliguent,\n      description,\n      email,\n      shipping_address_city,\n      shipping_address_country,\n      shipping_address_line_1,\n      shipping_address_line_2,\n      shipping_address_postal_code,\n      shipping_address_state,\n      shipping_name,\n      shipping_phone\n    from customer\n    where not is_deleted\n\n)\n\nselect *\nfrom fields\n)"}, {"id": "model.stripe.stripe_balance_transaction_joined", "sql": " __dbt__CTE__stripe_balance_transaction_joined as (\nwith balance_transaction as (\n\n    select *\n    from __dbt__CTE__stg_stripe_balance_transaction\n  \n), charge as (\n\n    select *\n    from __dbt__CTE__stg_stripe_charge\n\n), payment_intent as (\n\n    select *\n    from __dbt__CTE__stg_stripe_payment_intent\n\n), payment_method as (\n\n    select *\n    from __dbt__CTE__stg_stripe_payment_method\n\n), card as (\n\n    select *\n    from __dbt__CTE__stg_stripe_card\n\n), payout as (\n\n    select *\n    from __dbt__CTE__stg_stripe_payout\n\n), refund as (\n\n    select *\n    from __dbt__CTE__stg_stripe_refund\n\n), customer as (\n\n    select *\n    from __dbt__CTE__stg_stripe_customer\n\n\n)\n\nselect \n  balance_transaction.balance_transaction_id,\n  balance_transaction.created_at,\n  balance_transaction.available_on,\n  balance_transaction.currency,\n  balance_transaction.amount,\n  balance_transaction.fee,\n  balance_transaction.net,\n  balance_transaction.type,\n  case\n    when balance_transaction.type in ('charge', 'payment') then 'charge'\n    when balance_transaction.type in ('refund', 'payment_refund') then 'refund'\n    when balance_transaction.type in ('payout_cancel', 'payout_failure')\tthen 'payout_reversal'\n    when balance_transaction.type in ('transfer', 'recipient_transfer') then\t'transfer'\n    when balance_transaction.type in ('transfer_cancel', 'transfer_failure', 'recipient_transfer_cancel', 'recipient_transfer_failure') then 'transfer_reversal'\n    else balance_transaction.type\n  end as reporting_category,\n  balance_transaction.source,\n  balance_transaction.description,\n  case when balance_transaction.type = 'charge' then charge.amount end as customer_facing_amount, --think this might be the charge amount/currency\n  case when balance_transaction.type = 'charge' then charge.currency end as customer_facing_currency,\n  date_add(date(balance_transaction.available_on), interval 1 day) as effective_at,\n  coalesce(charge.customer_id, refund_charge.customer_id) as customer_id,\n  charge.receipt_email,\n  customer.description as customer_description,\n  charge.charge_id,\n  charge.payment_intent_id,\n  charge.created_at as charge_created_at,\n  payment_method.type as payment_method_type,\n  card.brand as card_brand,\n  card.funding as card_funding,\n  card.country as card_country,\n  payout.payout_id,\n  payout.arrival_date as payout_expeted_arrival_date,\n  payout.status as payout_status,\n  payout.type as payout_type,\n  payout.description as payout_description,\n  refund.reason as refund_reason\nfrom balance_transaction\nleft join charge on charge.balance_transaction_id = balance_transaction.balance_transaction_id\nleft join customer on charge.customer_id = customer.customer_id\nleft join payment_intent on charge.payment_intent_id = payment_intent.payment_intent_id\nleft join payment_method on payment_intent.payment_method_id = payment_method.payment_method_id\nleft join card on charge.card_id = card.card_id\nleft join payout on payout.balance_transaction_id = balance_transaction.balance_transaction_id\nleft join refund on refund.balance_transaction_id = balance_transaction.balance_transaction_id\nleft join charge as refund_charge on refund.charge_id = refund_charge.charge_id\norder by created_at desc\n)"}], "injected_sql": "with  __dbt__CTE__stg_stripe_balance_transaction as (\nwith balance_transaction as (\n\n    select *\n    from `dbt-package-testing`.`stripe`.`balance_transaction`\n\n), fields as (\n\n    select \n      id as balance_transaction_id,\n      amount,\n      available_on,\n      created as created_at,\n      currency,\n      description,\n      exchange_rate,\n      fee,\n      net,\n      source,\n      status,\n      type\n    from balance_transaction\n)\n\nselect *\nfrom fields\n),  __dbt__CTE__stg_stripe_charge as (\nwith charge as (\n\n    select *\n    from `dbt-package-testing`.`stripe`.`charge`\n\n), fields as (\n\n    select \n      id as charge_id, \n      amount,\n      amount_refunded,\n      application_fee_amount,\n      balance_transaction_id,\n      captured as is_captured,\n      card_id,\n      created as created_at,\n      customer_id,\n      currency,\n      description,\n      failure_code,\n      failure_message,\n      paid as is_paid,\n      payment_intent_id,\n      receipt_email,\n      receipt_number,\n      refunded as is_refunded,\n      status\n    from charge\n    \n)\n\nselect *\nfrom fields\n),  __dbt__CTE__stg_stripe_payment_intent as (\nwith payment_intent as (\n\n    select *\n    from `dbt-package-testing`.`stripe`.`payment_intent`\n\n), fields as (\n\n    select \n      id as payment_intent_id,\n      amount,\n      amount_capturable,\n      amount_received,\n      application,\n      application_fee_amount,\n      canceled_at,\n      cancellation_reason,\n      capture_method,\n      confirmation_method,\n      created as created_at,\n      currency,\n      customer_id,\n      description,\n      payment_method_id,\n      receipt_email,\n      statement_descriptor,\n      status\n    from payment_intent\n\n)\n\nselect *\nfrom fields\n),  __dbt__CTE__stg_stripe_payment_method as (\nwith payment_method as (\n\n    select *\n    from `dbt-package-testing`.`stripe`.`payment_method`\n\n), fields as (\n\n    select \n      id as payment_method_id,\n      created as created_at,\n      customer_id,\n      type\n    from payment_method\n    where not is_deleted\n\n)\n\nselect *\nfrom fields\n),  __dbt__CTE__stg_stripe_card as (\nwith card as (\n\n    select *\n    from `dbt-package-testing`.`stripe`.`card`\n\n), fields as (\n\n    select \n      id as card_id,\n      brand,\n      country,\n      created as created_at,\n      customer_id,\n      name,\n      recipient,\n      funding\n    from card\n    where not is_deleted\n\n)\n\nselect *\nfrom fields\n),  __dbt__CTE__stg_stripe_payout as (\nwith payout as (\n\n    select *\n    from `dbt-package-testing`.`stripe`.`payout`\n\n), fields as (\n\n    select \n      id as payout_id,\n      amount,\n      arrival_date,\n      automatic as is_automatic,\n      balance_transaction_id,\n      created as created_at,\n      currency,\n      description,\n      method,\n      source_type,\n      status,\n      type\n    from payout\n\n)\n\nselect *\nfrom fields\n),  __dbt__CTE__stg_stripe_refund as (\nwith refund as (\n\n    select *\n    from `dbt-package-testing`.`stripe`.`refund`\n\n), fields as (\n\n    select \n      id as refund_id,\n      amount,\n      balance_transaction_id,\n      charge_id,\n      created as created_at,\n      currency,\n      description,\n      reason,\n      receipt_number,\n      status\n    from refund\n\n)\n\nselect *\nfrom fields\n),  __dbt__CTE__stg_stripe_customer as (\nwith customer as (\n\n    select *\n    from `dbt-package-testing`.`stripe`.`customer`\n\n), fields as (\n\n    select \n      id as customer_id,\n      account_balance,\n      created as created_at,\n      currency,\n      default_card_id,\n      delinquent as is_deliguent,\n      description,\n      email,\n      shipping_address_city,\n      shipping_address_country,\n      shipping_address_line_1,\n      shipping_address_line_2,\n      shipping_address_postal_code,\n      shipping_address_state,\n      shipping_name,\n      shipping_phone\n    from customer\n    where not is_deleted\n\n)\n\nselect *\nfrom fields\n),  __dbt__CTE__stripe_balance_transaction_joined as (\nwith balance_transaction as (\n\n    select *\n    from __dbt__CTE__stg_stripe_balance_transaction\n  \n), charge as (\n\n    select *\n    from __dbt__CTE__stg_stripe_charge\n\n), payment_intent as (\n\n    select *\n    from __dbt__CTE__stg_stripe_payment_intent\n\n), payment_method as (\n\n    select *\n    from __dbt__CTE__stg_stripe_payment_method\n\n), card as (\n\n    select *\n    from __dbt__CTE__stg_stripe_card\n\n), payout as (\n\n    select *\n    from __dbt__CTE__stg_stripe_payout\n\n), refund as (\n\n    select *\n    from __dbt__CTE__stg_stripe_refund\n\n), customer as (\n\n    select *\n    from __dbt__CTE__stg_stripe_customer\n\n\n)\n\nselect \n  balance_transaction.balance_transaction_id,\n  balance_transaction.created_at,\n  balance_transaction.available_on,\n  balance_transaction.currency,\n  balance_transaction.amount,\n  balance_transaction.fee,\n  balance_transaction.net,\n  balance_transaction.type,\n  case\n    when balance_transaction.type in ('charge', 'payment') then 'charge'\n    when balance_transaction.type in ('refund', 'payment_refund') then 'refund'\n    when balance_transaction.type in ('payout_cancel', 'payout_failure')\tthen 'payout_reversal'\n    when balance_transaction.type in ('transfer', 'recipient_transfer') then\t'transfer'\n    when balance_transaction.type in ('transfer_cancel', 'transfer_failure', 'recipient_transfer_cancel', 'recipient_transfer_failure') then 'transfer_reversal'\n    else balance_transaction.type\n  end as reporting_category,\n  balance_transaction.source,\n  balance_transaction.description,\n  case when balance_transaction.type = 'charge' then charge.amount end as customer_facing_amount, --think this might be the charge amount/currency\n  case when balance_transaction.type = 'charge' then charge.currency end as customer_facing_currency,\n  date_add(date(balance_transaction.available_on), interval 1 day) as effective_at,\n  coalesce(charge.customer_id, refund_charge.customer_id) as customer_id,\n  charge.receipt_email,\n  customer.description as customer_description,\n  charge.charge_id,\n  charge.payment_intent_id,\n  charge.created_at as charge_created_at,\n  payment_method.type as payment_method_type,\n  card.brand as card_brand,\n  card.funding as card_funding,\n  card.country as card_country,\n  payout.payout_id,\n  payout.arrival_date as payout_expeted_arrival_date,\n  payout.status as payout_status,\n  payout.type as payout_type,\n  payout.description as payout_description,\n  refund.reason as refund_reason\nfrom balance_transaction\nleft join charge on charge.balance_transaction_id = balance_transaction.balance_transaction_id\nleft join customer on charge.customer_id = customer.customer_id\nleft join payment_intent on charge.payment_intent_id = payment_intent.payment_intent_id\nleft join payment_method on payment_intent.payment_method_id = payment_method.payment_method_id\nleft join card on charge.card_id = card.card_id\nleft join payout on payout.balance_transaction_id = balance_transaction.balance_transaction_id\nleft join refund on refund.balance_transaction_id = balance_transaction.balance_transaction_id\nleft join charge as refund_charge on refund.charge_id = refund_charge.charge_id\norder by created_at desc\n),balance_transaction_joined as (\n\n    select *\n    from __dbt__CTE__stripe_balance_transaction_joined  \n\n), quarterly_balance_transactions as (\n\n  select\n    date_trunc(date(case when type = 'payout' then available_on else created_at end), quarter) as quarter,\n    sum(case when type in ('charge', 'payment') then amount else 0 end) as sales,\n    sum(case when type in ('payment_refund', 'refund') then amount else 0 end) as refunds,\n    sum(case when type = 'adjustment' then amount else 0 end) as adjustments,\n    sum(case when type not in ('charge', 'payment', 'payment_refund', 'refund', 'adjustment', 'payout') and type not like '%transfer%' then amount else 0 end) as other,\n    sum(case when type <> 'payout' and type not like '%transfer%' then amount else 0 end) as gross_transactions,\n    sum(case when type <> 'payout' and type not like '%transfer%' then net else 0 end) as net_transactions,\n    sum(case when type = 'payout' or type like '%transfer%' then fee * -1.0 else 0 end) as payout_fees,\n    sum(case when type = 'payout' or type like '%transfer%' then amount else 0 end) as gross_payouts,\n    sum(case when type = 'payout' or type like '%transfer%' then fee * -1.0 else net end) as quarterly_net_activity,\n    sum(if(type in ('payment', 'charge'), 1, 0)) as sales_count,\n    sum(if(type = 'payout', 1, 0)) as payouts_count,\n    count(distinct case when type = 'adjustment' then source end) as adjustments_count\n  from balance_transaction_joined\n  group by 1\n\n)\n\nselect\n  quarter,\n  sales/100.0 as sales,\n  refunds/100.0 as refunds,\n  adjustments/100.0 as adjustments,\n  other/100.0 as other,\n  gross_transactions/100.0 as gross_transactions,\n  net_transactions/100.0 as net_transactions,\n  payout_fees/100.0 as payout_fees,\n  gross_payouts/100.0 as gross_payouts,\n  quarterly_net_activity/100.0 as quarterly_net_activity,\n  (quarterly_net_activity + gross_payouts)/100.0 as quarterly_end_balance,\n  sales_count,\n  payouts_count,\n  adjustments_count\nfrom quarterly_balance_transactions\norder by 1 desc"}, "error": null, "status": "CREATE TABLE (21)", "execution_time": 3.326422929763794, "thread_id": "Thread-4", "timing": [{"name": "compile", "started_at": "2020-06-01T17:17:56.922304Z", "completed_at": "2020-06-01T17:17:57.110830Z"}, {"name": "execute", "started_at": "2020-06-01T17:17:57.111791Z", "completed_at": "2020-06-01T17:18:00.212352Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "with balance_transaction_joined as (\n\n    select *\n    from {{ ref('stripe_balance_transaction_joined') }}  \n\n), monthly_balance_transactions as (\n\n  select\n    date_trunc(date(case when type = 'payout' then available_on else created_at end), month) as month,\n    sum(case when type in ('charge', 'payment') then amount else 0 end) as sales,\n    sum(case when type in ('payment_refund', 'refund') then amount else 0 end) as refunds,\n    sum(case when type = 'adjustment' then amount else 0 end) as adjustments,\n    sum(case when type not in ('charge', 'payment', 'payment_refund', 'refund', 'adjustment', 'payout') and type not like '%transfer%' then amount else 0 end) as other,\n    sum(case when type <> 'payout' and type not like '%transfer%' then amount else 0 end) as gross_transactions,\n    sum(case when type <> 'payout' and type not like '%transfer%' then net else 0 end) as net_transactions,\n    sum(case when type = 'payout' or type like '%transfer%' then fee * -1.0 else 0 end) as payout_fees,\n    sum(case when type = 'payout' or type like '%transfer%' then amount else 0 end) as gross_payouts,\n    sum(case when type = 'payout' or type like '%transfer%' then fee * -1.0 else net end) as monthly_net_activity,\n    sum(if(type in ('payment', 'charge'), 1, 0)) as sales_count,\n    sum(if(type = 'payout', 1, 0)) as payouts_count,\n    count(distinct case when type = 'adjustment' then source end) as adjustments_count\n  from balance_transaction_joined\n  group by 1\n\n)\n\nselect\n  month,\n  sales/100.0 as sales,\n  refunds/100.0 as refunds,\n  adjustments/100.0 as adjustments,\n  other/100.0 as other,\n  gross_transactions/100.0 as gross_transactions,\n  net_transactions/100.0 as net_transactions,\n  payout_fees/100.0 as payout_fees,\n  gross_payouts/100.0 as gross_payouts,\n  monthly_net_activity/100.0 as monthly_net_activity,\n  (monthly_net_activity + gross_payouts)/100.0 as month_end_balance,\n  sales_count,\n  payouts_count,\n  adjustments_count\nfrom monthly_balance_transactions\norder by 1 desc", "database": "dbt-package-testing", "schema": "dbt_erik", "fqn": ["stripe", "monthly_overview"], "unique_id": "model.stripe.monthly_overview", "package_name": "stripe", "root_path": "/Users/erikm/dbt_stripe", "path": "monthly_overview.sql", "original_file_path": "models/monthly_overview.sql", "name": "monthly_overview", "resource_type": "model", "alias": "monthly_overview", "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "tags": []}, "tags": [], "refs": [["stripe_balance_transaction_joined"]], "sources": [], "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.persist_docs"], "nodes": ["model.stripe.stripe_balance_transaction_joined"]}, "description": "", "columns": {"month": {"name": "month", "description": "The first day fo the week associated with the transactions.  The available_at field is used for payouts, and the transaction created_at is used for all others.", "meta": {}, "data_type": null, "tags": []}, "sales": {"name": "sales", "description": "The sum of all sales during the reporting period.", "meta": {}, "data_type": null, "tags": []}, "refunds": {"name": "refunds", "description": "The sum of all refunds during the reporting period.", "meta": {}, "data_type": null, "tags": []}, "adjustments": {"name": "adjustments", "description": "The sum of all adjustments during the reporting period.", "meta": {}, "data_type": null, "tags": []}, "other": {"name": "other", "description": "The sum of all other transactions during the reporting period.", "meta": {}, "data_type": null, "tags": []}, "gross_transactions": {"name": "gross_transactions", "description": "Gross amount of all transactions (excluding payouts and transfers)", "meta": {}, "data_type": null, "tags": []}, "net_transactions": {"name": "net_transactions", "description": "Net amount of all transactions (excluding payouts and transfers)", "meta": {}, "data_type": null, "tags": []}, "payout_fees": {"name": "payout_fees", "description": "Fees associated with all payouts and transfers during the reporting period.", "meta": {}, "data_type": null, "tags": []}, "gross_payouts": {"name": "gross_payouts", "description": "Total amount of all payouts and transfers during the reporting period.", "meta": {}, "data_type": null, "tags": []}, "monthly_net_activity": {"name": "monthly_net_activity", "description": "Total balance transaction activity during the reporting period.", "meta": {}, "data_type": null, "tags": []}, "monthly_end_balance": {"name": "monthly_end_balance", "description": "Accout balance at the end of the reporting period.", "meta": {}, "data_type": null, "tags": []}, "sales_count": {"name": "sales_count", "description": "Number of sales transactions during the reporting period.", "meta": {}, "data_type": null, "tags": []}, "payouts_count": {"name": "payouts_count", "description": "Number of payouts made during the reporting period.", "meta": {}, "data_type": null, "tags": []}, "adjustments_count": {"name": "adjustments_count", "description": "Number of adjustments made during the reporting period.", "meta": {}, "data_type": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/stripe.yml", "build_path": "target/run/stripe/models/monthly_overview.sql", "compiled": true, "compiled_sql": "with balance_transaction_joined as (\n\n    select *\n    from __dbt__CTE__stripe_balance_transaction_joined  \n\n), monthly_balance_transactions as (\n\n  select\n    date_trunc(date(case when type = 'payout' then available_on else created_at end), month) as month,\n    sum(case when type in ('charge', 'payment') then amount else 0 end) as sales,\n    sum(case when type in ('payment_refund', 'refund') then amount else 0 end) as refunds,\n    sum(case when type = 'adjustment' then amount else 0 end) as adjustments,\n    sum(case when type not in ('charge', 'payment', 'payment_refund', 'refund', 'adjustment', 'payout') and type not like '%transfer%' then amount else 0 end) as other,\n    sum(case when type <> 'payout' and type not like '%transfer%' then amount else 0 end) as gross_transactions,\n    sum(case when type <> 'payout' and type not like '%transfer%' then net else 0 end) as net_transactions,\n    sum(case when type = 'payout' or type like '%transfer%' then fee * -1.0 else 0 end) as payout_fees,\n    sum(case when type = 'payout' or type like '%transfer%' then amount else 0 end) as gross_payouts,\n    sum(case when type = 'payout' or type like '%transfer%' then fee * -1.0 else net end) as monthly_net_activity,\n    sum(if(type in ('payment', 'charge'), 1, 0)) as sales_count,\n    sum(if(type = 'payout', 1, 0)) as payouts_count,\n    count(distinct case when type = 'adjustment' then source end) as adjustments_count\n  from balance_transaction_joined\n  group by 1\n\n)\n\nselect\n  month,\n  sales/100.0 as sales,\n  refunds/100.0 as refunds,\n  adjustments/100.0 as adjustments,\n  other/100.0 as other,\n  gross_transactions/100.0 as gross_transactions,\n  net_transactions/100.0 as net_transactions,\n  payout_fees/100.0 as payout_fees,\n  gross_payouts/100.0 as gross_payouts,\n  monthly_net_activity/100.0 as monthly_net_activity,\n  (monthly_net_activity + gross_payouts)/100.0 as month_end_balance,\n  sales_count,\n  payouts_count,\n  adjustments_count\nfrom monthly_balance_transactions\norder by 1 desc", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.stripe_source.stg_stripe_balance_transaction", "sql": " __dbt__CTE__stg_stripe_balance_transaction as (\nwith balance_transaction as (\n\n    select *\n    from `dbt-package-testing`.`stripe`.`balance_transaction`\n\n), fields as (\n\n    select \n      id as balance_transaction_id,\n      amount,\n      available_on,\n      created as created_at,\n      currency,\n      description,\n      exchange_rate,\n      fee,\n      net,\n      source,\n      status,\n      type\n    from balance_transaction\n)\n\nselect *\nfrom fields\n)"}, {"id": "model.stripe_source.stg_stripe_charge", "sql": " __dbt__CTE__stg_stripe_charge as (\nwith charge as (\n\n    select *\n    from `dbt-package-testing`.`stripe`.`charge`\n\n), fields as (\n\n    select \n      id as charge_id, \n      amount,\n      amount_refunded,\n      application_fee_amount,\n      balance_transaction_id,\n      captured as is_captured,\n      card_id,\n      created as created_at,\n      customer_id,\n      currency,\n      description,\n      failure_code,\n      failure_message,\n      paid as is_paid,\n      payment_intent_id,\n      receipt_email,\n      receipt_number,\n      refunded as is_refunded,\n      status\n    from charge\n    \n)\n\nselect *\nfrom fields\n)"}, {"id": "model.stripe_source.stg_stripe_payment_intent", "sql": " __dbt__CTE__stg_stripe_payment_intent as (\nwith payment_intent as (\n\n    select *\n    from `dbt-package-testing`.`stripe`.`payment_intent`\n\n), fields as (\n\n    select \n      id as payment_intent_id,\n      amount,\n      amount_capturable,\n      amount_received,\n      application,\n      application_fee_amount,\n      canceled_at,\n      cancellation_reason,\n      capture_method,\n      confirmation_method,\n      created as created_at,\n      currency,\n      customer_id,\n      description,\n      payment_method_id,\n      receipt_email,\n      statement_descriptor,\n      status\n    from payment_intent\n\n)\n\nselect *\nfrom fields\n)"}, {"id": "model.stripe_source.stg_stripe_payment_method", "sql": " __dbt__CTE__stg_stripe_payment_method as (\nwith payment_method as (\n\n    select *\n    from `dbt-package-testing`.`stripe`.`payment_method`\n\n), fields as (\n\n    select \n      id as payment_method_id,\n      created as created_at,\n      customer_id,\n      type\n    from payment_method\n    where not is_deleted\n\n)\n\nselect *\nfrom fields\n)"}, {"id": "model.stripe_source.stg_stripe_card", "sql": " __dbt__CTE__stg_stripe_card as (\nwith card as (\n\n    select *\n    from `dbt-package-testing`.`stripe`.`card`\n\n), fields as (\n\n    select \n      id as card_id,\n      brand,\n      country,\n      created as created_at,\n      customer_id,\n      name,\n      recipient,\n      funding\n    from card\n    where not is_deleted\n\n)\n\nselect *\nfrom fields\n)"}, {"id": "model.stripe_source.stg_stripe_payout", "sql": " __dbt__CTE__stg_stripe_payout as (\nwith payout as (\n\n    select *\n    from `dbt-package-testing`.`stripe`.`payout`\n\n), fields as (\n\n    select \n      id as payout_id,\n      amount,\n      arrival_date,\n      automatic as is_automatic,\n      balance_transaction_id,\n      created as created_at,\n      currency,\n      description,\n      method,\n      source_type,\n      status,\n      type\n    from payout\n\n)\n\nselect *\nfrom fields\n)"}, {"id": "model.stripe_source.stg_stripe_refund", "sql": " __dbt__CTE__stg_stripe_refund as (\nwith refund as (\n\n    select *\n    from `dbt-package-testing`.`stripe`.`refund`\n\n), fields as (\n\n    select \n      id as refund_id,\n      amount,\n      balance_transaction_id,\n      charge_id,\n      created as created_at,\n      currency,\n      description,\n      reason,\n      receipt_number,\n      status\n    from refund\n\n)\n\nselect *\nfrom fields\n)"}, {"id": "model.stripe_source.stg_stripe_customer", "sql": " __dbt__CTE__stg_stripe_customer as (\nwith customer as (\n\n    select *\n    from `dbt-package-testing`.`stripe`.`customer`\n\n), fields as (\n\n    select \n      id as customer_id,\n      account_balance,\n      created as created_at,\n      currency,\n      default_card_id,\n      delinquent as is_deliguent,\n      description,\n      email,\n      shipping_address_city,\n      shipping_address_country,\n      shipping_address_line_1,\n      shipping_address_line_2,\n      shipping_address_postal_code,\n      shipping_address_state,\n      shipping_name,\n      shipping_phone\n    from customer\n    where not is_deleted\n\n)\n\nselect *\nfrom fields\n)"}, {"id": "model.stripe.stripe_balance_transaction_joined", "sql": " __dbt__CTE__stripe_balance_transaction_joined as (\nwith balance_transaction as (\n\n    select *\n    from __dbt__CTE__stg_stripe_balance_transaction\n  \n), charge as (\n\n    select *\n    from __dbt__CTE__stg_stripe_charge\n\n), payment_intent as (\n\n    select *\n    from __dbt__CTE__stg_stripe_payment_intent\n\n), payment_method as (\n\n    select *\n    from __dbt__CTE__stg_stripe_payment_method\n\n), card as (\n\n    select *\n    from __dbt__CTE__stg_stripe_card\n\n), payout as (\n\n    select *\n    from __dbt__CTE__stg_stripe_payout\n\n), refund as (\n\n    select *\n    from __dbt__CTE__stg_stripe_refund\n\n), customer as (\n\n    select *\n    from __dbt__CTE__stg_stripe_customer\n\n\n)\n\nselect \n  balance_transaction.balance_transaction_id,\n  balance_transaction.created_at,\n  balance_transaction.available_on,\n  balance_transaction.currency,\n  balance_transaction.amount,\n  balance_transaction.fee,\n  balance_transaction.net,\n  balance_transaction.type,\n  case\n    when balance_transaction.type in ('charge', 'payment') then 'charge'\n    when balance_transaction.type in ('refund', 'payment_refund') then 'refund'\n    when balance_transaction.type in ('payout_cancel', 'payout_failure')\tthen 'payout_reversal'\n    when balance_transaction.type in ('transfer', 'recipient_transfer') then\t'transfer'\n    when balance_transaction.type in ('transfer_cancel', 'transfer_failure', 'recipient_transfer_cancel', 'recipient_transfer_failure') then 'transfer_reversal'\n    else balance_transaction.type\n  end as reporting_category,\n  balance_transaction.source,\n  balance_transaction.description,\n  case when balance_transaction.type = 'charge' then charge.amount end as customer_facing_amount, --think this might be the charge amount/currency\n  case when balance_transaction.type = 'charge' then charge.currency end as customer_facing_currency,\n  date_add(date(balance_transaction.available_on), interval 1 day) as effective_at,\n  coalesce(charge.customer_id, refund_charge.customer_id) as customer_id,\n  charge.receipt_email,\n  customer.description as customer_description,\n  charge.charge_id,\n  charge.payment_intent_id,\n  charge.created_at as charge_created_at,\n  payment_method.type as payment_method_type,\n  card.brand as card_brand,\n  card.funding as card_funding,\n  card.country as card_country,\n  payout.payout_id,\n  payout.arrival_date as payout_expeted_arrival_date,\n  payout.status as payout_status,\n  payout.type as payout_type,\n  payout.description as payout_description,\n  refund.reason as refund_reason\nfrom balance_transaction\nleft join charge on charge.balance_transaction_id = balance_transaction.balance_transaction_id\nleft join customer on charge.customer_id = customer.customer_id\nleft join payment_intent on charge.payment_intent_id = payment_intent.payment_intent_id\nleft join payment_method on payment_intent.payment_method_id = payment_method.payment_method_id\nleft join card on charge.card_id = card.card_id\nleft join payout on payout.balance_transaction_id = balance_transaction.balance_transaction_id\nleft join refund on refund.balance_transaction_id = balance_transaction.balance_transaction_id\nleft join charge as refund_charge on refund.charge_id = refund_charge.charge_id\norder by created_at desc\n)"}], "injected_sql": "with  __dbt__CTE__stg_stripe_balance_transaction as (\nwith balance_transaction as (\n\n    select *\n    from `dbt-package-testing`.`stripe`.`balance_transaction`\n\n), fields as (\n\n    select \n      id as balance_transaction_id,\n      amount,\n      available_on,\n      created as created_at,\n      currency,\n      description,\n      exchange_rate,\n      fee,\n      net,\n      source,\n      status,\n      type\n    from balance_transaction\n)\n\nselect *\nfrom fields\n),  __dbt__CTE__stg_stripe_charge as (\nwith charge as (\n\n    select *\n    from `dbt-package-testing`.`stripe`.`charge`\n\n), fields as (\n\n    select \n      id as charge_id, \n      amount,\n      amount_refunded,\n      application_fee_amount,\n      balance_transaction_id,\n      captured as is_captured,\n      card_id,\n      created as created_at,\n      customer_id,\n      currency,\n      description,\n      failure_code,\n      failure_message,\n      paid as is_paid,\n      payment_intent_id,\n      receipt_email,\n      receipt_number,\n      refunded as is_refunded,\n      status\n    from charge\n    \n)\n\nselect *\nfrom fields\n),  __dbt__CTE__stg_stripe_payment_intent as (\nwith payment_intent as (\n\n    select *\n    from `dbt-package-testing`.`stripe`.`payment_intent`\n\n), fields as (\n\n    select \n      id as payment_intent_id,\n      amount,\n      amount_capturable,\n      amount_received,\n      application,\n      application_fee_amount,\n      canceled_at,\n      cancellation_reason,\n      capture_method,\n      confirmation_method,\n      created as created_at,\n      currency,\n      customer_id,\n      description,\n      payment_method_id,\n      receipt_email,\n      statement_descriptor,\n      status\n    from payment_intent\n\n)\n\nselect *\nfrom fields\n),  __dbt__CTE__stg_stripe_payment_method as (\nwith payment_method as (\n\n    select *\n    from `dbt-package-testing`.`stripe`.`payment_method`\n\n), fields as (\n\n    select \n      id as payment_method_id,\n      created as created_at,\n      customer_id,\n      type\n    from payment_method\n    where not is_deleted\n\n)\n\nselect *\nfrom fields\n),  __dbt__CTE__stg_stripe_card as (\nwith card as (\n\n    select *\n    from `dbt-package-testing`.`stripe`.`card`\n\n), fields as (\n\n    select \n      id as card_id,\n      brand,\n      country,\n      created as created_at,\n      customer_id,\n      name,\n      recipient,\n      funding\n    from card\n    where not is_deleted\n\n)\n\nselect *\nfrom fields\n),  __dbt__CTE__stg_stripe_payout as (\nwith payout as (\n\n    select *\n    from `dbt-package-testing`.`stripe`.`payout`\n\n), fields as (\n\n    select \n      id as payout_id,\n      amount,\n      arrival_date,\n      automatic as is_automatic,\n      balance_transaction_id,\n      created as created_at,\n      currency,\n      description,\n      method,\n      source_type,\n      status,\n      type\n    from payout\n\n)\n\nselect *\nfrom fields\n),  __dbt__CTE__stg_stripe_refund as (\nwith refund as (\n\n    select *\n    from `dbt-package-testing`.`stripe`.`refund`\n\n), fields as (\n\n    select \n      id as refund_id,\n      amount,\n      balance_transaction_id,\n      charge_id,\n      created as created_at,\n      currency,\n      description,\n      reason,\n      receipt_number,\n      status\n    from refund\n\n)\n\nselect *\nfrom fields\n),  __dbt__CTE__stg_stripe_customer as (\nwith customer as (\n\n    select *\n    from `dbt-package-testing`.`stripe`.`customer`\n\n), fields as (\n\n    select \n      id as customer_id,\n      account_balance,\n      created as created_at,\n      currency,\n      default_card_id,\n      delinquent as is_deliguent,\n      description,\n      email,\n      shipping_address_city,\n      shipping_address_country,\n      shipping_address_line_1,\n      shipping_address_line_2,\n      shipping_address_postal_code,\n      shipping_address_state,\n      shipping_name,\n      shipping_phone\n    from customer\n    where not is_deleted\n\n)\n\nselect *\nfrom fields\n),  __dbt__CTE__stripe_balance_transaction_joined as (\nwith balance_transaction as (\n\n    select *\n    from __dbt__CTE__stg_stripe_balance_transaction\n  \n), charge as (\n\n    select *\n    from __dbt__CTE__stg_stripe_charge\n\n), payment_intent as (\n\n    select *\n    from __dbt__CTE__stg_stripe_payment_intent\n\n), payment_method as (\n\n    select *\n    from __dbt__CTE__stg_stripe_payment_method\n\n), card as (\n\n    select *\n    from __dbt__CTE__stg_stripe_card\n\n), payout as (\n\n    select *\n    from __dbt__CTE__stg_stripe_payout\n\n), refund as (\n\n    select *\n    from __dbt__CTE__stg_stripe_refund\n\n), customer as (\n\n    select *\n    from __dbt__CTE__stg_stripe_customer\n\n\n)\n\nselect \n  balance_transaction.balance_transaction_id,\n  balance_transaction.created_at,\n  balance_transaction.available_on,\n  balance_transaction.currency,\n  balance_transaction.amount,\n  balance_transaction.fee,\n  balance_transaction.net,\n  balance_transaction.type,\n  case\n    when balance_transaction.type in ('charge', 'payment') then 'charge'\n    when balance_transaction.type in ('refund', 'payment_refund') then 'refund'\n    when balance_transaction.type in ('payout_cancel', 'payout_failure')\tthen 'payout_reversal'\n    when balance_transaction.type in ('transfer', 'recipient_transfer') then\t'transfer'\n    when balance_transaction.type in ('transfer_cancel', 'transfer_failure', 'recipient_transfer_cancel', 'recipient_transfer_failure') then 'transfer_reversal'\n    else balance_transaction.type\n  end as reporting_category,\n  balance_transaction.source,\n  balance_transaction.description,\n  case when balance_transaction.type = 'charge' then charge.amount end as customer_facing_amount, --think this might be the charge amount/currency\n  case when balance_transaction.type = 'charge' then charge.currency end as customer_facing_currency,\n  date_add(date(balance_transaction.available_on), interval 1 day) as effective_at,\n  coalesce(charge.customer_id, refund_charge.customer_id) as customer_id,\n  charge.receipt_email,\n  customer.description as customer_description,\n  charge.charge_id,\n  charge.payment_intent_id,\n  charge.created_at as charge_created_at,\n  payment_method.type as payment_method_type,\n  card.brand as card_brand,\n  card.funding as card_funding,\n  card.country as card_country,\n  payout.payout_id,\n  payout.arrival_date as payout_expeted_arrival_date,\n  payout.status as payout_status,\n  payout.type as payout_type,\n  payout.description as payout_description,\n  refund.reason as refund_reason\nfrom balance_transaction\nleft join charge on charge.balance_transaction_id = balance_transaction.balance_transaction_id\nleft join customer on charge.customer_id = customer.customer_id\nleft join payment_intent on charge.payment_intent_id = payment_intent.payment_intent_id\nleft join payment_method on payment_intent.payment_method_id = payment_method.payment_method_id\nleft join card on charge.card_id = card.card_id\nleft join payout on payout.balance_transaction_id = balance_transaction.balance_transaction_id\nleft join refund on refund.balance_transaction_id = balance_transaction.balance_transaction_id\nleft join charge as refund_charge on refund.charge_id = refund_charge.charge_id\norder by created_at desc\n),balance_transaction_joined as (\n\n    select *\n    from __dbt__CTE__stripe_balance_transaction_joined  \n\n), monthly_balance_transactions as (\n\n  select\n    date_trunc(date(case when type = 'payout' then available_on else created_at end), month) as month,\n    sum(case when type in ('charge', 'payment') then amount else 0 end) as sales,\n    sum(case when type in ('payment_refund', 'refund') then amount else 0 end) as refunds,\n    sum(case when type = 'adjustment' then amount else 0 end) as adjustments,\n    sum(case when type not in ('charge', 'payment', 'payment_refund', 'refund', 'adjustment', 'payout') and type not like '%transfer%' then amount else 0 end) as other,\n    sum(case when type <> 'payout' and type not like '%transfer%' then amount else 0 end) as gross_transactions,\n    sum(case when type <> 'payout' and type not like '%transfer%' then net else 0 end) as net_transactions,\n    sum(case when type = 'payout' or type like '%transfer%' then fee * -1.0 else 0 end) as payout_fees,\n    sum(case when type = 'payout' or type like '%transfer%' then amount else 0 end) as gross_payouts,\n    sum(case when type = 'payout' or type like '%transfer%' then fee * -1.0 else net end) as monthly_net_activity,\n    sum(if(type in ('payment', 'charge'), 1, 0)) as sales_count,\n    sum(if(type = 'payout', 1, 0)) as payouts_count,\n    count(distinct case when type = 'adjustment' then source end) as adjustments_count\n  from balance_transaction_joined\n  group by 1\n\n)\n\nselect\n  month,\n  sales/100.0 as sales,\n  refunds/100.0 as refunds,\n  adjustments/100.0 as adjustments,\n  other/100.0 as other,\n  gross_transactions/100.0 as gross_transactions,\n  net_transactions/100.0 as net_transactions,\n  payout_fees/100.0 as payout_fees,\n  gross_payouts/100.0 as gross_payouts,\n  monthly_net_activity/100.0 as monthly_net_activity,\n  (monthly_net_activity + gross_payouts)/100.0 as month_end_balance,\n  sales_count,\n  payouts_count,\n  adjustments_count\nfrom monthly_balance_transactions\norder by 1 desc"}, "error": null, "status": "CREATE TABLE (61)", "execution_time": 3.3755509853363037, "thread_id": "Thread-3", "timing": [{"name": "compile", "started_at": "2020-06-01T17:17:56.904752Z", "completed_at": "2020-06-01T17:17:57.100140Z"}, {"name": "execute", "started_at": "2020-06-01T17:17:57.103810Z", "completed_at": "2020-06-01T17:18:00.261340Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "with balance_transaction_joined as (\n\n    select *\n    from {{ ref('stripe_balance_transaction_joined') }}  \n\n), customer as (\n\n    select *\n    from {{ ref('stg_stripe_customer') }}  \n\n), transaction_grouped as (\n \n  select\n    customer_id,\n    sum(if(type in ('charge', 'payment'), amount, 0)) as total_sales,\n    sum(if(type in ('payment_refund', 'refund'), amount, 0)) as total_refunds,\n    sum(amount) as gross_transactions,\n    sum(fee) as total_fees,\n    sum(net) as net_transactions,\n    sum(if(type in ('payment', 'charge'), 1, 0)) as sales_count,\n    sum(if(type in ('payment_refund', 'refund'), 1, 0)) as refund_count,    \n    sum(if(type in ('charge', 'payment') and date_trunc(date(created_at), month) = date_trunc(current_date(), month),amount,0)) as sales_this_month,\n    sum(if(type in ('payment_refund', 'refund') and date_trunc(date(created_at), month) = date_trunc(current_date(), month), amount, 0)) as refunds_this_month,\n    sum(if(date_trunc(date(created_at), month) = date_trunc(current_date(), month), amount, 0)) as gross_transactions_this_month,\n    sum(if(date_trunc(date(created_at), month) = date_trunc(current_date(), month), fee, 0)) as fees_this_month,\n    sum(if(date_trunc(date(created_at), month) = date_trunc(current_date(), month), net, 0)) as net_transactions_this_month,\n    sum(if(type in ('payment', 'charge') and date_trunc(date(created_at), month) = date_trunc(current_date(), month) , 1, 0)) as sales_count_this_month,\n    sum(if(type in ('payment_refund', 'refund') and date_trunc(date(created_at), month) = date_trunc(current_date(), month) , 1, 0)) as refund_count_this_month,\n    min(if(type in ('payment', 'charge'), date(created_at), null)) as first_sale_date,\n    max(if(type in ('payment', 'charge'), date(created_at), null)) as most_recent_sale_date\n  from balance_transaction_joined\n  group by 1\n\n)\n\nselect\n  coalesce(customer.description, 'No associated customer') as customer_description,\n  customer.created_at as customer_created_at,\n  customer.is_deliguent,\n  total_sales/100.0 as total_sales,\n  total_refunds/100.0 as total_refunds,\n  gross_transactions/100.0 as gross_transcations,\n  total_fees/100.0 as total_fees,\n  net_transactions/100.0 as net_trasnactions,\n  sales_count,\n  refund_count,    \n  sales_this_month/100.0 as sales_this_month,\n  refunds_this_month/100.0 as refunds_this_month,\n  gross_transactions_this_month/100.0 as gross_transactions_this_month,\n  fees_this_month/100.0 as fees_this_month,\n  net_transactions_this_month/100.0 as net_transactions_this_month,\n  sales_count_this_month,\n  refund_count_this_month,\n  first_sale_date,\n  most_recent_sale_date,\n  customer.currency as customer_currency,\n  customer.default_card_id,\n  customer.email,\n  customer.shipping_name,\n  customer.shipping_address_line_1,\n  customer.shipping_address_line_2,\n  customer.shipping_address_city,\n  customer.shipping_address_state,\n  customer.shipping_address_country,\n  customer.shipping_address_postal_code,\n  customer.shipping_phone\nfrom transaction_grouped\nleft join customer on transaction_grouped.customer_id = customer.customer_id", "database": "dbt-package-testing", "schema": "dbt_erik", "fqn": ["stripe", "customer_overview"], "unique_id": "model.stripe.customer_overview", "package_name": "stripe", "root_path": "/Users/erikm/dbt_stripe", "path": "customer_overview.sql", "original_file_path": "models/customer_overview.sql", "name": "customer_overview", "resource_type": "model", "alias": "customer_overview", "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "tags": []}, "tags": [], "refs": [["stripe_balance_transaction_joined"], ["stg_stripe_customer"]], "sources": [], "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.persist_docs"], "nodes": ["model.stripe.stripe_balance_transaction_joined", "model.stripe_source.stg_stripe_customer"]}, "description": "", "columns": {"customer_description": {"name": "customer_description", "description": "An arbitrary string attached to the object. Often useful for displaying to users.", "meta": {}, "data_type": null, "tags": []}, "customer_created_at": {"name": "customer_created_at", "description": "Timestamp of when the customer emtry was created.", "meta": {}, "data_type": null, "tags": []}, "is_deliguent": {"name": "is_deliguent", "description": "When the customer\u2019s latest invoice is billed by charging automatically, delinquent is true if the invoice\u2019s latest charge is failed. When the customer\u2019s latest invoice is billed by sending an invoice, delinquent is true if the invoice is not paid by its due date.", "meta": {}, "data_type": null, "tags": []}, "total_sales": {"name": "total_sales", "description": "Sum of all charges made to this customer.", "meta": {}, "data_type": null, "tags": []}, "total_refunds": {"name": "total_refunds", "description": "Sum of all refunds made to this customer.", "meta": {}, "data_type": null, "tags": []}, "gross_transcations": {"name": "gross_transcations", "description": "Gross amount of all transactions made with this customer.", "meta": {}, "data_type": null, "tags": []}, "total_fees": {"name": "total_fees", "description": "Total fees charged on all transactions made with this customer.", "meta": {}, "data_type": null, "tags": []}, "net_trasnactions": {"name": "net_trasnactions", "description": "Net amount of all transactions made with this customer.", "meta": {}, "data_type": null, "tags": []}, "sales_count": {"name": "sales_count", "description": "The total number of sales made to this customer.", "meta": {}, "data_type": null, "tags": []}, "refund_count": {"name": "refund_count", "description": "The total number of refunds made to this customer.", "meta": {}, "data_type": null, "tags": []}, "sales_this_month": {"name": "sales_this_month", "description": "Sum of charges made to this customer this month.", "meta": {}, "data_type": null, "tags": []}, "refunds_this_month": {"name": "refunds_this_month", "description": "Sum of refunds made to this customer this month.", "meta": {}, "data_type": null, "tags": []}, "gross_transactions_this_month": {"name": "gross_transactions_this_month", "description": "Gross amount of transactions made with this customer this month.", "meta": {}, "data_type": null, "tags": []}, "fees_this_month": {"name": "fees_this_month", "description": "Total fees charged on transactions made with this customer this month.", "meta": {}, "data_type": null, "tags": []}, "net_transactions_this_month": {"name": "net_transactions_this_month", "description": "Net amount of transactions made with this customer this month.", "meta": {}, "data_type": null, "tags": []}, "sales_count_this_month": {"name": "sales_count_this_month", "description": "The number of sales made to this customer this month.", "meta": {}, "data_type": null, "tags": []}, "refund_count_this_month": {"name": "refund_count_this_month", "description": "The number of refunds made to this customer this month.", "meta": {}, "data_type": null, "tags": []}, "first_sale_date": {"name": "first_sale_date", "description": "Date of the first time this customer was charged.", "meta": {}, "data_type": null, "tags": []}, "most_recent_sale_date": {"name": "most_recent_sale_date", "description": "Date of the most recent time this customer was charged.", "meta": {}, "data_type": null, "tags": []}, "customer_currency": {"name": "customer_currency", "description": "Currency used by the customer.", "meta": {}, "data_type": null, "tags": []}, "default_card_id": {"name": "default_card_id", "description": "ID of the default card used by the customer.", "meta": {}, "data_type": null, "tags": []}, "email": {"name": "email", "description": "Email address associated with the customer.", "meta": {}, "data_type": null, "tags": []}, "shipping_name": {"name": "shipping_name", "description": "Attribute of the cusotmer's shipping address.", "meta": {}, "data_type": null, "tags": []}, "shipping_address_line_1": {"name": "shipping_address_line_1", "description": "Attribute of the cusotmer's shipping address.", "meta": {}, "data_type": null, "tags": []}, "shipping_address_line_2": {"name": "shipping_address_line_2", "description": "Attribute of the cusotmer's shipping address.", "meta": {}, "data_type": null, "tags": []}, "shipping_address_city": {"name": "shipping_address_city", "description": "Attribute of the cusotmer's shipping address.", "meta": {}, "data_type": null, "tags": []}, "shipping_address_state": {"name": "shipping_address_state", "description": "Attribute of the cusotmer's shipping address.", "meta": {}, "data_type": null, "tags": []}, "shipping_address_country": {"name": "shipping_address_country", "description": "Attribute of the cusotmer's shipping address.", "meta": {}, "data_type": null, "tags": []}, "shipping_address_postal_code": {"name": "shipping_address_postal_code", "description": "Attribute of the cusotmer's shipping address.", "meta": {}, "data_type": null, "tags": []}, "shipping_phone": {"name": "shipping_phone", "description": "Attribute of the cusotmer's shipping address.", "meta": {}, "data_type": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/stripe.yml", "build_path": "target/run/stripe/models/customer_overview.sql", "compiled": true, "compiled_sql": "with balance_transaction_joined as (\n\n    select *\n    from __dbt__CTE__stripe_balance_transaction_joined  \n\n), customer as (\n\n    select *\n    from __dbt__CTE__stg_stripe_customer  \n\n), transaction_grouped as (\n \n  select\n    customer_id,\n    sum(if(type in ('charge', 'payment'), amount, 0)) as total_sales,\n    sum(if(type in ('payment_refund', 'refund'), amount, 0)) as total_refunds,\n    sum(amount) as gross_transactions,\n    sum(fee) as total_fees,\n    sum(net) as net_transactions,\n    sum(if(type in ('payment', 'charge'), 1, 0)) as sales_count,\n    sum(if(type in ('payment_refund', 'refund'), 1, 0)) as refund_count,    \n    sum(if(type in ('charge', 'payment') and date_trunc(date(created_at), month) = date_trunc(current_date(), month),amount,0)) as sales_this_month,\n    sum(if(type in ('payment_refund', 'refund') and date_trunc(date(created_at), month) = date_trunc(current_date(), month), amount, 0)) as refunds_this_month,\n    sum(if(date_trunc(date(created_at), month) = date_trunc(current_date(), month), amount, 0)) as gross_transactions_this_month,\n    sum(if(date_trunc(date(created_at), month) = date_trunc(current_date(), month), fee, 0)) as fees_this_month,\n    sum(if(date_trunc(date(created_at), month) = date_trunc(current_date(), month), net, 0)) as net_transactions_this_month,\n    sum(if(type in ('payment', 'charge') and date_trunc(date(created_at), month) = date_trunc(current_date(), month) , 1, 0)) as sales_count_this_month,\n    sum(if(type in ('payment_refund', 'refund') and date_trunc(date(created_at), month) = date_trunc(current_date(), month) , 1, 0)) as refund_count_this_month,\n    min(if(type in ('payment', 'charge'), date(created_at), null)) as first_sale_date,\n    max(if(type in ('payment', 'charge'), date(created_at), null)) as most_recent_sale_date\n  from balance_transaction_joined\n  group by 1\n\n)\n\nselect\n  coalesce(customer.description, 'No associated customer') as customer_description,\n  customer.created_at as customer_created_at,\n  customer.is_deliguent,\n  total_sales/100.0 as total_sales,\n  total_refunds/100.0 as total_refunds,\n  gross_transactions/100.0 as gross_transcations,\n  total_fees/100.0 as total_fees,\n  net_transactions/100.0 as net_trasnactions,\n  sales_count,\n  refund_count,    \n  sales_this_month/100.0 as sales_this_month,\n  refunds_this_month/100.0 as refunds_this_month,\n  gross_transactions_this_month/100.0 as gross_transactions_this_month,\n  fees_this_month/100.0 as fees_this_month,\n  net_transactions_this_month/100.0 as net_transactions_this_month,\n  sales_count_this_month,\n  refund_count_this_month,\n  first_sale_date,\n  most_recent_sale_date,\n  customer.currency as customer_currency,\n  customer.default_card_id,\n  customer.email,\n  customer.shipping_name,\n  customer.shipping_address_line_1,\n  customer.shipping_address_line_2,\n  customer.shipping_address_city,\n  customer.shipping_address_state,\n  customer.shipping_address_country,\n  customer.shipping_address_postal_code,\n  customer.shipping_phone\nfrom transaction_grouped\nleft join customer on transaction_grouped.customer_id = customer.customer_id", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.stripe_source.stg_stripe_balance_transaction", "sql": " __dbt__CTE__stg_stripe_balance_transaction as (\nwith balance_transaction as (\n\n    select *\n    from `dbt-package-testing`.`stripe`.`balance_transaction`\n\n), fields as (\n\n    select \n      id as balance_transaction_id,\n      amount,\n      available_on,\n      created as created_at,\n      currency,\n      description,\n      exchange_rate,\n      fee,\n      net,\n      source,\n      status,\n      type\n    from balance_transaction\n)\n\nselect *\nfrom fields\n)"}, {"id": "model.stripe_source.stg_stripe_charge", "sql": " __dbt__CTE__stg_stripe_charge as (\nwith charge as (\n\n    select *\n    from `dbt-package-testing`.`stripe`.`charge`\n\n), fields as (\n\n    select \n      id as charge_id, \n      amount,\n      amount_refunded,\n      application_fee_amount,\n      balance_transaction_id,\n      captured as is_captured,\n      card_id,\n      created as created_at,\n      customer_id,\n      currency,\n      description,\n      failure_code,\n      failure_message,\n      paid as is_paid,\n      payment_intent_id,\n      receipt_email,\n      receipt_number,\n      refunded as is_refunded,\n      status\n    from charge\n    \n)\n\nselect *\nfrom fields\n)"}, {"id": "model.stripe_source.stg_stripe_payment_intent", "sql": " __dbt__CTE__stg_stripe_payment_intent as (\nwith payment_intent as (\n\n    select *\n    from `dbt-package-testing`.`stripe`.`payment_intent`\n\n), fields as (\n\n    select \n      id as payment_intent_id,\n      amount,\n      amount_capturable,\n      amount_received,\n      application,\n      application_fee_amount,\n      canceled_at,\n      cancellation_reason,\n      capture_method,\n      confirmation_method,\n      created as created_at,\n      currency,\n      customer_id,\n      description,\n      payment_method_id,\n      receipt_email,\n      statement_descriptor,\n      status\n    from payment_intent\n\n)\n\nselect *\nfrom fields\n)"}, {"id": "model.stripe_source.stg_stripe_payment_method", "sql": " __dbt__CTE__stg_stripe_payment_method as (\nwith payment_method as (\n\n    select *\n    from `dbt-package-testing`.`stripe`.`payment_method`\n\n), fields as (\n\n    select \n      id as payment_method_id,\n      created as created_at,\n      customer_id,\n      type\n    from payment_method\n    where not is_deleted\n\n)\n\nselect *\nfrom fields\n)"}, {"id": "model.stripe_source.stg_stripe_card", "sql": " __dbt__CTE__stg_stripe_card as (\nwith card as (\n\n    select *\n    from `dbt-package-testing`.`stripe`.`card`\n\n), fields as (\n\n    select \n      id as card_id,\n      brand,\n      country,\n      created as created_at,\n      customer_id,\n      name,\n      recipient,\n      funding\n    from card\n    where not is_deleted\n\n)\n\nselect *\nfrom fields\n)"}, {"id": "model.stripe_source.stg_stripe_payout", "sql": " __dbt__CTE__stg_stripe_payout as (\nwith payout as (\n\n    select *\n    from `dbt-package-testing`.`stripe`.`payout`\n\n), fields as (\n\n    select \n      id as payout_id,\n      amount,\n      arrival_date,\n      automatic as is_automatic,\n      balance_transaction_id,\n      created as created_at,\n      currency,\n      description,\n      method,\n      source_type,\n      status,\n      type\n    from payout\n\n)\n\nselect *\nfrom fields\n)"}, {"id": "model.stripe_source.stg_stripe_refund", "sql": " __dbt__CTE__stg_stripe_refund as (\nwith refund as (\n\n    select *\n    from `dbt-package-testing`.`stripe`.`refund`\n\n), fields as (\n\n    select \n      id as refund_id,\n      amount,\n      balance_transaction_id,\n      charge_id,\n      created as created_at,\n      currency,\n      description,\n      reason,\n      receipt_number,\n      status\n    from refund\n\n)\n\nselect *\nfrom fields\n)"}, {"id": "model.stripe_source.stg_stripe_customer", "sql": " __dbt__CTE__stg_stripe_customer as (\nwith customer as (\n\n    select *\n    from `dbt-package-testing`.`stripe`.`customer`\n\n), fields as (\n\n    select \n      id as customer_id,\n      account_balance,\n      created as created_at,\n      currency,\n      default_card_id,\n      delinquent as is_deliguent,\n      description,\n      email,\n      shipping_address_city,\n      shipping_address_country,\n      shipping_address_line_1,\n      shipping_address_line_2,\n      shipping_address_postal_code,\n      shipping_address_state,\n      shipping_name,\n      shipping_phone\n    from customer\n    where not is_deleted\n\n)\n\nselect *\nfrom fields\n)"}, {"id": "model.stripe.stripe_balance_transaction_joined", "sql": " __dbt__CTE__stripe_balance_transaction_joined as (\nwith balance_transaction as (\n\n    select *\n    from __dbt__CTE__stg_stripe_balance_transaction\n  \n), charge as (\n\n    select *\n    from __dbt__CTE__stg_stripe_charge\n\n), payment_intent as (\n\n    select *\n    from __dbt__CTE__stg_stripe_payment_intent\n\n), payment_method as (\n\n    select *\n    from __dbt__CTE__stg_stripe_payment_method\n\n), card as (\n\n    select *\n    from __dbt__CTE__stg_stripe_card\n\n), payout as (\n\n    select *\n    from __dbt__CTE__stg_stripe_payout\n\n), refund as (\n\n    select *\n    from __dbt__CTE__stg_stripe_refund\n\n), customer as (\n\n    select *\n    from __dbt__CTE__stg_stripe_customer\n\n\n)\n\nselect \n  balance_transaction.balance_transaction_id,\n  balance_transaction.created_at,\n  balance_transaction.available_on,\n  balance_transaction.currency,\n  balance_transaction.amount,\n  balance_transaction.fee,\n  balance_transaction.net,\n  balance_transaction.type,\n  case\n    when balance_transaction.type in ('charge', 'payment') then 'charge'\n    when balance_transaction.type in ('refund', 'payment_refund') then 'refund'\n    when balance_transaction.type in ('payout_cancel', 'payout_failure')\tthen 'payout_reversal'\n    when balance_transaction.type in ('transfer', 'recipient_transfer') then\t'transfer'\n    when balance_transaction.type in ('transfer_cancel', 'transfer_failure', 'recipient_transfer_cancel', 'recipient_transfer_failure') then 'transfer_reversal'\n    else balance_transaction.type\n  end as reporting_category,\n  balance_transaction.source,\n  balance_transaction.description,\n  case when balance_transaction.type = 'charge' then charge.amount end as customer_facing_amount, --think this might be the charge amount/currency\n  case when balance_transaction.type = 'charge' then charge.currency end as customer_facing_currency,\n  date_add(date(balance_transaction.available_on), interval 1 day) as effective_at,\n  coalesce(charge.customer_id, refund_charge.customer_id) as customer_id,\n  charge.receipt_email,\n  customer.description as customer_description,\n  charge.charge_id,\n  charge.payment_intent_id,\n  charge.created_at as charge_created_at,\n  payment_method.type as payment_method_type,\n  card.brand as card_brand,\n  card.funding as card_funding,\n  card.country as card_country,\n  payout.payout_id,\n  payout.arrival_date as payout_expeted_arrival_date,\n  payout.status as payout_status,\n  payout.type as payout_type,\n  payout.description as payout_description,\n  refund.reason as refund_reason\nfrom balance_transaction\nleft join charge on charge.balance_transaction_id = balance_transaction.balance_transaction_id\nleft join customer on charge.customer_id = customer.customer_id\nleft join payment_intent on charge.payment_intent_id = payment_intent.payment_intent_id\nleft join payment_method on payment_intent.payment_method_id = payment_method.payment_method_id\nleft join card on charge.card_id = card.card_id\nleft join payout on payout.balance_transaction_id = balance_transaction.balance_transaction_id\nleft join refund on refund.balance_transaction_id = balance_transaction.balance_transaction_id\nleft join charge as refund_charge on refund.charge_id = refund_charge.charge_id\norder by created_at desc\n)"}], "injected_sql": "with  __dbt__CTE__stg_stripe_balance_transaction as (\nwith balance_transaction as (\n\n    select *\n    from `dbt-package-testing`.`stripe`.`balance_transaction`\n\n), fields as (\n\n    select \n      id as balance_transaction_id,\n      amount,\n      available_on,\n      created as created_at,\n      currency,\n      description,\n      exchange_rate,\n      fee,\n      net,\n      source,\n      status,\n      type\n    from balance_transaction\n)\n\nselect *\nfrom fields\n),  __dbt__CTE__stg_stripe_charge as (\nwith charge as (\n\n    select *\n    from `dbt-package-testing`.`stripe`.`charge`\n\n), fields as (\n\n    select \n      id as charge_id, \n      amount,\n      amount_refunded,\n      application_fee_amount,\n      balance_transaction_id,\n      captured as is_captured,\n      card_id,\n      created as created_at,\n      customer_id,\n      currency,\n      description,\n      failure_code,\n      failure_message,\n      paid as is_paid,\n      payment_intent_id,\n      receipt_email,\n      receipt_number,\n      refunded as is_refunded,\n      status\n    from charge\n    \n)\n\nselect *\nfrom fields\n),  __dbt__CTE__stg_stripe_payment_intent as (\nwith payment_intent as (\n\n    select *\n    from `dbt-package-testing`.`stripe`.`payment_intent`\n\n), fields as (\n\n    select \n      id as payment_intent_id,\n      amount,\n      amount_capturable,\n      amount_received,\n      application,\n      application_fee_amount,\n      canceled_at,\n      cancellation_reason,\n      capture_method,\n      confirmation_method,\n      created as created_at,\n      currency,\n      customer_id,\n      description,\n      payment_method_id,\n      receipt_email,\n      statement_descriptor,\n      status\n    from payment_intent\n\n)\n\nselect *\nfrom fields\n),  __dbt__CTE__stg_stripe_payment_method as (\nwith payment_method as (\n\n    select *\n    from `dbt-package-testing`.`stripe`.`payment_method`\n\n), fields as (\n\n    select \n      id as payment_method_id,\n      created as created_at,\n      customer_id,\n      type\n    from payment_method\n    where not is_deleted\n\n)\n\nselect *\nfrom fields\n),  __dbt__CTE__stg_stripe_card as (\nwith card as (\n\n    select *\n    from `dbt-package-testing`.`stripe`.`card`\n\n), fields as (\n\n    select \n      id as card_id,\n      brand,\n      country,\n      created as created_at,\n      customer_id,\n      name,\n      recipient,\n      funding\n    from card\n    where not is_deleted\n\n)\n\nselect *\nfrom fields\n),  __dbt__CTE__stg_stripe_payout as (\nwith payout as (\n\n    select *\n    from `dbt-package-testing`.`stripe`.`payout`\n\n), fields as (\n\n    select \n      id as payout_id,\n      amount,\n      arrival_date,\n      automatic as is_automatic,\n      balance_transaction_id,\n      created as created_at,\n      currency,\n      description,\n      method,\n      source_type,\n      status,\n      type\n    from payout\n\n)\n\nselect *\nfrom fields\n),  __dbt__CTE__stg_stripe_refund as (\nwith refund as (\n\n    select *\n    from `dbt-package-testing`.`stripe`.`refund`\n\n), fields as (\n\n    select \n      id as refund_id,\n      amount,\n      balance_transaction_id,\n      charge_id,\n      created as created_at,\n      currency,\n      description,\n      reason,\n      receipt_number,\n      status\n    from refund\n\n)\n\nselect *\nfrom fields\n),  __dbt__CTE__stg_stripe_customer as (\nwith customer as (\n\n    select *\n    from `dbt-package-testing`.`stripe`.`customer`\n\n), fields as (\n\n    select \n      id as customer_id,\n      account_balance,\n      created as created_at,\n      currency,\n      default_card_id,\n      delinquent as is_deliguent,\n      description,\n      email,\n      shipping_address_city,\n      shipping_address_country,\n      shipping_address_line_1,\n      shipping_address_line_2,\n      shipping_address_postal_code,\n      shipping_address_state,\n      shipping_name,\n      shipping_phone\n    from customer\n    where not is_deleted\n\n)\n\nselect *\nfrom fields\n),  __dbt__CTE__stripe_balance_transaction_joined as (\nwith balance_transaction as (\n\n    select *\n    from __dbt__CTE__stg_stripe_balance_transaction\n  \n), charge as (\n\n    select *\n    from __dbt__CTE__stg_stripe_charge\n\n), payment_intent as (\n\n    select *\n    from __dbt__CTE__stg_stripe_payment_intent\n\n), payment_method as (\n\n    select *\n    from __dbt__CTE__stg_stripe_payment_method\n\n), card as (\n\n    select *\n    from __dbt__CTE__stg_stripe_card\n\n), payout as (\n\n    select *\n    from __dbt__CTE__stg_stripe_payout\n\n), refund as (\n\n    select *\n    from __dbt__CTE__stg_stripe_refund\n\n), customer as (\n\n    select *\n    from __dbt__CTE__stg_stripe_customer\n\n\n)\n\nselect \n  balance_transaction.balance_transaction_id,\n  balance_transaction.created_at,\n  balance_transaction.available_on,\n  balance_transaction.currency,\n  balance_transaction.amount,\n  balance_transaction.fee,\n  balance_transaction.net,\n  balance_transaction.type,\n  case\n    when balance_transaction.type in ('charge', 'payment') then 'charge'\n    when balance_transaction.type in ('refund', 'payment_refund') then 'refund'\n    when balance_transaction.type in ('payout_cancel', 'payout_failure')\tthen 'payout_reversal'\n    when balance_transaction.type in ('transfer', 'recipient_transfer') then\t'transfer'\n    when balance_transaction.type in ('transfer_cancel', 'transfer_failure', 'recipient_transfer_cancel', 'recipient_transfer_failure') then 'transfer_reversal'\n    else balance_transaction.type\n  end as reporting_category,\n  balance_transaction.source,\n  balance_transaction.description,\n  case when balance_transaction.type = 'charge' then charge.amount end as customer_facing_amount, --think this might be the charge amount/currency\n  case when balance_transaction.type = 'charge' then charge.currency end as customer_facing_currency,\n  date_add(date(balance_transaction.available_on), interval 1 day) as effective_at,\n  coalesce(charge.customer_id, refund_charge.customer_id) as customer_id,\n  charge.receipt_email,\n  customer.description as customer_description,\n  charge.charge_id,\n  charge.payment_intent_id,\n  charge.created_at as charge_created_at,\n  payment_method.type as payment_method_type,\n  card.brand as card_brand,\n  card.funding as card_funding,\n  card.country as card_country,\n  payout.payout_id,\n  payout.arrival_date as payout_expeted_arrival_date,\n  payout.status as payout_status,\n  payout.type as payout_type,\n  payout.description as payout_description,\n  refund.reason as refund_reason\nfrom balance_transaction\nleft join charge on charge.balance_transaction_id = balance_transaction.balance_transaction_id\nleft join customer on charge.customer_id = customer.customer_id\nleft join payment_intent on charge.payment_intent_id = payment_intent.payment_intent_id\nleft join payment_method on payment_intent.payment_method_id = payment_method.payment_method_id\nleft join card on charge.card_id = card.card_id\nleft join payout on payout.balance_transaction_id = balance_transaction.balance_transaction_id\nleft join refund on refund.balance_transaction_id = balance_transaction.balance_transaction_id\nleft join charge as refund_charge on refund.charge_id = refund_charge.charge_id\norder by created_at desc\n),balance_transaction_joined as (\n\n    select *\n    from __dbt__CTE__stripe_balance_transaction_joined  \n\n), customer as (\n\n    select *\n    from __dbt__CTE__stg_stripe_customer  \n\n), transaction_grouped as (\n \n  select\n    customer_id,\n    sum(if(type in ('charge', 'payment'), amount, 0)) as total_sales,\n    sum(if(type in ('payment_refund', 'refund'), amount, 0)) as total_refunds,\n    sum(amount) as gross_transactions,\n    sum(fee) as total_fees,\n    sum(net) as net_transactions,\n    sum(if(type in ('payment', 'charge'), 1, 0)) as sales_count,\n    sum(if(type in ('payment_refund', 'refund'), 1, 0)) as refund_count,    \n    sum(if(type in ('charge', 'payment') and date_trunc(date(created_at), month) = date_trunc(current_date(), month),amount,0)) as sales_this_month,\n    sum(if(type in ('payment_refund', 'refund') and date_trunc(date(created_at), month) = date_trunc(current_date(), month), amount, 0)) as refunds_this_month,\n    sum(if(date_trunc(date(created_at), month) = date_trunc(current_date(), month), amount, 0)) as gross_transactions_this_month,\n    sum(if(date_trunc(date(created_at), month) = date_trunc(current_date(), month), fee, 0)) as fees_this_month,\n    sum(if(date_trunc(date(created_at), month) = date_trunc(current_date(), month), net, 0)) as net_transactions_this_month,\n    sum(if(type in ('payment', 'charge') and date_trunc(date(created_at), month) = date_trunc(current_date(), month) , 1, 0)) as sales_count_this_month,\n    sum(if(type in ('payment_refund', 'refund') and date_trunc(date(created_at), month) = date_trunc(current_date(), month) , 1, 0)) as refund_count_this_month,\n    min(if(type in ('payment', 'charge'), date(created_at), null)) as first_sale_date,\n    max(if(type in ('payment', 'charge'), date(created_at), null)) as most_recent_sale_date\n  from balance_transaction_joined\n  group by 1\n\n)\n\nselect\n  coalesce(customer.description, 'No associated customer') as customer_description,\n  customer.created_at as customer_created_at,\n  customer.is_deliguent,\n  total_sales/100.0 as total_sales,\n  total_refunds/100.0 as total_refunds,\n  gross_transactions/100.0 as gross_transcations,\n  total_fees/100.0 as total_fees,\n  net_transactions/100.0 as net_trasnactions,\n  sales_count,\n  refund_count,    \n  sales_this_month/100.0 as sales_this_month,\n  refunds_this_month/100.0 as refunds_this_month,\n  gross_transactions_this_month/100.0 as gross_transactions_this_month,\n  fees_this_month/100.0 as fees_this_month,\n  net_transactions_this_month/100.0 as net_transactions_this_month,\n  sales_count_this_month,\n  refund_count_this_month,\n  first_sale_date,\n  most_recent_sale_date,\n  customer.currency as customer_currency,\n  customer.default_card_id,\n  customer.email,\n  customer.shipping_name,\n  customer.shipping_address_line_1,\n  customer.shipping_address_line_2,\n  customer.shipping_address_city,\n  customer.shipping_address_state,\n  customer.shipping_address_country,\n  customer.shipping_address_postal_code,\n  customer.shipping_phone\nfrom transaction_grouped\nleft join customer on transaction_grouped.customer_id = customer.customer_id"}, "error": null, "status": "CREATE TABLE (121)", "execution_time": 3.4189844131469727, "thread_id": "Thread-2", "timing": [{"name": "compile", "started_at": "2020-06-01T17:17:56.886822Z", "completed_at": "2020-06-01T17:17:57.069587Z"}, {"name": "execute", "started_at": "2020-06-01T17:17:57.070449Z", "completed_at": "2020-06-01T17:18:00.302876Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "with balance_transaction_joined as (\n\n    select *\n    from {{ ref('stripe_balance_transaction_joined') }}  \n\n), daily_balance_transactions as (\n\n  select\n    date(case when type = 'payout' then available_on else created_at end) as date,\n    sum(case when type in ('charge', 'payment') then amount else 0 end) as sales,\n    sum(case when type in ('payment_refund', 'refund') then amount else 0 end) as refunds,\n    sum(case when type = 'adjustment' then amount else 0 end) as adjustments,\n    sum(case when type not in ('charge', 'payment', 'payment_refund', 'refund', 'adjustment', 'payout') and type not like '%transfer%' then amount else 0 end) as other,\n    sum(case when type <> 'payout' and type not like '%transfer%' then amount else 0 end) as gross_transactions,\n    sum(case when type <> 'payout' and type not like '%transfer%' then net else 0 end) as net_transactions,\n    sum(case when type = 'payout' or type like '%transfer%' then fee * -1.0 else 0 end) as payout_fees,\n    sum(case when type = 'payout' or type like '%transfer%' then amount else 0 end) as gross_payouts,\n    sum(case when type = 'payout' or type like '%transfer%' then fee * -1.0 else net end) as daily_net_activity,\n    sum(if(type in ('payment', 'charge'), 1, 0)) as sales_count,\n    sum(if(type = 'payout', 1, 0)) as payouts_count,\n    count(distinct case when type = 'adjustment' then source end) as adjustments_count\n  from balance_transaction_joined\n  group by 1\n\n)\n\nselect\n  date,\n  sales/100.0 as sales,\n  refunds/100.0 as refunds,\n  adjustments/100.0 as adjustments,\n  other/100.0 as other,\n  gross_transactions/100.0 as gross_transactions,\n  net_transactions/100.0 as net_transactions,\n  payout_fees/100.0 as payout_fees,\n  gross_payouts/100.0 as gross_payouts,\n  daily_net_activity/100.0 as daily_net_activity,\n  (daily_net_activity + gross_payouts)/100.0 as daily_end_balance,\n  sales_count,\n  payouts_count,\n  adjustments_count\nfrom daily_balance_transactions\norder by 1 desc", "database": "dbt-package-testing", "schema": "dbt_erik", "fqn": ["stripe", "daily_overview"], "unique_id": "model.stripe.daily_overview", "package_name": "stripe", "root_path": "/Users/erikm/dbt_stripe", "path": "daily_overview.sql", "original_file_path": "models/daily_overview.sql", "name": "daily_overview", "resource_type": "model", "alias": "daily_overview", "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "tags": []}, "tags": [], "refs": [["stripe_balance_transaction_joined"]], "sources": [], "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.persist_docs"], "nodes": ["model.stripe.stripe_balance_transaction_joined"]}, "description": "", "columns": {"date": {"name": "date", "description": "The date associated with the transactions.  The available_at field is used for payouts, and the transaction created_at is used for all others.", "meta": {}, "data_type": null, "tags": []}, "sales": {"name": "sales", "description": "The sum of all sales during the reporting period.", "meta": {}, "data_type": null, "tags": []}, "refunds": {"name": "refunds", "description": "The sum of all refunds during the reporting period.", "meta": {}, "data_type": null, "tags": []}, "adjustments": {"name": "adjustments", "description": "The sum of all adjustments during the reporting period.", "meta": {}, "data_type": null, "tags": []}, "other": {"name": "other", "description": "The sum of all other transactions during the reporting period.", "meta": {}, "data_type": null, "tags": []}, "gross_transactions": {"name": "gross_transactions", "description": "Gross amount of all transactions (excluding payouts and transfers)", "meta": {}, "data_type": null, "tags": []}, "net_transactions": {"name": "net_transactions", "description": "Net amount of all transactions (excluding payouts and transfers)", "meta": {}, "data_type": null, "tags": []}, "payout_fees": {"name": "payout_fees", "description": "Fees associated with all payouts and transfers during the reporting period.", "meta": {}, "data_type": null, "tags": []}, "gross_payouts": {"name": "gross_payouts", "description": "Total amount of all payouts and transfers during the reporting period.", "meta": {}, "data_type": null, "tags": []}, "daily_net_activity": {"name": "daily_net_activity", "description": "Total balance transaction activity during the reporting period.", "meta": {}, "data_type": null, "tags": []}, "daily_end_balance": {"name": "daily_end_balance", "description": "Accout balance at the end of the reporting period.", "meta": {}, "data_type": null, "tags": []}, "sales_count": {"name": "sales_count", "description": "Number of sales transactions during the reporting period.", "meta": {}, "data_type": null, "tags": []}, "payouts_count": {"name": "payouts_count", "description": "Number of payouts made during the reporting period.", "meta": {}, "data_type": null, "tags": []}, "adjustments_count": {"name": "adjustments_count", "description": "Number of adjustments made during the reporting period.", "meta": {}, "data_type": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/stripe.yml", "build_path": "target/run/stripe/models/daily_overview.sql", "compiled": true, "compiled_sql": "with balance_transaction_joined as (\n\n    select *\n    from __dbt__CTE__stripe_balance_transaction_joined  \n\n), daily_balance_transactions as (\n\n  select\n    date(case when type = 'payout' then available_on else created_at end) as date,\n    sum(case when type in ('charge', 'payment') then amount else 0 end) as sales,\n    sum(case when type in ('payment_refund', 'refund') then amount else 0 end) as refunds,\n    sum(case when type = 'adjustment' then amount else 0 end) as adjustments,\n    sum(case when type not in ('charge', 'payment', 'payment_refund', 'refund', 'adjustment', 'payout') and type not like '%transfer%' then amount else 0 end) as other,\n    sum(case when type <> 'payout' and type not like '%transfer%' then amount else 0 end) as gross_transactions,\n    sum(case when type <> 'payout' and type not like '%transfer%' then net else 0 end) as net_transactions,\n    sum(case when type = 'payout' or type like '%transfer%' then fee * -1.0 else 0 end) as payout_fees,\n    sum(case when type = 'payout' or type like '%transfer%' then amount else 0 end) as gross_payouts,\n    sum(case when type = 'payout' or type like '%transfer%' then fee * -1.0 else net end) as daily_net_activity,\n    sum(if(type in ('payment', 'charge'), 1, 0)) as sales_count,\n    sum(if(type = 'payout', 1, 0)) as payouts_count,\n    count(distinct case when type = 'adjustment' then source end) as adjustments_count\n  from balance_transaction_joined\n  group by 1\n\n)\n\nselect\n  date,\n  sales/100.0 as sales,\n  refunds/100.0 as refunds,\n  adjustments/100.0 as adjustments,\n  other/100.0 as other,\n  gross_transactions/100.0 as gross_transactions,\n  net_transactions/100.0 as net_transactions,\n  payout_fees/100.0 as payout_fees,\n  gross_payouts/100.0 as gross_payouts,\n  daily_net_activity/100.0 as daily_net_activity,\n  (daily_net_activity + gross_payouts)/100.0 as daily_end_balance,\n  sales_count,\n  payouts_count,\n  adjustments_count\nfrom daily_balance_transactions\norder by 1 desc", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.stripe_source.stg_stripe_balance_transaction", "sql": " __dbt__CTE__stg_stripe_balance_transaction as (\nwith balance_transaction as (\n\n    select *\n    from `dbt-package-testing`.`stripe`.`balance_transaction`\n\n), fields as (\n\n    select \n      id as balance_transaction_id,\n      amount,\n      available_on,\n      created as created_at,\n      currency,\n      description,\n      exchange_rate,\n      fee,\n      net,\n      source,\n      status,\n      type\n    from balance_transaction\n)\n\nselect *\nfrom fields\n)"}, {"id": "model.stripe_source.stg_stripe_charge", "sql": " __dbt__CTE__stg_stripe_charge as (\nwith charge as (\n\n    select *\n    from `dbt-package-testing`.`stripe`.`charge`\n\n), fields as (\n\n    select \n      id as charge_id, \n      amount,\n      amount_refunded,\n      application_fee_amount,\n      balance_transaction_id,\n      captured as is_captured,\n      card_id,\n      created as created_at,\n      customer_id,\n      currency,\n      description,\n      failure_code,\n      failure_message,\n      paid as is_paid,\n      payment_intent_id,\n      receipt_email,\n      receipt_number,\n      refunded as is_refunded,\n      status\n    from charge\n    \n)\n\nselect *\nfrom fields\n)"}, {"id": "model.stripe_source.stg_stripe_payment_intent", "sql": " __dbt__CTE__stg_stripe_payment_intent as (\nwith payment_intent as (\n\n    select *\n    from `dbt-package-testing`.`stripe`.`payment_intent`\n\n), fields as (\n\n    select \n      id as payment_intent_id,\n      amount,\n      amount_capturable,\n      amount_received,\n      application,\n      application_fee_amount,\n      canceled_at,\n      cancellation_reason,\n      capture_method,\n      confirmation_method,\n      created as created_at,\n      currency,\n      customer_id,\n      description,\n      payment_method_id,\n      receipt_email,\n      statement_descriptor,\n      status\n    from payment_intent\n\n)\n\nselect *\nfrom fields\n)"}, {"id": "model.stripe_source.stg_stripe_payment_method", "sql": " __dbt__CTE__stg_stripe_payment_method as (\nwith payment_method as (\n\n    select *\n    from `dbt-package-testing`.`stripe`.`payment_method`\n\n), fields as (\n\n    select \n      id as payment_method_id,\n      created as created_at,\n      customer_id,\n      type\n    from payment_method\n    where not is_deleted\n\n)\n\nselect *\nfrom fields\n)"}, {"id": "model.stripe_source.stg_stripe_card", "sql": " __dbt__CTE__stg_stripe_card as (\nwith card as (\n\n    select *\n    from `dbt-package-testing`.`stripe`.`card`\n\n), fields as (\n\n    select \n      id as card_id,\n      brand,\n      country,\n      created as created_at,\n      customer_id,\n      name,\n      recipient,\n      funding\n    from card\n    where not is_deleted\n\n)\n\nselect *\nfrom fields\n)"}, {"id": "model.stripe_source.stg_stripe_payout", "sql": " __dbt__CTE__stg_stripe_payout as (\nwith payout as (\n\n    select *\n    from `dbt-package-testing`.`stripe`.`payout`\n\n), fields as (\n\n    select \n      id as payout_id,\n      amount,\n      arrival_date,\n      automatic as is_automatic,\n      balance_transaction_id,\n      created as created_at,\n      currency,\n      description,\n      method,\n      source_type,\n      status,\n      type\n    from payout\n\n)\n\nselect *\nfrom fields\n)"}, {"id": "model.stripe_source.stg_stripe_refund", "sql": " __dbt__CTE__stg_stripe_refund as (\nwith refund as (\n\n    select *\n    from `dbt-package-testing`.`stripe`.`refund`\n\n), fields as (\n\n    select \n      id as refund_id,\n      amount,\n      balance_transaction_id,\n      charge_id,\n      created as created_at,\n      currency,\n      description,\n      reason,\n      receipt_number,\n      status\n    from refund\n\n)\n\nselect *\nfrom fields\n)"}, {"id": "model.stripe_source.stg_stripe_customer", "sql": " __dbt__CTE__stg_stripe_customer as (\nwith customer as (\n\n    select *\n    from `dbt-package-testing`.`stripe`.`customer`\n\n), fields as (\n\n    select \n      id as customer_id,\n      account_balance,\n      created as created_at,\n      currency,\n      default_card_id,\n      delinquent as is_deliguent,\n      description,\n      email,\n      shipping_address_city,\n      shipping_address_country,\n      shipping_address_line_1,\n      shipping_address_line_2,\n      shipping_address_postal_code,\n      shipping_address_state,\n      shipping_name,\n      shipping_phone\n    from customer\n    where not is_deleted\n\n)\n\nselect *\nfrom fields\n)"}, {"id": "model.stripe.stripe_balance_transaction_joined", "sql": " __dbt__CTE__stripe_balance_transaction_joined as (\nwith balance_transaction as (\n\n    select *\n    from __dbt__CTE__stg_stripe_balance_transaction\n  \n), charge as (\n\n    select *\n    from __dbt__CTE__stg_stripe_charge\n\n), payment_intent as (\n\n    select *\n    from __dbt__CTE__stg_stripe_payment_intent\n\n), payment_method as (\n\n    select *\n    from __dbt__CTE__stg_stripe_payment_method\n\n), card as (\n\n    select *\n    from __dbt__CTE__stg_stripe_card\n\n), payout as (\n\n    select *\n    from __dbt__CTE__stg_stripe_payout\n\n), refund as (\n\n    select *\n    from __dbt__CTE__stg_stripe_refund\n\n), customer as (\n\n    select *\n    from __dbt__CTE__stg_stripe_customer\n\n\n)\n\nselect \n  balance_transaction.balance_transaction_id,\n  balance_transaction.created_at,\n  balance_transaction.available_on,\n  balance_transaction.currency,\n  balance_transaction.amount,\n  balance_transaction.fee,\n  balance_transaction.net,\n  balance_transaction.type,\n  case\n    when balance_transaction.type in ('charge', 'payment') then 'charge'\n    when balance_transaction.type in ('refund', 'payment_refund') then 'refund'\n    when balance_transaction.type in ('payout_cancel', 'payout_failure')\tthen 'payout_reversal'\n    when balance_transaction.type in ('transfer', 'recipient_transfer') then\t'transfer'\n    when balance_transaction.type in ('transfer_cancel', 'transfer_failure', 'recipient_transfer_cancel', 'recipient_transfer_failure') then 'transfer_reversal'\n    else balance_transaction.type\n  end as reporting_category,\n  balance_transaction.source,\n  balance_transaction.description,\n  case when balance_transaction.type = 'charge' then charge.amount end as customer_facing_amount, --think this might be the charge amount/currency\n  case when balance_transaction.type = 'charge' then charge.currency end as customer_facing_currency,\n  date_add(date(balance_transaction.available_on), interval 1 day) as effective_at,\n  coalesce(charge.customer_id, refund_charge.customer_id) as customer_id,\n  charge.receipt_email,\n  customer.description as customer_description,\n  charge.charge_id,\n  charge.payment_intent_id,\n  charge.created_at as charge_created_at,\n  payment_method.type as payment_method_type,\n  card.brand as card_brand,\n  card.funding as card_funding,\n  card.country as card_country,\n  payout.payout_id,\n  payout.arrival_date as payout_expeted_arrival_date,\n  payout.status as payout_status,\n  payout.type as payout_type,\n  payout.description as payout_description,\n  refund.reason as refund_reason\nfrom balance_transaction\nleft join charge on charge.balance_transaction_id = balance_transaction.balance_transaction_id\nleft join customer on charge.customer_id = customer.customer_id\nleft join payment_intent on charge.payment_intent_id = payment_intent.payment_intent_id\nleft join payment_method on payment_intent.payment_method_id = payment_method.payment_method_id\nleft join card on charge.card_id = card.card_id\nleft join payout on payout.balance_transaction_id = balance_transaction.balance_transaction_id\nleft join refund on refund.balance_transaction_id = balance_transaction.balance_transaction_id\nleft join charge as refund_charge on refund.charge_id = refund_charge.charge_id\norder by created_at desc\n)"}], "injected_sql": "with  __dbt__CTE__stg_stripe_balance_transaction as (\nwith balance_transaction as (\n\n    select *\n    from `dbt-package-testing`.`stripe`.`balance_transaction`\n\n), fields as (\n\n    select \n      id as balance_transaction_id,\n      amount,\n      available_on,\n      created as created_at,\n      currency,\n      description,\n      exchange_rate,\n      fee,\n      net,\n      source,\n      status,\n      type\n    from balance_transaction\n)\n\nselect *\nfrom fields\n),  __dbt__CTE__stg_stripe_charge as (\nwith charge as (\n\n    select *\n    from `dbt-package-testing`.`stripe`.`charge`\n\n), fields as (\n\n    select \n      id as charge_id, \n      amount,\n      amount_refunded,\n      application_fee_amount,\n      balance_transaction_id,\n      captured as is_captured,\n      card_id,\n      created as created_at,\n      customer_id,\n      currency,\n      description,\n      failure_code,\n      failure_message,\n      paid as is_paid,\n      payment_intent_id,\n      receipt_email,\n      receipt_number,\n      refunded as is_refunded,\n      status\n    from charge\n    \n)\n\nselect *\nfrom fields\n),  __dbt__CTE__stg_stripe_payment_intent as (\nwith payment_intent as (\n\n    select *\n    from `dbt-package-testing`.`stripe`.`payment_intent`\n\n), fields as (\n\n    select \n      id as payment_intent_id,\n      amount,\n      amount_capturable,\n      amount_received,\n      application,\n      application_fee_amount,\n      canceled_at,\n      cancellation_reason,\n      capture_method,\n      confirmation_method,\n      created as created_at,\n      currency,\n      customer_id,\n      description,\n      payment_method_id,\n      receipt_email,\n      statement_descriptor,\n      status\n    from payment_intent\n\n)\n\nselect *\nfrom fields\n),  __dbt__CTE__stg_stripe_payment_method as (\nwith payment_method as (\n\n    select *\n    from `dbt-package-testing`.`stripe`.`payment_method`\n\n), fields as (\n\n    select \n      id as payment_method_id,\n      created as created_at,\n      customer_id,\n      type\n    from payment_method\n    where not is_deleted\n\n)\n\nselect *\nfrom fields\n),  __dbt__CTE__stg_stripe_card as (\nwith card as (\n\n    select *\n    from `dbt-package-testing`.`stripe`.`card`\n\n), fields as (\n\n    select \n      id as card_id,\n      brand,\n      country,\n      created as created_at,\n      customer_id,\n      name,\n      recipient,\n      funding\n    from card\n    where not is_deleted\n\n)\n\nselect *\nfrom fields\n),  __dbt__CTE__stg_stripe_payout as (\nwith payout as (\n\n    select *\n    from `dbt-package-testing`.`stripe`.`payout`\n\n), fields as (\n\n    select \n      id as payout_id,\n      amount,\n      arrival_date,\n      automatic as is_automatic,\n      balance_transaction_id,\n      created as created_at,\n      currency,\n      description,\n      method,\n      source_type,\n      status,\n      type\n    from payout\n\n)\n\nselect *\nfrom fields\n),  __dbt__CTE__stg_stripe_refund as (\nwith refund as (\n\n    select *\n    from `dbt-package-testing`.`stripe`.`refund`\n\n), fields as (\n\n    select \n      id as refund_id,\n      amount,\n      balance_transaction_id,\n      charge_id,\n      created as created_at,\n      currency,\n      description,\n      reason,\n      receipt_number,\n      status\n    from refund\n\n)\n\nselect *\nfrom fields\n),  __dbt__CTE__stg_stripe_customer as (\nwith customer as (\n\n    select *\n    from `dbt-package-testing`.`stripe`.`customer`\n\n), fields as (\n\n    select \n      id as customer_id,\n      account_balance,\n      created as created_at,\n      currency,\n      default_card_id,\n      delinquent as is_deliguent,\n      description,\n      email,\n      shipping_address_city,\n      shipping_address_country,\n      shipping_address_line_1,\n      shipping_address_line_2,\n      shipping_address_postal_code,\n      shipping_address_state,\n      shipping_name,\n      shipping_phone\n    from customer\n    where not is_deleted\n\n)\n\nselect *\nfrom fields\n),  __dbt__CTE__stripe_balance_transaction_joined as (\nwith balance_transaction as (\n\n    select *\n    from __dbt__CTE__stg_stripe_balance_transaction\n  \n), charge as (\n\n    select *\n    from __dbt__CTE__stg_stripe_charge\n\n), payment_intent as (\n\n    select *\n    from __dbt__CTE__stg_stripe_payment_intent\n\n), payment_method as (\n\n    select *\n    from __dbt__CTE__stg_stripe_payment_method\n\n), card as (\n\n    select *\n    from __dbt__CTE__stg_stripe_card\n\n), payout as (\n\n    select *\n    from __dbt__CTE__stg_stripe_payout\n\n), refund as (\n\n    select *\n    from __dbt__CTE__stg_stripe_refund\n\n), customer as (\n\n    select *\n    from __dbt__CTE__stg_stripe_customer\n\n\n)\n\nselect \n  balance_transaction.balance_transaction_id,\n  balance_transaction.created_at,\n  balance_transaction.available_on,\n  balance_transaction.currency,\n  balance_transaction.amount,\n  balance_transaction.fee,\n  balance_transaction.net,\n  balance_transaction.type,\n  case\n    when balance_transaction.type in ('charge', 'payment') then 'charge'\n    when balance_transaction.type in ('refund', 'payment_refund') then 'refund'\n    when balance_transaction.type in ('payout_cancel', 'payout_failure')\tthen 'payout_reversal'\n    when balance_transaction.type in ('transfer', 'recipient_transfer') then\t'transfer'\n    when balance_transaction.type in ('transfer_cancel', 'transfer_failure', 'recipient_transfer_cancel', 'recipient_transfer_failure') then 'transfer_reversal'\n    else balance_transaction.type\n  end as reporting_category,\n  balance_transaction.source,\n  balance_transaction.description,\n  case when balance_transaction.type = 'charge' then charge.amount end as customer_facing_amount, --think this might be the charge amount/currency\n  case when balance_transaction.type = 'charge' then charge.currency end as customer_facing_currency,\n  date_add(date(balance_transaction.available_on), interval 1 day) as effective_at,\n  coalesce(charge.customer_id, refund_charge.customer_id) as customer_id,\n  charge.receipt_email,\n  customer.description as customer_description,\n  charge.charge_id,\n  charge.payment_intent_id,\n  charge.created_at as charge_created_at,\n  payment_method.type as payment_method_type,\n  card.brand as card_brand,\n  card.funding as card_funding,\n  card.country as card_country,\n  payout.payout_id,\n  payout.arrival_date as payout_expeted_arrival_date,\n  payout.status as payout_status,\n  payout.type as payout_type,\n  payout.description as payout_description,\n  refund.reason as refund_reason\nfrom balance_transaction\nleft join charge on charge.balance_transaction_id = balance_transaction.balance_transaction_id\nleft join customer on charge.customer_id = customer.customer_id\nleft join payment_intent on charge.payment_intent_id = payment_intent.payment_intent_id\nleft join payment_method on payment_intent.payment_method_id = payment_method.payment_method_id\nleft join card on charge.card_id = card.card_id\nleft join payout on payout.balance_transaction_id = balance_transaction.balance_transaction_id\nleft join refund on refund.balance_transaction_id = balance_transaction.balance_transaction_id\nleft join charge as refund_charge on refund.charge_id = refund_charge.charge_id\norder by created_at desc\n),balance_transaction_joined as (\n\n    select *\n    from __dbt__CTE__stripe_balance_transaction_joined  \n\n), daily_balance_transactions as (\n\n  select\n    date(case when type = 'payout' then available_on else created_at end) as date,\n    sum(case when type in ('charge', 'payment') then amount else 0 end) as sales,\n    sum(case when type in ('payment_refund', 'refund') then amount else 0 end) as refunds,\n    sum(case when type = 'adjustment' then amount else 0 end) as adjustments,\n    sum(case when type not in ('charge', 'payment', 'payment_refund', 'refund', 'adjustment', 'payout') and type not like '%transfer%' then amount else 0 end) as other,\n    sum(case when type <> 'payout' and type not like '%transfer%' then amount else 0 end) as gross_transactions,\n    sum(case when type <> 'payout' and type not like '%transfer%' then net else 0 end) as net_transactions,\n    sum(case when type = 'payout' or type like '%transfer%' then fee * -1.0 else 0 end) as payout_fees,\n    sum(case when type = 'payout' or type like '%transfer%' then amount else 0 end) as gross_payouts,\n    sum(case when type = 'payout' or type like '%transfer%' then fee * -1.0 else net end) as daily_net_activity,\n    sum(if(type in ('payment', 'charge'), 1, 0)) as sales_count,\n    sum(if(type = 'payout', 1, 0)) as payouts_count,\n    count(distinct case when type = 'adjustment' then source end) as adjustments_count\n  from balance_transaction_joined\n  group by 1\n\n)\n\nselect\n  date,\n  sales/100.0 as sales,\n  refunds/100.0 as refunds,\n  adjustments/100.0 as adjustments,\n  other/100.0 as other,\n  gross_transactions/100.0 as gross_transactions,\n  net_transactions/100.0 as net_transactions,\n  payout_fees/100.0 as payout_fees,\n  gross_payouts/100.0 as gross_payouts,\n  daily_net_activity/100.0 as daily_net_activity,\n  (daily_net_activity + gross_payouts)/100.0 as daily_end_balance,\n  sales_count,\n  payouts_count,\n  adjustments_count\nfrom daily_balance_transactions\norder by 1 desc"}, "error": null, "status": "CREATE TABLE (1216)", "execution_time": 3.488374948501587, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2020-06-01T17:17:56.887069Z", "completed_at": "2020-06-01T17:17:57.070023Z"}, {"name": "execute", "started_at": "2020-06-01T17:17:57.094042Z", "completed_at": "2020-06-01T17:18:00.373240Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "with balance_transaction_joined as (\n\n    select *\n    from {{ ref('stripe_balance_transaction_joined') }}  \n\n), weekly_balance_transactions as (\n\n  select\n    date_trunc(date(case when type = 'payout' then available_on else created_at end), week) as week,\n    sum(case when type in ('charge', 'payment') then amount else 0 end) as sales,\n    sum(case when type in ('payment_refund', 'refund') then amount else 0 end) as refunds,\n    sum(case when type = 'adjustment' then amount else 0 end) as adjustments,\n    sum(case when type not in ('charge', 'payment', 'payment_refund', 'refund', 'adjustment', 'payout') and type not like '%transfer%' then amount else 0 end) as other,\n    sum(case when type <> 'payout' and type not like '%transfer%' then amount else 0 end) as gross_transactions,\n    sum(case when type <> 'payout' and type not like '%transfer%' then net else 0 end) as net_transactions,\n    sum(case when type = 'payout' or type like '%transfer%' then fee * -1.0 else 0 end) as payout_fees,\n    sum(case when type = 'payout' or type like '%transfer%' then amount else 0 end) as gross_payouts,\n    sum(case when type = 'payout' or type like '%transfer%' then fee * -1.0 else net end) as weekly_net_activity,\n    sum(if(type in ('payment', 'charge'), 1, 0)) as sales_count,\n    sum(if(type = 'payout', 1, 0)) as payouts_count,\n    count(distinct case when type = 'adjustment' then source end) as adjustments_count\n  from balance_transaction_joined\n  group by 1\n\n)\n\nselect\n  week,\n  sales/100.0 as sales,\n  refunds/100.0 as refunds,\n  adjustments/100.0 as adjustments,\n  other/100.0 as other,\n  gross_transactions/100.0 as gross_transactions,\n  net_transactions/100.0 as net_transactions,\n  payout_fees/100.0 as payout_fees,\n  gross_payouts/100.0 as gross_payouts,\n  weekly_net_activity/100.0 as weekly_net_activity,\n  (weekly_net_activity + gross_payouts)/100.0 as weekly_end_balance,\n  sales_count,\n  payouts_count,\n  adjustments_count\nfrom weekly_balance_transactions\norder by 1 desc, 2", "database": "dbt-package-testing", "schema": "dbt_erik", "fqn": ["stripe", "weekly_overview"], "unique_id": "model.stripe.weekly_overview", "package_name": "stripe", "root_path": "/Users/erikm/dbt_stripe", "path": "weekly_overview.sql", "original_file_path": "models/weekly_overview.sql", "name": "weekly_overview", "resource_type": "model", "alias": "weekly_overview", "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "tags": []}, "tags": [], "refs": [["stripe_balance_transaction_joined"]], "sources": [], "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.persist_docs"], "nodes": ["model.stripe.stripe_balance_transaction_joined"]}, "description": "", "columns": {"week": {"name": "week", "description": "The first day fo the week associated with the transactions.  The available_at field is used for payouts, and the transaction created_at is used for all others.", "meta": {}, "data_type": null, "tags": []}, "sales": {"name": "sales", "description": "The sum of all sales during the reporting period.", "meta": {}, "data_type": null, "tags": []}, "refunds": {"name": "refunds", "description": "The sum of all refunds during the reporting period.", "meta": {}, "data_type": null, "tags": []}, "adjustments": {"name": "adjustments", "description": "The sum of all adjustments during the reporting period.", "meta": {}, "data_type": null, "tags": []}, "other": {"name": "other", "description": "The sum of all other transactions during the reporting period.", "meta": {}, "data_type": null, "tags": []}, "gross_transactions": {"name": "gross_transactions", "description": "Gross amount of all transactions (excluding payouts and transfers)", "meta": {}, "data_type": null, "tags": []}, "net_transactions": {"name": "net_transactions", "description": "Net amount of all transactions (excluding payouts and transfers)", "meta": {}, "data_type": null, "tags": []}, "payout_fees": {"name": "payout_fees", "description": "Fees associated with all payouts and transfers during the reporting period.", "meta": {}, "data_type": null, "tags": []}, "gross_payouts": {"name": "gross_payouts", "description": "Total amount of all payouts and transfers during the reporting period.", "meta": {}, "data_type": null, "tags": []}, "weekly_net_activity": {"name": "weekly_net_activity", "description": "Total balance transaction activity during the reporting period.", "meta": {}, "data_type": null, "tags": []}, "weekly_end_balance": {"name": "weekly_end_balance", "description": "Accout balance at the end of the reporting period.", "meta": {}, "data_type": null, "tags": []}, "sales_count": {"name": "sales_count", "description": "Number of sales transactions during the reporting period.", "meta": {}, "data_type": null, "tags": []}, "payouts_count": {"name": "payouts_count", "description": "Number of payouts made during the reporting period.", "meta": {}, "data_type": null, "tags": []}, "adjustments_count": {"name": "adjustments_count", "description": "Number of adjustments made during the reporting period.", "meta": {}, "data_type": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/stripe.yml", "build_path": "target/run/stripe/models/weekly_overview.sql", "compiled": true, "compiled_sql": "with balance_transaction_joined as (\n\n    select *\n    from __dbt__CTE__stripe_balance_transaction_joined  \n\n), weekly_balance_transactions as (\n\n  select\n    date_trunc(date(case when type = 'payout' then available_on else created_at end), week) as week,\n    sum(case when type in ('charge', 'payment') then amount else 0 end) as sales,\n    sum(case when type in ('payment_refund', 'refund') then amount else 0 end) as refunds,\n    sum(case when type = 'adjustment' then amount else 0 end) as adjustments,\n    sum(case when type not in ('charge', 'payment', 'payment_refund', 'refund', 'adjustment', 'payout') and type not like '%transfer%' then amount else 0 end) as other,\n    sum(case when type <> 'payout' and type not like '%transfer%' then amount else 0 end) as gross_transactions,\n    sum(case when type <> 'payout' and type not like '%transfer%' then net else 0 end) as net_transactions,\n    sum(case when type = 'payout' or type like '%transfer%' then fee * -1.0 else 0 end) as payout_fees,\n    sum(case when type = 'payout' or type like '%transfer%' then amount else 0 end) as gross_payouts,\n    sum(case when type = 'payout' or type like '%transfer%' then fee * -1.0 else net end) as weekly_net_activity,\n    sum(if(type in ('payment', 'charge'), 1, 0)) as sales_count,\n    sum(if(type = 'payout', 1, 0)) as payouts_count,\n    count(distinct case when type = 'adjustment' then source end) as adjustments_count\n  from balance_transaction_joined\n  group by 1\n\n)\n\nselect\n  week,\n  sales/100.0 as sales,\n  refunds/100.0 as refunds,\n  adjustments/100.0 as adjustments,\n  other/100.0 as other,\n  gross_transactions/100.0 as gross_transactions,\n  net_transactions/100.0 as net_transactions,\n  payout_fees/100.0 as payout_fees,\n  gross_payouts/100.0 as gross_payouts,\n  weekly_net_activity/100.0 as weekly_net_activity,\n  (weekly_net_activity + gross_payouts)/100.0 as weekly_end_balance,\n  sales_count,\n  payouts_count,\n  adjustments_count\nfrom weekly_balance_transactions\norder by 1 desc, 2", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.stripe_source.stg_stripe_balance_transaction", "sql": " __dbt__CTE__stg_stripe_balance_transaction as (\nwith balance_transaction as (\n\n    select *\n    from `dbt-package-testing`.`stripe`.`balance_transaction`\n\n), fields as (\n\n    select \n      id as balance_transaction_id,\n      amount,\n      available_on,\n      created as created_at,\n      currency,\n      description,\n      exchange_rate,\n      fee,\n      net,\n      source,\n      status,\n      type\n    from balance_transaction\n)\n\nselect *\nfrom fields\n)"}, {"id": "model.stripe_source.stg_stripe_charge", "sql": " __dbt__CTE__stg_stripe_charge as (\nwith charge as (\n\n    select *\n    from `dbt-package-testing`.`stripe`.`charge`\n\n), fields as (\n\n    select \n      id as charge_id, \n      amount,\n      amount_refunded,\n      application_fee_amount,\n      balance_transaction_id,\n      captured as is_captured,\n      card_id,\n      created as created_at,\n      customer_id,\n      currency,\n      description,\n      failure_code,\n      failure_message,\n      paid as is_paid,\n      payment_intent_id,\n      receipt_email,\n      receipt_number,\n      refunded as is_refunded,\n      status\n    from charge\n    \n)\n\nselect *\nfrom fields\n)"}, {"id": "model.stripe_source.stg_stripe_payment_intent", "sql": " __dbt__CTE__stg_stripe_payment_intent as (\nwith payment_intent as (\n\n    select *\n    from `dbt-package-testing`.`stripe`.`payment_intent`\n\n), fields as (\n\n    select \n      id as payment_intent_id,\n      amount,\n      amount_capturable,\n      amount_received,\n      application,\n      application_fee_amount,\n      canceled_at,\n      cancellation_reason,\n      capture_method,\n      confirmation_method,\n      created as created_at,\n      currency,\n      customer_id,\n      description,\n      payment_method_id,\n      receipt_email,\n      statement_descriptor,\n      status\n    from payment_intent\n\n)\n\nselect *\nfrom fields\n)"}, {"id": "model.stripe_source.stg_stripe_payment_method", "sql": " __dbt__CTE__stg_stripe_payment_method as (\nwith payment_method as (\n\n    select *\n    from `dbt-package-testing`.`stripe`.`payment_method`\n\n), fields as (\n\n    select \n      id as payment_method_id,\n      created as created_at,\n      customer_id,\n      type\n    from payment_method\n    where not is_deleted\n\n)\n\nselect *\nfrom fields\n)"}, {"id": "model.stripe_source.stg_stripe_card", "sql": " __dbt__CTE__stg_stripe_card as (\nwith card as (\n\n    select *\n    from `dbt-package-testing`.`stripe`.`card`\n\n), fields as (\n\n    select \n      id as card_id,\n      brand,\n      country,\n      created as created_at,\n      customer_id,\n      name,\n      recipient,\n      funding\n    from card\n    where not is_deleted\n\n)\n\nselect *\nfrom fields\n)"}, {"id": "model.stripe_source.stg_stripe_payout", "sql": " __dbt__CTE__stg_stripe_payout as (\nwith payout as (\n\n    select *\n    from `dbt-package-testing`.`stripe`.`payout`\n\n), fields as (\n\n    select \n      id as payout_id,\n      amount,\n      arrival_date,\n      automatic as is_automatic,\n      balance_transaction_id,\n      created as created_at,\n      currency,\n      description,\n      method,\n      source_type,\n      status,\n      type\n    from payout\n\n)\n\nselect *\nfrom fields\n)"}, {"id": "model.stripe_source.stg_stripe_refund", "sql": " __dbt__CTE__stg_stripe_refund as (\nwith refund as (\n\n    select *\n    from `dbt-package-testing`.`stripe`.`refund`\n\n), fields as (\n\n    select \n      id as refund_id,\n      amount,\n      balance_transaction_id,\n      charge_id,\n      created as created_at,\n      currency,\n      description,\n      reason,\n      receipt_number,\n      status\n    from refund\n\n)\n\nselect *\nfrom fields\n)"}, {"id": "model.stripe_source.stg_stripe_customer", "sql": " __dbt__CTE__stg_stripe_customer as (\nwith customer as (\n\n    select *\n    from `dbt-package-testing`.`stripe`.`customer`\n\n), fields as (\n\n    select \n      id as customer_id,\n      account_balance,\n      created as created_at,\n      currency,\n      default_card_id,\n      delinquent as is_deliguent,\n      description,\n      email,\n      shipping_address_city,\n      shipping_address_country,\n      shipping_address_line_1,\n      shipping_address_line_2,\n      shipping_address_postal_code,\n      shipping_address_state,\n      shipping_name,\n      shipping_phone\n    from customer\n    where not is_deleted\n\n)\n\nselect *\nfrom fields\n)"}, {"id": "model.stripe.stripe_balance_transaction_joined", "sql": " __dbt__CTE__stripe_balance_transaction_joined as (\nwith balance_transaction as (\n\n    select *\n    from __dbt__CTE__stg_stripe_balance_transaction\n  \n), charge as (\n\n    select *\n    from __dbt__CTE__stg_stripe_charge\n\n), payment_intent as (\n\n    select *\n    from __dbt__CTE__stg_stripe_payment_intent\n\n), payment_method as (\n\n    select *\n    from __dbt__CTE__stg_stripe_payment_method\n\n), card as (\n\n    select *\n    from __dbt__CTE__stg_stripe_card\n\n), payout as (\n\n    select *\n    from __dbt__CTE__stg_stripe_payout\n\n), refund as (\n\n    select *\n    from __dbt__CTE__stg_stripe_refund\n\n), customer as (\n\n    select *\n    from __dbt__CTE__stg_stripe_customer\n\n\n)\n\nselect \n  balance_transaction.balance_transaction_id,\n  balance_transaction.created_at,\n  balance_transaction.available_on,\n  balance_transaction.currency,\n  balance_transaction.amount,\n  balance_transaction.fee,\n  balance_transaction.net,\n  balance_transaction.type,\n  case\n    when balance_transaction.type in ('charge', 'payment') then 'charge'\n    when balance_transaction.type in ('refund', 'payment_refund') then 'refund'\n    when balance_transaction.type in ('payout_cancel', 'payout_failure')\tthen 'payout_reversal'\n    when balance_transaction.type in ('transfer', 'recipient_transfer') then\t'transfer'\n    when balance_transaction.type in ('transfer_cancel', 'transfer_failure', 'recipient_transfer_cancel', 'recipient_transfer_failure') then 'transfer_reversal'\n    else balance_transaction.type\n  end as reporting_category,\n  balance_transaction.source,\n  balance_transaction.description,\n  case when balance_transaction.type = 'charge' then charge.amount end as customer_facing_amount, --think this might be the charge amount/currency\n  case when balance_transaction.type = 'charge' then charge.currency end as customer_facing_currency,\n  date_add(date(balance_transaction.available_on), interval 1 day) as effective_at,\n  coalesce(charge.customer_id, refund_charge.customer_id) as customer_id,\n  charge.receipt_email,\n  customer.description as customer_description,\n  charge.charge_id,\n  charge.payment_intent_id,\n  charge.created_at as charge_created_at,\n  payment_method.type as payment_method_type,\n  card.brand as card_brand,\n  card.funding as card_funding,\n  card.country as card_country,\n  payout.payout_id,\n  payout.arrival_date as payout_expeted_arrival_date,\n  payout.status as payout_status,\n  payout.type as payout_type,\n  payout.description as payout_description,\n  refund.reason as refund_reason\nfrom balance_transaction\nleft join charge on charge.balance_transaction_id = balance_transaction.balance_transaction_id\nleft join customer on charge.customer_id = customer.customer_id\nleft join payment_intent on charge.payment_intent_id = payment_intent.payment_intent_id\nleft join payment_method on payment_intent.payment_method_id = payment_method.payment_method_id\nleft join card on charge.card_id = card.card_id\nleft join payout on payout.balance_transaction_id = balance_transaction.balance_transaction_id\nleft join refund on refund.balance_transaction_id = balance_transaction.balance_transaction_id\nleft join charge as refund_charge on refund.charge_id = refund_charge.charge_id\norder by created_at desc\n)"}], "injected_sql": "with  __dbt__CTE__stg_stripe_balance_transaction as (\nwith balance_transaction as (\n\n    select *\n    from `dbt-package-testing`.`stripe`.`balance_transaction`\n\n), fields as (\n\n    select \n      id as balance_transaction_id,\n      amount,\n      available_on,\n      created as created_at,\n      currency,\n      description,\n      exchange_rate,\n      fee,\n      net,\n      source,\n      status,\n      type\n    from balance_transaction\n)\n\nselect *\nfrom fields\n),  __dbt__CTE__stg_stripe_charge as (\nwith charge as (\n\n    select *\n    from `dbt-package-testing`.`stripe`.`charge`\n\n), fields as (\n\n    select \n      id as charge_id, \n      amount,\n      amount_refunded,\n      application_fee_amount,\n      balance_transaction_id,\n      captured as is_captured,\n      card_id,\n      created as created_at,\n      customer_id,\n      currency,\n      description,\n      failure_code,\n      failure_message,\n      paid as is_paid,\n      payment_intent_id,\n      receipt_email,\n      receipt_number,\n      refunded as is_refunded,\n      status\n    from charge\n    \n)\n\nselect *\nfrom fields\n),  __dbt__CTE__stg_stripe_payment_intent as (\nwith payment_intent as (\n\n    select *\n    from `dbt-package-testing`.`stripe`.`payment_intent`\n\n), fields as (\n\n    select \n      id as payment_intent_id,\n      amount,\n      amount_capturable,\n      amount_received,\n      application,\n      application_fee_amount,\n      canceled_at,\n      cancellation_reason,\n      capture_method,\n      confirmation_method,\n      created as created_at,\n      currency,\n      customer_id,\n      description,\n      payment_method_id,\n      receipt_email,\n      statement_descriptor,\n      status\n    from payment_intent\n\n)\n\nselect *\nfrom fields\n),  __dbt__CTE__stg_stripe_payment_method as (\nwith payment_method as (\n\n    select *\n    from `dbt-package-testing`.`stripe`.`payment_method`\n\n), fields as (\n\n    select \n      id as payment_method_id,\n      created as created_at,\n      customer_id,\n      type\n    from payment_method\n    where not is_deleted\n\n)\n\nselect *\nfrom fields\n),  __dbt__CTE__stg_stripe_card as (\nwith card as (\n\n    select *\n    from `dbt-package-testing`.`stripe`.`card`\n\n), fields as (\n\n    select \n      id as card_id,\n      brand,\n      country,\n      created as created_at,\n      customer_id,\n      name,\n      recipient,\n      funding\n    from card\n    where not is_deleted\n\n)\n\nselect *\nfrom fields\n),  __dbt__CTE__stg_stripe_payout as (\nwith payout as (\n\n    select *\n    from `dbt-package-testing`.`stripe`.`payout`\n\n), fields as (\n\n    select \n      id as payout_id,\n      amount,\n      arrival_date,\n      automatic as is_automatic,\n      balance_transaction_id,\n      created as created_at,\n      currency,\n      description,\n      method,\n      source_type,\n      status,\n      type\n    from payout\n\n)\n\nselect *\nfrom fields\n),  __dbt__CTE__stg_stripe_refund as (\nwith refund as (\n\n    select *\n    from `dbt-package-testing`.`stripe`.`refund`\n\n), fields as (\n\n    select \n      id as refund_id,\n      amount,\n      balance_transaction_id,\n      charge_id,\n      created as created_at,\n      currency,\n      description,\n      reason,\n      receipt_number,\n      status\n    from refund\n\n)\n\nselect *\nfrom fields\n),  __dbt__CTE__stg_stripe_customer as (\nwith customer as (\n\n    select *\n    from `dbt-package-testing`.`stripe`.`customer`\n\n), fields as (\n\n    select \n      id as customer_id,\n      account_balance,\n      created as created_at,\n      currency,\n      default_card_id,\n      delinquent as is_deliguent,\n      description,\n      email,\n      shipping_address_city,\n      shipping_address_country,\n      shipping_address_line_1,\n      shipping_address_line_2,\n      shipping_address_postal_code,\n      shipping_address_state,\n      shipping_name,\n      shipping_phone\n    from customer\n    where not is_deleted\n\n)\n\nselect *\nfrom fields\n),  __dbt__CTE__stripe_balance_transaction_joined as (\nwith balance_transaction as (\n\n    select *\n    from __dbt__CTE__stg_stripe_balance_transaction\n  \n), charge as (\n\n    select *\n    from __dbt__CTE__stg_stripe_charge\n\n), payment_intent as (\n\n    select *\n    from __dbt__CTE__stg_stripe_payment_intent\n\n), payment_method as (\n\n    select *\n    from __dbt__CTE__stg_stripe_payment_method\n\n), card as (\n\n    select *\n    from __dbt__CTE__stg_stripe_card\n\n), payout as (\n\n    select *\n    from __dbt__CTE__stg_stripe_payout\n\n), refund as (\n\n    select *\n    from __dbt__CTE__stg_stripe_refund\n\n), customer as (\n\n    select *\n    from __dbt__CTE__stg_stripe_customer\n\n\n)\n\nselect \n  balance_transaction.balance_transaction_id,\n  balance_transaction.created_at,\n  balance_transaction.available_on,\n  balance_transaction.currency,\n  balance_transaction.amount,\n  balance_transaction.fee,\n  balance_transaction.net,\n  balance_transaction.type,\n  case\n    when balance_transaction.type in ('charge', 'payment') then 'charge'\n    when balance_transaction.type in ('refund', 'payment_refund') then 'refund'\n    when balance_transaction.type in ('payout_cancel', 'payout_failure')\tthen 'payout_reversal'\n    when balance_transaction.type in ('transfer', 'recipient_transfer') then\t'transfer'\n    when balance_transaction.type in ('transfer_cancel', 'transfer_failure', 'recipient_transfer_cancel', 'recipient_transfer_failure') then 'transfer_reversal'\n    else balance_transaction.type\n  end as reporting_category,\n  balance_transaction.source,\n  balance_transaction.description,\n  case when balance_transaction.type = 'charge' then charge.amount end as customer_facing_amount, --think this might be the charge amount/currency\n  case when balance_transaction.type = 'charge' then charge.currency end as customer_facing_currency,\n  date_add(date(balance_transaction.available_on), interval 1 day) as effective_at,\n  coalesce(charge.customer_id, refund_charge.customer_id) as customer_id,\n  charge.receipt_email,\n  customer.description as customer_description,\n  charge.charge_id,\n  charge.payment_intent_id,\n  charge.created_at as charge_created_at,\n  payment_method.type as payment_method_type,\n  card.brand as card_brand,\n  card.funding as card_funding,\n  card.country as card_country,\n  payout.payout_id,\n  payout.arrival_date as payout_expeted_arrival_date,\n  payout.status as payout_status,\n  payout.type as payout_type,\n  payout.description as payout_description,\n  refund.reason as refund_reason\nfrom balance_transaction\nleft join charge on charge.balance_transaction_id = balance_transaction.balance_transaction_id\nleft join customer on charge.customer_id = customer.customer_id\nleft join payment_intent on charge.payment_intent_id = payment_intent.payment_intent_id\nleft join payment_method on payment_intent.payment_method_id = payment_method.payment_method_id\nleft join card on charge.card_id = card.card_id\nleft join payout on payout.balance_transaction_id = balance_transaction.balance_transaction_id\nleft join refund on refund.balance_transaction_id = balance_transaction.balance_transaction_id\nleft join charge as refund_charge on refund.charge_id = refund_charge.charge_id\norder by created_at desc\n),balance_transaction_joined as (\n\n    select *\n    from __dbt__CTE__stripe_balance_transaction_joined  \n\n), weekly_balance_transactions as (\n\n  select\n    date_trunc(date(case when type = 'payout' then available_on else created_at end), week) as week,\n    sum(case when type in ('charge', 'payment') then amount else 0 end) as sales,\n    sum(case when type in ('payment_refund', 'refund') then amount else 0 end) as refunds,\n    sum(case when type = 'adjustment' then amount else 0 end) as adjustments,\n    sum(case when type not in ('charge', 'payment', 'payment_refund', 'refund', 'adjustment', 'payout') and type not like '%transfer%' then amount else 0 end) as other,\n    sum(case when type <> 'payout' and type not like '%transfer%' then amount else 0 end) as gross_transactions,\n    sum(case when type <> 'payout' and type not like '%transfer%' then net else 0 end) as net_transactions,\n    sum(case when type = 'payout' or type like '%transfer%' then fee * -1.0 else 0 end) as payout_fees,\n    sum(case when type = 'payout' or type like '%transfer%' then amount else 0 end) as gross_payouts,\n    sum(case when type = 'payout' or type like '%transfer%' then fee * -1.0 else net end) as weekly_net_activity,\n    sum(if(type in ('payment', 'charge'), 1, 0)) as sales_count,\n    sum(if(type = 'payout', 1, 0)) as payouts_count,\n    count(distinct case when type = 'adjustment' then source end) as adjustments_count\n  from balance_transaction_joined\n  group by 1\n\n)\n\nselect\n  week,\n  sales/100.0 as sales,\n  refunds/100.0 as refunds,\n  adjustments/100.0 as adjustments,\n  other/100.0 as other,\n  gross_transactions/100.0 as gross_transactions,\n  net_transactions/100.0 as net_transactions,\n  payout_fees/100.0 as payout_fees,\n  gross_payouts/100.0 as gross_payouts,\n  weekly_net_activity/100.0 as weekly_net_activity,\n  (weekly_net_activity + gross_payouts)/100.0 as weekly_end_balance,\n  sales_count,\n  payouts_count,\n  adjustments_count\nfrom weekly_balance_transactions\norder by 1 desc, 2"}, "error": null, "status": "CREATE TABLE (262)", "execution_time": 3.140638828277588, "thread_id": "Thread-3", "timing": [{"name": "compile", "started_at": "2020-06-01T17:18:00.263184Z", "completed_at": "2020-06-01T17:18:00.304267Z"}, {"name": "execute", "started_at": "2020-06-01T17:18:00.305273Z", "completed_at": "2020-06-01T17:18:03.402933Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "with balance_transaction_joined as (\n\n    select *\n    from {{ ref('stripe_balance_transaction_joined') }}  \n\n)\n\nselect \n  balance_transaction_id,\n  created_at,\n  available_on,\n  currency,\n  amount,\n  fee,\n  net,\n  type,\n  reporting_category,\n  source,\n  description,\n  customer_facing_amount,\n  customer_facing_currency,\n  effective_at,\n  customer_id,\n  receipt_email,\n  customer_description,\n  charge_id,\n  payment_intent_id,\n  charge_created_at,\n  payment_method_type,\n  card_brand,\n  card_funding,\n  card_country,\n  payout_id,\n  payout_expeted_arrival_date,\n  payout_status,\n  payout_type,\n  payout_description,\n  refund_reason\nfrom balance_transaction_joined", "database": "dbt-package-testing", "schema": "dbt_erik", "fqn": ["stripe", "stripe_balance_transactions"], "unique_id": "model.stripe.stripe_balance_transactions", "package_name": "stripe", "root_path": "/Users/erikm/dbt_stripe", "path": "stripe_balance_transactions.sql", "original_file_path": "models/stripe_balance_transactions.sql", "name": "stripe_balance_transactions", "resource_type": "model", "alias": "stripe_balance_transactions", "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "tags": []}, "tags": [], "refs": [["stripe_balance_transaction_joined"]], "sources": [], "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.persist_docs"], "nodes": ["model.stripe.stripe_balance_transaction_joined"]}, "description": "", "columns": {"balance_transaction_id": {"name": "balance_transaction_id", "description": "Unique identifier for the transaction.", "meta": {}, "data_type": null, "tags": []}, "created_at": {"name": "created_at", "description": "When the transaction took place", "meta": {}, "data_type": null, "tags": []}, "available_on": {"name": "available_on", "description": "The date the transaction\u2019s net funds will become available in the Stripe balance.", "meta": {}, "data_type": null, "tags": []}, "currency": {"name": "currency", "description": "Three-letter ISO currency code, in lowercase.", "meta": {}, "data_type": null, "tags": []}, "amount": {"name": "amount", "description": "Gross amount of the transaction, in cents.", "meta": {}, "data_type": null, "tags": []}, "fee": {"name": "fee", "description": "Fees (in cents) paid for this transaction.", "meta": {}, "data_type": null, "tags": []}, "net": {"name": "net", "description": "Net amount of the transaction, in cents.", "meta": {}, "data_type": null, "tags": []}, "type": {"name": "type", "description": "The type of tranaction.  Possible values are adjustment, advance, advance_funding, application_fee, application_fee_refund, charge, connect_collection_transfer, issuing_authorization_hold, issuing_authorization_release, issuing_dispute, issuing_transaction, payment, payment_failure_refund, payment_refund, payout, payout_cancel, payout_failure, refund, refund_failure, reserve_transaction, reserved_funds, stripe_fee, stripe_fx_fee, tax_fee, topup, topup_reversal, transfer, transfer_cancel, transfer_failure, or transfer_refund.", "meta": {}, "data_type": null, "tags": []}, "reporting_category": {"name": "reporting_category", "description": "Groupings of transactions types based on how they show in Stripe's reporting", "meta": {}, "data_type": null, "tags": []}, "source": {"name": "source", "description": "The Stripe object to which this transaction is related.", "meta": {}, "data_type": null, "tags": []}, "description": {"name": "description", "description": "An arbitrary string attached to the object. Often useful for displaying to users.", "meta": {}, "data_type": null, "tags": []}, "customer_facing_amount": {"name": "customer_facing_amount", "description": "The transaction amount that the customer sees.", "meta": {}, "data_type": null, "tags": []}, "customer_facing_currency": {"name": "customer_facing_currency", "description": "Three-letter ISO currency code that the customer sees.", "meta": {}, "data_type": null, "tags": []}, "effective_at": {"name": "effective_at", "description": "\\? day after available_at", "meta": {}, "data_type": null, "tags": []}, "customer_id": {"name": "customer_id", "description": "The customer associated with the balance transaction (based on charge or refund details)", "meta": {}, "data_type": null, "tags": []}, "receipt_email": {"name": "receipt_email", "description": "The eail the receipt was emailed to for this transaction.", "meta": {}, "data_type": null, "tags": []}, "customer_description": {"name": "customer_description", "description": "The description field associated with the customer", "meta": {}, "data_type": null, "tags": []}, "charge_id": {"name": "charge_id", "description": "The id of the charge associated with the balance transaction", "meta": {}, "data_type": null, "tags": []}, "payment_intent_id": {"name": "payment_intent_id", "description": "The id of the payment intent associated with the balance transaction", "meta": {}, "data_type": null, "tags": []}, "charge_created_at": {"name": "charge_created_at", "description": "Timestamp of the charge object associated with the balance transaction", "meta": {}, "data_type": null, "tags": []}, "payment_method_type": {"name": "payment_method_type", "description": "The id of the payment method type associated with the balance transaction", "meta": {}, "data_type": null, "tags": []}, "card_brand": {"name": "card_brand", "description": "The brand of the card associated with the balance transaction", "meta": {}, "data_type": null, "tags": []}, "card_funding": {"name": "card_funding", "description": "Card funding type. Can be credit, debit, prepaid, or unknown.", "meta": {}, "data_type": null, "tags": []}, "card_country": {"name": "card_country", "description": "The country the card was issued in.", "meta": {}, "data_type": null, "tags": []}, "paytout_id": {"name": "paytout_id", "description": "ID for the payout associated with this balance transaction", "meta": {}, "data_type": null, "tags": []}, "payout_expeted_arrival_date": {"name": "payout_expeted_arrival_date", "description": "Date the payout is expected to arrive in the bank. This factors in delays like weekends or bank holidays.", "meta": {}, "data_type": null, "tags": []}, "payout_status": {"name": "payout_status", "description": "Current status of the payout.  Can be paid, pending, in_transit, canceled or failed.", "meta": {}, "data_type": null, "tags": []}, "payout_type": {"name": "payout_type", "description": "Whether the payout was to a bank_account or card.", "meta": {}, "data_type": null, "tags": []}, "payout_description": {"name": "payout_description", "description": "An arbitrary string attached to the payout. Often useful for displaying to users.", "meta": {}, "data_type": null, "tags": []}, "refund_reason": {"name": "refund_reason", "description": "Reason for the refund, either user-provided (duplicate, fraudulent, or requested_by_customer) or generated by Stripe internally (expired_uncaptured_charge).", "meta": {}, "data_type": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/stripe.yml", "build_path": "target/run/stripe/models/stripe_balance_transactions.sql", "compiled": true, "compiled_sql": "with balance_transaction_joined as (\n\n    select *\n    from __dbt__CTE__stripe_balance_transaction_joined  \n\n)\n\nselect \n  balance_transaction_id,\n  created_at,\n  available_on,\n  currency,\n  amount,\n  fee,\n  net,\n  type,\n  reporting_category,\n  source,\n  description,\n  customer_facing_amount,\n  customer_facing_currency,\n  effective_at,\n  customer_id,\n  receipt_email,\n  customer_description,\n  charge_id,\n  payment_intent_id,\n  charge_created_at,\n  payment_method_type,\n  card_brand,\n  card_funding,\n  card_country,\n  payout_id,\n  payout_expeted_arrival_date,\n  payout_status,\n  payout_type,\n  payout_description,\n  refund_reason\nfrom balance_transaction_joined", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.stripe_source.stg_stripe_balance_transaction", "sql": " __dbt__CTE__stg_stripe_balance_transaction as (\nwith balance_transaction as (\n\n    select *\n    from `dbt-package-testing`.`stripe`.`balance_transaction`\n\n), fields as (\n\n    select \n      id as balance_transaction_id,\n      amount,\n      available_on,\n      created as created_at,\n      currency,\n      description,\n      exchange_rate,\n      fee,\n      net,\n      source,\n      status,\n      type\n    from balance_transaction\n)\n\nselect *\nfrom fields\n)"}, {"id": "model.stripe_source.stg_stripe_charge", "sql": " __dbt__CTE__stg_stripe_charge as (\nwith charge as (\n\n    select *\n    from `dbt-package-testing`.`stripe`.`charge`\n\n), fields as (\n\n    select \n      id as charge_id, \n      amount,\n      amount_refunded,\n      application_fee_amount,\n      balance_transaction_id,\n      captured as is_captured,\n      card_id,\n      created as created_at,\n      customer_id,\n      currency,\n      description,\n      failure_code,\n      failure_message,\n      paid as is_paid,\n      payment_intent_id,\n      receipt_email,\n      receipt_number,\n      refunded as is_refunded,\n      status\n    from charge\n    \n)\n\nselect *\nfrom fields\n)"}, {"id": "model.stripe_source.stg_stripe_payment_intent", "sql": " __dbt__CTE__stg_stripe_payment_intent as (\nwith payment_intent as (\n\n    select *\n    from `dbt-package-testing`.`stripe`.`payment_intent`\n\n), fields as (\n\n    select \n      id as payment_intent_id,\n      amount,\n      amount_capturable,\n      amount_received,\n      application,\n      application_fee_amount,\n      canceled_at,\n      cancellation_reason,\n      capture_method,\n      confirmation_method,\n      created as created_at,\n      currency,\n      customer_id,\n      description,\n      payment_method_id,\n      receipt_email,\n      statement_descriptor,\n      status\n    from payment_intent\n\n)\n\nselect *\nfrom fields\n)"}, {"id": "model.stripe_source.stg_stripe_payment_method", "sql": " __dbt__CTE__stg_stripe_payment_method as (\nwith payment_method as (\n\n    select *\n    from `dbt-package-testing`.`stripe`.`payment_method`\n\n), fields as (\n\n    select \n      id as payment_method_id,\n      created as created_at,\n      customer_id,\n      type\n    from payment_method\n    where not is_deleted\n\n)\n\nselect *\nfrom fields\n)"}, {"id": "model.stripe_source.stg_stripe_card", "sql": " __dbt__CTE__stg_stripe_card as (\nwith card as (\n\n    select *\n    from `dbt-package-testing`.`stripe`.`card`\n\n), fields as (\n\n    select \n      id as card_id,\n      brand,\n      country,\n      created as created_at,\n      customer_id,\n      name,\n      recipient,\n      funding\n    from card\n    where not is_deleted\n\n)\n\nselect *\nfrom fields\n)"}, {"id": "model.stripe_source.stg_stripe_payout", "sql": " __dbt__CTE__stg_stripe_payout as (\nwith payout as (\n\n    select *\n    from `dbt-package-testing`.`stripe`.`payout`\n\n), fields as (\n\n    select \n      id as payout_id,\n      amount,\n      arrival_date,\n      automatic as is_automatic,\n      balance_transaction_id,\n      created as created_at,\n      currency,\n      description,\n      method,\n      source_type,\n      status,\n      type\n    from payout\n\n)\n\nselect *\nfrom fields\n)"}, {"id": "model.stripe_source.stg_stripe_refund", "sql": " __dbt__CTE__stg_stripe_refund as (\nwith refund as (\n\n    select *\n    from `dbt-package-testing`.`stripe`.`refund`\n\n), fields as (\n\n    select \n      id as refund_id,\n      amount,\n      balance_transaction_id,\n      charge_id,\n      created as created_at,\n      currency,\n      description,\n      reason,\n      receipt_number,\n      status\n    from refund\n\n)\n\nselect *\nfrom fields\n)"}, {"id": "model.stripe_source.stg_stripe_customer", "sql": " __dbt__CTE__stg_stripe_customer as (\nwith customer as (\n\n    select *\n    from `dbt-package-testing`.`stripe`.`customer`\n\n), fields as (\n\n    select \n      id as customer_id,\n      account_balance,\n      created as created_at,\n      currency,\n      default_card_id,\n      delinquent as is_deliguent,\n      description,\n      email,\n      shipping_address_city,\n      shipping_address_country,\n      shipping_address_line_1,\n      shipping_address_line_2,\n      shipping_address_postal_code,\n      shipping_address_state,\n      shipping_name,\n      shipping_phone\n    from customer\n    where not is_deleted\n\n)\n\nselect *\nfrom fields\n)"}, {"id": "model.stripe.stripe_balance_transaction_joined", "sql": " __dbt__CTE__stripe_balance_transaction_joined as (\nwith balance_transaction as (\n\n    select *\n    from __dbt__CTE__stg_stripe_balance_transaction\n  \n), charge as (\n\n    select *\n    from __dbt__CTE__stg_stripe_charge\n\n), payment_intent as (\n\n    select *\n    from __dbt__CTE__stg_stripe_payment_intent\n\n), payment_method as (\n\n    select *\n    from __dbt__CTE__stg_stripe_payment_method\n\n), card as (\n\n    select *\n    from __dbt__CTE__stg_stripe_card\n\n), payout as (\n\n    select *\n    from __dbt__CTE__stg_stripe_payout\n\n), refund as (\n\n    select *\n    from __dbt__CTE__stg_stripe_refund\n\n), customer as (\n\n    select *\n    from __dbt__CTE__stg_stripe_customer\n\n\n)\n\nselect \n  balance_transaction.balance_transaction_id,\n  balance_transaction.created_at,\n  balance_transaction.available_on,\n  balance_transaction.currency,\n  balance_transaction.amount,\n  balance_transaction.fee,\n  balance_transaction.net,\n  balance_transaction.type,\n  case\n    when balance_transaction.type in ('charge', 'payment') then 'charge'\n    when balance_transaction.type in ('refund', 'payment_refund') then 'refund'\n    when balance_transaction.type in ('payout_cancel', 'payout_failure')\tthen 'payout_reversal'\n    when balance_transaction.type in ('transfer', 'recipient_transfer') then\t'transfer'\n    when balance_transaction.type in ('transfer_cancel', 'transfer_failure', 'recipient_transfer_cancel', 'recipient_transfer_failure') then 'transfer_reversal'\n    else balance_transaction.type\n  end as reporting_category,\n  balance_transaction.source,\n  balance_transaction.description,\n  case when balance_transaction.type = 'charge' then charge.amount end as customer_facing_amount, --think this might be the charge amount/currency\n  case when balance_transaction.type = 'charge' then charge.currency end as customer_facing_currency,\n  date_add(date(balance_transaction.available_on), interval 1 day) as effective_at,\n  coalesce(charge.customer_id, refund_charge.customer_id) as customer_id,\n  charge.receipt_email,\n  customer.description as customer_description,\n  charge.charge_id,\n  charge.payment_intent_id,\n  charge.created_at as charge_created_at,\n  payment_method.type as payment_method_type,\n  card.brand as card_brand,\n  card.funding as card_funding,\n  card.country as card_country,\n  payout.payout_id,\n  payout.arrival_date as payout_expeted_arrival_date,\n  payout.status as payout_status,\n  payout.type as payout_type,\n  payout.description as payout_description,\n  refund.reason as refund_reason\nfrom balance_transaction\nleft join charge on charge.balance_transaction_id = balance_transaction.balance_transaction_id\nleft join customer on charge.customer_id = customer.customer_id\nleft join payment_intent on charge.payment_intent_id = payment_intent.payment_intent_id\nleft join payment_method on payment_intent.payment_method_id = payment_method.payment_method_id\nleft join card on charge.card_id = card.card_id\nleft join payout on payout.balance_transaction_id = balance_transaction.balance_transaction_id\nleft join refund on refund.balance_transaction_id = balance_transaction.balance_transaction_id\nleft join charge as refund_charge on refund.charge_id = refund_charge.charge_id\norder by created_at desc\n)"}], "injected_sql": "with  __dbt__CTE__stg_stripe_balance_transaction as (\nwith balance_transaction as (\n\n    select *\n    from `dbt-package-testing`.`stripe`.`balance_transaction`\n\n), fields as (\n\n    select \n      id as balance_transaction_id,\n      amount,\n      available_on,\n      created as created_at,\n      currency,\n      description,\n      exchange_rate,\n      fee,\n      net,\n      source,\n      status,\n      type\n    from balance_transaction\n)\n\nselect *\nfrom fields\n),  __dbt__CTE__stg_stripe_charge as (\nwith charge as (\n\n    select *\n    from `dbt-package-testing`.`stripe`.`charge`\n\n), fields as (\n\n    select \n      id as charge_id, \n      amount,\n      amount_refunded,\n      application_fee_amount,\n      balance_transaction_id,\n      captured as is_captured,\n      card_id,\n      created as created_at,\n      customer_id,\n      currency,\n      description,\n      failure_code,\n      failure_message,\n      paid as is_paid,\n      payment_intent_id,\n      receipt_email,\n      receipt_number,\n      refunded as is_refunded,\n      status\n    from charge\n    \n)\n\nselect *\nfrom fields\n),  __dbt__CTE__stg_stripe_payment_intent as (\nwith payment_intent as (\n\n    select *\n    from `dbt-package-testing`.`stripe`.`payment_intent`\n\n), fields as (\n\n    select \n      id as payment_intent_id,\n      amount,\n      amount_capturable,\n      amount_received,\n      application,\n      application_fee_amount,\n      canceled_at,\n      cancellation_reason,\n      capture_method,\n      confirmation_method,\n      created as created_at,\n      currency,\n      customer_id,\n      description,\n      payment_method_id,\n      receipt_email,\n      statement_descriptor,\n      status\n    from payment_intent\n\n)\n\nselect *\nfrom fields\n),  __dbt__CTE__stg_stripe_payment_method as (\nwith payment_method as (\n\n    select *\n    from `dbt-package-testing`.`stripe`.`payment_method`\n\n), fields as (\n\n    select \n      id as payment_method_id,\n      created as created_at,\n      customer_id,\n      type\n    from payment_method\n    where not is_deleted\n\n)\n\nselect *\nfrom fields\n),  __dbt__CTE__stg_stripe_card as (\nwith card as (\n\n    select *\n    from `dbt-package-testing`.`stripe`.`card`\n\n), fields as (\n\n    select \n      id as card_id,\n      brand,\n      country,\n      created as created_at,\n      customer_id,\n      name,\n      recipient,\n      funding\n    from card\n    where not is_deleted\n\n)\n\nselect *\nfrom fields\n),  __dbt__CTE__stg_stripe_payout as (\nwith payout as (\n\n    select *\n    from `dbt-package-testing`.`stripe`.`payout`\n\n), fields as (\n\n    select \n      id as payout_id,\n      amount,\n      arrival_date,\n      automatic as is_automatic,\n      balance_transaction_id,\n      created as created_at,\n      currency,\n      description,\n      method,\n      source_type,\n      status,\n      type\n    from payout\n\n)\n\nselect *\nfrom fields\n),  __dbt__CTE__stg_stripe_refund as (\nwith refund as (\n\n    select *\n    from `dbt-package-testing`.`stripe`.`refund`\n\n), fields as (\n\n    select \n      id as refund_id,\n      amount,\n      balance_transaction_id,\n      charge_id,\n      created as created_at,\n      currency,\n      description,\n      reason,\n      receipt_number,\n      status\n    from refund\n\n)\n\nselect *\nfrom fields\n),  __dbt__CTE__stg_stripe_customer as (\nwith customer as (\n\n    select *\n    from `dbt-package-testing`.`stripe`.`customer`\n\n), fields as (\n\n    select \n      id as customer_id,\n      account_balance,\n      created as created_at,\n      currency,\n      default_card_id,\n      delinquent as is_deliguent,\n      description,\n      email,\n      shipping_address_city,\n      shipping_address_country,\n      shipping_address_line_1,\n      shipping_address_line_2,\n      shipping_address_postal_code,\n      shipping_address_state,\n      shipping_name,\n      shipping_phone\n    from customer\n    where not is_deleted\n\n)\n\nselect *\nfrom fields\n),  __dbt__CTE__stripe_balance_transaction_joined as (\nwith balance_transaction as (\n\n    select *\n    from __dbt__CTE__stg_stripe_balance_transaction\n  \n), charge as (\n\n    select *\n    from __dbt__CTE__stg_stripe_charge\n\n), payment_intent as (\n\n    select *\n    from __dbt__CTE__stg_stripe_payment_intent\n\n), payment_method as (\n\n    select *\n    from __dbt__CTE__stg_stripe_payment_method\n\n), card as (\n\n    select *\n    from __dbt__CTE__stg_stripe_card\n\n), payout as (\n\n    select *\n    from __dbt__CTE__stg_stripe_payout\n\n), refund as (\n\n    select *\n    from __dbt__CTE__stg_stripe_refund\n\n), customer as (\n\n    select *\n    from __dbt__CTE__stg_stripe_customer\n\n\n)\n\nselect \n  balance_transaction.balance_transaction_id,\n  balance_transaction.created_at,\n  balance_transaction.available_on,\n  balance_transaction.currency,\n  balance_transaction.amount,\n  balance_transaction.fee,\n  balance_transaction.net,\n  balance_transaction.type,\n  case\n    when balance_transaction.type in ('charge', 'payment') then 'charge'\n    when balance_transaction.type in ('refund', 'payment_refund') then 'refund'\n    when balance_transaction.type in ('payout_cancel', 'payout_failure')\tthen 'payout_reversal'\n    when balance_transaction.type in ('transfer', 'recipient_transfer') then\t'transfer'\n    when balance_transaction.type in ('transfer_cancel', 'transfer_failure', 'recipient_transfer_cancel', 'recipient_transfer_failure') then 'transfer_reversal'\n    else balance_transaction.type\n  end as reporting_category,\n  balance_transaction.source,\n  balance_transaction.description,\n  case when balance_transaction.type = 'charge' then charge.amount end as customer_facing_amount, --think this might be the charge amount/currency\n  case when balance_transaction.type = 'charge' then charge.currency end as customer_facing_currency,\n  date_add(date(balance_transaction.available_on), interval 1 day) as effective_at,\n  coalesce(charge.customer_id, refund_charge.customer_id) as customer_id,\n  charge.receipt_email,\n  customer.description as customer_description,\n  charge.charge_id,\n  charge.payment_intent_id,\n  charge.created_at as charge_created_at,\n  payment_method.type as payment_method_type,\n  card.brand as card_brand,\n  card.funding as card_funding,\n  card.country as card_country,\n  payout.payout_id,\n  payout.arrival_date as payout_expeted_arrival_date,\n  payout.status as payout_status,\n  payout.type as payout_type,\n  payout.description as payout_description,\n  refund.reason as refund_reason\nfrom balance_transaction\nleft join charge on charge.balance_transaction_id = balance_transaction.balance_transaction_id\nleft join customer on charge.customer_id = customer.customer_id\nleft join payment_intent on charge.payment_intent_id = payment_intent.payment_intent_id\nleft join payment_method on payment_intent.payment_method_id = payment_method.payment_method_id\nleft join card on charge.card_id = card.card_id\nleft join payout on payout.balance_transaction_id = balance_transaction.balance_transaction_id\nleft join refund on refund.balance_transaction_id = balance_transaction.balance_transaction_id\nleft join charge as refund_charge on refund.charge_id = refund_charge.charge_id\norder by created_at desc\n),balance_transaction_joined as (\n\n    select *\n    from __dbt__CTE__stripe_balance_transaction_joined  \n\n)\n\nselect \n  balance_transaction_id,\n  created_at,\n  available_on,\n  currency,\n  amount,\n  fee,\n  net,\n  type,\n  reporting_category,\n  source,\n  description,\n  customer_facing_amount,\n  customer_facing_currency,\n  effective_at,\n  customer_id,\n  receipt_email,\n  customer_description,\n  charge_id,\n  payment_intent_id,\n  charge_created_at,\n  payment_method_type,\n  card_brand,\n  card_funding,\n  card_country,\n  payout_id,\n  payout_expeted_arrival_date,\n  payout_status,\n  payout_type,\n  payout_description,\n  refund_reason\nfrom balance_transaction_joined"}, "error": null, "status": "CREATE TABLE (2058)", "execution_time": 3.196913242340088, "thread_id": "Thread-4", "timing": [{"name": "compile", "started_at": "2020-06-01T17:18:00.214810Z", "completed_at": "2020-06-01T17:18:00.239139Z"}, {"name": "execute", "started_at": "2020-06-01T17:18:00.239373Z", "completed_at": "2020-06-01T17:18:03.410661Z"}], "fail": null, "warn": null, "skip": false}], "generated_at": "2020-06-01T17:18:03.417125Z", "elapsed_time": 7.259418249130249}