{"results": [{"node": {"raw_sql": "with charge as (\n\n    select *\n    from {{ var('charge') }}\n\n), fields as (\n\n    select \n      id as charge_id, \n      amount,\n      amount_refunded,\n      application_fee_amount,\n      balance_transaction_id,\n      captured as is_captured,\n      card_id,\n      created as created_at,\n      customer_id,\n      currency,\n      description,\n      failure_code,\n      failure_message,\n      paid as is_paid,\n      payment_intent_id,\n      receipt_email,\n      receipt_number,\n      refunded as is_refunded,\n      status,\n      invoice_id\n    from charge\n    \n)\n\nselect *\nfrom fields", "database": "dbt-package-testing", "schema": "dbt_kristin_2", "fqn": ["stripe_source", "stg_stripe_charge"], "unique_id": "model.stripe_source.stg_stripe_charge", "package_name": "stripe_source", "root_path": "/Users/kristin/Documents/Github/dbt_stripe/dbt_modules/stripe_source", "path": "stg_stripe_charge.sql", "original_file_path": "models/stg_stripe_charge.sql", "name": "stg_stripe_charge", "resource_type": "model", "alias": "stg_stripe_charge", "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "tags": []}, "tags": [], "refs": [], "sources": [["stripe", "charge"]], "depends_on": {"macros": [], "nodes": ["source.stripe_source.stripe.charge"]}, "description": "To charge a credit or a debit card, you create a Charge object. You can retrieve and refund individual charges as well as list all charges. Charges are identified by a unique, random ID.", "columns": {"charge_id": {"name": "charge_id", "description": "Unique identifier for the object.", "meta": {}, "data_type": null, "tags": []}, "amount": {"name": "amount", "description": "Amount intended to be collected by this payment. A positive integer representing how much to charge in the smallest currency unit (e.g., 100 cents to charge $1.00 or 100 to charge \u00a5100, a zero-decimal currency)", "meta": {}, "data_type": null, "tags": []}, "amount_refunded": {"name": "amount_refunded", "description": "The amount of the charge, if any, that has been refunded.", "meta": {}, "data_type": null, "tags": []}, "application_fee_amount": {"name": "application_fee_amount", "description": "The amount of the application fee (if any) for the charge.", "meta": {}, "data_type": null, "tags": []}, "balance_transaction_id": {"name": "balance_transaction_id", "description": "ID of the balance transaction that describes the impact of this charge on your account balance (not including refunds or disputes).", "meta": {}, "data_type": null, "tags": []}, "is_captured": {"name": "is_captured", "description": "If the charge was created without capturing, this Boolean represents whether it is still uncaptured or has since been captured.", "meta": {}, "data_type": null, "tags": []}, "card_id": {"name": "card_id", "description": "ID of the card that was charged.", "meta": {}, "data_type": null, "tags": []}, "created": {"name": "created", "description": "Timestamp of the when the charge took place.", "meta": {}, "data_type": null, "tags": []}, "customer_id": {"name": "customer_id", "description": "ID of the customer this charge is for if one exists.", "meta": {}, "data_type": null, "tags": []}, "description": {"name": "description", "description": "An arbitrary string attached to the object. Often useful for displaying to users.", "meta": {}, "data_type": null, "tags": []}, "failure_code": {"name": "failure_code", "description": "Error code explaining reason for charge failure if available.", "meta": {}, "data_type": null, "tags": []}, "failure_message": {"name": "failure_message", "description": "Message to user further explaining reason for charge failure if available.", "meta": {}, "data_type": null, "tags": []}, "is_paid": {"name": "is_paid", "description": "true if the charge succeeded, or was successfully authorized for later capture.", "meta": {}, "data_type": null, "tags": []}, "payment_intent_id": {"name": "payment_intent_id", "description": "ID of the PaymentIntent associated with this charge, if one exists.", "meta": {}, "data_type": null, "tags": []}, "receipt_email": {"name": "receipt_email", "description": "This is the email address that the receipt for this charge was sent to.", "meta": {}, "data_type": null, "tags": []}, "receipt_number": {"name": "receipt_number", "description": "This is the transaction number that appears on email receipts sent for this charge.", "meta": {}, "data_type": null, "tags": []}, "is_refunded": {"name": "is_refunded", "description": "Whether the charge has been fully refunded. If the charge is only partially refunded, this attribute will still be false.", "meta": {}, "data_type": null, "tags": []}, "status": {"name": "status", "description": "The status of the payment is either succeeded, pending, or failed.", "meta": {}, "data_type": null, "tags": []}, "invoice_id": {"name": "invoice_id", "description": "The id of the invoice associated with this charge.", "meta": {}, "data_type": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/stg_stripe.yml", "build_path": "target/compiled/stripe_source/models/stg_stripe_charge.sql", "compiled": true, "compiled_sql": "with charge as (\n\n    select *\n    from `dbt-package-testing`.`stripe`.`charge`\n\n), fields as (\n\n    select \n      id as charge_id, \n      amount,\n      amount_refunded,\n      application_fee_amount,\n      balance_transaction_id,\n      captured as is_captured,\n      card_id,\n      created as created_at,\n      customer_id,\n      currency,\n      description,\n      failure_code,\n      failure_message,\n      paid as is_paid,\n      payment_intent_id,\n      receipt_email,\n      receipt_number,\n      refunded as is_refunded,\n      status,\n      invoice_id\n    from charge\n    \n)\n\nselect *\nfrom fields", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "with charge as (\n\n    select *\n    from `dbt-package-testing`.`stripe`.`charge`\n\n), fields as (\n\n    select \n      id as charge_id, \n      amount,\n      amount_refunded,\n      application_fee_amount,\n      balance_transaction_id,\n      captured as is_captured,\n      card_id,\n      created as created_at,\n      customer_id,\n      currency,\n      description,\n      failure_code,\n      failure_message,\n      paid as is_paid,\n      payment_intent_id,\n      receipt_email,\n      receipt_number,\n      refunded as is_refunded,\n      status,\n      invoice_id\n    from charge\n    \n)\n\nselect *\nfrom fields"}, "error": null, "status": null, "execution_time": 0.07652926445007324, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2020-07-23T18:08:31.818848Z", "completed_at": "2020-07-23T18:08:31.891170Z"}, {"name": "execute", "started_at": "2020-07-23T18:08:31.892076Z", "completed_at": "2020-07-23T18:08:31.892092Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "with card as (\n\n    select *\n    from {{ var('card') }}\n\n), fields as (\n\n    select \n      id as card_id,\n      brand,\n      country,\n      created as created_at,\n      customer_id,\n      name,\n      recipient,\n      funding\n    from card\n    where not coalesce(is_deleted, false)\n\n)\n\nselect *\nfrom fields", "database": "dbt-package-testing", "schema": "dbt_kristin_2", "fqn": ["stripe_source", "stg_stripe_card"], "unique_id": "model.stripe_source.stg_stripe_card", "package_name": "stripe_source", "root_path": "/Users/kristin/Documents/Github/dbt_stripe/dbt_modules/stripe_source", "path": "stg_stripe_card.sql", "original_file_path": "models/stg_stripe_card.sql", "name": "stg_stripe_card", "resource_type": "model", "alias": "stg_stripe_card", "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "tags": []}, "tags": [], "refs": [], "sources": [["stripe", "card"]], "depends_on": {"macros": [], "nodes": ["source.stripe_source.stripe.card"]}, "description": "Details of a credit card that has been saved to the system.", "columns": {"card_id": {"name": "card_id", "description": "Unique identifier for the object.", "meta": {}, "data_type": null, "tags": []}, "brand": {"name": "brand", "description": "Card brand. Can be American Express, Diners Club, Discover, JCB, MasterCard, UnionPay, Visa, or Unknown.", "meta": {}, "data_type": null, "tags": []}, "country": {"name": "country", "description": "Two-letter ISO code representing the country of the card. You could use this attribute to get a sense of the international breakdown of cards you\u2019ve collected.", "meta": {}, "data_type": null, "tags": []}, "created_at": {"name": "created_at", "description": "Timestamp of when the entry for the card was created", "meta": {}, "data_type": null, "tags": []}, "customer_id": {"name": "customer_id", "description": "The customer that this card belongs to.  NULL if belongs to an account or recipient.", "meta": {}, "data_type": null, "tags": []}, "name": {"name": "name", "description": "Cardholder name", "meta": {}, "data_type": null, "tags": []}, "recipient": {"name": "recipient", "description": "The recipient that this card belongs to. NULL if the card belongs to a customer or account instead.", "meta": {}, "data_type": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/stg_stripe.yml", "build_path": "target/compiled/stripe_source/models/stg_stripe_card.sql", "compiled": true, "compiled_sql": "with card as (\n\n    select *\n    from `dbt-package-testing`.`stripe`.`card`\n\n), fields as (\n\n    select \n      id as card_id,\n      brand,\n      country,\n      created as created_at,\n      customer_id,\n      name,\n      recipient,\n      funding\n    from card\n    where not coalesce(is_deleted, false)\n\n)\n\nselect *\nfrom fields", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "with card as (\n\n    select *\n    from `dbt-package-testing`.`stripe`.`card`\n\n), fields as (\n\n    select \n      id as card_id,\n      brand,\n      country,\n      created as created_at,\n      customer_id,\n      name,\n      recipient,\n      funding\n    from card\n    where not coalesce(is_deleted, false)\n\n)\n\nselect *\nfrom fields"}, "error": null, "status": null, "execution_time": 0.0755009651184082, "thread_id": "Thread-4", "timing": [{"name": "compile", "started_at": "2020-07-23T18:08:31.848067Z", "completed_at": "2020-07-23T18:08:31.891487Z"}, {"name": "execute", "started_at": "2020-07-23T18:08:31.892549Z", "completed_at": "2020-07-23T18:08:31.892554Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "with balance_transaction as (\n\n    select *\n    from {{ var('balance_transaction') }}\n\n), fields as (\n\n    select \n      id as balance_transaction_id,\n      amount,\n      available_on,\n      created as created_at,\n      currency,\n      description,\n      exchange_rate,\n      fee,\n      net,\n      source,\n      status,\n      type\n    from balance_transaction\n)\n\nselect *\nfrom fields", "database": "dbt-package-testing", "schema": "dbt_kristin_2", "fqn": ["stripe_source", "stg_stripe_balance_transaction"], "unique_id": "model.stripe_source.stg_stripe_balance_transaction", "package_name": "stripe_source", "root_path": "/Users/kristin/Documents/Github/dbt_stripe/dbt_modules/stripe_source", "path": "stg_stripe_balance_transaction.sql", "original_file_path": "models/stg_stripe_balance_transaction.sql", "name": "stg_stripe_balance_transaction", "resource_type": "model", "alias": "stg_stripe_balance_transaction", "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "tags": []}, "tags": [], "refs": [], "sources": [["stripe", "balance_transaction"]], "depends_on": {"macros": [], "nodes": ["source.stripe_source.stripe.balance_transaction"]}, "description": "Balance transactions represent funds moving through your Stripe account. They're created for every type of transaction that comes into or flows out of your Stripe account balance.", "columns": {"balance_transaction_id": {"name": "balance_transaction_id", "description": "Unique identifier for the object.", "meta": {}, "data_type": null, "tags": []}, "amount": {"name": "amount", "description": "Gross amount of the transaction, in cents.", "meta": {}, "data_type": null, "tags": []}, "available_on": {"name": "available_on", "description": "The date the transaction\u2019s net funds will become available in the Stripe balance.", "meta": {}, "data_type": null, "tags": []}, "created_at": {"name": "created_at", "description": "Timestamp of when the transaction was created.", "meta": {}, "data_type": null, "tags": []}, "currency": {"name": "currency", "description": "Three-letter ISO currency code, in lowercase.", "meta": {}, "data_type": null, "tags": []}, "description": {"name": "description", "description": "An arbitrary string attached to the object. Often useful for displaying to users.", "meta": {}, "data_type": null, "tags": []}, "exchange_rate": {"name": "exchange_rate", "description": "The exchange rate used, if applicable, for this transaction. Specifically, if money was converted from currency A to currency B, then the amount in currency A, times exchange_rate, would be the amount in currency B.", "meta": {}, "data_type": null, "tags": []}, "fee": {"name": "fee", "description": "fees (in cents) paid for this transaction.", "meta": {}, "data_type": null, "tags": []}, "net": {"name": "net", "description": "Net amount of the transaction, in cents.", "meta": {}, "data_type": null, "tags": []}, "source": {"name": "source", "description": "The Stripe object to which this transaction is related.", "meta": {}, "data_type": null, "tags": []}, "status": {"name": "status", "description": "If the transaction\u2019s net funds are available in the Stripe balance yet. Either 'available' or 'pending'.", "meta": {}, "data_type": null, "tags": []}, "type": {"name": "type", "description": "the type of tranaction.  Possible values are adjustment, advance, advance_funding, application_fee, application_fee_refund, charge, connect_collection_transfer, issuing_authorization_hold, issuing_authorization_release, issuing_dispute, issuing_transaction, payment, payment_failure_refund, payment_refund, payout, payout_cancel, payout_failure, refund, refund_failure, reserve_transaction, reserved_funds, stripe_fee, stripe_fx_fee, tax_fee, topup, topup_reversal, transfer, transfer_cancel, transfer_failure, or transfer_refund.", "meta": {}, "data_type": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/stg_stripe.yml", "build_path": "target/compiled/stripe_source/models/stg_stripe_balance_transaction.sql", "compiled": true, "compiled_sql": "with balance_transaction as (\n\n    select *\n    from `dbt-package-testing`.`stripe`.`balance_transaction`\n\n), fields as (\n\n    select \n      id as balance_transaction_id,\n      amount,\n      available_on,\n      created as created_at,\n      currency,\n      description,\n      exchange_rate,\n      fee,\n      net,\n      source,\n      status,\n      type\n    from balance_transaction\n)\n\nselect *\nfrom fields", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "with balance_transaction as (\n\n    select *\n    from `dbt-package-testing`.`stripe`.`balance_transaction`\n\n), fields as (\n\n    select \n      id as balance_transaction_id,\n      amount,\n      available_on,\n      created as created_at,\n      currency,\n      description,\n      exchange_rate,\n      fee,\n      net,\n      source,\n      status,\n      type\n    from balance_transaction\n)\n\nselect *\nfrom fields"}, "error": null, "status": null, "execution_time": 0.0762488842010498, "thread_id": "Thread-3", "timing": [{"name": "compile", "started_at": "2020-07-23T18:08:31.831040Z", "completed_at": "2020-07-23T18:08:31.891838Z"}, {"name": "execute", "started_at": "2020-07-23T18:08:31.892881Z", "completed_at": "2020-07-23T18:08:31.892885Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "with customer as (\n\n    select *\n    from {{ var('customer') }}\n\n), fields as (\n\n    select \n      id as customer_id,\n      account_balance,\n      created as created_at,\n      currency,\n      default_card_id,\n      delinquent as is_delinquent,\n      description,\n      email,\n      shipping_address_city,\n      shipping_address_country,\n      shipping_address_line_1,\n      shipping_address_line_2,\n      shipping_address_postal_code,\n      shipping_address_state,\n      shipping_name,\n      shipping_phone\n    from customer\n    where not is_deleted\n\n)\n\nselect *\nfrom fields", "database": "dbt-package-testing", "schema": "dbt_kristin_2", "fqn": ["stripe_source", "stg_stripe_customer"], "unique_id": "model.stripe_source.stg_stripe_customer", "package_name": "stripe_source", "root_path": "/Users/kristin/Documents/Github/dbt_stripe/dbt_modules/stripe_source", "path": "stg_stripe_customer.sql", "original_file_path": "models/stg_stripe_customer.sql", "name": "stg_stripe_customer", "resource_type": "model", "alias": "stg_stripe_customer", "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "tags": []}, "tags": [], "refs": [], "sources": [["stripe", "customer"]], "depends_on": {"macros": [], "nodes": ["source.stripe_source.stripe.customer"]}, "description": "Customer objects allow you to perform recurring charges, and to track multiple charges, that are associated with the same customer.", "columns": {"id": {"name": "id", "description": "Unique identifier for the object.", "meta": {}, "data_type": null, "tags": []}, "account_balance": {"name": "account_balance", "description": "Current balance, if any, being stored on the customer. If negative, the customer has credit to apply to their next invoice. If positive, the customer has an amount owed that will be added to their next invoice.", "meta": {}, "data_type": null, "tags": []}, "created_at": {"name": "created_at", "description": "Timestamp of when the customer emtry was created.", "meta": {}, "data_type": null, "tags": []}, "currency": {"name": "currency", "description": "Three-letter ISO code for the currency the customer can be charged in for recurring billing purposes.", "meta": {}, "data_type": null, "tags": []}, "default_card_id": {"name": "default_card_id", "description": "ID for the default card used by the cusomter.", "meta": {}, "data_type": null, "tags": []}, "is_delinquent": {"name": "is_delinquent", "description": "When the customer\u2019s latest invoice is billed by charging automatically, delinquent is true if the invoice\u2019s latest charge is failed. When the customer\u2019s latest invoice is billed by sending an invoice, delinquent is true if the invoice is not paid by its due date.", "meta": {}, "data_type": null, "tags": []}, "description": {"name": "description", "description": "An arbitrary string attached to the object. Often useful for displaying to users.", "meta": {}, "data_type": null, "tags": []}, "email": {"name": "email", "description": "The customer\u2019s email address.", "meta": {}, "data_type": null, "tags": []}, "shipping_address_city": {"name": "shipping_address_city", "description": "Attribute of the customer's shipping address.", "meta": {}, "data_type": null, "tags": []}, "shipping_address_country": {"name": "shipping_address_country", "description": "Attribute of the customer's shipping address.", "meta": {}, "data_type": null, "tags": []}, "shipping_address_line_1": {"name": "shipping_address_line_1", "description": "Attribute of the customer's shipping address.", "meta": {}, "data_type": null, "tags": []}, "shipping_address_line_2": {"name": "shipping_address_line_2", "description": "Attribute of the customer's shipping address.", "meta": {}, "data_type": null, "tags": []}, "shipping_address_postal_code": {"name": "shipping_address_postal_code", "description": "Attribute of the customer's shipping address.", "meta": {}, "data_type": null, "tags": []}, "shipping_address_state": {"name": "shipping_address_state", "description": "Attribute of the customer's shipping address.", "meta": {}, "data_type": null, "tags": []}, "shipping_name": {"name": "shipping_name", "description": "Attribute of the customer's shipping address.", "meta": {}, "data_type": null, "tags": []}, "shipping_phone": {"name": "shipping_phone", "description": "Attribute of the customer's shipping address.", "meta": {}, "data_type": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/stg_stripe.yml", "build_path": "target/compiled/stripe_source/models/stg_stripe_customer.sql", "compiled": true, "compiled_sql": "with customer as (\n\n    select *\n    from `dbt-package-testing`.`stripe`.`customer`\n\n), fields as (\n\n    select \n      id as customer_id,\n      account_balance,\n      created as created_at,\n      currency,\n      default_card_id,\n      delinquent as is_delinquent,\n      description,\n      email,\n      shipping_address_city,\n      shipping_address_country,\n      shipping_address_line_1,\n      shipping_address_line_2,\n      shipping_address_postal_code,\n      shipping_address_state,\n      shipping_name,\n      shipping_phone\n    from customer\n    where not is_deleted\n\n)\n\nselect *\nfrom fields", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "with customer as (\n\n    select *\n    from `dbt-package-testing`.`stripe`.`customer`\n\n), fields as (\n\n    select \n      id as customer_id,\n      account_balance,\n      created as created_at,\n      currency,\n      default_card_id,\n      delinquent as is_delinquent,\n      description,\n      email,\n      shipping_address_city,\n      shipping_address_country,\n      shipping_address_line_1,\n      shipping_address_line_2,\n      shipping_address_postal_code,\n      shipping_address_state,\n      shipping_name,\n      shipping_phone\n    from customer\n    where not is_deleted\n\n)\n\nselect *\nfrom fields"}, "error": null, "status": null, "execution_time": 0.07714390754699707, "thread_id": "Thread-2", "timing": [{"name": "compile", "started_at": "2020-07-23T18:08:31.819248Z", "completed_at": "2020-07-23T18:08:31.892339Z"}, {"name": "execute", "started_at": "2020-07-23T18:08:31.893505Z", "completed_at": "2020-07-23T18:08:31.893511Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "with payment_intent as (\n\n    select *\n    from {{ var('payment_intent') }}\n\n), fields as (\n\n    select \n      id as payment_intent_id,\n      amount,\n      amount_capturable,\n      amount_received,\n      application,\n      application_fee_amount,\n      canceled_at,\n      cancellation_reason,\n      capture_method,\n      confirmation_method,\n      created as created_at,\n      currency,\n      customer_id,\n      description,\n      payment_method_id,\n      receipt_email,\n      statement_descriptor,\n      status\n    from payment_intent\n\n)\n\nselect *\nfrom fields", "database": "dbt-package-testing", "schema": "dbt_kristin_2", "fqn": ["stripe_source", "stg_stripe_payment_intent"], "unique_id": "model.stripe_source.stg_stripe_payment_intent", "package_name": "stripe_source", "root_path": "/Users/kristin/Documents/Github/dbt_stripe/dbt_modules/stripe_source", "path": "stg_stripe_payment_intent.sql", "original_file_path": "models/stg_stripe_payment_intent.sql", "name": "stg_stripe_payment_intent", "resource_type": "model", "alias": "stg_stripe_payment_intent", "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "tags": []}, "tags": [], "refs": [], "sources": [["stripe", "payment_intent"]], "depends_on": {"macros": [], "nodes": ["source.stripe_source.stripe.payment_intent"]}, "description": "A Payment Intent guides you through the process of collecting a payment from your customer.", "columns": {"payment_intent_id": {"name": "payment_intent_id", "description": "Unique identifier for the object.", "meta": {}, "data_type": null, "tags": []}, "amount": {"name": "amount", "description": "Amount intended to be collected by this PaymentIntent. A positive integer representing how much to charge in the smallest currency unit (e.g., 100 cents to charge $1.00 or 100 to charge \u00a5100, a zero-decimal currency)", "meta": {}, "data_type": null, "tags": []}, "amount_capturable": {"name": "amount_capturable", "description": "Amount that can be captured from this PaymentIntent.", "meta": {}, "data_type": null, "tags": []}, "amount_received": {"name": "amount_received", "description": "Amount that was collected by this PaymentIntent.", "meta": {}, "data_type": null, "tags": []}, "application": {"name": "application", "description": "ID of the Connect application that created the PaymentIntent.", "meta": {}, "data_type": null, "tags": []}, "application_fee_amount": {"name": "application_fee_amount", "description": "The amount of the application fee (if any) for the resulting payment.", "meta": {}, "data_type": null, "tags": []}, "canceled_at": {"name": "canceled_at", "description": "Populated when status is canceled, this is the time at which the PaymentIntent was canceled.", "meta": {}, "data_type": null, "tags": []}, "cancellation_reason": {"name": "cancellation_reason", "description": "Reason for cancellation of this PaymentIntent, either user-provided (duplicate, fraudulent, requested_by_customer, or abandoned) or generated by Stripe internally (failed_invoice, void_invoice, or automatic).", "meta": {}, "data_type": null, "tags": []}, "capture_method": {"name": "capture_method", "description": "Controls when the funds will be captured from the customer\u2019s account.", "meta": {}, "data_type": null, "tags": []}, "confirmation_method": {"name": "confirmation_method", "description": "Whether confirmed automatically or manualy", "meta": {}, "data_type": null, "tags": []}, "created": {"name": "created", "description": "Time at which the object was created.", "meta": {}, "data_type": null, "tags": []}, "currency": {"name": "currency", "description": "Three-letter ISO currency code, in lowercase.", "meta": {}, "data_type": null, "tags": []}, "customer_id": {"name": "customer_id", "description": "ID of the Customer this PaymentIntent belongs to, if one exists.", "meta": {}, "data_type": null, "tags": []}, "description": {"name": "description", "description": "An arbitrary string attached to the object. Often useful for displaying to users.", "meta": {}, "data_type": null, "tags": []}, "payment_method_id": {"name": "payment_method_id", "description": "ID of the payment method used in this PaymentIntent.", "meta": {}, "data_type": null, "tags": []}, "receipt_email": {"name": "receipt_email", "description": "Email address that the receipt for the resulting payment will be sent to.", "meta": {}, "data_type": null, "tags": []}, "statement_descriptor": {"name": "statement_descriptor", "description": "For non-card charges, you can use this value as the complete description that appears on your customers\u2019 statements.", "meta": {}, "data_type": null, "tags": []}, "status": {"name": "status", "description": "Status of this PaymentIntent, one of requires_payment_method, requires_confirmation, requires_action, processing, requires_capture, canceled, or succeeded.", "meta": {}, "data_type": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/stg_stripe.yml", "build_path": "target/compiled/stripe_source/models/stg_stripe_payment_intent.sql", "compiled": true, "compiled_sql": "with payment_intent as (\n\n    select *\n    from `dbt-package-testing`.`stripe`.`payment_intent`\n\n), fields as (\n\n    select \n      id as payment_intent_id,\n      amount,\n      amount_capturable,\n      amount_received,\n      application,\n      application_fee_amount,\n      canceled_at,\n      cancellation_reason,\n      capture_method,\n      confirmation_method,\n      created as created_at,\n      currency,\n      customer_id,\n      description,\n      payment_method_id,\n      receipt_email,\n      statement_descriptor,\n      status\n    from payment_intent\n\n)\n\nselect *\nfrom fields", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "with payment_intent as (\n\n    select *\n    from `dbt-package-testing`.`stripe`.`payment_intent`\n\n), fields as (\n\n    select \n      id as payment_intent_id,\n      amount,\n      amount_capturable,\n      amount_received,\n      application,\n      application_fee_amount,\n      canceled_at,\n      cancellation_reason,\n      capture_method,\n      confirmation_method,\n      created as created_at,\n      currency,\n      customer_id,\n      description,\n      payment_method_id,\n      receipt_email,\n      statement_descriptor,\n      status\n    from payment_intent\n\n)\n\nselect *\nfrom fields"}, "error": null, "status": null, "execution_time": 0.049674034118652344, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2020-07-23T18:08:31.897179Z", "completed_at": "2020-07-23T18:08:31.944386Z"}, {"name": "execute", "started_at": "2020-07-23T18:08:31.944840Z", "completed_at": "2020-07-23T18:08:31.944846Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{ config(enabled=var('using_invoices', True)) }}\n\nwith invoice as (\n\n    select *\n    from {{ var('invoice') }}\n\n), fields as (\n\n    select\n      id as invoice_id,\n      amount_due,\n      amount_paid,\n      amount_remaining,\n      attempt_count,\n      auto_advance,\n      billing_reason,\n      charge_id,\n      created as created_at,\n      currency,\n      customer_id,\n      description,\n      due_date,\n      number,\n      paid as is_paid,\n      receipt_number,\n      status,\n      subtotal,\n      tax,\n      tax_percent,\n      total\n    from invoice\n    where not coalesce(is_deleted, false)\n\n)\n\nselect * from fields", "database": "dbt-package-testing", "schema": "dbt_kristin_2", "fqn": ["stripe_source", "stg_stripe_invoice"], "unique_id": "model.stripe_source.stg_stripe_invoice", "package_name": "stripe_source", "root_path": "/Users/kristin/Documents/Github/dbt_stripe/dbt_modules/stripe_source", "path": "stg_stripe_invoice.sql", "original_file_path": "models/stg_stripe_invoice.sql", "name": "stg_stripe_invoice", "resource_type": "model", "alias": "stg_stripe_invoice", "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "tags": []}, "tags": [], "refs": [], "sources": [["stripe", "invoice"]], "depends_on": {"macros": [], "nodes": ["source.stripe_source.stripe.invoice"]}, "description": "Invoices are statements of amounts owed by a customer, and are either generated one-off, or generated periodically from a subscription.", "columns": {"invoice_id": {"name": "invoice_id", "description": "Unique identifier for the object.", "meta": {}, "data_type": null, "tags": []}, "amount_due": {"name": "amount_due", "description": "Final amount due at this time for this invoice. If the invoice\u2019s total is smaller than the minimum charge amount, for example, or if there is account credit that can be applied to the invoice, the amount_due may be 0. If there is a positive starting_balance for the invoice (the customer owes money), the amount_due will also take that into account. The charge that gets generated for the invoice will be for the amount specified in amount_due.", "meta": {}, "data_type": null, "tags": []}, "amount_paid": {"name": "amount_paid", "description": "The amount, in cents, that was paid.", "meta": {}, "data_type": null, "tags": []}, "amount_remaining": {"name": "amount_remaining", "description": "The amount remaining, in cents, that is due.", "meta": {}, "data_type": null, "tags": []}, "attempt_count": {"name": "attempt_count", "description": "Number of payment attempts made for this invoice, from the perspective of the payment retry schedule.", "meta": {}, "data_type": null, "tags": []}, "auto_advance": {"name": "auto_advance", "description": "Controls whether Stripe will perform automatic collection of the invoice. When false, the invoice\u2019s state will not automatically advance without an explicit action.", "meta": {}, "data_type": null, "tags": []}, "billing_reason": {"name": "billing_reason", "description": "Indicates the reason why the invoice was created.", "meta": {}, "data_type": null, "tags": []}, "charge_id": {"name": "charge_id", "description": "ID of the latest charge generated for this invoice, if any.", "meta": {}, "data_type": null, "tags": []}, "created_at": {"name": "created_at", "description": "Time at which the object was created.", "meta": {}, "data_type": null, "tags": []}, "currency": {"name": "currency", "description": "Three-letter ISO currency code, in lowercase.", "meta": {}, "data_type": null, "tags": []}, "customer_id": {"name": "customer_id", "description": "The ID of the customer who will be billed.", "meta": {}, "data_type": null, "tags": []}, "description": {"name": "description", "description": "An arbitrary string attached to the object. Often useful for displaying to users. Referenced as \u2018memo\u2019 in the Dashboard.", "meta": {}, "data_type": null, "tags": []}, "due_date": {"name": "due_date", "description": "The date on which payment for this invoice is due. This value will be null for invoices where collection_method=charge_automatically.", "meta": {}, "data_type": null, "tags": []}, "number": {"name": "number", "description": "A unique, identifying string that appears on emails sent to the customer for this invoice. This starts with the customer\u2019s unique invoice_prefix if it is specified.", "meta": {}, "data_type": null, "tags": []}, "is_paid": {"name": "is_paid", "description": "Whether payment was successfully collected for this invoice. An invoice can be paid (most commonly) with a charge or with credit from the customer\u2019s account balance.", "meta": {}, "data_type": null, "tags": []}, "receipt_number": {"name": "receipt_number", "description": "This is the transaction number that appears on email receipts sent for this invoice.", "meta": {}, "data_type": null, "tags": []}, "status": {"name": "status", "description": "Status of the invoice.", "meta": {}, "data_type": null, "tags": []}, "subtotal": {"name": "subtotal", "description": "Total of all subscriptions, invoice items, and prorations on the invoice before any discount or tax is applied.", "meta": {}, "data_type": null, "tags": []}, "tax": {"name": "tax", "description": "The amount of tax on this invoice. This is the sum of all the tax amounts on this invoice.", "meta": {}, "data_type": null, "tags": []}, "tax_percent": {"name": "tax_percent", "description": "The percent used to calculate the tax amount.", "meta": {}, "data_type": null, "tags": []}, "total": {"name": "total", "description": "Total after discounts and taxes.", "meta": {}, "data_type": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/stg_stripe.yml", "build_path": "target/compiled/stripe_source/models/stg_stripe_invoice.sql", "compiled": true, "compiled_sql": "\n\nwith invoice as (\n\n    select *\n    from `dbt-package-testing`.`stripe`.`invoice`\n\n), fields as (\n\n    select\n      id as invoice_id,\n      amount_due,\n      amount_paid,\n      amount_remaining,\n      attempt_count,\n      auto_advance,\n      billing_reason,\n      charge_id,\n      created as created_at,\n      currency,\n      customer_id,\n      description,\n      due_date,\n      number,\n      paid as is_paid,\n      receipt_number,\n      status,\n      subtotal,\n      tax,\n      tax_percent,\n      total\n    from invoice\n    where not coalesce(is_deleted, false)\n\n)\n\nselect * from fields", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\nwith invoice as (\n\n    select *\n    from `dbt-package-testing`.`stripe`.`invoice`\n\n), fields as (\n\n    select\n      id as invoice_id,\n      amount_due,\n      amount_paid,\n      amount_remaining,\n      attempt_count,\n      auto_advance,\n      billing_reason,\n      charge_id,\n      created as created_at,\n      currency,\n      customer_id,\n      description,\n      due_date,\n      number,\n      paid as is_paid,\n      receipt_number,\n      status,\n      subtotal,\n      tax,\n      tax_percent,\n      total\n    from invoice\n    where not coalesce(is_deleted, false)\n\n)\n\nselect * from fields"}, "error": null, "status": null, "execution_time": 0.06089377403259277, "thread_id": "Thread-2", "timing": [{"name": "compile", "started_at": "2020-07-23T18:08:31.910764Z", "completed_at": "2020-07-23T18:08:31.951305Z"}, {"name": "execute", "started_at": "2020-07-23T18:08:31.956836Z", "completed_at": "2020-07-23T18:08:31.956866Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "with payout as (\n\n    select *\n    from {{ var('payout') }}\n\n), fields as (\n\n    select \n      id as payout_id,\n      amount,\n      arrival_date,\n      automatic as is_automatic,\n      balance_transaction_id,\n      created as created_at,\n      currency,\n      description,\n      method,\n      source_type,\n      status,\n      type\n    from payout\n\n)\n\nselect *\nfrom fields", "database": "dbt-package-testing", "schema": "dbt_kristin_2", "fqn": ["stripe_source", "stg_stripe_payout"], "unique_id": "model.stripe_source.stg_stripe_payout", "package_name": "stripe_source", "root_path": "/Users/kristin/Documents/Github/dbt_stripe/dbt_modules/stripe_source", "path": "stg_stripe_payout.sql", "original_file_path": "models/stg_stripe_payout.sql", "name": "stg_stripe_payout", "resource_type": "model", "alias": "stg_stripe_payout", "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "tags": []}, "tags": [], "refs": [], "sources": [["stripe", "payout"]], "depends_on": {"macros": [], "nodes": ["source.stripe_source.stripe.payout"]}, "description": "A Payout object is created when you receive funds from Stripe, or when you initiate a payout to either a bank account or debit card of a connected Stripe account.", "columns": {"payout_id": {"name": "payout_id", "description": "Unique identifier for the object.", "meta": {}, "data_type": null, "tags": []}, "amount": {"name": "amount", "description": "Amount (in cents) to be transferred to your bank account or debit card.", "meta": {}, "data_type": null, "tags": []}, "arrival_date": {"name": "arrival_date", "description": "Date the payout is expected to arrive in the bank. This factors in delays like weekends or bank holidays.", "meta": {}, "data_type": null, "tags": []}, "is_automatic": {"name": "is_automatic", "description": "true if the payout was created by an automated payout schedule, and false if it was requested manually.", "meta": {}, "data_type": null, "tags": []}, "balance_transaction_id": {"name": "balance_transaction_id", "description": "ID of the balance transaction that describes the impact of this payout on your account balance.", "meta": {}, "data_type": null, "tags": []}, "created_at": {"name": "created_at", "description": "Time at which the object was created.", "meta": {}, "data_type": null, "tags": []}, "currency": {"name": "currency", "description": "Three-letter ISO currency code, in lowercase.", "meta": {}, "data_type": null, "tags": []}, "description": {"name": "description", "description": "An arbitrary string attached to the object. Often useful for displaying to users.", "meta": {}, "data_type": null, "tags": []}, "method": {"name": "method", "description": "The method used to send this payout, which can be standard or instant.", "meta": {}, "data_type": null, "tags": []}, "source_type": {"name": "source_type", "description": "The source balance this payout came from. One of card, fpx, or bank_account.", "meta": {}, "data_type": null, "tags": []}, "status": {"name": "status", "description": "Current status of the payout.  Can be paid, pending, in_transit, canceled or failed.", "meta": {}, "data_type": null, "tags": []}, "type": {"name": "type", "description": "Can be bank_account or card.", "meta": {}, "data_type": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/stg_stripe.yml", "build_path": "target/compiled/stripe_source/models/stg_stripe_payout.sql", "compiled": true, "compiled_sql": "with payout as (\n\n    select *\n    from `dbt-package-testing`.`stripe`.`payout`\n\n), fields as (\n\n    select \n      id as payout_id,\n      amount,\n      arrival_date,\n      automatic as is_automatic,\n      balance_transaction_id,\n      created as created_at,\n      currency,\n      description,\n      method,\n      source_type,\n      status,\n      type\n    from payout\n\n)\n\nselect *\nfrom fields", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "with payout as (\n\n    select *\n    from `dbt-package-testing`.`stripe`.`payout`\n\n), fields as (\n\n    select \n      id as payout_id,\n      amount,\n      arrival_date,\n      automatic as is_automatic,\n      balance_transaction_id,\n      created as created_at,\n      currency,\n      description,\n      method,\n      source_type,\n      status,\n      type\n    from payout\n\n)\n\nselect *\nfrom fields"}, "error": null, "status": null, "execution_time": 0.062438011169433594, "thread_id": "Thread-4", "timing": [{"name": "compile", "started_at": "2020-07-23T18:08:31.897367Z", "completed_at": "2020-07-23T18:08:31.957072Z"}, {"name": "execute", "started_at": "2020-07-23T18:08:31.957703Z", "completed_at": "2020-07-23T18:08:31.957706Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "with refund as (\n\n    select *\n    from {{ var('refund') }}\n\n), fields as (\n\n    select \n      id as refund_id,\n      amount,\n      balance_transaction_id,\n      charge_id,\n      created as created_at,\n      currency,\n      description,\n      reason,\n      receipt_number,\n      status\n    from refund\n\n)\n\nselect *\nfrom fields", "database": "dbt-package-testing", "schema": "dbt_kristin_2", "fqn": ["stripe_source", "stg_stripe_refund"], "unique_id": "model.stripe_source.stg_stripe_refund", "package_name": "stripe_source", "root_path": "/Users/kristin/Documents/Github/dbt_stripe/dbt_modules/stripe_source", "path": "stg_stripe_refund.sql", "original_file_path": "models/stg_stripe_refund.sql", "name": "stg_stripe_refund", "resource_type": "model", "alias": "stg_stripe_refund", "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "tags": []}, "tags": [], "refs": [], "sources": [["stripe", "refund"]], "depends_on": {"macros": [], "nodes": ["source.stripe_source.stripe.refund"]}, "description": "Details of transactions that have been refunded", "columns": {"refund_id": {"name": "refund_id", "description": "Unique identifier for the object.", "meta": {}, "data_type": null, "tags": []}, "amount": {"name": "amount", "description": "Amount, in cents.", "meta": {}, "data_type": null, "tags": []}, "balance_transaction_id": {"name": "balance_transaction_id", "description": "ID for the balance transaction that describes the impact on your account balance.", "meta": {}, "data_type": null, "tags": []}, "charge_id": {"name": "charge_id", "description": "ID of the charge that was refunded.", "meta": {}, "data_type": null, "tags": []}, "created_at": {"name": "created_at", "description": "Time at which the object was created.", "meta": {}, "data_type": null, "tags": []}, "currency": {"name": "currency", "description": "Three-letter ISO currency code, in lowercase.", "meta": {}, "data_type": null, "tags": []}, "description": {"name": "description", "description": "An arbitrary string attached to the object. Often useful for displaying to users. (Available on non-card refunds only)", "meta": {}, "data_type": null, "tags": []}, "reason": {"name": "reason", "description": "Reason for the refund, either user-provided (duplicate, fraudulent, or requested_by_customer) or generated by Stripe internally (expired_uncaptured_charge).", "meta": {}, "data_type": null, "tags": []}, "receipt_number": {"name": "receipt_number", "description": "This is the transaction number that appears on email receipts sent for this refund.", "meta": {}, "data_type": null, "tags": []}, "status": {"name": "status", "description": "Status of the refund. For credit card refunds, this can be pending, succeeded, or failed. For other types of refunds, it can be pending, succeeded, failed, or canceled.", "meta": {}, "data_type": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/stg_stripe.yml", "build_path": "target/compiled/stripe_source/models/stg_stripe_refund.sql", "compiled": true, "compiled_sql": "with refund as (\n\n    select *\n    from `dbt-package-testing`.`stripe`.`refund`\n\n), fields as (\n\n    select \n      id as refund_id,\n      amount,\n      balance_transaction_id,\n      charge_id,\n      created as created_at,\n      currency,\n      description,\n      reason,\n      receipt_number,\n      status\n    from refund\n\n)\n\nselect *\nfrom fields", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "with refund as (\n\n    select *\n    from `dbt-package-testing`.`stripe`.`refund`\n\n), fields as (\n\n    select \n      id as refund_id,\n      amount,\n      balance_transaction_id,\n      charge_id,\n      created as created_at,\n      currency,\n      description,\n      reason,\n      receipt_number,\n      status\n    from refund\n\n)\n\nselect *\nfrom fields"}, "error": null, "status": null, "execution_time": 0.06256484985351562, "thread_id": "Thread-3", "timing": [{"name": "compile", "started_at": "2020-07-23T18:08:31.897455Z", "completed_at": "2020-07-23T18:08:31.957211Z"}, {"name": "execute", "started_at": "2020-07-23T18:08:31.957971Z", "completed_at": "2020-07-23T18:08:31.957974Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{ config(enabled=var('using_invoices', True)) }}\n\nwith invoice_line_item as (\n\n    select *\n    from {{ var('invoice_line_item') }}\n\n), fields as (\n\n    select\n      id as invoice_line_item_id,\n      invoice_id,\n      amount,\n      currency,\n      description,\n      discountable as is_discountable,\n      plan_id,\n      proration,\n      quantity,\n      subscription_id,\n      subscription_item_id,\n      type,\n      unique_id\n    from invoice_line_item\n    where id not like 'sub%' -- ids starting with 'sub' are temporary and are replaced by permanent ids starting with 'sli' \n\n)\n\nselect * from fields", "database": "dbt-package-testing", "schema": "dbt_kristin_2", "fqn": ["stripe_source", "stg_stripe_invoice_line_item"], "unique_id": "model.stripe_source.stg_stripe_invoice_line_item", "package_name": "stripe_source", "root_path": "/Users/kristin/Documents/Github/dbt_stripe/dbt_modules/stripe_source", "path": "stg_stripe_invoice_line_item.sql", "original_file_path": "models/stg_stripe_invoice_line_item.sql", "name": "stg_stripe_invoice_line_item", "resource_type": "model", "alias": "stg_stripe_invoice_line_item", "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "tags": []}, "tags": [], "refs": [], "sources": [["stripe", "invoice_line_item"]], "depends_on": {"macros": [], "nodes": ["source.stripe_source.stripe.invoice_line_item"]}, "description": "The different items that an invoice contains", "columns": {"invoice_line_item_id": {"name": "invoice_line_item_id", "description": "Unique identifier for the object.", "meta": {}, "data_type": null, "tags": []}, "invoice_id": {"name": "invoice_id", "description": "The ID of the invoice this item is a part of", "meta": {}, "data_type": null, "tags": []}, "amount": {"name": "amount", "description": "The amount, in cents.", "meta": {}, "data_type": null, "tags": []}, "currency": {"name": "currency", "description": "Three-letter ISO currency code, in lowercase.", "meta": {}, "data_type": null, "tags": []}, "description": {"name": "description", "description": "An arbitrary string attached to the object. Often useful for displaying to users.", "meta": {}, "data_type": null, "tags": []}, "is_discountable": {"name": "is_discountable", "description": "If true, discounts will apply to this line item. Always false for prorations.", "meta": {}, "data_type": null, "tags": []}, "plan_id": {"name": "plan_id", "description": "The ID of the plan of the subscription, if the line item is a subscription or a proration.", "meta": {}, "data_type": null, "tags": []}, "proration": {"name": "proration", "description": "Whether this is a proration.", "meta": {}, "data_type": null, "tags": []}, "quantity": {"name": "quantity", "description": "The quantity of the subscription, if the line item is a subscription or a proration.", "meta": {}, "data_type": null, "tags": []}, "subscription_id": {"name": "subscription_id", "description": "The ID of the subscription that the invoice item pertains to, if any.", "meta": {}, "data_type": null, "tags": []}, "subscription_item_id": {"name": "subscription_item_id", "description": "The subscription item that generated this invoice item. Left empty if the line item is not an explicit result of a subscription.", "meta": {}, "data_type": null, "tags": []}, "type": {"name": "type", "description": "A string identifying the type of the source of this line item, either an invoiceitem or a subscription.", "meta": {}, "data_type": null, "tags": []}, "unique_id": {"name": "unique_id", "description": "A unique id generated for old invoice ID's from a past version of the API", "meta": {}, "data_type": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/stg_stripe.yml", "build_path": "target/compiled/stripe_source/models/stg_stripe_invoice_line_item.sql", "compiled": true, "compiled_sql": "\n\nwith invoice_line_item as (\n\n    select *\n    from `dbt-package-testing`.`stripe`.`invoice_line_item`\n\n), fields as (\n\n    select\n      id as invoice_line_item_id,\n      invoice_id,\n      amount,\n      currency,\n      description,\n      discountable as is_discountable,\n      plan_id,\n      proration,\n      quantity,\n      subscription_id,\n      subscription_item_id,\n      type,\n      unique_id\n    from invoice_line_item\n    where id not like 'sub%' -- ids starting with 'sub' are temporary and are replaced by permanent ids starting with 'sli' \n\n)\n\nselect * from fields", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\nwith invoice_line_item as (\n\n    select *\n    from `dbt-package-testing`.`stripe`.`invoice_line_item`\n\n), fields as (\n\n    select\n      id as invoice_line_item_id,\n      invoice_id,\n      amount,\n      currency,\n      description,\n      discountable as is_discountable,\n      plan_id,\n      proration,\n      quantity,\n      subscription_id,\n      subscription_item_id,\n      type,\n      unique_id\n    from invoice_line_item\n    where id not like 'sub%' -- ids starting with 'sub' are temporary and are replaced by permanent ids starting with 'sli' \n\n)\n\nselect * from fields"}, "error": null, "status": null, "execution_time": 0.015980958938598633, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2020-07-23T18:08:31.945798Z", "completed_at": "2020-07-23T18:08:31.959074Z"}, {"name": "execute", "started_at": "2020-07-23T18:08:31.960425Z", "completed_at": "2020-07-23T18:08:31.960429Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{ config(enabled=var('using_invoices', True)) }}\n\nwith subscription as (\n\n    select *\n    from {{ var('subscription') }}\n\n), fields as (\n\n    select\n      id as subscription_id,\n      status,\n      billing,\n      billing_cycle_anchor,\n      cancel_at,\n      cancel_at_period_end,\n      canceled_at,\n      created as created_at,\n      current_period_start,\n      current_period_end,\n      customer_id,\n      days_until_due,\n      start_date,\n      ended_at\n    from subscription\n\n)\n\nselect * from fields", "database": "dbt-package-testing", "schema": "dbt_kristin_2", "fqn": ["stripe_source", "stg_stripe_subscription"], "unique_id": "model.stripe_source.stg_stripe_subscription", "package_name": "stripe_source", "root_path": "/Users/kristin/Documents/Github/dbt_stripe/dbt_modules/stripe_source", "path": "stg_stripe_subscription.sql", "original_file_path": "models/stg_stripe_subscription.sql", "name": "stg_stripe_subscription", "resource_type": "model", "alias": "stg_stripe_subscription", "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "tags": []}, "tags": [], "refs": [], "sources": [["stripe", "subscription"]], "depends_on": {"macros": [], "nodes": ["source.stripe_source.stripe.subscription"]}, "description": "Subscriptions allow you to charge a customer on a recurring basis.", "columns": {"subscription_id": {"name": "subscription_id", "description": "Unique identifier for the object.", "meta": {}, "data_type": null, "tags": []}, "status": {"name": "status", "description": "Possible values are incomplete, incomplete_expired, trialing, active, past_due, canceled, or unpaid.", "meta": {}, "data_type": null, "tags": []}, "billing": {"name": "billing", "description": "How the invoice is billed", "meta": {}, "data_type": null, "tags": []}, "billing_cycle_anchor": {"name": "billing_cycle_anchor", "description": "Determines the date of the first full invoice, and, for plans with month or year intervals, the day of the month for subsequent invoices.", "meta": {}, "data_type": null, "tags": []}, "cancel_at": {"name": "cancel_at", "description": "A date in the future at which the subscription will automatically get canceled", "meta": {}, "data_type": null, "tags": []}, "cancel_at_period_end": {"name": "cancel_at_period_end", "description": "Boolean indicating whether this subscription should cancel at the end of the current period.", "meta": {}, "data_type": null, "tags": []}, "canceled_at": {"name": "canceled_at", "description": "If the subscription has been canceled, the date of that cancellation.", "meta": {}, "data_type": null, "tags": []}, "created_at": {"name": "created_at", "description": "Time at which the object was created.", "meta": {}, "data_type": null, "tags": []}, "current_period_start": {"name": "current_period_start", "description": "Start of the current period that the subscription has been invoiced for.", "meta": {}, "data_type": null, "tags": []}, "current_period_end": {"name": "current_period_end", "description": "End of the current period that the subscription has been invoiced for. At the end of this period, a new invoice will be created.", "meta": {}, "data_type": null, "tags": []}, "customer_id": {"name": "customer_id", "description": "ID of the customer who owns the subscription.", "meta": {}, "data_type": null, "tags": []}, "days_until_due": {"name": "days_until_due", "description": "Number of days a customer has to pay invoices generated by this subscription. This value will be null for subscriptions where collection_method=charge_automatically.", "meta": {}, "data_type": null, "tags": []}, "start_date": {"name": "start_date", "description": "Date when the subscription was first created. The date might differ from the created date due to backdating.", "meta": {}, "data_type": null, "tags": []}, "ended_at": {"name": "ended_at", "description": "If the subscription has ended, the date the subscription ended.", "meta": {}, "data_type": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/stg_stripe.yml", "build_path": "target/compiled/stripe_source/models/stg_stripe_subscription.sql", "compiled": true, "compiled_sql": "\n\nwith subscription as (\n\n    select *\n    from `dbt-package-testing`.`stripe`.`subscription`\n\n), fields as (\n\n    select\n      id as subscription_id,\n      status,\n      billing,\n      billing_cycle_anchor,\n      cancel_at,\n      cancel_at_period_end,\n      canceled_at,\n      created as created_at,\n      current_period_start,\n      current_period_end,\n      customer_id,\n      days_until_due,\n      start_date,\n      ended_at\n    from subscription\n\n)\n\nselect * from fields", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\nwith subscription as (\n\n    select *\n    from `dbt-package-testing`.`stripe`.`subscription`\n\n), fields as (\n\n    select\n      id as subscription_id,\n      status,\n      billing,\n      billing_cycle_anchor,\n      cancel_at,\n      cancel_at_period_end,\n      canceled_at,\n      created as created_at,\n      current_period_start,\n      current_period_end,\n      customer_id,\n      days_until_due,\n      start_date,\n      ended_at\n    from subscription\n\n)\n\nselect * from fields"}, "error": null, "status": null, "execution_time": 0.044413089752197266, "thread_id": "Thread-2", "timing": [{"name": "compile", "started_at": "2020-07-23T18:08:31.961633Z", "completed_at": "2020-07-23T18:08:31.994955Z"}, {"name": "execute", "started_at": "2020-07-23T18:08:31.995466Z", "completed_at": "2020-07-23T18:08:31.995473Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "with fee as (\n\n    select *\n    from {{ var('fee') }}\n\n), fields as (\n\n    select \n      balance_transaction_id,\n      amount,\n      application,\n      currency,\n      description,\n      type\n    from fee\n\n)\n\nselect *\nfrom fields", "database": "dbt-package-testing", "schema": "dbt_kristin_2", "fqn": ["stripe_source", "stg_stripe_fee"], "unique_id": "model.stripe_source.stg_stripe_fee", "package_name": "stripe_source", "root_path": "/Users/kristin/Documents/Github/dbt_stripe/dbt_modules/stripe_source", "path": "stg_stripe_fee.sql", "original_file_path": "models/stg_stripe_fee.sql", "name": "stg_stripe_fee", "resource_type": "model", "alias": "stg_stripe_fee", "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "tags": []}, "tags": [], "refs": [], "sources": [["stripe", "fee"]], "depends_on": {"macros": [], "nodes": ["source.stripe_source.stripe.fee"]}, "description": "The details of a fee associated with a balance_transation", "columns": {"balance_transaction_id": {"name": "balance_transaction_id", "description": "ID of the balance transaction entry the fee applies to", "meta": {}, "data_type": null, "tags": []}, "amount": {"name": "amount", "description": "Amount of the fee, in cents.", "meta": {}, "data_type": null, "tags": []}, "application": {"name": "application", "description": "ID of the Connect application that earned the fee.", "meta": {}, "data_type": null, "tags": []}, "currency": {"name": "currency", "description": "Three-letter ISO currency code, in lowercase.", "meta": {}, "data_type": null, "tags": []}, "description": {"name": "description", "description": "An arbitrary string attached to the object. Often useful for displaying to users.", "meta": {}, "data_type": null, "tags": []}, "type": {"name": "type", "description": "Type of the fee, can be application_fee, stripe_fee or tax.", "meta": {}, "data_type": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/stg_stripe.yml", "build_path": "target/compiled/stripe_source/models/stg_stripe_fee.sql", "compiled": true, "compiled_sql": "with fee as (\n\n    select *\n    from `dbt-package-testing`.`stripe`.`fee`\n\n), fields as (\n\n    select \n      balance_transaction_id,\n      amount,\n      application,\n      currency,\n      description,\n      type\n    from fee\n\n)\n\nselect *\nfrom fields", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "with fee as (\n\n    select *\n    from `dbt-package-testing`.`stripe`.`fee`\n\n), fields as (\n\n    select \n      balance_transaction_id,\n      amount,\n      application,\n      currency,\n      description,\n      type\n    from fee\n\n)\n\nselect *\nfrom fields"}, "error": null, "status": null, "execution_time": 0.045558929443359375, "thread_id": "Thread-4", "timing": [{"name": "compile", "started_at": "2020-07-23T18:08:31.973209Z", "completed_at": "2020-07-23T18:08:32.004163Z"}, {"name": "execute", "started_at": "2020-07-23T18:08:32.005421Z", "completed_at": "2020-07-23T18:08:32.005426Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{ config(enabled=var('using_payment_method', True)) }}\n\nwith payment_method as (\n\n    select *\n    from {{ var('payment_method') }}\n\n), fields as (\n\n    select \n      id as payment_method_id,\n      created as created_at,\n      customer_id,\n      type\n    from payment_method\n    where not is_deleted\n\n)\n\nselect *\nfrom fields", "database": "dbt-package-testing", "schema": "dbt_kristin_2", "fqn": ["stripe_source", "stg_stripe_payment_method"], "unique_id": "model.stripe_source.stg_stripe_payment_method", "package_name": "stripe_source", "root_path": "/Users/kristin/Documents/Github/dbt_stripe/dbt_modules/stripe_source", "path": "stg_stripe_payment_method.sql", "original_file_path": "models/stg_stripe_payment_method.sql", "name": "stg_stripe_payment_method", "resource_type": "model", "alias": "stg_stripe_payment_method", "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "tags": []}, "tags": [], "refs": [], "sources": [["stripe", "payment_method"]], "depends_on": {"macros": [], "nodes": ["source.stripe_source.stripe.payment_method"]}, "description": "PaymentMethod objects represent your customer's payment instruments. They can be used with PaymentIntents to collect payments or saved to Customer objects to store instrument details for future payments.", "columns": {"payment_method_id": {"name": "payment_method_id", "description": "Unique identifier for the object.", "meta": {}, "data_type": null, "tags": []}, "created_at": {"name": "created_at", "description": "Time at which the object was created.", "meta": {}, "data_type": null, "tags": []}, "customer_id": {"name": "customer_id", "description": "The ID of the Customer to which this PaymentMethod is saved. This will not be set when the PaymentMethod has not been saved to a Customer.", "meta": {}, "data_type": null, "tags": []}, "type": {"name": "type", "description": "The type of the PaymentMethod. An additional hash is included on the PaymentMethod with a name matching this value. It contains additional information specific to the PaymentMethod type.", "meta": {}, "data_type": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/stg_stripe.yml", "build_path": "target/compiled/stripe_source/models/stg_stripe_payment_method.sql", "compiled": true, "compiled_sql": "\n\nwith payment_method as (\n\n    select *\n    from `dbt-package-testing`.`stripe`.`payment_method`\n\n), fields as (\n\n    select \n      id as payment_method_id,\n      created as created_at,\n      customer_id,\n      type\n    from payment_method\n    where not is_deleted\n\n)\n\nselect *\nfrom fields", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\nwith payment_method as (\n\n    select *\n    from `dbt-package-testing`.`stripe`.`payment_method`\n\n), fields as (\n\n    select \n      id as payment_method_id,\n      created as created_at,\n      customer_id,\n      type\n    from payment_method\n    where not is_deleted\n\n)\n\nselect *\nfrom fields"}, "error": null, "status": null, "execution_time": 0.045610904693603516, "thread_id": "Thread-3", "timing": [{"name": "compile", "started_at": "2020-07-23T18:08:31.974373Z", "completed_at": "2020-07-23T18:08:32.004360Z"}, {"name": "execute", "started_at": "2020-07-23T18:08:32.005635Z", "completed_at": "2020-07-23T18:08:32.005639Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{ config(enabled=var('using_payment_method', True)) }}\n\nwith payment_method_card as (\n\n    select *\n    from {{ var('payment_method_card') }}\n\n), fields as (\n\n    select \n      payment_method_id,\n      brand,\n      funding\n    from payment_method_card\n\n)\n\nselect *\nfrom fields", "database": "dbt-package-testing", "schema": "dbt_kristin_2", "fqn": ["stripe_source", "stg_stripe_payment_method_card"], "unique_id": "model.stripe_source.stg_stripe_payment_method_card", "package_name": "stripe_source", "root_path": "/Users/kristin/Documents/Github/dbt_stripe/dbt_modules/stripe_source", "path": "stg_stripe_payment_method_card.sql", "original_file_path": "models/stg_stripe_payment_method_card.sql", "name": "stg_stripe_payment_method_card", "resource_type": "model", "alias": "stg_stripe_payment_method_card", "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "tags": []}, "tags": [], "refs": [], "sources": [["stripe", "payment_method_card"]], "depends_on": {"macros": [], "nodes": ["source.stripe_source.stripe.payment_method_card"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/stripe_source/models/stg_stripe_payment_method_card.sql", "compiled": true, "compiled_sql": "\n\nwith payment_method_card as (\n\n    select *\n    from `dbt-package-testing`.`stripe`.`payment_method_card`\n\n), fields as (\n\n    select \n      payment_method_id,\n      brand,\n      funding\n    from payment_method_card\n\n)\n\nselect *\nfrom fields", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\nwith payment_method_card as (\n\n    select *\n    from `dbt-package-testing`.`stripe`.`payment_method_card`\n\n), fields as (\n\n    select \n      payment_method_id,\n      brand,\n      funding\n    from payment_method_card\n\n)\n\nselect *\nfrom fields"}, "error": null, "status": null, "execution_time": 0.03267192840576172, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2020-07-23T18:08:31.995331Z", "completed_at": "2020-07-23T18:08:32.005199Z"}, {"name": "execute", "started_at": "2020-07-23T18:08:32.006237Z", "completed_at": "2020-07-23T18:08:32.006241Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "id", "model": "{{ source('stripe', 'balance_transaction') }}"}}, "database": "dbt-package-testing", "schema": "dbt_kristin_2", "fqn": ["stripe_source", "schema_test", "source_not_null_stripe_balance_transaction_id"], "unique_id": "test.stripe_source.source_not_null_stripe_balance_transaction_id", "package_name": "stripe_source", "root_path": "/Users/kristin/Documents/Github/dbt_stripe/dbt_modules/stripe_source", "path": "schema_test/source_not_null_stripe_balance_transaction_id.sql", "original_file_path": "models/dbt_stripe_source.yml", "name": "source_not_null_stripe_balance_transaction_id", "resource_type": "test", "alias": "source_not_null_stripe_balance_transaction_id", "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "tags": [], "severity": "ERROR"}, "tags": ["schema"], "refs": [], "sources": [["stripe", "balance_transaction"]], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["source.stripe_source.stripe.balance_transaction"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/stripe_source/models/dbt_stripe_source.yml/schema_test/source_not_null_stripe_balance_transaction_id.sql", "compiled": true, "compiled_sql": "\n\n\n\nselect count(*) as validation_errors\nfrom `dbt-package-testing`.`stripe`.`balance_transaction`\nwhere id is null\n\n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\n\n\nselect count(*) as validation_errors\nfrom `dbt-package-testing`.`stripe`.`balance_transaction`\nwhere id is null\n\n", "column_name": "id"}, "error": null, "status": null, "execution_time": 0.04319000244140625, "thread_id": "Thread-2", "timing": [{"name": "compile", "started_at": "2020-07-23T18:08:32.007644Z", "completed_at": "2020-07-23T18:08:32.045855Z"}, {"name": "execute", "started_at": "2020-07-23T18:08:32.048390Z", "completed_at": "2020-07-23T18:08:32.048397Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "id", "model": "{{ source('stripe', 'card') }}"}}, "database": "dbt-package-testing", "schema": "dbt_kristin_2", "fqn": ["stripe_source", "schema_test", "source_not_null_stripe_card_id"], "unique_id": "test.stripe_source.source_not_null_stripe_card_id", "package_name": "stripe_source", "root_path": "/Users/kristin/Documents/Github/dbt_stripe/dbt_modules/stripe_source", "path": "schema_test/source_not_null_stripe_card_id.sql", "original_file_path": "models/dbt_stripe_source.yml", "name": "source_not_null_stripe_card_id", "resource_type": "test", "alias": "source_not_null_stripe_card_id", "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "tags": [], "severity": "ERROR"}, "tags": ["schema"], "refs": [], "sources": [["stripe", "card"]], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["source.stripe_source.stripe.card"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/stripe_source/models/dbt_stripe_source.yml/schema_test/source_not_null_stripe_card_id.sql", "compiled": true, "compiled_sql": "\n\n\n\nselect count(*) as validation_errors\nfrom `dbt-package-testing`.`stripe`.`card`\nwhere id is null\n\n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\n\n\nselect count(*) as validation_errors\nfrom `dbt-package-testing`.`stripe`.`card`\nwhere id is null\n\n", "column_name": "id"}, "error": null, "status": null, "execution_time": 0.04146313667297363, "thread_id": "Thread-4", "timing": [{"name": "compile", "started_at": "2020-07-23T18:08:32.023726Z", "completed_at": "2020-07-23T18:08:32.048157Z"}, {"name": "execute", "started_at": "2020-07-23T18:08:32.048848Z", "completed_at": "2020-07-23T18:08:32.048853Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "id", "model": "{{ source('stripe', 'charge') }}"}}, "database": "dbt-package-testing", "schema": "dbt_kristin_2", "fqn": ["stripe_source", "schema_test", "source_not_null_stripe_charge_id"], "unique_id": "test.stripe_source.source_not_null_stripe_charge_id", "package_name": "stripe_source", "root_path": "/Users/kristin/Documents/Github/dbt_stripe/dbt_modules/stripe_source", "path": "schema_test/source_not_null_stripe_charge_id.sql", "original_file_path": "models/dbt_stripe_source.yml", "name": "source_not_null_stripe_charge_id", "resource_type": "test", "alias": "source_not_null_stripe_charge_id", "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "tags": [], "severity": "ERROR"}, "tags": ["schema"], "refs": [], "sources": [["stripe", "charge"]], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["source.stripe_source.stripe.charge"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/stripe_source/models/dbt_stripe_source.yml/schema_test/source_not_null_stripe_charge_id.sql", "compiled": true, "compiled_sql": "\n\n\n\nselect count(*) as validation_errors\nfrom `dbt-package-testing`.`stripe`.`charge`\nwhere id is null\n\n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\n\n\nselect count(*) as validation_errors\nfrom `dbt-package-testing`.`stripe`.`charge`\nwhere id is null\n\n", "column_name": "id"}, "error": null, "status": null, "execution_time": 0.0416409969329834, "thread_id": "Thread-3", "timing": [{"name": "compile", "started_at": "2020-07-23T18:08:32.023844Z", "completed_at": "2020-07-23T18:08:32.048619Z"}, {"name": "execute", "started_at": "2020-07-23T18:08:32.049281Z", "completed_at": "2020-07-23T18:08:32.049284Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "id", "model": "{{ source('stripe', 'customer') }}"}}, "database": "dbt-package-testing", "schema": "dbt_kristin_2", "fqn": ["stripe_source", "schema_test", "source_not_null_stripe_customer_id"], "unique_id": "test.stripe_source.source_not_null_stripe_customer_id", "package_name": "stripe_source", "root_path": "/Users/kristin/Documents/Github/dbt_stripe/dbt_modules/stripe_source", "path": "schema_test/source_not_null_stripe_customer_id.sql", "original_file_path": "models/dbt_stripe_source.yml", "name": "source_not_null_stripe_customer_id", "resource_type": "test", "alias": "source_not_null_stripe_customer_id", "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "tags": [], "severity": "ERROR"}, "tags": ["schema"], "refs": [], "sources": [["stripe", "customer"]], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["source.stripe_source.stripe.customer"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/stripe_source/models/dbt_stripe_source.yml/schema_test/source_not_null_stripe_customer_id.sql", "compiled": true, "compiled_sql": "\n\n\n\nselect count(*) as validation_errors\nfrom `dbt-package-testing`.`stripe`.`customer`\nwhere id is null\n\n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\n\n\nselect count(*) as validation_errors\nfrom `dbt-package-testing`.`stripe`.`customer`\nwhere id is null\n\n", "column_name": "id"}, "error": null, "status": null, "execution_time": 0.03148388862609863, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2020-07-23T18:08:32.023935Z", "completed_at": "2020-07-23T18:08:32.050237Z"}, {"name": "execute", "started_at": "2020-07-23T18:08:32.051017Z", "completed_at": "2020-07-23T18:08:32.051021Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "id", "model": "{{ source('stripe', 'payment_intent') }}"}}, "database": "dbt-package-testing", "schema": "dbt_kristin_2", "fqn": ["stripe_source", "schema_test", "source_not_null_stripe_payment_intent_id"], "unique_id": "test.stripe_source.source_not_null_stripe_payment_intent_id", "package_name": "stripe_source", "root_path": "/Users/kristin/Documents/Github/dbt_stripe/dbt_modules/stripe_source", "path": "schema_test/source_not_null_stripe_payment_intent_id.sql", "original_file_path": "models/dbt_stripe_source.yml", "name": "source_not_null_stripe_payment_intent_id", "resource_type": "test", "alias": "source_not_null_stripe_payment_intent_id", "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "tags": [], "severity": "ERROR"}, "tags": ["schema"], "refs": [], "sources": [["stripe", "payment_intent"]], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["source.stripe_source.stripe.payment_intent"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/stripe_source/models/dbt_stripe_source.yml/schema_test/source_not_null_stripe_payment_intent_id.sql", "compiled": true, "compiled_sql": "\n\n\n\nselect count(*) as validation_errors\nfrom `dbt-package-testing`.`stripe`.`payment_intent`\nwhere id is null\n\n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\n\n\nselect count(*) as validation_errors\nfrom `dbt-package-testing`.`stripe`.`payment_intent`\nwhere id is null\n\n", "column_name": "id"}, "error": null, "status": null, "execution_time": 0.03846883773803711, "thread_id": "Thread-2", "timing": [{"name": "compile", "started_at": "2020-07-23T18:08:32.051830Z", "completed_at": "2020-07-23T18:08:32.078556Z"}, {"name": "execute", "started_at": "2020-07-23T18:08:32.079115Z", "completed_at": "2020-07-23T18:08:32.079121Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "id", "model": "{{ source('stripe', 'payout') }}"}}, "database": "dbt-package-testing", "schema": "dbt_kristin_2", "fqn": ["stripe_source", "schema_test", "source_not_null_stripe_payout_id"], "unique_id": "test.stripe_source.source_not_null_stripe_payout_id", "package_name": "stripe_source", "root_path": "/Users/kristin/Documents/Github/dbt_stripe/dbt_modules/stripe_source", "path": "schema_test/source_not_null_stripe_payout_id.sql", "original_file_path": "models/dbt_stripe_source.yml", "name": "source_not_null_stripe_payout_id", "resource_type": "test", "alias": "source_not_null_stripe_payout_id", "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "tags": [], "severity": "ERROR"}, "tags": ["schema"], "refs": [], "sources": [["stripe", "payout"]], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["source.stripe_source.stripe.payout"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/stripe_source/models/dbt_stripe_source.yml/schema_test/source_not_null_stripe_payout_id.sql", "compiled": true, "compiled_sql": "\n\n\n\nselect count(*) as validation_errors\nfrom `dbt-package-testing`.`stripe`.`payout`\nwhere id is null\n\n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\n\n\nselect count(*) as validation_errors\nfrom `dbt-package-testing`.`stripe`.`payout`\nwhere id is null\n\n", "column_name": "id"}, "error": null, "status": null, "execution_time": 0.0398106575012207, "thread_id": "Thread-4", "timing": [{"name": "compile", "started_at": "2020-07-23T18:08:32.051978Z", "completed_at": "2020-07-23T18:08:32.079402Z"}, {"name": "execute", "started_at": "2020-07-23T18:08:32.089303Z", "completed_at": "2020-07-23T18:08:32.089308Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "id", "model": "{{ source('stripe', 'refund') }}"}}, "database": "dbt-package-testing", "schema": "dbt_kristin_2", "fqn": ["stripe_source", "schema_test", "source_not_null_stripe_refund_id"], "unique_id": "test.stripe_source.source_not_null_stripe_refund_id", "package_name": "stripe_source", "root_path": "/Users/kristin/Documents/Github/dbt_stripe/dbt_modules/stripe_source", "path": "schema_test/source_not_null_stripe_refund_id.sql", "original_file_path": "models/dbt_stripe_source.yml", "name": "source_not_null_stripe_refund_id", "resource_type": "test", "alias": "source_not_null_stripe_refund_id", "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "tags": [], "severity": "ERROR"}, "tags": ["schema"], "refs": [], "sources": [["stripe", "refund"]], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["source.stripe_source.stripe.refund"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/stripe_source/models/dbt_stripe_source.yml/schema_test/source_not_null_stripe_refund_id.sql", "compiled": true, "compiled_sql": "\n\n\n\nselect count(*) as validation_errors\nfrom `dbt-package-testing`.`stripe`.`refund`\nwhere id is null\n\n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\n\n\nselect count(*) as validation_errors\nfrom `dbt-package-testing`.`stripe`.`refund`\nwhere id is null\n\n", "column_name": "id"}, "error": null, "status": null, "execution_time": 0.04012608528137207, "thread_id": "Thread-3", "timing": [{"name": "compile", "started_at": "2020-07-23T18:08:32.060783Z", "completed_at": "2020-07-23T18:08:32.089041Z"}, {"name": "execute", "started_at": "2020-07-23T18:08:32.090155Z", "completed_at": "2020-07-23T18:08:32.090175Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_unique(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "unique", "kwargs": {"column_name": "id", "model": "{{ source('stripe', 'balance_transaction') }}"}}, "database": "dbt-package-testing", "schema": "dbt_kristin_2", "fqn": ["stripe_source", "schema_test", "source_unique_stripe_balance_transaction_id"], "unique_id": "test.stripe_source.source_unique_stripe_balance_transaction_id", "package_name": "stripe_source", "root_path": "/Users/kristin/Documents/Github/dbt_stripe/dbt_modules/stripe_source", "path": "schema_test/source_unique_stripe_balance_transaction_id.sql", "original_file_path": "models/dbt_stripe_source.yml", "name": "source_unique_stripe_balance_transaction_id", "resource_type": "test", "alias": "source_unique_stripe_balance_transaction_id", "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "tags": [], "severity": "ERROR"}, "tags": ["schema"], "refs": [], "sources": [["stripe", "balance_transaction"]], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["source.stripe_source.stripe.balance_transaction"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/stripe_source/models/dbt_stripe_source.yml/schema_test/source_unique_stripe_balance_transaction_id.sql", "compiled": true, "compiled_sql": "\n\n\n\nselect count(*) as validation_errors\nfrom (\n\n    select\n        id\n\n    from `dbt-package-testing`.`stripe`.`balance_transaction`\n    where id is not null\n    group by id\n    having count(*) > 1\n\n) validation_errors\n\n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\n\n\nselect count(*) as validation_errors\nfrom (\n\n    select\n        id\n\n    from `dbt-package-testing`.`stripe`.`balance_transaction`\n    where id is not null\n    group by id\n    having count(*) > 1\n\n) validation_errors\n\n", "column_name": "id"}, "error": null, "status": null, "execution_time": 0.023134946823120117, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2020-07-23T18:08:32.078987Z", "completed_at": "2020-07-23T18:08:32.091049Z"}, {"name": "execute", "started_at": "2020-07-23T18:08:32.091819Z", "completed_at": "2020-07-23T18:08:32.091823Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_unique(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "unique", "kwargs": {"column_name": "id", "model": "{{ source('stripe', 'card') }}"}}, "database": "dbt-package-testing", "schema": "dbt_kristin_2", "fqn": ["stripe_source", "schema_test", "source_unique_stripe_card_id"], "unique_id": "test.stripe_source.source_unique_stripe_card_id", "package_name": "stripe_source", "root_path": "/Users/kristin/Documents/Github/dbt_stripe/dbt_modules/stripe_source", "path": "schema_test/source_unique_stripe_card_id.sql", "original_file_path": "models/dbt_stripe_source.yml", "name": "source_unique_stripe_card_id", "resource_type": "test", "alias": "source_unique_stripe_card_id", "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "tags": [], "severity": "ERROR"}, "tags": ["schema"], "refs": [], "sources": [["stripe", "card"]], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["source.stripe_source.stripe.card"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/stripe_source/models/dbt_stripe_source.yml/schema_test/source_unique_stripe_card_id.sql", "compiled": true, "compiled_sql": "\n\n\n\nselect count(*) as validation_errors\nfrom (\n\n    select\n        id\n\n    from `dbt-package-testing`.`stripe`.`card`\n    where id is not null\n    group by id\n    having count(*) > 1\n\n) validation_errors\n\n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\n\n\nselect count(*) as validation_errors\nfrom (\n\n    select\n        id\n\n    from `dbt-package-testing`.`stripe`.`card`\n    where id is not null\n    group by id\n    having count(*) > 1\n\n) validation_errors\n\n", "column_name": "id"}, "error": null, "status": null, "execution_time": 0.042308807373046875, "thread_id": "Thread-2", "timing": [{"name": "compile", "started_at": "2020-07-23T18:08:32.092500Z", "completed_at": "2020-07-23T18:08:32.118845Z"}, {"name": "execute", "started_at": "2020-07-23T18:08:32.123641Z", "completed_at": "2020-07-23T18:08:32.123649Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_unique(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "unique", "kwargs": {"column_name": "id", "model": "{{ source('stripe', 'charge') }}"}}, "database": "dbt-package-testing", "schema": "dbt_kristin_2", "fqn": ["stripe_source", "schema_test", "source_unique_stripe_charge_id"], "unique_id": "test.stripe_source.source_unique_stripe_charge_id", "package_name": "stripe_source", "root_path": "/Users/kristin/Documents/Github/dbt_stripe/dbt_modules/stripe_source", "path": "schema_test/source_unique_stripe_charge_id.sql", "original_file_path": "models/dbt_stripe_source.yml", "name": "source_unique_stripe_charge_id", "resource_type": "test", "alias": "source_unique_stripe_charge_id", "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "tags": [], "severity": "ERROR"}, "tags": ["schema"], "refs": [], "sources": [["stripe", "charge"]], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["source.stripe_source.stripe.charge"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/stripe_source/models/dbt_stripe_source.yml/schema_test/source_unique_stripe_charge_id.sql", "compiled": true, "compiled_sql": "\n\n\n\nselect count(*) as validation_errors\nfrom (\n\n    select\n        id\n\n    from `dbt-package-testing`.`stripe`.`charge`\n    where id is not null\n    group by id\n    having count(*) > 1\n\n) validation_errors\n\n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\n\n\nselect count(*) as validation_errors\nfrom (\n\n    select\n        id\n\n    from `dbt-package-testing`.`stripe`.`charge`\n    where id is not null\n    group by id\n    having count(*) > 1\n\n) validation_errors\n\n", "column_name": "id"}, "error": null, "status": null, "execution_time": 0.04218101501464844, "thread_id": "Thread-4", "timing": [{"name": "compile", "started_at": "2020-07-23T18:08:32.103107Z", "completed_at": "2020-07-23T18:08:32.123921Z"}, {"name": "execute", "started_at": "2020-07-23T18:08:32.133411Z", "completed_at": "2020-07-23T18:08:32.133418Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_unique(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "unique", "kwargs": {"column_name": "id", "model": "{{ source('stripe', 'customer') }}"}}, "database": "dbt-package-testing", "schema": "dbt_kristin_2", "fqn": ["stripe_source", "schema_test", "source_unique_stripe_customer_id"], "unique_id": "test.stripe_source.source_unique_stripe_customer_id", "package_name": "stripe_source", "root_path": "/Users/kristin/Documents/Github/dbt_stripe/dbt_modules/stripe_source", "path": "schema_test/source_unique_stripe_customer_id.sql", "original_file_path": "models/dbt_stripe_source.yml", "name": "source_unique_stripe_customer_id", "resource_type": "test", "alias": "source_unique_stripe_customer_id", "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "tags": [], "severity": "ERROR"}, "tags": ["schema"], "refs": [], "sources": [["stripe", "customer"]], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["source.stripe_source.stripe.customer"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/stripe_source/models/dbt_stripe_source.yml/schema_test/source_unique_stripe_customer_id.sql", "compiled": true, "compiled_sql": "\n\n\n\nselect count(*) as validation_errors\nfrom (\n\n    select\n        id\n\n    from `dbt-package-testing`.`stripe`.`customer`\n    where id is not null\n    group by id\n    having count(*) > 1\n\n) validation_errors\n\n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\n\n\nselect count(*) as validation_errors\nfrom (\n\n    select\n        id\n\n    from `dbt-package-testing`.`stripe`.`customer`\n    where id is not null\n    group by id\n    having count(*) > 1\n\n) validation_errors\n\n", "column_name": "id"}, "error": null, "status": null, "execution_time": 0.043157100677490234, "thread_id": "Thread-3", "timing": [{"name": "compile", "started_at": "2020-07-23T18:08:32.103633Z", "completed_at": "2020-07-23T18:08:32.133684Z"}, {"name": "execute", "started_at": "2020-07-23T18:08:32.134694Z", "completed_at": "2020-07-23T18:08:32.134699Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_unique(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "unique", "kwargs": {"column_name": "id", "model": "{{ source('stripe', 'payment_intent') }}"}}, "database": "dbt-package-testing", "schema": "dbt_kristin_2", "fqn": ["stripe_source", "schema_test", "source_unique_stripe_payment_intent_id"], "unique_id": "test.stripe_source.source_unique_stripe_payment_intent_id", "package_name": "stripe_source", "root_path": "/Users/kristin/Documents/Github/dbt_stripe/dbt_modules/stripe_source", "path": "schema_test/source_unique_stripe_payment_intent_id.sql", "original_file_path": "models/dbt_stripe_source.yml", "name": "source_unique_stripe_payment_intent_id", "resource_type": "test", "alias": "source_unique_stripe_payment_intent_id", "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "tags": [], "severity": "ERROR"}, "tags": ["schema"], "refs": [], "sources": [["stripe", "payment_intent"]], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["source.stripe_source.stripe.payment_intent"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/stripe_source/models/dbt_stripe_source.yml/schema_test/source_unique_stripe_payment_intent_id.sql", "compiled": true, "compiled_sql": "\n\n\n\nselect count(*) as validation_errors\nfrom (\n\n    select\n        id\n\n    from `dbt-package-testing`.`stripe`.`payment_intent`\n    where id is not null\n    group by id\n    having count(*) > 1\n\n) validation_errors\n\n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\n\n\nselect count(*) as validation_errors\nfrom (\n\n    select\n        id\n\n    from `dbt-package-testing`.`stripe`.`payment_intent`\n    where id is not null\n    group by id\n    having count(*) > 1\n\n) validation_errors\n\n", "column_name": "id"}, "error": null, "status": null, "execution_time": 0.03412508964538574, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2020-07-23T18:08:32.123433Z", "completed_at": "2020-07-23T18:08:32.135384Z"}, {"name": "execute", "started_at": "2020-07-23T18:08:32.136320Z", "completed_at": "2020-07-23T18:08:32.136326Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_unique(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "unique", "kwargs": {"column_name": "id", "model": "{{ source('stripe', 'payout') }}"}}, "database": "dbt-package-testing", "schema": "dbt_kristin_2", "fqn": ["stripe_source", "schema_test", "source_unique_stripe_payout_id"], "unique_id": "test.stripe_source.source_unique_stripe_payout_id", "package_name": "stripe_source", "root_path": "/Users/kristin/Documents/Github/dbt_stripe/dbt_modules/stripe_source", "path": "schema_test/source_unique_stripe_payout_id.sql", "original_file_path": "models/dbt_stripe_source.yml", "name": "source_unique_stripe_payout_id", "resource_type": "test", "alias": "source_unique_stripe_payout_id", "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "tags": [], "severity": "ERROR"}, "tags": ["schema"], "refs": [], "sources": [["stripe", "payout"]], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["source.stripe_source.stripe.payout"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/stripe_source/models/dbt_stripe_source.yml/schema_test/source_unique_stripe_payout_id.sql", "compiled": true, "compiled_sql": "\n\n\n\nselect count(*) as validation_errors\nfrom (\n\n    select\n        id\n\n    from `dbt-package-testing`.`stripe`.`payout`\n    where id is not null\n    group by id\n    having count(*) > 1\n\n) validation_errors\n\n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\n\n\nselect count(*) as validation_errors\nfrom (\n\n    select\n        id\n\n    from `dbt-package-testing`.`stripe`.`payout`\n    where id is not null\n    group by id\n    having count(*) > 1\n\n) validation_errors\n\n", "column_name": "id"}, "error": null, "status": null, "execution_time": 0.032182931900024414, "thread_id": "Thread-2", "timing": [{"name": "compile", "started_at": "2020-07-23T18:08:32.137125Z", "completed_at": "2020-07-23T18:08:32.154559Z"}, {"name": "execute", "started_at": "2020-07-23T18:08:32.159231Z", "completed_at": "2020-07-23T18:08:32.159238Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_unique(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "unique", "kwargs": {"column_name": "id", "model": "{{ source('stripe', 'refund') }}"}}, "database": "dbt-package-testing", "schema": "dbt_kristin_2", "fqn": ["stripe_source", "schema_test", "source_unique_stripe_refund_id"], "unique_id": "test.stripe_source.source_unique_stripe_refund_id", "package_name": "stripe_source", "root_path": "/Users/kristin/Documents/Github/dbt_stripe/dbt_modules/stripe_source", "path": "schema_test/source_unique_stripe_refund_id.sql", "original_file_path": "models/dbt_stripe_source.yml", "name": "source_unique_stripe_refund_id", "resource_type": "test", "alias": "source_unique_stripe_refund_id", "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "tags": [], "severity": "ERROR"}, "tags": ["schema"], "refs": [], "sources": [["stripe", "refund"]], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["source.stripe_source.stripe.refund"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/stripe_source/models/dbt_stripe_source.yml/schema_test/source_unique_stripe_refund_id.sql", "compiled": true, "compiled_sql": "\n\n\n\nselect count(*) as validation_errors\nfrom (\n\n    select\n        id\n\n    from `dbt-package-testing`.`stripe`.`refund`\n    where id is not null\n    group by id\n    having count(*) > 1\n\n) validation_errors\n\n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\n\n\nselect count(*) as validation_errors\nfrom (\n\n    select\n        id\n\n    from `dbt-package-testing`.`stripe`.`refund`\n    where id is not null\n    group by id\n    having count(*) > 1\n\n) validation_errors\n\n", "column_name": "id"}, "error": null, "status": null, "execution_time": 0.041918039321899414, "thread_id": "Thread-4", "timing": [{"name": "compile", "started_at": "2020-07-23T18:08:32.147892Z", "completed_at": "2020-07-23T18:08:32.167474Z"}, {"name": "execute", "started_at": "2020-07-23T18:08:32.177312Z", "completed_at": "2020-07-23T18:08:32.177320Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "with charge as (\n\n    select *\n    from {{ ref('stg_stripe_charge')}}\n\n)\n\nselect \n  created_at,\n  customer_id,\n  amount\nfrom charge\nwhere not is_captured", "database": "dbt-package-testing", "schema": "dbt_kristin_2", "fqn": ["stripe", "intermediate", "stripe_incomplete_charges"], "unique_id": "model.stripe.stripe_incomplete_charges", "package_name": "stripe", "root_path": "/Users/kristin/Documents/Github/dbt_stripe", "path": "intermediate/stripe_incomplete_charges.sql", "original_file_path": "models/intermediate/stripe_incomplete_charges.sql", "name": "stripe_incomplete_charges", "resource_type": "model", "alias": "stripe_incomplete_charges", "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "tags": []}, "tags": [], "refs": [["stg_stripe_charge"]], "sources": [], "depends_on": {"macros": [], "nodes": ["model.stripe_source.stg_stripe_charge"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/stripe/models/intermediate/stripe_incomplete_charges.sql", "compiled": true, "compiled_sql": "with charge as (\n\n    select *\n    from `dbt-package-testing`.`dbt_kristin_2`.`stg_stripe_charge`\n\n)\n\nselect \n  created_at,\n  customer_id,\n  amount\nfrom charge\nwhere not is_captured", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "with charge as (\n\n    select *\n    from `dbt-package-testing`.`dbt_kristin_2`.`stg_stripe_charge`\n\n)\n\nselect \n  created_at,\n  customer_id,\n  amount\nfrom charge\nwhere not is_captured"}, "error": null, "status": null, "execution_time": 0.04204106330871582, "thread_id": "Thread-3", "timing": [{"name": "compile", "started_at": "2020-07-23T18:08:32.159024Z", "completed_at": "2020-07-23T18:08:32.177552Z"}, {"name": "execute", "started_at": "2020-07-23T18:08:32.178734Z", "completed_at": "2020-07-23T18:08:32.178739Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "charge_id", "model": "{{ ref('stg_stripe_charge') }}"}}, "database": "dbt-package-testing", "schema": "dbt_kristin_2", "fqn": ["stripe_source", "schema_test", "not_null_stg_stripe_charge_charge_id"], "unique_id": "test.stripe_source.not_null_stg_stripe_charge_charge_id", "package_name": "stripe_source", "root_path": "/Users/kristin/Documents/Github/dbt_stripe/dbt_modules/stripe_source", "path": "schema_test/not_null_stg_stripe_charge_charge_id.sql", "original_file_path": "models/stg_stripe.yml", "name": "not_null_stg_stripe_charge_charge_id", "resource_type": "test", "alias": "not_null_stg_stripe_charge_charge_id", "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "tags": [], "severity": "ERROR"}, "tags": ["schema"], "refs": [["stg_stripe_charge"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.stripe_source.stg_stripe_charge"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/stripe_source/models/stg_stripe.yml/schema_test/not_null_stg_stripe_charge_charge_id.sql", "compiled": true, "compiled_sql": "\n\n\n\nselect count(*) as validation_errors\nfrom `dbt-package-testing`.`dbt_kristin_2`.`stg_stripe_charge`\nwhere charge_id is null\n\n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\n\n\nselect count(*) as validation_errors\nfrom `dbt-package-testing`.`dbt_kristin_2`.`stg_stripe_charge`\nwhere charge_id is null\n\n", "column_name": "charge_id"}, "error": null, "status": null, "execution_time": 0.04503202438354492, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2020-07-23T18:08:32.166860Z", "completed_at": "2020-07-23T18:08:32.179367Z"}, {"name": "execute", "started_at": "2020-07-23T18:08:32.180295Z", "completed_at": "2020-07-23T18:08:32.180299Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_unique(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "unique", "kwargs": {"column_name": "charge_id", "model": "{{ ref('stg_stripe_charge') }}"}}, "database": "dbt-package-testing", "schema": "dbt_kristin_2", "fqn": ["stripe_source", "schema_test", "unique_stg_stripe_charge_charge_id"], "unique_id": "test.stripe_source.unique_stg_stripe_charge_charge_id", "package_name": "stripe_source", "root_path": "/Users/kristin/Documents/Github/dbt_stripe/dbt_modules/stripe_source", "path": "schema_test/unique_stg_stripe_charge_charge_id.sql", "original_file_path": "models/stg_stripe.yml", "name": "unique_stg_stripe_charge_charge_id", "resource_type": "test", "alias": "unique_stg_stripe_charge_charge_id", "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "tags": [], "severity": "ERROR"}, "tags": ["schema"], "refs": [["stg_stripe_charge"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.stripe_source.stg_stripe_charge"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/stripe_source/models/stg_stripe.yml/schema_test/unique_stg_stripe_charge_charge_id.sql", "compiled": true, "compiled_sql": "\n\n\n\nselect count(*) as validation_errors\nfrom (\n\n    select\n        charge_id\n\n    from `dbt-package-testing`.`dbt_kristin_2`.`stg_stripe_charge`\n    where charge_id is not null\n    group by charge_id\n    having count(*) > 1\n\n) validation_errors\n\n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\n\n\nselect count(*) as validation_errors\nfrom (\n\n    select\n        charge_id\n\n    from `dbt-package-testing`.`dbt_kristin_2`.`stg_stripe_charge`\n    where charge_id is not null\n    group by charge_id\n    having count(*) > 1\n\n) validation_errors\n\n", "column_name": "charge_id"}, "error": null, "status": null, "execution_time": 0.03691816329956055, "thread_id": "Thread-2", "timing": [{"name": "compile", "started_at": "2020-07-23T18:08:32.179939Z", "completed_at": "2020-07-23T18:08:32.200120Z"}, {"name": "execute", "started_at": "2020-07-23T18:08:32.205051Z", "completed_at": "2020-07-23T18:08:32.205058Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "balance_transaction_id", "model": "{{ ref('stg_stripe_balance_transaction') }}"}}, "database": "dbt-package-testing", "schema": "dbt_kristin_2", "fqn": ["stripe_source", "schema_test", "not_null_stg_stripe_balance_transaction_balance_transaction_id"], "unique_id": "test.stripe_source.not_null_stg_stripe_balance_transaction_balance_transaction_id", "package_name": "stripe_source", "root_path": "/Users/kristin/Documents/Github/dbt_stripe/dbt_modules/stripe_source", "path": "schema_test/not_null_stg_stripe_balance_transaction_balance_transaction_id.sql", "original_file_path": "models/stg_stripe.yml", "name": "not_null_stg_stripe_balance_transaction_balance_transaction_id", "resource_type": "test", "alias": "not_null_stg_stripe_balance_transaction_balance_transaction_id", "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "tags": [], "severity": "ERROR"}, "tags": ["schema"], "refs": [["stg_stripe_balance_transaction"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.stripe_source.stg_stripe_balance_transaction"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/stripe_source/models/stg_stripe.yml/schema_test/not_null_stg_stripe_balance_transaction_balance_transaction_id.sql", "compiled": true, "compiled_sql": "\n\n\n\nselect count(*) as validation_errors\nfrom `dbt-package-testing`.`dbt_kristin_2`.`stg_stripe_balance_transaction`\nwhere balance_transaction_id is null\n\n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\n\n\nselect count(*) as validation_errors\nfrom `dbt-package-testing`.`dbt_kristin_2`.`stg_stripe_balance_transaction`\nwhere balance_transaction_id is null\n\n", "column_name": "balance_transaction_id"}, "error": null, "status": null, "execution_time": 0.04589200019836426, "thread_id": "Thread-4", "timing": [{"name": "compile", "started_at": "2020-07-23T18:08:32.193840Z", "completed_at": "2020-07-23T18:08:32.215175Z"}, {"name": "execute", "started_at": "2020-07-23T18:08:32.224708Z", "completed_at": "2020-07-23T18:08:32.224716Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "card_id", "model": "{{ ref('stg_stripe_card') }}"}}, "database": "dbt-package-testing", "schema": "dbt_kristin_2", "fqn": ["stripe_source", "schema_test", "not_null_stg_stripe_card_card_id"], "unique_id": "test.stripe_source.not_null_stg_stripe_card_card_id", "package_name": "stripe_source", "root_path": "/Users/kristin/Documents/Github/dbt_stripe/dbt_modules/stripe_source", "path": "schema_test/not_null_stg_stripe_card_card_id.sql", "original_file_path": "models/stg_stripe.yml", "name": "not_null_stg_stripe_card_card_id", "resource_type": "test", "alias": "not_null_stg_stripe_card_card_id", "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "tags": [], "severity": "ERROR"}, "tags": ["schema"], "refs": [["stg_stripe_card"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.stripe_source.stg_stripe_card"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/stripe_source/models/stg_stripe.yml/schema_test/not_null_stg_stripe_card_card_id.sql", "compiled": true, "compiled_sql": "\n\n\n\nselect count(*) as validation_errors\nfrom `dbt-package-testing`.`dbt_kristin_2`.`stg_stripe_card`\nwhere card_id is null\n\n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\n\n\nselect count(*) as validation_errors\nfrom `dbt-package-testing`.`dbt_kristin_2`.`stg_stripe_card`\nwhere card_id is null\n\n", "column_name": "card_id"}, "error": null, "status": null, "execution_time": 0.03379178047180176, "thread_id": "Thread-3", "timing": [{"name": "compile", "started_at": "2020-07-23T18:08:32.204927Z", "completed_at": "2020-07-23T18:08:32.225410Z"}, {"name": "execute", "started_at": "2020-07-23T18:08:32.226300Z", "completed_at": "2020-07-23T18:08:32.226305Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_unique(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "unique", "kwargs": {"column_name": "balance_transaction_id", "model": "{{ ref('stg_stripe_balance_transaction') }}"}}, "database": "dbt-package-testing", "schema": "dbt_kristin_2", "fqn": ["stripe_source", "schema_test", "unique_stg_stripe_balance_transaction_balance_transaction_id"], "unique_id": "test.stripe_source.unique_stg_stripe_balance_transaction_balance_transaction_id", "package_name": "stripe_source", "root_path": "/Users/kristin/Documents/Github/dbt_stripe/dbt_modules/stripe_source", "path": "schema_test/unique_stg_stripe_balance_transaction_balance_transaction_id.sql", "original_file_path": "models/stg_stripe.yml", "name": "unique_stg_stripe_balance_transaction_balance_transaction_id", "resource_type": "test", "alias": "unique_stg_stripe_balance_transaction_balance_transaction_id", "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "tags": [], "severity": "ERROR"}, "tags": ["schema"], "refs": [["stg_stripe_balance_transaction"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.stripe_source.stg_stripe_balance_transaction"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/stripe_source/models/stg_stripe.yml/schema_test/unique_stg_stripe_balance_transaction_balance_transaction_id.sql", "compiled": true, "compiled_sql": "\n\n\n\nselect count(*) as validation_errors\nfrom (\n\n    select\n        balance_transaction_id\n\n    from `dbt-package-testing`.`dbt_kristin_2`.`stg_stripe_balance_transaction`\n    where balance_transaction_id is not null\n    group by balance_transaction_id\n    having count(*) > 1\n\n) validation_errors\n\n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\n\n\nselect count(*) as validation_errors\nfrom (\n\n    select\n        balance_transaction_id\n\n    from `dbt-package-testing`.`dbt_kristin_2`.`stg_stripe_balance_transaction`\n    where balance_transaction_id is not null\n    group by balance_transaction_id\n    having count(*) > 1\n\n) validation_errors\n\n", "column_name": "balance_transaction_id"}, "error": null, "status": null, "execution_time": 0.03277993202209473, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2020-07-23T18:08:32.215031Z", "completed_at": "2020-07-23T18:08:32.226527Z"}, {"name": "execute", "started_at": "2020-07-23T18:08:32.227401Z", "completed_at": "2020-07-23T18:08:32.227406Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_unique(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "unique", "kwargs": {"column_name": "card_id", "model": "{{ ref('stg_stripe_card') }}"}}, "database": "dbt-package-testing", "schema": "dbt_kristin_2", "fqn": ["stripe_source", "schema_test", "unique_stg_stripe_card_card_id"], "unique_id": "test.stripe_source.unique_stg_stripe_card_card_id", "package_name": "stripe_source", "root_path": "/Users/kristin/Documents/Github/dbt_stripe/dbt_modules/stripe_source", "path": "schema_test/unique_stg_stripe_card_card_id.sql", "original_file_path": "models/stg_stripe.yml", "name": "unique_stg_stripe_card_card_id", "resource_type": "test", "alias": "unique_stg_stripe_card_card_id", "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "tags": [], "severity": "ERROR"}, "tags": ["schema"], "refs": [["stg_stripe_card"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.stripe_source.stg_stripe_card"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/stripe_source/models/stg_stripe.yml/schema_test/unique_stg_stripe_card_card_id.sql", "compiled": true, "compiled_sql": "\n\n\n\nselect count(*) as validation_errors\nfrom (\n\n    select\n        card_id\n\n    from `dbt-package-testing`.`dbt_kristin_2`.`stg_stripe_card`\n    where card_id is not null\n    group by card_id\n    having count(*) > 1\n\n) validation_errors\n\n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\n\n\nselect count(*) as validation_errors\nfrom (\n\n    select\n        card_id\n\n    from `dbt-package-testing`.`dbt_kristin_2`.`stg_stripe_card`\n    where card_id is not null\n    group by card_id\n    having count(*) > 1\n\n) validation_errors\n\n", "column_name": "card_id"}, "error": null, "status": null, "execution_time": 0.04109334945678711, "thread_id": "Thread-2", "timing": [{"name": "compile", "started_at": "2020-07-23T18:08:32.226987Z", "completed_at": "2020-07-23T18:08:32.247426Z"}, {"name": "execute", "started_at": "2020-07-23T18:08:32.257526Z", "completed_at": "2020-07-23T18:08:32.257535Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "id", "model": "{{ ref('stg_stripe_customer') }}"}}, "database": "dbt-package-testing", "schema": "dbt_kristin_2", "fqn": ["stripe_source", "schema_test", "not_null_stg_stripe_customer_id"], "unique_id": "test.stripe_source.not_null_stg_stripe_customer_id", "package_name": "stripe_source", "root_path": "/Users/kristin/Documents/Github/dbt_stripe/dbt_modules/stripe_source", "path": "schema_test/not_null_stg_stripe_customer_id.sql", "original_file_path": "models/stg_stripe.yml", "name": "not_null_stg_stripe_customer_id", "resource_type": "test", "alias": "not_null_stg_stripe_customer_id", "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "tags": [], "severity": "ERROR"}, "tags": ["schema"], "refs": [["stg_stripe_customer"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.stripe_source.stg_stripe_customer"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/stripe_source/models/stg_stripe.yml/schema_test/not_null_stg_stripe_customer_id.sql", "compiled": true, "compiled_sql": "\n\n\n\nselect count(*) as validation_errors\nfrom `dbt-package-testing`.`dbt_kristin_2`.`stg_stripe_customer`\nwhere id is null\n\n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\n\n\nselect count(*) as validation_errors\nfrom `dbt-package-testing`.`dbt_kristin_2`.`stg_stripe_customer`\nwhere id is null\n\n", "column_name": "id"}, "error": null, "status": null, "execution_time": 0.03974008560180664, "thread_id": "Thread-4", "timing": [{"name": "compile", "started_at": "2020-07-23T18:08:32.238005Z", "completed_at": "2020-07-23T18:08:32.257854Z"}, {"name": "execute", "started_at": "2020-07-23T18:08:32.266428Z", "completed_at": "2020-07-23T18:08:32.266435Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_unique(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "unique", "kwargs": {"column_name": "id", "model": "{{ ref('stg_stripe_customer') }}"}}, "database": "dbt-package-testing", "schema": "dbt_kristin_2", "fqn": ["stripe_source", "schema_test", "unique_stg_stripe_customer_id"], "unique_id": "test.stripe_source.unique_stg_stripe_customer_id", "package_name": "stripe_source", "root_path": "/Users/kristin/Documents/Github/dbt_stripe/dbt_modules/stripe_source", "path": "schema_test/unique_stg_stripe_customer_id.sql", "original_file_path": "models/stg_stripe.yml", "name": "unique_stg_stripe_customer_id", "resource_type": "test", "alias": "unique_stg_stripe_customer_id", "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "tags": [], "severity": "ERROR"}, "tags": ["schema"], "refs": [["stg_stripe_customer"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.stripe_source.stg_stripe_customer"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/stripe_source/models/stg_stripe.yml/schema_test/unique_stg_stripe_customer_id.sql", "compiled": true, "compiled_sql": "\n\n\n\nselect count(*) as validation_errors\nfrom (\n\n    select\n        id\n\n    from `dbt-package-testing`.`dbt_kristin_2`.`stg_stripe_customer`\n    where id is not null\n    group by id\n    having count(*) > 1\n\n) validation_errors\n\n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\n\n\nselect count(*) as validation_errors\nfrom (\n\n    select\n        id\n\n    from `dbt-package-testing`.`dbt_kristin_2`.`stg_stripe_customer`\n    where id is not null\n    group by id\n    having count(*) > 1\n\n) validation_errors\n\n", "column_name": "id"}, "error": null, "status": null, "execution_time": 0.03118109703063965, "thread_id": "Thread-3", "timing": [{"name": "compile", "started_at": "2020-07-23T18:08:32.247221Z", "completed_at": "2020-07-23T18:08:32.266673Z"}, {"name": "execute", "started_at": "2020-07-23T18:08:32.267604Z", "completed_at": "2020-07-23T18:08:32.267610Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "payment_intent_id", "model": "{{ ref('stg_stripe_payment_intent') }}"}}, "database": "dbt-package-testing", "schema": "dbt_kristin_2", "fqn": ["stripe_source", "schema_test", "not_null_stg_stripe_payment_intent_payment_intent_id"], "unique_id": "test.stripe_source.not_null_stg_stripe_payment_intent_payment_intent_id", "package_name": "stripe_source", "root_path": "/Users/kristin/Documents/Github/dbt_stripe/dbt_modules/stripe_source", "path": "schema_test/not_null_stg_stripe_payment_intent_payment_intent_id.sql", "original_file_path": "models/stg_stripe.yml", "name": "not_null_stg_stripe_payment_intent_payment_intent_id", "resource_type": "test", "alias": "not_null_stg_stripe_payment_intent_payment_intent_id", "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "tags": [], "severity": "ERROR"}, "tags": ["schema"], "refs": [["stg_stripe_payment_intent"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.stripe_source.stg_stripe_payment_intent"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/stripe_source/models/stg_stripe.yml/schema_test/not_null_stg_stripe_payment_intent_payment_intent_id.sql", "compiled": true, "compiled_sql": "\n\n\n\nselect count(*) as validation_errors\nfrom `dbt-package-testing`.`dbt_kristin_2`.`stg_stripe_payment_intent`\nwhere payment_intent_id is null\n\n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\n\n\nselect count(*) as validation_errors\nfrom `dbt-package-testing`.`dbt_kristin_2`.`stg_stripe_payment_intent`\nwhere payment_intent_id is null\n\n", "column_name": "payment_intent_id"}, "error": null, "status": null, "execution_time": 0.03173398971557617, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2020-07-23T18:08:32.257338Z", "completed_at": "2020-07-23T18:08:32.268079Z"}, {"name": "execute", "started_at": "2020-07-23T18:08:32.268977Z", "completed_at": "2020-07-23T18:08:32.268982Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_unique(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "unique", "kwargs": {"column_name": "payment_intent_id", "model": "{{ ref('stg_stripe_payment_intent') }}"}}, "database": "dbt-package-testing", "schema": "dbt_kristin_2", "fqn": ["stripe_source", "schema_test", "unique_stg_stripe_payment_intent_payment_intent_id"], "unique_id": "test.stripe_source.unique_stg_stripe_payment_intent_payment_intent_id", "package_name": "stripe_source", "root_path": "/Users/kristin/Documents/Github/dbt_stripe/dbt_modules/stripe_source", "path": "schema_test/unique_stg_stripe_payment_intent_payment_intent_id.sql", "original_file_path": "models/stg_stripe.yml", "name": "unique_stg_stripe_payment_intent_payment_intent_id", "resource_type": "test", "alias": "unique_stg_stripe_payment_intent_payment_intent_id", "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "tags": [], "severity": "ERROR"}, "tags": ["schema"], "refs": [["stg_stripe_payment_intent"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.stripe_source.stg_stripe_payment_intent"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/stripe_source/models/stg_stripe.yml/schema_test/unique_stg_stripe_payment_intent_payment_intent_id.sql", "compiled": true, "compiled_sql": "\n\n\n\nselect count(*) as validation_errors\nfrom (\n\n    select\n        payment_intent_id\n\n    from `dbt-package-testing`.`dbt_kristin_2`.`stg_stripe_payment_intent`\n    where payment_intent_id is not null\n    group by payment_intent_id\n    having count(*) > 1\n\n) validation_errors\n\n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\n\n\nselect count(*) as validation_errors\nfrom (\n\n    select\n        payment_intent_id\n\n    from `dbt-package-testing`.`dbt_kristin_2`.`stg_stripe_payment_intent`\n    where payment_intent_id is not null\n    group by payment_intent_id\n    having count(*) > 1\n\n) validation_errors\n\n", "column_name": "payment_intent_id"}, "error": null, "status": null, "execution_time": 0.03978681564331055, "thread_id": "Thread-2", "timing": [{"name": "compile", "started_at": "2020-07-23T18:08:32.269723Z", "completed_at": "2020-07-23T18:08:32.297815Z"}, {"name": "execute", "started_at": "2020-07-23T18:08:32.298652Z", "completed_at": "2020-07-23T18:08:32.298659Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "invoice_id", "model": "{{ ref('stg_stripe_invoice') }}"}}, "database": "dbt-package-testing", "schema": "dbt_kristin_2", "fqn": ["stripe_source", "schema_test", "not_null_stg_stripe_invoice_invoice_id"], "unique_id": "test.stripe_source.not_null_stg_stripe_invoice_invoice_id", "package_name": "stripe_source", "root_path": "/Users/kristin/Documents/Github/dbt_stripe/dbt_modules/stripe_source", "path": "schema_test/not_null_stg_stripe_invoice_invoice_id.sql", "original_file_path": "models/stg_stripe.yml", "name": "not_null_stg_stripe_invoice_invoice_id", "resource_type": "test", "alias": "not_null_stg_stripe_invoice_invoice_id", "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "tags": [], "severity": "ERROR"}, "tags": ["schema"], "refs": [["stg_stripe_invoice"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.stripe_source.stg_stripe_invoice"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/stripe_source/models/stg_stripe.yml/schema_test/not_null_stg_stripe_invoice_invoice_id.sql", "compiled": true, "compiled_sql": "\n\n\n\nselect count(*) as validation_errors\nfrom `dbt-package-testing`.`dbt_kristin_2`.`stg_stripe_invoice`\nwhere invoice_id is null\n\n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\n\n\nselect count(*) as validation_errors\nfrom `dbt-package-testing`.`dbt_kristin_2`.`stg_stripe_invoice`\nwhere invoice_id is null\n\n", "column_name": "invoice_id"}, "error": null, "status": null, "execution_time": 0.039031028747558594, "thread_id": "Thread-4", "timing": [{"name": "compile", "started_at": "2020-07-23T18:08:32.279586Z", "completed_at": "2020-07-23T18:08:32.298392Z"}, {"name": "execute", "started_at": "2020-07-23T18:08:32.307270Z", "completed_at": "2020-07-23T18:08:32.307276Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_unique(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "unique", "kwargs": {"column_name": "invoice_id", "model": "{{ ref('stg_stripe_invoice') }}"}}, "database": "dbt-package-testing", "schema": "dbt_kristin_2", "fqn": ["stripe_source", "schema_test", "unique_stg_stripe_invoice_invoice_id"], "unique_id": "test.stripe_source.unique_stg_stripe_invoice_invoice_id", "package_name": "stripe_source", "root_path": "/Users/kristin/Documents/Github/dbt_stripe/dbt_modules/stripe_source", "path": "schema_test/unique_stg_stripe_invoice_invoice_id.sql", "original_file_path": "models/stg_stripe.yml", "name": "unique_stg_stripe_invoice_invoice_id", "resource_type": "test", "alias": "unique_stg_stripe_invoice_invoice_id", "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "tags": [], "severity": "ERROR"}, "tags": ["schema"], "refs": [["stg_stripe_invoice"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.stripe_source.stg_stripe_invoice"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/stripe_source/models/stg_stripe.yml/schema_test/unique_stg_stripe_invoice_invoice_id.sql", "compiled": true, "compiled_sql": "\n\n\n\nselect count(*) as validation_errors\nfrom (\n\n    select\n        invoice_id\n\n    from `dbt-package-testing`.`dbt_kristin_2`.`stg_stripe_invoice`\n    where invoice_id is not null\n    group by invoice_id\n    having count(*) > 1\n\n) validation_errors\n\n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\n\n\nselect count(*) as validation_errors\nfrom (\n\n    select\n        invoice_id\n\n    from `dbt-package-testing`.`dbt_kristin_2`.`stg_stripe_invoice`\n    where invoice_id is not null\n    group by invoice_id\n    having count(*) > 1\n\n) validation_errors\n\n", "column_name": "invoice_id"}, "error": null, "status": null, "execution_time": 0.0387272834777832, "thread_id": "Thread-3", "timing": [{"name": "compile", "started_at": "2020-07-23T18:08:32.288302Z", "completed_at": "2020-07-23T18:08:32.304504Z"}, {"name": "execute", "started_at": "2020-07-23T18:08:32.307776Z", "completed_at": "2020-07-23T18:08:32.307780Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "payout_id", "model": "{{ ref('stg_stripe_payout') }}"}}, "database": "dbt-package-testing", "schema": "dbt_kristin_2", "fqn": ["stripe_source", "schema_test", "not_null_stg_stripe_payout_payout_id"], "unique_id": "test.stripe_source.not_null_stg_stripe_payout_payout_id", "package_name": "stripe_source", "root_path": "/Users/kristin/Documents/Github/dbt_stripe/dbt_modules/stripe_source", "path": "schema_test/not_null_stg_stripe_payout_payout_id.sql", "original_file_path": "models/stg_stripe.yml", "name": "not_null_stg_stripe_payout_payout_id", "resource_type": "test", "alias": "not_null_stg_stripe_payout_payout_id", "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "tags": [], "severity": "ERROR"}, "tags": ["schema"], "refs": [["stg_stripe_payout"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.stripe_source.stg_stripe_payout"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/stripe_source/models/stg_stripe.yml/schema_test/not_null_stg_stripe_payout_payout_id.sql", "compiled": true, "compiled_sql": "\n\n\n\nselect count(*) as validation_errors\nfrom `dbt-package-testing`.`dbt_kristin_2`.`stg_stripe_payout`\nwhere payout_id is null\n\n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\n\n\nselect count(*) as validation_errors\nfrom `dbt-package-testing`.`dbt_kristin_2`.`stg_stripe_payout`\nwhere payout_id is null\n\n", "column_name": "payout_id"}, "error": null, "status": null, "execution_time": 0.030724048614501953, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2020-07-23T18:08:32.298158Z", "completed_at": "2020-07-23T18:08:32.308658Z"}, {"name": "execute", "started_at": "2020-07-23T18:08:32.309656Z", "completed_at": "2020-07-23T18:08:32.309660Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_unique(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "unique", "kwargs": {"column_name": "payout_id", "model": "{{ ref('stg_stripe_payout') }}"}}, "database": "dbt-package-testing", "schema": "dbt_kristin_2", "fqn": ["stripe_source", "schema_test", "unique_stg_stripe_payout_payout_id"], "unique_id": "test.stripe_source.unique_stg_stripe_payout_payout_id", "package_name": "stripe_source", "root_path": "/Users/kristin/Documents/Github/dbt_stripe/dbt_modules/stripe_source", "path": "schema_test/unique_stg_stripe_payout_payout_id.sql", "original_file_path": "models/stg_stripe.yml", "name": "unique_stg_stripe_payout_payout_id", "resource_type": "test", "alias": "unique_stg_stripe_payout_payout_id", "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "tags": [], "severity": "ERROR"}, "tags": ["schema"], "refs": [["stg_stripe_payout"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.stripe_source.stg_stripe_payout"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/stripe_source/models/stg_stripe.yml/schema_test/unique_stg_stripe_payout_payout_id.sql", "compiled": true, "compiled_sql": "\n\n\n\nselect count(*) as validation_errors\nfrom (\n\n    select\n        payout_id\n\n    from `dbt-package-testing`.`dbt_kristin_2`.`stg_stripe_payout`\n    where payout_id is not null\n    group by payout_id\n    having count(*) > 1\n\n) validation_errors\n\n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\n\n\nselect count(*) as validation_errors\nfrom (\n\n    select\n        payout_id\n\n    from `dbt-package-testing`.`dbt_kristin_2`.`stg_stripe_payout`\n    where payout_id is not null\n    group by payout_id\n    having count(*) > 1\n\n) validation_errors\n\n", "column_name": "payout_id"}, "error": null, "status": null, "execution_time": 0.04169893264770508, "thread_id": "Thread-2", "timing": [{"name": "compile", "started_at": "2020-07-23T18:08:32.311090Z", "completed_at": "2020-07-23T18:08:32.342256Z"}, {"name": "execute", "started_at": "2020-07-23T18:08:32.342808Z", "completed_at": "2020-07-23T18:08:32.342815Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "with balance_transaction as (\n\n    select *\n    from {{ ref('stg_stripe_balance_transaction') }}\n  \n), charge as (\n\n    select *\n    from {{ ref('stg_stripe_charge')}}\n\n), payment_intent as (\n\n    select *\n    from {{ ref('stg_stripe_payment_intent')}}\n\n), card as (\n\n    select *\n    from {{ ref('stg_stripe_card')}}\n\n), payout as (\n\n    select *\n    from {{ ref('stg_stripe_payout')}}\n\n), refund as (\n\n    select *\n    from {{ ref('stg_stripe_refund')}}\n\n), customer as (\n\n    select *\n    from {{ ref('stg_stripe_customer')}}\n\n\n)\n\nselect \n  balance_transaction.balance_transaction_id,\n  balance_transaction.created_at,\n  balance_transaction.available_on,\n  balance_transaction.currency,\n  balance_transaction.amount,\n  balance_transaction.fee,\n  balance_transaction.net,\n  balance_transaction.type,\n  case\n    when balance_transaction.type in ('charge', 'payment') then 'charge'\n    when balance_transaction.type in ('refund', 'payment_refund') then 'refund'\n    when balance_transaction.type in ('payout_cancel', 'payout_failure')\tthen 'payout_reversal'\n    when balance_transaction.type in ('transfer', 'recipient_transfer') then\t'transfer'\n    when balance_transaction.type in ('transfer_cancel', 'transfer_failure', 'recipient_transfer_cancel', 'recipient_transfer_failure') then 'transfer_reversal'\n    else balance_transaction.type\n  end as reporting_category,\n  balance_transaction.source,\n  balance_transaction.description,\n  case when balance_transaction.type = 'charge' then charge.amount end as customer_facing_amount, --think this might be the charge amount/currency\n  case when balance_transaction.type = 'charge' then charge.currency end as customer_facing_currency,\n  date_add(date(balance_transaction.available_on), interval 1 day) as effective_at,\n  coalesce(charge.customer_id, refund_charge.customer_id) as customer_id,\n  charge.receipt_email,\n  customer.description as customer_description,\n  charge.charge_id,\n  charge.payment_intent_id,\n  charge.created_at as charge_created_at,\n  card.brand as card_brand,\n  card.funding as card_funding,\n  card.country as card_country,\n  payout.payout_id,\n  payout.arrival_date as payout_expeted_arrival_date,\n  payout.status as payout_status,\n  payout.type as payout_type,\n  payout.description as payout_description,\n  refund.reason as refund_reason\nfrom balance_transaction\nleft join charge on charge.balance_transaction_id = balance_transaction.balance_transaction_id\nleft join customer on charge.customer_id = customer.customer_id\nleft join payment_intent on charge.payment_intent_id = payment_intent.payment_intent_id\nleft join card on charge.card_id = card.card_id\nleft join payout on payout.balance_transaction_id = balance_transaction.balance_transaction_id\nleft join refund on refund.balance_transaction_id = balance_transaction.balance_transaction_id\nleft join charge as refund_charge on refund.charge_id = refund_charge.charge_id\norder by created_at desc", "database": "dbt-package-testing", "schema": "dbt_kristin_2", "fqn": ["stripe", "intermediate", "stripe_balance_transaction_joined"], "unique_id": "model.stripe.stripe_balance_transaction_joined", "package_name": "stripe", "root_path": "/Users/kristin/Documents/Github/dbt_stripe", "path": "intermediate/stripe_balance_transaction_joined.sql", "original_file_path": "models/intermediate/stripe_balance_transaction_joined.sql", "name": "stripe_balance_transaction_joined", "resource_type": "model", "alias": "stripe_balance_transaction_joined", "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "tags": []}, "tags": [], "refs": [["stg_stripe_balance_transaction"], ["stg_stripe_charge"], ["stg_stripe_payment_intent"], ["stg_stripe_card"], ["stg_stripe_payout"], ["stg_stripe_refund"], ["stg_stripe_customer"]], "sources": [], "depends_on": {"macros": [], "nodes": ["model.stripe_source.stg_stripe_balance_transaction", "model.stripe_source.stg_stripe_charge", "model.stripe_source.stg_stripe_payment_intent", "model.stripe_source.stg_stripe_card", "model.stripe_source.stg_stripe_payout", "model.stripe_source.stg_stripe_refund", "model.stripe_source.stg_stripe_customer"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/stripe/models/intermediate/stripe_balance_transaction_joined.sql", "compiled": true, "compiled_sql": "with balance_transaction as (\n\n    select *\n    from `dbt-package-testing`.`dbt_kristin_2`.`stg_stripe_balance_transaction`\n  \n), charge as (\n\n    select *\n    from `dbt-package-testing`.`dbt_kristin_2`.`stg_stripe_charge`\n\n), payment_intent as (\n\n    select *\n    from `dbt-package-testing`.`dbt_kristin_2`.`stg_stripe_payment_intent`\n\n), card as (\n\n    select *\n    from `dbt-package-testing`.`dbt_kristin_2`.`stg_stripe_card`\n\n), payout as (\n\n    select *\n    from `dbt-package-testing`.`dbt_kristin_2`.`stg_stripe_payout`\n\n), refund as (\n\n    select *\n    from `dbt-package-testing`.`dbt_kristin_2`.`stg_stripe_refund`\n\n), customer as (\n\n    select *\n    from `dbt-package-testing`.`dbt_kristin_2`.`stg_stripe_customer`\n\n\n)\n\nselect \n  balance_transaction.balance_transaction_id,\n  balance_transaction.created_at,\n  balance_transaction.available_on,\n  balance_transaction.currency,\n  balance_transaction.amount,\n  balance_transaction.fee,\n  balance_transaction.net,\n  balance_transaction.type,\n  case\n    when balance_transaction.type in ('charge', 'payment') then 'charge'\n    when balance_transaction.type in ('refund', 'payment_refund') then 'refund'\n    when balance_transaction.type in ('payout_cancel', 'payout_failure')\tthen 'payout_reversal'\n    when balance_transaction.type in ('transfer', 'recipient_transfer') then\t'transfer'\n    when balance_transaction.type in ('transfer_cancel', 'transfer_failure', 'recipient_transfer_cancel', 'recipient_transfer_failure') then 'transfer_reversal'\n    else balance_transaction.type\n  end as reporting_category,\n  balance_transaction.source,\n  balance_transaction.description,\n  case when balance_transaction.type = 'charge' then charge.amount end as customer_facing_amount, --think this might be the charge amount/currency\n  case when balance_transaction.type = 'charge' then charge.currency end as customer_facing_currency,\n  date_add(date(balance_transaction.available_on), interval 1 day) as effective_at,\n  coalesce(charge.customer_id, refund_charge.customer_id) as customer_id,\n  charge.receipt_email,\n  customer.description as customer_description,\n  charge.charge_id,\n  charge.payment_intent_id,\n  charge.created_at as charge_created_at,\n  card.brand as card_brand,\n  card.funding as card_funding,\n  card.country as card_country,\n  payout.payout_id,\n  payout.arrival_date as payout_expeted_arrival_date,\n  payout.status as payout_status,\n  payout.type as payout_type,\n  payout.description as payout_description,\n  refund.reason as refund_reason\nfrom balance_transaction\nleft join charge on charge.balance_transaction_id = balance_transaction.balance_transaction_id\nleft join customer on charge.customer_id = customer.customer_id\nleft join payment_intent on charge.payment_intent_id = payment_intent.payment_intent_id\nleft join card on charge.card_id = card.card_id\nleft join payout on payout.balance_transaction_id = balance_transaction.balance_transaction_id\nleft join refund on refund.balance_transaction_id = balance_transaction.balance_transaction_id\nleft join charge as refund_charge on refund.charge_id = refund_charge.charge_id\norder by created_at desc", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "with balance_transaction as (\n\n    select *\n    from `dbt-package-testing`.`dbt_kristin_2`.`stg_stripe_balance_transaction`\n  \n), charge as (\n\n    select *\n    from `dbt-package-testing`.`dbt_kristin_2`.`stg_stripe_charge`\n\n), payment_intent as (\n\n    select *\n    from `dbt-package-testing`.`dbt_kristin_2`.`stg_stripe_payment_intent`\n\n), card as (\n\n    select *\n    from `dbt-package-testing`.`dbt_kristin_2`.`stg_stripe_card`\n\n), payout as (\n\n    select *\n    from `dbt-package-testing`.`dbt_kristin_2`.`stg_stripe_payout`\n\n), refund as (\n\n    select *\n    from `dbt-package-testing`.`dbt_kristin_2`.`stg_stripe_refund`\n\n), customer as (\n\n    select *\n    from `dbt-package-testing`.`dbt_kristin_2`.`stg_stripe_customer`\n\n\n)\n\nselect \n  balance_transaction.balance_transaction_id,\n  balance_transaction.created_at,\n  balance_transaction.available_on,\n  balance_transaction.currency,\n  balance_transaction.amount,\n  balance_transaction.fee,\n  balance_transaction.net,\n  balance_transaction.type,\n  case\n    when balance_transaction.type in ('charge', 'payment') then 'charge'\n    when balance_transaction.type in ('refund', 'payment_refund') then 'refund'\n    when balance_transaction.type in ('payout_cancel', 'payout_failure')\tthen 'payout_reversal'\n    when balance_transaction.type in ('transfer', 'recipient_transfer') then\t'transfer'\n    when balance_transaction.type in ('transfer_cancel', 'transfer_failure', 'recipient_transfer_cancel', 'recipient_transfer_failure') then 'transfer_reversal'\n    else balance_transaction.type\n  end as reporting_category,\n  balance_transaction.source,\n  balance_transaction.description,\n  case when balance_transaction.type = 'charge' then charge.amount end as customer_facing_amount, --think this might be the charge amount/currency\n  case when balance_transaction.type = 'charge' then charge.currency end as customer_facing_currency,\n  date_add(date(balance_transaction.available_on), interval 1 day) as effective_at,\n  coalesce(charge.customer_id, refund_charge.customer_id) as customer_id,\n  charge.receipt_email,\n  customer.description as customer_description,\n  charge.charge_id,\n  charge.payment_intent_id,\n  charge.created_at as charge_created_at,\n  card.brand as card_brand,\n  card.funding as card_funding,\n  card.country as card_country,\n  payout.payout_id,\n  payout.arrival_date as payout_expeted_arrival_date,\n  payout.status as payout_status,\n  payout.type as payout_type,\n  payout.description as payout_description,\n  refund.reason as refund_reason\nfrom balance_transaction\nleft join charge on charge.balance_transaction_id = balance_transaction.balance_transaction_id\nleft join customer on charge.customer_id = customer.customer_id\nleft join payment_intent on charge.payment_intent_id = payment_intent.payment_intent_id\nleft join card on charge.card_id = card.card_id\nleft join payout on payout.balance_transaction_id = balance_transaction.balance_transaction_id\nleft join refund on refund.balance_transaction_id = balance_transaction.balance_transaction_id\nleft join charge as refund_charge on refund.charge_id = refund_charge.charge_id\norder by created_at desc"}, "error": null, "status": null, "execution_time": 0.04224991798400879, "thread_id": "Thread-4", "timing": [{"name": "compile", "started_at": "2020-07-23T18:08:32.311546Z", "completed_at": "2020-07-23T18:08:32.350589Z"}, {"name": "execute", "started_at": "2020-07-23T18:08:32.351426Z", "completed_at": "2020-07-23T18:08:32.351432Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "refund_id", "model": "{{ ref('stg_stripe_refund') }}"}}, "database": "dbt-package-testing", "schema": "dbt_kristin_2", "fqn": ["stripe_source", "schema_test", "not_null_stg_stripe_refund_refund_id"], "unique_id": "test.stripe_source.not_null_stg_stripe_refund_refund_id", "package_name": "stripe_source", "root_path": "/Users/kristin/Documents/Github/dbt_stripe/dbt_modules/stripe_source", "path": "schema_test/not_null_stg_stripe_refund_refund_id.sql", "original_file_path": "models/stg_stripe.yml", "name": "not_null_stg_stripe_refund_refund_id", "resource_type": "test", "alias": "not_null_stg_stripe_refund_refund_id", "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "tags": [], "severity": "ERROR"}, "tags": ["schema"], "refs": [["stg_stripe_refund"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.stripe_source.stg_stripe_refund"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/stripe_source/models/stg_stripe.yml/schema_test/not_null_stg_stripe_refund_refund_id.sql", "compiled": true, "compiled_sql": "\n\n\n\nselect count(*) as validation_errors\nfrom `dbt-package-testing`.`dbt_kristin_2`.`stg_stripe_refund`\nwhere refund_id is null\n\n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\n\n\nselect count(*) as validation_errors\nfrom `dbt-package-testing`.`dbt_kristin_2`.`stg_stripe_refund`\nwhere refund_id is null\n\n", "column_name": "refund_id"}, "error": null, "status": null, "execution_time": 0.04207205772399902, "thread_id": "Thread-3", "timing": [{"name": "compile", "started_at": "2020-07-23T18:08:32.321303Z", "completed_at": "2020-07-23T18:08:32.350767Z"}, {"name": "execute", "started_at": "2020-07-23T18:08:32.351726Z", "completed_at": "2020-07-23T18:08:32.351729Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_unique(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "unique", "kwargs": {"column_name": "refund_id", "model": "{{ ref('stg_stripe_refund') }}"}}, "database": "dbt-package-testing", "schema": "dbt_kristin_2", "fqn": ["stripe_source", "schema_test", "unique_stg_stripe_refund_refund_id"], "unique_id": "test.stripe_source.unique_stg_stripe_refund_refund_id", "package_name": "stripe_source", "root_path": "/Users/kristin/Documents/Github/dbt_stripe/dbt_modules/stripe_source", "path": "schema_test/unique_stg_stripe_refund_refund_id.sql", "original_file_path": "models/stg_stripe.yml", "name": "unique_stg_stripe_refund_refund_id", "resource_type": "test", "alias": "unique_stg_stripe_refund_refund_id", "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "tags": [], "severity": "ERROR"}, "tags": ["schema"], "refs": [["stg_stripe_refund"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.stripe_source.stg_stripe_refund"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/stripe_source/models/stg_stripe.yml/schema_test/unique_stg_stripe_refund_refund_id.sql", "compiled": true, "compiled_sql": "\n\n\n\nselect count(*) as validation_errors\nfrom (\n\n    select\n        refund_id\n\n    from `dbt-package-testing`.`dbt_kristin_2`.`stg_stripe_refund`\n    where refund_id is not null\n    group by refund_id\n    having count(*) > 1\n\n) validation_errors\n\n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\n\n\nselect count(*) as validation_errors\nfrom (\n\n    select\n        refund_id\n\n    from `dbt-package-testing`.`dbt_kristin_2`.`stg_stripe_refund`\n    where refund_id is not null\n    group by refund_id\n    having count(*) > 1\n\n) validation_errors\n\n", "column_name": "refund_id"}, "error": null, "status": null, "execution_time": 0.03383207321166992, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2020-07-23T18:08:32.342544Z", "completed_at": "2020-07-23T18:08:32.352457Z"}, {"name": "execute", "started_at": "2020-07-23T18:08:32.353315Z", "completed_at": "2020-07-23T18:08:32.353319Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "unique_id", "model": "{{ ref('stg_stripe_invoice_line_item') }}"}}, "database": "dbt-package-testing", "schema": "dbt_kristin_2", "fqn": ["stripe_source", "schema_test", "not_null_stg_stripe_invoice_line_item_unique_id"], "unique_id": "test.stripe_source.not_null_stg_stripe_invoice_line_item_unique_id", "package_name": "stripe_source", "root_path": "/Users/kristin/Documents/Github/dbt_stripe/dbt_modules/stripe_source", "path": "schema_test/not_null_stg_stripe_invoice_line_item_unique_id.sql", "original_file_path": "models/stg_stripe.yml", "name": "not_null_stg_stripe_invoice_line_item_unique_id", "resource_type": "test", "alias": "not_null_stg_stripe_invoice_line_item_unique_id", "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "tags": [], "severity": "ERROR"}, "tags": ["schema"], "refs": [["stg_stripe_invoice_line_item"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.stripe_source.stg_stripe_invoice_line_item"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/stripe_source/models/stg_stripe.yml/schema_test/not_null_stg_stripe_invoice_line_item_unique_id.sql", "compiled": true, "compiled_sql": "\n\n\n\nselect count(*) as validation_errors\nfrom `dbt-package-testing`.`dbt_kristin_2`.`stg_stripe_invoice_line_item`\nwhere unique_id is null\n\n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\n\n\nselect count(*) as validation_errors\nfrom `dbt-package-testing`.`dbt_kristin_2`.`stg_stripe_invoice_line_item`\nwhere unique_id is null\n\n", "column_name": "unique_id"}, "error": null, "status": null, "execution_time": 0.07127022743225098, "thread_id": "Thread-2", "timing": [{"name": "compile", "started_at": "2020-07-23T18:08:32.357662Z", "completed_at": "2020-07-23T18:08:32.412821Z"}, {"name": "execute", "started_at": "2020-07-23T18:08:32.418578Z", "completed_at": "2020-07-23T18:08:32.418589Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_unique(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "unique", "kwargs": {"column_name": "unique_id", "model": "{{ ref('stg_stripe_invoice_line_item') }}"}}, "database": "dbt-package-testing", "schema": "dbt_kristin_2", "fqn": ["stripe_source", "schema_test", "unique_stg_stripe_invoice_line_item_unique_id"], "unique_id": "test.stripe_source.unique_stg_stripe_invoice_line_item_unique_id", "package_name": "stripe_source", "root_path": "/Users/kristin/Documents/Github/dbt_stripe/dbt_modules/stripe_source", "path": "schema_test/unique_stg_stripe_invoice_line_item_unique_id.sql", "original_file_path": "models/stg_stripe.yml", "name": "unique_stg_stripe_invoice_line_item_unique_id", "resource_type": "test", "alias": "unique_stg_stripe_invoice_line_item_unique_id", "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "tags": [], "severity": "ERROR"}, "tags": ["schema"], "refs": [["stg_stripe_invoice_line_item"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.stripe_source.stg_stripe_invoice_line_item"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/stripe_source/models/stg_stripe.yml/schema_test/unique_stg_stripe_invoice_line_item_unique_id.sql", "compiled": true, "compiled_sql": "\n\n\n\nselect count(*) as validation_errors\nfrom (\n\n    select\n        unique_id\n\n    from `dbt-package-testing`.`dbt_kristin_2`.`stg_stripe_invoice_line_item`\n    where unique_id is not null\n    group by unique_id\n    having count(*) > 1\n\n) validation_errors\n\n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\n\n\nselect count(*) as validation_errors\nfrom (\n\n    select\n        unique_id\n\n    from `dbt-package-testing`.`dbt_kristin_2`.`stg_stripe_invoice_line_item`\n    where unique_id is not null\n    group by unique_id\n    having count(*) > 1\n\n) validation_errors\n\n", "column_name": "unique_id"}, "error": null, "status": null, "execution_time": 0.0703728199005127, "thread_id": "Thread-4", "timing": [{"name": "compile", "started_at": "2020-07-23T18:08:32.357922Z", "completed_at": "2020-07-23T18:08:32.418184Z"}, {"name": "execute", "started_at": "2020-07-23T18:08:32.423598Z", "completed_at": "2020-07-23T18:08:32.423604Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{ config(enabled=var('using_invoices', True)) }}\n\nwith invoice as (\n\n    select *\n    from {{ ref('stg_stripe_invoice') }}  \n\n), charge as (\n\n    select *\n    from {{ ref('stg_stripe_charge') }}  \n\n), invoice_line_item as (\n\n    select *\n    from {{ ref('stg_stripe_invoice_line_item') }}  \n\n), subscription as (\n\n    select *\n    from {{ ref('stg_stripe_subscription') }}  \n\n), customer as (\n\n    select *\n    from {{ ref('stg_stripe_customer') }}  \n\n)\n\nselect \n  invoice.invoice_id,\n  invoice.number,\n  invoice.created_at as invoice_created_at,\n  invoice.status,\n  invoice.due_date,\n  invoice.amount_due,\n  invoice.subtotal,\n  invoice.tax,\n  invoice.total,\n  invoice.amount_paid,\n  invoice.amount_remaining,\n  invoice.attempt_count,\n  invoice.description as invoice_memo,\n  invoice_line_item.description as line_item_desc,\n  invoice_line_item.amount as line_item_amount,\n  invoice_line_item.quantity,\n  charge.balance_transaction_id,\n  charge.amount as charge_amount, \n  charge.status as charge_status,\n  charge.created_at as charge_created_at,\n  customer.description as customer_description,\n  customer.email as customer_email,\n  subscription.subscription_id,\n  subscription.billing as subcription_billing,\n  subscription.start_date as subscription_start_date,\n  subscription.ended_at as subscription_ended_at\nfrom invoice\nleft join charge on charge.charge_id = invoice.charge_id\nleft join invoice_line_item on invoice.invoice_id = invoice_line_item.invoice_id\nleft join subscription on invoice_line_item.subscription_id = subscription.subscription_id\nleft join customer on invoice.customer_id = customer.customer_id\norder by invoice.created_at desc", "database": "dbt-package-testing", "schema": "dbt_kristin_2", "fqn": ["stripe", "stripe_invoice_details"], "unique_id": "model.stripe.stripe_invoice_details", "package_name": "stripe", "root_path": "/Users/kristin/Documents/Github/dbt_stripe", "path": "stripe_invoice_details.sql", "original_file_path": "models/stripe_invoice_details.sql", "name": "stripe_invoice_details", "resource_type": "model", "alias": "stripe_invoice_details", "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "tags": []}, "tags": [], "refs": [["stg_stripe_invoice"], ["stg_stripe_charge"], ["stg_stripe_invoice_line_item"], ["stg_stripe_subscription"], ["stg_stripe_customer"]], "sources": [], "depends_on": {"macros": [], "nodes": ["model.stripe_source.stg_stripe_invoice", "model.stripe_source.stg_stripe_charge", "model.stripe_source.stg_stripe_invoice_line_item", "model.stripe_source.stg_stripe_subscription", "model.stripe_source.stg_stripe_customer"]}, "description": "", "columns": {"invoice_id": {"name": "invoice_id", "description": "The unique Identifier of the invoice object", "meta": {}, "data_type": null, "tags": []}, "number": {"name": "number", "description": "A unique, identifying string that appears on emails sent to the customer for this invoice. This starts with the customer\u2019s unique invoice_prefix if it is specified.", "meta": {}, "data_type": null, "tags": []}, "invoice_created_at": {"name": "invoice_created_at", "description": "Timestamp of when the invoice was created.", "meta": {}, "data_type": null, "tags": []}, "status": {"name": "status", "description": "Current status of the invoice.", "meta": {}, "data_type": null, "tags": []}, "due_date": {"name": "due_date", "description": "Date when payment for the invoice is due.", "meta": {}, "data_type": null, "tags": []}, "amount_due": {"name": "amount_due", "description": "The amount that the invoice is for. Because this query includes line item details, this amount may be repeated.", "meta": {}, "data_type": null, "tags": []}, "subtotal": {"name": "subtotal", "description": "The amount of the invoice before discounts and taxes.", "meta": {}, "data_type": null, "tags": []}, "tax": {"name": "tax", "description": "The amount of tax being charged in the invoice.", "meta": {}, "data_type": null, "tags": []}, "total": {"name": "total", "description": "The Total after discounts and taxes.", "meta": {}, "data_type": null, "tags": []}, "amount_paid": {"name": "amount_paid", "description": "The amount, if any, that the customer has paid ont he invoice", "meta": {}, "data_type": null, "tags": []}, "amount_remaining": {"name": "amount_remaining", "description": "The amount of the invoice remaining to be paid.", "meta": {}, "data_type": null, "tags": []}, "attempt_count": {"name": "attempt_count", "description": "Number of payment attempts made for this invoice, from the perspective of the payment retry schedule.", "meta": {}, "data_type": null, "tags": []}, "invoice_memo": {"name": "invoice_memo", "description": "An arbitrary string attached to the object. Often useful for displaying to users.", "meta": {}, "data_type": null, "tags": []}, "line_item_desc": {"name": "line_item_desc", "description": "The discription of the invoice line item", "meta": {}, "data_type": null, "tags": []}, "line_item_amount": {"name": "line_item_amount", "description": "The amount for the line item.", "meta": {}, "data_type": null, "tags": []}, "quantity": {"name": "quantity", "description": "The quantity of the line item.", "meta": {}, "data_type": null, "tags": []}, "balance_transaction_id": {"name": "balance_transaction_id", "description": "The ID of the balance transaction object representing payment", "meta": {}, "data_type": null, "tags": []}, "charge_amount": {"name": "charge_amount", "description": "The amount charged to the customer.", "meta": {}, "data_type": null, "tags": []}, "charge_status": {"name": "charge_status", "description": "The status of the charge for the invoice.", "meta": {}, "data_type": null, "tags": []}, "charge_created_at": {"name": "charge_created_at", "description": "When the charge for the invoice was created.", "meta": {}, "data_type": null, "tags": []}, "customer_description": {"name": "customer_description", "description": "Description of the customer.", "meta": {}, "data_type": null, "tags": []}, "customer_email": {"name": "customer_email", "description": "Email of the customer.", "meta": {}, "data_type": null, "tags": []}, "subscription_id": {"name": "subscription_id", "description": "ID of the subscription this invoice realtes to.", "meta": {}, "data_type": null, "tags": []}, "subcription_billing": {"name": "subcription_billing", "description": "How the subscription is billed", "meta": {}, "data_type": null, "tags": []}, "subscription_start_date": {"name": "subscription_start_date", "description": "The start date of the subscription", "meta": {}, "data_type": null, "tags": []}, "subscription_ended_at": {"name": "subscription_ended_at", "description": "The end date of the subscription", "meta": {}, "data_type": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/stripe.yml", "build_path": "target/compiled/stripe/models/stripe_invoice_details.sql", "compiled": true, "compiled_sql": "\n\nwith invoice as (\n\n    select *\n    from `dbt-package-testing`.`dbt_kristin_2`.`stg_stripe_invoice`  \n\n), charge as (\n\n    select *\n    from `dbt-package-testing`.`dbt_kristin_2`.`stg_stripe_charge`  \n\n), invoice_line_item as (\n\n    select *\n    from `dbt-package-testing`.`dbt_kristin_2`.`stg_stripe_invoice_line_item`  \n\n), subscription as (\n\n    select *\n    from `dbt-package-testing`.`dbt_kristin_2`.`stg_stripe_subscription`  \n\n), customer as (\n\n    select *\n    from `dbt-package-testing`.`dbt_kristin_2`.`stg_stripe_customer`  \n\n)\n\nselect \n  invoice.invoice_id,\n  invoice.number,\n  invoice.created_at as invoice_created_at,\n  invoice.status,\n  invoice.due_date,\n  invoice.amount_due,\n  invoice.subtotal,\n  invoice.tax,\n  invoice.total,\n  invoice.amount_paid,\n  invoice.amount_remaining,\n  invoice.attempt_count,\n  invoice.description as invoice_memo,\n  invoice_line_item.description as line_item_desc,\n  invoice_line_item.amount as line_item_amount,\n  invoice_line_item.quantity,\n  charge.balance_transaction_id,\n  charge.amount as charge_amount, \n  charge.status as charge_status,\n  charge.created_at as charge_created_at,\n  customer.description as customer_description,\n  customer.email as customer_email,\n  subscription.subscription_id,\n  subscription.billing as subcription_billing,\n  subscription.start_date as subscription_start_date,\n  subscription.ended_at as subscription_ended_at\nfrom invoice\nleft join charge on charge.charge_id = invoice.charge_id\nleft join invoice_line_item on invoice.invoice_id = invoice_line_item.invoice_id\nleft join subscription on invoice_line_item.subscription_id = subscription.subscription_id\nleft join customer on invoice.customer_id = customer.customer_id\norder by invoice.created_at desc", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\nwith invoice as (\n\n    select *\n    from `dbt-package-testing`.`dbt_kristin_2`.`stg_stripe_invoice`  \n\n), charge as (\n\n    select *\n    from `dbt-package-testing`.`dbt_kristin_2`.`stg_stripe_charge`  \n\n), invoice_line_item as (\n\n    select *\n    from `dbt-package-testing`.`dbt_kristin_2`.`stg_stripe_invoice_line_item`  \n\n), subscription as (\n\n    select *\n    from `dbt-package-testing`.`dbt_kristin_2`.`stg_stripe_subscription`  \n\n), customer as (\n\n    select *\n    from `dbt-package-testing`.`dbt_kristin_2`.`stg_stripe_customer`  \n\n)\n\nselect \n  invoice.invoice_id,\n  invoice.number,\n  invoice.created_at as invoice_created_at,\n  invoice.status,\n  invoice.due_date,\n  invoice.amount_due,\n  invoice.subtotal,\n  invoice.tax,\n  invoice.total,\n  invoice.amount_paid,\n  invoice.amount_remaining,\n  invoice.attempt_count,\n  invoice.description as invoice_memo,\n  invoice_line_item.description as line_item_desc,\n  invoice_line_item.amount as line_item_amount,\n  invoice_line_item.quantity,\n  charge.balance_transaction_id,\n  charge.amount as charge_amount, \n  charge.status as charge_status,\n  charge.created_at as charge_created_at,\n  customer.description as customer_description,\n  customer.email as customer_email,\n  subscription.subscription_id,\n  subscription.billing as subcription_billing,\n  subscription.start_date as subscription_start_date,\n  subscription.ended_at as subscription_ended_at\nfrom invoice\nleft join charge on charge.charge_id = invoice.charge_id\nleft join invoice_line_item on invoice.invoice_id = invoice_line_item.invoice_id\nleft join subscription on invoice_line_item.subscription_id = subscription.subscription_id\nleft join customer on invoice.customer_id = customer.customer_id\norder by invoice.created_at desc"}, "error": null, "status": null, "execution_time": 0.07050800323486328, "thread_id": "Thread-3", "timing": [{"name": "compile", "started_at": "2020-07-23T18:08:32.357798Z", "completed_at": "2020-07-23T18:08:32.423844Z"}, {"name": "execute", "started_at": "2020-07-23T18:08:32.424899Z", "completed_at": "2020-07-23T18:08:32.424905Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{ config(enabled=var('using_invoices', True)) }}\n\nwith invoice as (\n\n    select *\n    from {{ ref('stg_stripe_invoice') }}  \n\n), charge as (\n\n    select *\n    from {{ ref('stg_stripe_charge') }}  \n\n), invoice_line_item as (\n\n    select *\n    from {{ ref('stg_stripe_invoice_line_item') }}  \n\n), subscription as (\n\n    select *\n    from {{ ref('stg_stripe_subscription') }}  \n\n), customer as (\n\n    select *\n    from {{ ref('stg_stripe_customer') }}  \n\n), line_items_groups as (\n\n  select\n    invoice.invoice_id,\n    invoice.amount_due,\n    invoice.amount_paid,\n    invoice.amount_remaining,\n    invoice.created_at,\n    max(invoice_line_item.subscription_id) as subscription_id,\n    sum(invoice_line_item.amount) as total_item_amount,\n    count(distinct invoice_line_item.unique_id) as number_line_items\n  from invoice_line_item\n  join invoice on invoice.invoice_id = invoice_line_item.invoice_id\n  group by 1, 2, 3, 4, 5\n\n), grouped_by_subcription as (\n\n  select\n    subscription_id,\n    count(distinct invoice_id) as number_invoices_generated,\n    sum(amount_due) as total_amount_billed,\n    sum(amount_paid) as total_amount_paid,\n    sum(amount_remaining) total_amount_remaining,\n    max(created_at) as most_recent_invoice_created_at,\n    avg(amount_due) as average_invoice_amount,\n    avg(total_item_amount) as average_line_item_amount,\n    avg(number_line_items) as avg_num_invoice_items\n  from line_items_groups\n  group by 1\n\n)\n\n\nselect\n  subscription.subscription_id,\n  subscription.customer_id,\n  customer.description as customer_description,\n  customer.email as customer_email,\n  subscription.status,\n  subscription.start_date,\n  subscription.ended_at,\n  subscription.billing,\n  subscription.billing_cycle_anchor,\n  subscription.canceled_at,\n  subscription.created_at,\n  subscription.current_period_start,\n  subscription.current_period_end,\n  subscription.days_until_due,\n  subscription.cancel_at_period_end,\n  subscription.cancel_at,\n  number_invoices_generated,\n  total_amount_billed,\n  total_amount_paid,\n  total_amount_remaining,\n  most_recent_invoice_created_at,\n  average_invoice_amount,\n  average_line_item_amount,\n  avg_num_invoice_items\nfrom subscription\nleft join grouped_by_subcription on subscription.subscription_id = grouped_by_subcription.subscription_id\nleft join customer on subscription.customer_id = customer.customer_id\norder by subscription.created_at desc", "database": "dbt-package-testing", "schema": "dbt_kristin_2", "fqn": ["stripe", "stripe_subscription_details"], "unique_id": "model.stripe.stripe_subscription_details", "package_name": "stripe", "root_path": "/Users/kristin/Documents/Github/dbt_stripe", "path": "stripe_subscription_details.sql", "original_file_path": "models/stripe_subscription_details.sql", "name": "stripe_subscription_details", "resource_type": "model", "alias": "stripe_subscription_details", "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "tags": []}, "tags": [], "refs": [["stg_stripe_invoice"], ["stg_stripe_charge"], ["stg_stripe_invoice_line_item"], ["stg_stripe_subscription"], ["stg_stripe_customer"]], "sources": [], "depends_on": {"macros": [], "nodes": ["model.stripe_source.stg_stripe_invoice", "model.stripe_source.stg_stripe_charge", "model.stripe_source.stg_stripe_invoice_line_item", "model.stripe_source.stg_stripe_subscription", "model.stripe_source.stg_stripe_customer"]}, "description": "", "columns": {"subscription_id": {"name": "subscription_id", "description": "Unique identifier for the subscription object.", "meta": {}, "data_type": null, "tags": []}, "customer_id": {"name": "customer_id", "description": "ID of the customer who owns the subscription.", "meta": {}, "data_type": null, "tags": []}, "customer_description": {"name": "customer_description", "description": "Description of the customer who owns the subscription.", "meta": {}, "data_type": null, "tags": []}, "customer_email": {"name": "customer_email", "description": "Email of the customer who owns the subscription.", "meta": {}, "data_type": null, "tags": []}, "status": {"name": "status", "description": "Possible values are incomplete, incomplete_expired, trialing, active, past_due, canceled, or unpaid.", "meta": {}, "data_type": null, "tags": []}, "start_date": {"name": "start_date", "description": "Date when the subscription was first created. The date might differ from the created date due to backdating.", "meta": {}, "data_type": null, "tags": []}, "ended_at": {"name": "ended_at", "description": "If the subscription has ended, the date the subscription ended.", "meta": {}, "data_type": null, "tags": []}, "billing": {"name": "billing", "description": "How the description is billed.", "meta": {}, "data_type": null, "tags": []}, "billing_cycle_anchor": {"name": "billing_cycle_anchor", "description": "Determines the date of the first full invoice, and, for plans with month or year intervals, the day of the month for subsequent invoices.", "meta": {}, "data_type": null, "tags": []}, "canceled_at": {"name": "canceled_at", "description": "If the subscription has been canceled, the date of that cancellation. If the subscription was canceled with cancel_at_period_end, canceled_at will still reflect the date of the initial cancellation request, not the end of the subscription period when the subscription is automatically moved to a canceled state.", "meta": {}, "data_type": null, "tags": []}, "created_at": {"name": "created_at", "description": "Time at which the sbuscription object was created.", "meta": {}, "data_type": null, "tags": []}, "current_period_start": {"name": "current_period_start", "description": "Start of the current period that the subscription has been invoiced for.", "meta": {}, "data_type": null, "tags": []}, "current_period_end": {"name": "current_period_end", "description": "End of the current period that the subscription has been invoiced for. At the end of this period, a new invoice will be created.", "meta": {}, "data_type": null, "tags": []}, "days_until_due": {"name": "days_until_due", "description": "Number of days a customer has to pay invoices generated by this subscription. This value will be null for subscriptions where collection_method=charge_automatically.", "meta": {}, "data_type": null, "tags": []}, "cancel_at_period_end": {"name": "cancel_at_period_end", "description": "If the subscription has been canceled with the at_period_end flag set to true, cancel_at_period_end on the subscription will be true. You can use this attribute to determine whether a subscription that has a status of active is scheduled to be canceled at the end of the current period.", "meta": {}, "data_type": null, "tags": []}, "cancel_at": {"name": "cancel_at", "description": "A date in the future at which the subscription will automatically get canceled", "meta": {}, "data_type": null, "tags": []}, "number_invoices_generated": {"name": "number_invoices_generated", "description": "Number of invoices that have been generated for this subscription.", "meta": {}, "data_type": null, "tags": []}, "total_amount_billed": {"name": "total_amount_billed", "description": "The total amount that has been billed to the customer for this subscription.", "meta": {}, "data_type": null, "tags": []}, "total_amount_paid": {"name": "total_amount_paid", "description": "The total amount paid by the customer for this subsciprtion.", "meta": {}, "data_type": null, "tags": []}, "total_amount_remaining": {"name": "total_amount_remaining", "description": "Any oustanding balance for invoices related to this subscription.", "meta": {}, "data_type": null, "tags": []}, "most_recent_invoice_created_at": {"name": "most_recent_invoice_created_at", "description": "The timestamp the most recent invoice for this subscription for created.", "meta": {}, "data_type": null, "tags": []}, "average_invoice_amount": {"name": "average_invoice_amount", "description": "The average amount of invoices generated for this subscription", "meta": {}, "data_type": null, "tags": []}, "average_line_item_amount": {"name": "average_line_item_amount", "description": "The average sum of the line items for invoices generated for this subscription", "meta": {}, "data_type": null, "tags": []}, "avg_num_invoice_items": {"name": "avg_num_invoice_items", "description": "The average number of line items for invoices generated for this subscription", "meta": {}, "data_type": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/stripe.yml", "build_path": "target/compiled/stripe/models/stripe_subscription_details.sql", "compiled": true, "compiled_sql": "\n\nwith invoice as (\n\n    select *\n    from `dbt-package-testing`.`dbt_kristin_2`.`stg_stripe_invoice`  \n\n), charge as (\n\n    select *\n    from `dbt-package-testing`.`dbt_kristin_2`.`stg_stripe_charge`  \n\n), invoice_line_item as (\n\n    select *\n    from `dbt-package-testing`.`dbt_kristin_2`.`stg_stripe_invoice_line_item`  \n\n), subscription as (\n\n    select *\n    from `dbt-package-testing`.`dbt_kristin_2`.`stg_stripe_subscription`  \n\n), customer as (\n\n    select *\n    from `dbt-package-testing`.`dbt_kristin_2`.`stg_stripe_customer`  \n\n), line_items_groups as (\n\n  select\n    invoice.invoice_id,\n    invoice.amount_due,\n    invoice.amount_paid,\n    invoice.amount_remaining,\n    invoice.created_at,\n    max(invoice_line_item.subscription_id) as subscription_id,\n    sum(invoice_line_item.amount) as total_item_amount,\n    count(distinct invoice_line_item.unique_id) as number_line_items\n  from invoice_line_item\n  join invoice on invoice.invoice_id = invoice_line_item.invoice_id\n  group by 1, 2, 3, 4, 5\n\n), grouped_by_subcription as (\n\n  select\n    subscription_id,\n    count(distinct invoice_id) as number_invoices_generated,\n    sum(amount_due) as total_amount_billed,\n    sum(amount_paid) as total_amount_paid,\n    sum(amount_remaining) total_amount_remaining,\n    max(created_at) as most_recent_invoice_created_at,\n    avg(amount_due) as average_invoice_amount,\n    avg(total_item_amount) as average_line_item_amount,\n    avg(number_line_items) as avg_num_invoice_items\n  from line_items_groups\n  group by 1\n\n)\n\n\nselect\n  subscription.subscription_id,\n  subscription.customer_id,\n  customer.description as customer_description,\n  customer.email as customer_email,\n  subscription.status,\n  subscription.start_date,\n  subscription.ended_at,\n  subscription.billing,\n  subscription.billing_cycle_anchor,\n  subscription.canceled_at,\n  subscription.created_at,\n  subscription.current_period_start,\n  subscription.current_period_end,\n  subscription.days_until_due,\n  subscription.cancel_at_period_end,\n  subscription.cancel_at,\n  number_invoices_generated,\n  total_amount_billed,\n  total_amount_paid,\n  total_amount_remaining,\n  most_recent_invoice_created_at,\n  average_invoice_amount,\n  average_line_item_amount,\n  avg_num_invoice_items\nfrom subscription\nleft join grouped_by_subcription on subscription.subscription_id = grouped_by_subcription.subscription_id\nleft join customer on subscription.customer_id = customer.customer_id\norder by subscription.created_at desc", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\nwith invoice as (\n\n    select *\n    from `dbt-package-testing`.`dbt_kristin_2`.`stg_stripe_invoice`  \n\n), charge as (\n\n    select *\n    from `dbt-package-testing`.`dbt_kristin_2`.`stg_stripe_charge`  \n\n), invoice_line_item as (\n\n    select *\n    from `dbt-package-testing`.`dbt_kristin_2`.`stg_stripe_invoice_line_item`  \n\n), subscription as (\n\n    select *\n    from `dbt-package-testing`.`dbt_kristin_2`.`stg_stripe_subscription`  \n\n), customer as (\n\n    select *\n    from `dbt-package-testing`.`dbt_kristin_2`.`stg_stripe_customer`  \n\n), line_items_groups as (\n\n  select\n    invoice.invoice_id,\n    invoice.amount_due,\n    invoice.amount_paid,\n    invoice.amount_remaining,\n    invoice.created_at,\n    max(invoice_line_item.subscription_id) as subscription_id,\n    sum(invoice_line_item.amount) as total_item_amount,\n    count(distinct invoice_line_item.unique_id) as number_line_items\n  from invoice_line_item\n  join invoice on invoice.invoice_id = invoice_line_item.invoice_id\n  group by 1, 2, 3, 4, 5\n\n), grouped_by_subcription as (\n\n  select\n    subscription_id,\n    count(distinct invoice_id) as number_invoices_generated,\n    sum(amount_due) as total_amount_billed,\n    sum(amount_paid) as total_amount_paid,\n    sum(amount_remaining) total_amount_remaining,\n    max(created_at) as most_recent_invoice_created_at,\n    avg(amount_due) as average_invoice_amount,\n    avg(total_item_amount) as average_line_item_amount,\n    avg(number_line_items) as avg_num_invoice_items\n  from line_items_groups\n  group by 1\n\n)\n\n\nselect\n  subscription.subscription_id,\n  subscription.customer_id,\n  customer.description as customer_description,\n  customer.email as customer_email,\n  subscription.status,\n  subscription.start_date,\n  subscription.ended_at,\n  subscription.billing,\n  subscription.billing_cycle_anchor,\n  subscription.canceled_at,\n  subscription.created_at,\n  subscription.current_period_start,\n  subscription.current_period_end,\n  subscription.days_until_due,\n  subscription.cancel_at_period_end,\n  subscription.cancel_at,\n  number_invoices_generated,\n  total_amount_billed,\n  total_amount_paid,\n  total_amount_remaining,\n  most_recent_invoice_created_at,\n  average_invoice_amount,\n  average_line_item_amount,\n  avg_num_invoice_items\nfrom subscription\nleft join grouped_by_subcription on subscription.subscription_id = grouped_by_subcription.subscription_id\nleft join customer on subscription.customer_id = customer.customer_id\norder by subscription.created_at desc"}, "error": null, "status": null, "execution_time": 0.07108712196350098, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2020-07-23T18:08:32.399936Z", "completed_at": "2020-07-23T18:08:32.425256Z"}, {"name": "execute", "started_at": "2020-07-23T18:08:32.426507Z", "completed_at": "2020-07-23T18:08:32.426514Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "payment_method_id", "model": "{{ ref('stg_stripe_payment_method') }}"}}, "database": "dbt-package-testing", "schema": "dbt_kristin_2", "fqn": ["stripe_source", "schema_test", "not_null_stg_stripe_payment_method_payment_method_id"], "unique_id": "test.stripe_source.not_null_stg_stripe_payment_method_payment_method_id", "package_name": "stripe_source", "root_path": "/Users/kristin/Documents/Github/dbt_stripe/dbt_modules/stripe_source", "path": "schema_test/not_null_stg_stripe_payment_method_payment_method_id.sql", "original_file_path": "models/stg_stripe.yml", "name": "not_null_stg_stripe_payment_method_payment_method_id", "resource_type": "test", "alias": "not_null_stg_stripe_payment_method_payment_method_id", "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "tags": [], "severity": "ERROR"}, "tags": ["schema"], "refs": [["stg_stripe_payment_method"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.stripe_source.stg_stripe_payment_method"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/stripe_source/models/stg_stripe.yml/schema_test/not_null_stg_stripe_payment_method_payment_method_id.sql", "compiled": true, "compiled_sql": "\n\n\n\nselect count(*) as validation_errors\nfrom `dbt-package-testing`.`dbt_kristin_2`.`stg_stripe_payment_method`\nwhere payment_method_id is null\n\n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\n\n\nselect count(*) as validation_errors\nfrom `dbt-package-testing`.`dbt_kristin_2`.`stg_stripe_payment_method`\nwhere payment_method_id is null\n\n", "column_name": "payment_method_id"}, "error": null, "status": null, "execution_time": 0.08605194091796875, "thread_id": "Thread-2", "timing": [{"name": "compile", "started_at": "2020-07-23T18:08:32.430198Z", "completed_at": "2020-07-23T18:08:32.468889Z"}, {"name": "execute", "started_at": "2020-07-23T18:08:32.488093Z", "completed_at": "2020-07-23T18:08:32.488130Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_unique(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "unique", "kwargs": {"column_name": "payment_method_id", "model": "{{ ref('stg_stripe_payment_method') }}"}}, "database": "dbt-package-testing", "schema": "dbt_kristin_2", "fqn": ["stripe_source", "schema_test", "unique_stg_stripe_payment_method_payment_method_id"], "unique_id": "test.stripe_source.unique_stg_stripe_payment_method_payment_method_id", "package_name": "stripe_source", "root_path": "/Users/kristin/Documents/Github/dbt_stripe/dbt_modules/stripe_source", "path": "schema_test/unique_stg_stripe_payment_method_payment_method_id.sql", "original_file_path": "models/stg_stripe.yml", "name": "unique_stg_stripe_payment_method_payment_method_id", "resource_type": "test", "alias": "unique_stg_stripe_payment_method_payment_method_id", "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "tags": [], "severity": "ERROR"}, "tags": ["schema"], "refs": [["stg_stripe_payment_method"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.stripe_source.stg_stripe_payment_method"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/stripe_source/models/stg_stripe.yml/schema_test/unique_stg_stripe_payment_method_payment_method_id.sql", "compiled": true, "compiled_sql": "\n\n\n\nselect count(*) as validation_errors\nfrom (\n\n    select\n        payment_method_id\n\n    from `dbt-package-testing`.`dbt_kristin_2`.`stg_stripe_payment_method`\n    where payment_method_id is not null\n    group by payment_method_id\n    having count(*) > 1\n\n) validation_errors\n\n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\n\n\nselect count(*) as validation_errors\nfrom (\n\n    select\n        payment_method_id\n\n    from `dbt-package-testing`.`dbt_kristin_2`.`stg_stripe_payment_method`\n    where payment_method_id is not null\n    group by payment_method_id\n    having count(*) > 1\n\n) validation_errors\n\n", "column_name": "payment_method_id"}, "error": null, "status": null, "execution_time": 0.09211277961730957, "thread_id": "Thread-4", "timing": [{"name": "compile", "started_at": "2020-07-23T18:08:32.430649Z", "completed_at": "2020-07-23T18:08:32.485184Z"}, {"name": "execute", "started_at": "2020-07-23T18:08:32.499871Z", "completed_at": "2020-07-23T18:08:32.499882Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "with balance_transaction_joined as (\n\n    select *\n    from {{ ref('stripe_balance_transaction_joined') }}  \n\n)\n\nselect \n  balance_transaction_id,\n  created_at,\n  available_on,\n  currency,\n  amount,\n  fee,\n  net,\n  type,\n  reporting_category,\n  source,\n  description,\n  customer_facing_amount,\n  customer_facing_currency,\n  effective_at,\n  customer_id,\n  receipt_email,\n  customer_description,\n  charge_id,\n  payment_intent_id,\n  charge_created_at,\n  -- payment_method_type,\n  card_brand,\n  card_funding,\n  card_country,\n  payout_id,\n  payout_expeted_arrival_date,\n  payout_status,\n  payout_type,\n  payout_description,\n  refund_reason\nfrom balance_transaction_joined", "database": "dbt-package-testing", "schema": "dbt_kristin_2", "fqn": ["stripe", "stripe_balance_transactions"], "unique_id": "model.stripe.stripe_balance_transactions", "package_name": "stripe", "root_path": "/Users/kristin/Documents/Github/dbt_stripe", "path": "stripe_balance_transactions.sql", "original_file_path": "models/stripe_balance_transactions.sql", "name": "stripe_balance_transactions", "resource_type": "model", "alias": "stripe_balance_transactions", "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "tags": []}, "tags": [], "refs": [["stripe_balance_transaction_joined"]], "sources": [], "depends_on": {"macros": [], "nodes": ["model.stripe.stripe_balance_transaction_joined"]}, "description": "", "columns": {"balance_transaction_id": {"name": "balance_transaction_id", "description": "Unique identifier for the transaction.", "meta": {}, "data_type": null, "tags": []}, "created_at": {"name": "created_at", "description": "When the transaction took place", "meta": {}, "data_type": null, "tags": []}, "available_on": {"name": "available_on", "description": "The date the transaction\u2019s net funds will become available in the Stripe balance.", "meta": {}, "data_type": null, "tags": []}, "currency": {"name": "currency", "description": "Three-letter ISO currency code, in lowercase.", "meta": {}, "data_type": null, "tags": []}, "amount": {"name": "amount", "description": "Gross amount of the transaction, in cents.", "meta": {}, "data_type": null, "tags": []}, "fee": {"name": "fee", "description": "Fees (in cents) paid for this transaction.", "meta": {}, "data_type": null, "tags": []}, "net": {"name": "net", "description": "Net amount of the transaction, in cents.", "meta": {}, "data_type": null, "tags": []}, "type": {"name": "type", "description": "The type of tranaction.  Possible values are adjustment, advance, advance_funding, application_fee, application_fee_refund, charge, connect_collection_transfer, issuing_authorization_hold, issuing_authorization_release, issuing_dispute, issuing_transaction, payment, payment_failure_refund, payment_refund, payout, payout_cancel, payout_failure, refund, refund_failure, reserve_transaction, reserved_funds, stripe_fee, stripe_fx_fee, tax_fee, topup, topup_reversal, transfer, transfer_cancel, transfer_failure, or transfer_refund.", "meta": {}, "data_type": null, "tags": []}, "reporting_category": {"name": "reporting_category", "description": "Groupings of transactions types based on how they show in Stripe's reporting", "meta": {}, "data_type": null, "tags": []}, "source": {"name": "source", "description": "The Stripe object to which this transaction is related.", "meta": {}, "data_type": null, "tags": []}, "description": {"name": "description", "description": "An arbitrary string attached to the object. Often useful for displaying to users.", "meta": {}, "data_type": null, "tags": []}, "customer_facing_amount": {"name": "customer_facing_amount", "description": "The transaction amount that the customer sees.", "meta": {}, "data_type": null, "tags": []}, "customer_facing_currency": {"name": "customer_facing_currency", "description": "Three-letter ISO currency code that the customer sees.", "meta": {}, "data_type": null, "tags": []}, "effective_at": {"name": "effective_at", "description": "Calander day after available_at", "meta": {}, "data_type": null, "tags": []}, "customer_id": {"name": "customer_id", "description": "The customer associated with the balance transaction (based on charge or refund details)", "meta": {}, "data_type": null, "tags": []}, "receipt_email": {"name": "receipt_email", "description": "The eail the receipt was emailed to for this transaction.", "meta": {}, "data_type": null, "tags": []}, "customer_description": {"name": "customer_description", "description": "The description field associated with the customer", "meta": {}, "data_type": null, "tags": []}, "charge_id": {"name": "charge_id", "description": "The id of the charge associated with the balance transaction", "meta": {}, "data_type": null, "tags": []}, "payment_intent_id": {"name": "payment_intent_id", "description": "The id of the payment intent associated with the balance transaction", "meta": {}, "data_type": null, "tags": []}, "charge_created_at": {"name": "charge_created_at", "description": "Timestamp of the charge object associated with the balance transaction", "meta": {}, "data_type": null, "tags": []}, "payment_method_type": {"name": "payment_method_type", "description": "The id of the payment method type associated with the balance transaction", "meta": {}, "data_type": null, "tags": []}, "card_brand": {"name": "card_brand", "description": "The brand of the card associated with the balance transaction", "meta": {}, "data_type": null, "tags": []}, "card_funding": {"name": "card_funding", "description": "Card funding type. Can be credit, debit, prepaid, or unknown.", "meta": {}, "data_type": null, "tags": []}, "card_country": {"name": "card_country", "description": "The country the card was issued in.", "meta": {}, "data_type": null, "tags": []}, "paytout_id": {"name": "paytout_id", "description": "ID for the payout associated with this balance transaction", "meta": {}, "data_type": null, "tags": []}, "payout_expeted_arrival_date": {"name": "payout_expeted_arrival_date", "description": "Date the payout is expected to arrive in the bank. This factors in delays like weekends or bank holidays.", "meta": {}, "data_type": null, "tags": []}, "payout_status": {"name": "payout_status", "description": "Current status of the payout.  Can be paid, pending, in_transit, canceled or failed.", "meta": {}, "data_type": null, "tags": []}, "payout_type": {"name": "payout_type", "description": "Whether the payout was to a bank_account or card.", "meta": {}, "data_type": null, "tags": []}, "payout_description": {"name": "payout_description", "description": "An arbitrary string attached to the payout. Often useful for displaying to users.", "meta": {}, "data_type": null, "tags": []}, "refund_reason": {"name": "refund_reason", "description": "Reason for the refund, either user-provided (duplicate, fraudulent, or requested_by_customer) or generated by Stripe internally (expired_uncaptured_charge).", "meta": {}, "data_type": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/stripe.yml", "build_path": "target/compiled/stripe/models/stripe_balance_transactions.sql", "compiled": true, "compiled_sql": "with balance_transaction_joined as (\n\n    select *\n    from `dbt-package-testing`.`dbt_kristin_2`.`stripe_balance_transaction_joined`  \n\n)\n\nselect \n  balance_transaction_id,\n  created_at,\n  available_on,\n  currency,\n  amount,\n  fee,\n  net,\n  type,\n  reporting_category,\n  source,\n  description,\n  customer_facing_amount,\n  customer_facing_currency,\n  effective_at,\n  customer_id,\n  receipt_email,\n  customer_description,\n  charge_id,\n  payment_intent_id,\n  charge_created_at,\n  -- payment_method_type,\n  card_brand,\n  card_funding,\n  card_country,\n  payout_id,\n  payout_expeted_arrival_date,\n  payout_status,\n  payout_type,\n  payout_description,\n  refund_reason\nfrom balance_transaction_joined", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "with balance_transaction_joined as (\n\n    select *\n    from `dbt-package-testing`.`dbt_kristin_2`.`stripe_balance_transaction_joined`  \n\n)\n\nselect \n  balance_transaction_id,\n  created_at,\n  available_on,\n  currency,\n  amount,\n  fee,\n  net,\n  type,\n  reporting_category,\n  source,\n  description,\n  customer_facing_amount,\n  customer_facing_currency,\n  effective_at,\n  customer_id,\n  receipt_email,\n  customer_description,\n  charge_id,\n  payment_intent_id,\n  charge_created_at,\n  -- payment_method_type,\n  card_brand,\n  card_funding,\n  card_country,\n  payout_id,\n  payout_expeted_arrival_date,\n  payout_status,\n  payout_type,\n  payout_description,\n  refund_reason\nfrom balance_transaction_joined"}, "error": null, "status": null, "execution_time": 0.0964651107788086, "thread_id": "Thread-3", "timing": [{"name": "compile", "started_at": "2020-07-23T18:08:32.456930Z", "completed_at": "2020-07-23T18:08:32.523323Z"}, {"name": "execute", "started_at": "2020-07-23T18:08:32.524468Z", "completed_at": "2020-07-23T18:08:32.524513Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "with balance_transaction_joined as (\n\n    select *\n    from {{ ref('stripe_balance_transaction_joined') }}  \n\n), incomplete_charges as (\n\n    select *\n    from {{ ref('stripe_incomplete_charges') }}  \n\n), customer as (\n\n    select *\n    from {{ ref('stg_stripe_customer') }}  \n\n), transactions_grouped as (\n \n    select\n      customer_id,\n      sum(if(type in ('charge', 'payment'), amount, 0)) as total_sales,\n      sum(if(type in ('payment_refund', 'refund'), amount, 0)) as total_refunds,\n      sum(amount) as total_gross_transaction_amount,\n      sum(fee) as total_fees,\n      sum(net) as total_net_transaction_amount,\n      sum(if(type in ('payment', 'charge'), 1, 0)) as total_sales_count,\n      sum(if(type in ('payment_refund', 'refund'), 1, 0)) as total_refund_count,    \n      sum(if(type in ('charge', 'payment') and date_trunc(date(created_at), month) = date_trunc(current_date(), month),amount, 0)) as sales_this_month,\n      sum(if(type in ('payment_refund', 'refund') and date_trunc(date(created_at), month) = date_trunc(current_date(), month), amount, 0)) as refunds_this_month,\n      sum(if(date_trunc(date(created_at), month) = date_trunc(current_date(), month), amount, 0)) as gross_transaction_amount_this_month,\n      sum(if(date_trunc(date(created_at), month) = date_trunc(current_date(), month), fee, 0)) as fees_this_month,\n      sum(if(date_trunc(date(created_at), month) = date_trunc(current_date(), month), net, 0)) as net_transaction_amount_this_month,\n      sum(if(type in ('payment', 'charge') and date_trunc(date(created_at), month) = date_trunc(current_date(), month) , 1, 0)) as sales_count_this_month,\n      sum(if(type in ('payment_refund', 'refund') and date_trunc(date(created_at), month) = date_trunc(current_date(), month) , 1, 0)) as refund_count_this_month,\n      min(if(type in ('payment', 'charge'), date(created_at), null)) as first_sale_date,\n      max(if(type in ('payment', 'charge'), date(created_at), null)) as most_recent_sale_date\n    from balance_transaction_joined\n      where type in ('payment', 'charge', 'payment_refund', 'refund')\n    group by 1\n\n), failed_charges_by_customer as (\n\n    select\n      customer_id,\n      count(*) as total_failed_charge_count,\n      sum(amount) as total_failed_charge_amount,\n      sum(if(date_trunc(date(created_at), month) = date_trunc(current_date(), month), 1, 0)) as failed_charge_count_this_month,\n      sum(if(date_trunc(date(created_at), month) = date_trunc(current_date(), month), amount, 0)) as failed_charge_amount_this_month\n    from incomplete_charges\n    group by 1\n\n)\n\nselect\n  coalesce(customer.description, customer.customer_id, 'No associated customer') as customer_description,\n  customer.email,\n  customer.created_at as customer_created_at,\n  customer.is_delinquent,\n  coalesce(transactions_grouped.total_sales/100.0, 0) as total_sales,\n  coalesce(transactions_grouped.total_refunds/100.0, 0) as total_refunds,\n  coalesce(transactions_grouped.total_gross_transaction_amount/100.0, 0) as total_gross_transcation_amount,\n  coalesce(transactions_grouped.total_fees/100.0, 0) as total_fees,\n  coalesce(transactions_grouped.total_net_transaction_amount/100.0, 0) as total_net_trasnaction_amount,\n  coalesce(transactions_grouped.total_sales_count, 0) as total_sales_count,\n  coalesce(transactions_grouped.total_refund_count, 0) as total_refund_count,    \n  coalesce(transactions_grouped.sales_this_month/100.0, 0) as sales_this_month,\n  coalesce(transactions_grouped.refunds_this_month/100.0, 0) as refunds_this_month,\n  coalesce(transactions_grouped.gross_transaction_amount_this_month/100.0, 0) as gross_transaction_amount_this_month,\n  coalesce(transactions_grouped.fees_this_month/100.0, 0) as fees_this_month,\n  coalesce(transactions_grouped.net_transaction_amount_this_month/100.0, 0) as net_transaction_amount_this_month,\n  coalesce(transactions_grouped.sales_count_this_month, 0) as sales_count_this_month,\n  coalesce(transactions_grouped.refund_count_this_month, 0) as refund_count_this_month,\n  transactions_grouped.first_sale_date,\n  transactions_grouped.most_recent_sale_date,\n  coalesce(total_failed_charge_count, 0) as total_failed_charge_count,\n  coalesce(total_failed_charge_amount/100, 0) as total_failed_charge_amount,\n  coalesce(failed_charge_count_this_month, 0) as failed_charge_count_this_month,\n  coalesce(failed_charge_amount_this_month/100, 0) as failed_charge_amount_this_month,\n  customer.currency as customer_currency,\n  customer.default_card_id,\n  customer.shipping_name,\n  customer.shipping_address_line_1,\n  customer.shipping_address_line_2,\n  customer.shipping_address_city,\n  customer.shipping_address_state,\n  customer.shipping_address_country,\n  customer.shipping_address_postal_code,\n  customer.shipping_phone\nfrom customer\nleft join transactions_grouped on transactions_grouped.customer_id = customer.customer_id\nleft join failed_charges_by_customer on customer.customer_id = failed_charges_by_customer.customer_id", "database": "dbt-package-testing", "schema": "dbt_kristin_2", "fqn": ["stripe", "stripe_customer_overview"], "unique_id": "model.stripe.stripe_customer_overview", "package_name": "stripe", "root_path": "/Users/kristin/Documents/Github/dbt_stripe", "path": "stripe_customer_overview.sql", "original_file_path": "models/stripe_customer_overview.sql", "name": "stripe_customer_overview", "resource_type": "model", "alias": "stripe_customer_overview", "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "tags": []}, "tags": [], "refs": [["stripe_balance_transaction_joined"], ["stripe_incomplete_charges"], ["stg_stripe_customer"]], "sources": [], "depends_on": {"macros": [], "nodes": ["model.stripe.stripe_balance_transaction_joined", "model.stripe.stripe_incomplete_charges", "model.stripe_source.stg_stripe_customer"]}, "description": "", "columns": {"customer_description": {"name": "customer_description", "description": "An arbitrary string attached to the object. Often useful for displaying to users.", "meta": {}, "data_type": null, "tags": []}, "email": {"name": "email", "description": "Email address associated with the customer.", "meta": {}, "data_type": null, "tags": []}, "customer_created_at": {"name": "customer_created_at", "description": "Timestamp of when the customer emtry was created.", "meta": {}, "data_type": null, "tags": []}, "is_deliguent": {"name": "is_deliguent", "description": "When the customer\u2019s latest invoice is billed by charging automatically, delinquent is true if the invoice\u2019s latest charge is failed. When the customer\u2019s latest invoice is billed by sending an invoice, delinquent is true if the invoice is not paid by its due date.", "meta": {}, "data_type": null, "tags": []}, "total_sales": {"name": "total_sales", "description": "Sum of all charges made to this customer.", "meta": {}, "data_type": null, "tags": []}, "total_refunds": {"name": "total_refunds", "description": "Sum of all refunds made to this customer.", "meta": {}, "data_type": null, "tags": []}, "total_gross_transcation_amount": {"name": "total_gross_transcation_amount", "description": "Gross amount of all transactions made with this customer.", "meta": {}, "data_type": null, "tags": []}, "total_fees": {"name": "total_fees", "description": "Total fees charged on all transactions made with this customer.", "meta": {}, "data_type": null, "tags": []}, "total_net_transaction_amount": {"name": "total_net_transaction_amount", "description": "Net amount of all transactions made with this customer.", "meta": {}, "data_type": null, "tags": []}, "total_sales_count": {"name": "total_sales_count", "description": "The total number of sales made to this customer.", "meta": {}, "data_type": null, "tags": []}, "total_refund_count": {"name": "total_refund_count", "description": "The total number of refunds made to this customer.", "meta": {}, "data_type": null, "tags": []}, "sales_this_month": {"name": "sales_this_month", "description": "Sum of charges made to this customer this month.", "meta": {}, "data_type": null, "tags": []}, "refunds_this_month": {"name": "refunds_this_month", "description": "Sum of refunds made to this customer this month.", "meta": {}, "data_type": null, "tags": []}, "gross_transaction_amount_this_month": {"name": "gross_transaction_amount_this_month", "description": "Gross amount of transactions made with this customer this month.", "meta": {}, "data_type": null, "tags": []}, "fees_this_month": {"name": "fees_this_month", "description": "Total fees charged on transactions made with this customer this month.", "meta": {}, "data_type": null, "tags": []}, "net_transaction_amount_this_month": {"name": "net_transaction_amount_this_month", "description": "Net amount of transactions made with this customer this month.", "meta": {}, "data_type": null, "tags": []}, "sales_count_this_month": {"name": "sales_count_this_month", "description": "The number of sales made to this customer this month.", "meta": {}, "data_type": null, "tags": []}, "refund_count_this_month": {"name": "refund_count_this_month", "description": "The number of refunds made to this customer this month.", "meta": {}, "data_type": null, "tags": []}, "first_sale_date": {"name": "first_sale_date", "description": "Date of the first time this customer was charged.", "meta": {}, "data_type": null, "tags": []}, "most_recent_sale_date": {"name": "most_recent_sale_date", "description": "Date of the most recent time this customer was charged.", "meta": {}, "data_type": null, "tags": []}, "total_failed_charge_count": {"name": "total_failed_charge_count", "description": "The total number of incomplete charges this customer has had.", "meta": {}, "data_type": null, "tags": []}, "total_failed_charge_amount": {"name": "total_failed_charge_amount", "description": "The total amount from incomplete charges this customer has had.", "meta": {}, "data_type": null, "tags": []}, "failed_charge_count_this_month": {"name": "failed_charge_count_this_month", "description": "The number of incomplete charges this customer has had this month.", "meta": {}, "data_type": null, "tags": []}, "failed_charge_amount_this_month": {"name": "failed_charge_amount_this_month", "description": "The amount from incomplete charges this customer has had this month.", "meta": {}, "data_type": null, "tags": []}, "customer_currency": {"name": "customer_currency", "description": "Currency used by the customer.", "meta": {}, "data_type": null, "tags": []}, "default_card_id": {"name": "default_card_id", "description": "ID of the default card used by the customer.", "meta": {}, "data_type": null, "tags": []}, "shipping_name": {"name": "shipping_name", "description": "Attribute of the cusotmer's shipping address.", "meta": {}, "data_type": null, "tags": []}, "shipping_address_line_1": {"name": "shipping_address_line_1", "description": "Attribute of the cusotmer's shipping address.", "meta": {}, "data_type": null, "tags": []}, "shipping_address_line_2": {"name": "shipping_address_line_2", "description": "Attribute of the cusotmer's shipping address.", "meta": {}, "data_type": null, "tags": []}, "shipping_address_city": {"name": "shipping_address_city", "description": "Attribute of the cusotmer's shipping address.", "meta": {}, "data_type": null, "tags": []}, "shipping_address_state": {"name": "shipping_address_state", "description": "Attribute of the cusotmer's shipping address.", "meta": {}, "data_type": null, "tags": []}, "shipping_address_country": {"name": "shipping_address_country", "description": "Attribute of the cusotmer's shipping address.", "meta": {}, "data_type": null, "tags": []}, "shipping_address_postal_code": {"name": "shipping_address_postal_code", "description": "Attribute of the cusotmer's shipping address.", "meta": {}, "data_type": null, "tags": []}, "shipping_phone": {"name": "shipping_phone", "description": "Attribute of the cusotmer's shipping address.", "meta": {}, "data_type": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/stripe.yml", "build_path": "target/compiled/stripe/models/stripe_customer_overview.sql", "compiled": true, "compiled_sql": "with balance_transaction_joined as (\n\n    select *\n    from `dbt-package-testing`.`dbt_kristin_2`.`stripe_balance_transaction_joined`  \n\n), incomplete_charges as (\n\n    select *\n    from `dbt-package-testing`.`dbt_kristin_2`.`stripe_incomplete_charges`  \n\n), customer as (\n\n    select *\n    from `dbt-package-testing`.`dbt_kristin_2`.`stg_stripe_customer`  \n\n), transactions_grouped as (\n \n    select\n      customer_id,\n      sum(if(type in ('charge', 'payment'), amount, 0)) as total_sales,\n      sum(if(type in ('payment_refund', 'refund'), amount, 0)) as total_refunds,\n      sum(amount) as total_gross_transaction_amount,\n      sum(fee) as total_fees,\n      sum(net) as total_net_transaction_amount,\n      sum(if(type in ('payment', 'charge'), 1, 0)) as total_sales_count,\n      sum(if(type in ('payment_refund', 'refund'), 1, 0)) as total_refund_count,    \n      sum(if(type in ('charge', 'payment') and date_trunc(date(created_at), month) = date_trunc(current_date(), month),amount, 0)) as sales_this_month,\n      sum(if(type in ('payment_refund', 'refund') and date_trunc(date(created_at), month) = date_trunc(current_date(), month), amount, 0)) as refunds_this_month,\n      sum(if(date_trunc(date(created_at), month) = date_trunc(current_date(), month), amount, 0)) as gross_transaction_amount_this_month,\n      sum(if(date_trunc(date(created_at), month) = date_trunc(current_date(), month), fee, 0)) as fees_this_month,\n      sum(if(date_trunc(date(created_at), month) = date_trunc(current_date(), month), net, 0)) as net_transaction_amount_this_month,\n      sum(if(type in ('payment', 'charge') and date_trunc(date(created_at), month) = date_trunc(current_date(), month) , 1, 0)) as sales_count_this_month,\n      sum(if(type in ('payment_refund', 'refund') and date_trunc(date(created_at), month) = date_trunc(current_date(), month) , 1, 0)) as refund_count_this_month,\n      min(if(type in ('payment', 'charge'), date(created_at), null)) as first_sale_date,\n      max(if(type in ('payment', 'charge'), date(created_at), null)) as most_recent_sale_date\n    from balance_transaction_joined\n      where type in ('payment', 'charge', 'payment_refund', 'refund')\n    group by 1\n\n), failed_charges_by_customer as (\n\n    select\n      customer_id,\n      count(*) as total_failed_charge_count,\n      sum(amount) as total_failed_charge_amount,\n      sum(if(date_trunc(date(created_at), month) = date_trunc(current_date(), month), 1, 0)) as failed_charge_count_this_month,\n      sum(if(date_trunc(date(created_at), month) = date_trunc(current_date(), month), amount, 0)) as failed_charge_amount_this_month\n    from incomplete_charges\n    group by 1\n\n)\n\nselect\n  coalesce(customer.description, customer.customer_id, 'No associated customer') as customer_description,\n  customer.email,\n  customer.created_at as customer_created_at,\n  customer.is_delinquent,\n  coalesce(transactions_grouped.total_sales/100.0, 0) as total_sales,\n  coalesce(transactions_grouped.total_refunds/100.0, 0) as total_refunds,\n  coalesce(transactions_grouped.total_gross_transaction_amount/100.0, 0) as total_gross_transcation_amount,\n  coalesce(transactions_grouped.total_fees/100.0, 0) as total_fees,\n  coalesce(transactions_grouped.total_net_transaction_amount/100.0, 0) as total_net_trasnaction_amount,\n  coalesce(transactions_grouped.total_sales_count, 0) as total_sales_count,\n  coalesce(transactions_grouped.total_refund_count, 0) as total_refund_count,    \n  coalesce(transactions_grouped.sales_this_month/100.0, 0) as sales_this_month,\n  coalesce(transactions_grouped.refunds_this_month/100.0, 0) as refunds_this_month,\n  coalesce(transactions_grouped.gross_transaction_amount_this_month/100.0, 0) as gross_transaction_amount_this_month,\n  coalesce(transactions_grouped.fees_this_month/100.0, 0) as fees_this_month,\n  coalesce(transactions_grouped.net_transaction_amount_this_month/100.0, 0) as net_transaction_amount_this_month,\n  coalesce(transactions_grouped.sales_count_this_month, 0) as sales_count_this_month,\n  coalesce(transactions_grouped.refund_count_this_month, 0) as refund_count_this_month,\n  transactions_grouped.first_sale_date,\n  transactions_grouped.most_recent_sale_date,\n  coalesce(total_failed_charge_count, 0) as total_failed_charge_count,\n  coalesce(total_failed_charge_amount/100, 0) as total_failed_charge_amount,\n  coalesce(failed_charge_count_this_month, 0) as failed_charge_count_this_month,\n  coalesce(failed_charge_amount_this_month/100, 0) as failed_charge_amount_this_month,\n  customer.currency as customer_currency,\n  customer.default_card_id,\n  customer.shipping_name,\n  customer.shipping_address_line_1,\n  customer.shipping_address_line_2,\n  customer.shipping_address_city,\n  customer.shipping_address_state,\n  customer.shipping_address_country,\n  customer.shipping_address_postal_code,\n  customer.shipping_phone\nfrom customer\nleft join transactions_grouped on transactions_grouped.customer_id = customer.customer_id\nleft join failed_charges_by_customer on customer.customer_id = failed_charges_by_customer.customer_id", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "with balance_transaction_joined as (\n\n    select *\n    from `dbt-package-testing`.`dbt_kristin_2`.`stripe_balance_transaction_joined`  \n\n), incomplete_charges as (\n\n    select *\n    from `dbt-package-testing`.`dbt_kristin_2`.`stripe_incomplete_charges`  \n\n), customer as (\n\n    select *\n    from `dbt-package-testing`.`dbt_kristin_2`.`stg_stripe_customer`  \n\n), transactions_grouped as (\n \n    select\n      customer_id,\n      sum(if(type in ('charge', 'payment'), amount, 0)) as total_sales,\n      sum(if(type in ('payment_refund', 'refund'), amount, 0)) as total_refunds,\n      sum(amount) as total_gross_transaction_amount,\n      sum(fee) as total_fees,\n      sum(net) as total_net_transaction_amount,\n      sum(if(type in ('payment', 'charge'), 1, 0)) as total_sales_count,\n      sum(if(type in ('payment_refund', 'refund'), 1, 0)) as total_refund_count,    \n      sum(if(type in ('charge', 'payment') and date_trunc(date(created_at), month) = date_trunc(current_date(), month),amount, 0)) as sales_this_month,\n      sum(if(type in ('payment_refund', 'refund') and date_trunc(date(created_at), month) = date_trunc(current_date(), month), amount, 0)) as refunds_this_month,\n      sum(if(date_trunc(date(created_at), month) = date_trunc(current_date(), month), amount, 0)) as gross_transaction_amount_this_month,\n      sum(if(date_trunc(date(created_at), month) = date_trunc(current_date(), month), fee, 0)) as fees_this_month,\n      sum(if(date_trunc(date(created_at), month) = date_trunc(current_date(), month), net, 0)) as net_transaction_amount_this_month,\n      sum(if(type in ('payment', 'charge') and date_trunc(date(created_at), month) = date_trunc(current_date(), month) , 1, 0)) as sales_count_this_month,\n      sum(if(type in ('payment_refund', 'refund') and date_trunc(date(created_at), month) = date_trunc(current_date(), month) , 1, 0)) as refund_count_this_month,\n      min(if(type in ('payment', 'charge'), date(created_at), null)) as first_sale_date,\n      max(if(type in ('payment', 'charge'), date(created_at), null)) as most_recent_sale_date\n    from balance_transaction_joined\n      where type in ('payment', 'charge', 'payment_refund', 'refund')\n    group by 1\n\n), failed_charges_by_customer as (\n\n    select\n      customer_id,\n      count(*) as total_failed_charge_count,\n      sum(amount) as total_failed_charge_amount,\n      sum(if(date_trunc(date(created_at), month) = date_trunc(current_date(), month), 1, 0)) as failed_charge_count_this_month,\n      sum(if(date_trunc(date(created_at), month) = date_trunc(current_date(), month), amount, 0)) as failed_charge_amount_this_month\n    from incomplete_charges\n    group by 1\n\n)\n\nselect\n  coalesce(customer.description, customer.customer_id, 'No associated customer') as customer_description,\n  customer.email,\n  customer.created_at as customer_created_at,\n  customer.is_delinquent,\n  coalesce(transactions_grouped.total_sales/100.0, 0) as total_sales,\n  coalesce(transactions_grouped.total_refunds/100.0, 0) as total_refunds,\n  coalesce(transactions_grouped.total_gross_transaction_amount/100.0, 0) as total_gross_transcation_amount,\n  coalesce(transactions_grouped.total_fees/100.0, 0) as total_fees,\n  coalesce(transactions_grouped.total_net_transaction_amount/100.0, 0) as total_net_trasnaction_amount,\n  coalesce(transactions_grouped.total_sales_count, 0) as total_sales_count,\n  coalesce(transactions_grouped.total_refund_count, 0) as total_refund_count,    \n  coalesce(transactions_grouped.sales_this_month/100.0, 0) as sales_this_month,\n  coalesce(transactions_grouped.refunds_this_month/100.0, 0) as refunds_this_month,\n  coalesce(transactions_grouped.gross_transaction_amount_this_month/100.0, 0) as gross_transaction_amount_this_month,\n  coalesce(transactions_grouped.fees_this_month/100.0, 0) as fees_this_month,\n  coalesce(transactions_grouped.net_transaction_amount_this_month/100.0, 0) as net_transaction_amount_this_month,\n  coalesce(transactions_grouped.sales_count_this_month, 0) as sales_count_this_month,\n  coalesce(transactions_grouped.refund_count_this_month, 0) as refund_count_this_month,\n  transactions_grouped.first_sale_date,\n  transactions_grouped.most_recent_sale_date,\n  coalesce(total_failed_charge_count, 0) as total_failed_charge_count,\n  coalesce(total_failed_charge_amount/100, 0) as total_failed_charge_amount,\n  coalesce(failed_charge_count_this_month, 0) as failed_charge_count_this_month,\n  coalesce(failed_charge_amount_this_month/100, 0) as failed_charge_amount_this_month,\n  customer.currency as customer_currency,\n  customer.default_card_id,\n  customer.shipping_name,\n  customer.shipping_address_line_1,\n  customer.shipping_address_line_2,\n  customer.shipping_address_city,\n  customer.shipping_address_state,\n  customer.shipping_address_country,\n  customer.shipping_address_postal_code,\n  customer.shipping_phone\nfrom customer\nleft join transactions_grouped on transactions_grouped.customer_id = customer.customer_id\nleft join failed_charges_by_customer on customer.customer_id = failed_charges_by_customer.customer_id"}, "error": null, "status": null, "execution_time": 0.08438682556152344, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2020-07-23T18:08:32.474802Z", "completed_at": "2020-07-23T18:08:32.526315Z"}, {"name": "execute", "started_at": "2020-07-23T18:08:32.527161Z", "completed_at": "2020-07-23T18:08:32.527173Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "with balance_transaction_joined as (\n\n    select *\n    from {{ ref('stripe_balance_transaction_joined') }}  \n\n), incomplete_charges as (\n\n    select *\n    from {{ ref('stripe_incomplete_charges') }}  \n\n), daily_balance_transactions as (\n\n  select\n    date(case when type = 'payout' then available_on else created_at end) as date,\n    sum(case when type in ('charge', 'payment') then amount else 0 end) as total_sales,\n    sum(case when type in ('payment_refund', 'refund') then amount else 0 end) as total_refunds,\n    sum(case when type = 'adjustment' then amount else 0 end) as total_adjustments,\n    sum(case when type not in ('charge', 'payment', 'payment_refund', 'refund', 'adjustment', 'payout') and type not like '%transfer%' then amount else 0 end) as total_other_transactions,\n    sum(case when type <> 'payout' and type not like '%transfer%' then amount else 0 end) as total_gross_transaction_amount,\n    sum(case when type <> 'payout' and type not like '%transfer%' then net else 0 end) as total_net_tranactions,\n    sum(case when type = 'payout' or type like '%transfer%' then fee * -1.0 else 0 end) as total_payout_fees,\n    sum(case when type = 'payout' or type like '%transfer%' then amount else 0 end) as total_gross_payout_amount,\n    sum(case when type = 'payout' or type like '%transfer%' then fee * -1.0 else net end) as daily_net_activity,\n    sum(if(type in ('payment', 'charge'), 1, 0)) as total_sales_count,\n    sum(if(type = 'payout', 1, 0)) as total_payouts_count,\n    count(distinct case when type = 'adjustment' then coalesce(source, payout_id) end) as total_adjustments_count\n  from balance_transaction_joined\n  group by 1\n\n), daily_failed_charges as (\n\n    select\n      date(created_at) as date,\n      count(*) as total_failed_charge_count,\n      sum(amount) as total_failed_charge_amount\n    from incomplete_charges\n    group by 1\n\n)\n\nselect\n  daily_balance_transactions.date,\n  daily_balance_transactions.total_sales/100.0 as total_sales,\n  daily_balance_transactions.total_refunds/100.0 as total_refunds,\n  daily_balance_transactions.total_adjustments/100.0 as total_adjustments,\n  daily_balance_transactions.total_other_transactions/100.0 as total_other_transactions,\n  daily_balance_transactions.total_gross_transaction_amount/100.0 as total_gross_transaction_amount,\n  daily_balance_transactions.total_net_tranactions/100.0 as total_net_tranactions,\n  daily_balance_transactions.total_payout_fees/100.0 as total_payout_fees,\n  daily_balance_transactions.total_gross_payout_amount/100.0 as total_gross_payout_amount,\n  daily_balance_transactions.daily_net_activity/100.0 as daily_net_activity,\n  (daily_balance_transactions.daily_net_activity + daily_balance_transactions.total_gross_payout_amount)/100.0 as daily_end_balance,\n  daily_balance_transactions.total_sales_count,\n  daily_balance_transactions.total_payouts_count,\n  daily_balance_transactions.total_adjustments_count,\n  coalesce(daily_failed_charges.total_failed_charge_count, 0) as total_failed_charge_count,\n  coalesce(daily_failed_charges.total_failed_charge_amount/100, 0) as total_failed_charge_amount\nfrom daily_balance_transactions\nleft join daily_failed_charges on daily_balance_transactions.date = daily_failed_charges.date\norder by 1 desc", "database": "dbt-package-testing", "schema": "dbt_kristin_2", "fqn": ["stripe", "stripe_daily_overview"], "unique_id": "model.stripe.stripe_daily_overview", "package_name": "stripe", "root_path": "/Users/kristin/Documents/Github/dbt_stripe", "path": "stripe_daily_overview.sql", "original_file_path": "models/stripe_daily_overview.sql", "name": "stripe_daily_overview", "resource_type": "model", "alias": "stripe_daily_overview", "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "tags": []}, "tags": [], "refs": [["stripe_balance_transaction_joined"], ["stripe_incomplete_charges"]], "sources": [], "depends_on": {"macros": [], "nodes": ["model.stripe.stripe_balance_transaction_joined", "model.stripe.stripe_incomplete_charges"]}, "description": "", "columns": {"date": {"name": "date", "description": "The date associated with the transactions.  The available_at field is used for payouts, and the transaction created_at is used for all others.", "meta": {}, "data_type": null, "tags": []}, "total_sales": {"name": "total_sales", "description": "The sum of all sales during the reporting period.", "meta": {}, "data_type": null, "tags": []}, "total_refunds": {"name": "total_refunds", "description": "The sum of all refunds during the reporting period.", "meta": {}, "data_type": null, "tags": []}, "total_adjustments": {"name": "total_adjustments", "description": "The sum of all adjustments during the reporting period.", "meta": {}, "data_type": null, "tags": []}, "total_other_transactions": {"name": "total_other_transactions", "description": "The sum of all other transactions during the reporting period.", "meta": {}, "data_type": null, "tags": []}, "total_gross_transaction_amount": {"name": "total_gross_transaction_amount", "description": "Gross amount of all transactions (excluding payouts and transfers)", "meta": {}, "data_type": null, "tags": []}, "total_net_tranactions": {"name": "total_net_tranactions", "description": "Net amount of all transactions (excluding payouts and transfers)", "meta": {}, "data_type": null, "tags": []}, "total_payout_fees": {"name": "total_payout_fees", "description": "Fees associated with all payouts and transfers during the reporting period.", "meta": {}, "data_type": null, "tags": []}, "total_gross_payouts": {"name": "total_gross_payouts", "description": "Total amount of all payouts and transfers during the reporting period.", "meta": {}, "data_type": null, "tags": []}, "daily_net_activity": {"name": "daily_net_activity", "description": "Total balance transaction activity during the reporting period.", "meta": {}, "data_type": null, "tags": []}, "daily_end_balance": {"name": "daily_end_balance", "description": "Accout balance at the end of the reporting period.", "meta": {}, "data_type": null, "tags": []}, "total_sales_count": {"name": "total_sales_count", "description": "Number of sales transactions during the reporting period.", "meta": {}, "data_type": null, "tags": []}, "total_payouts_count": {"name": "total_payouts_count", "description": "Number of payouts made during the reporting period.", "meta": {}, "data_type": null, "tags": []}, "total_adjustments_count": {"name": "total_adjustments_count", "description": "Number of adjustments made during the reporting period.", "meta": {}, "data_type": null, "tags": []}, "total_failed_charge_count": {"name": "total_failed_charge_count", "description": "Number of incomplete charges during the reporting period.", "meta": {}, "data_type": null, "tags": []}, "total_failed_charge_amount": {"name": "total_failed_charge_amount", "description": "Total amount from incomplete charges during the reporting period.", "meta": {}, "data_type": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/stripe.yml", "build_path": "target/compiled/stripe/models/stripe_daily_overview.sql", "compiled": true, "compiled_sql": "with balance_transaction_joined as (\n\n    select *\n    from `dbt-package-testing`.`dbt_kristin_2`.`stripe_balance_transaction_joined`  \n\n), incomplete_charges as (\n\n    select *\n    from `dbt-package-testing`.`dbt_kristin_2`.`stripe_incomplete_charges`  \n\n), daily_balance_transactions as (\n\n  select\n    date(case when type = 'payout' then available_on else created_at end) as date,\n    sum(case when type in ('charge', 'payment') then amount else 0 end) as total_sales,\n    sum(case when type in ('payment_refund', 'refund') then amount else 0 end) as total_refunds,\n    sum(case when type = 'adjustment' then amount else 0 end) as total_adjustments,\n    sum(case when type not in ('charge', 'payment', 'payment_refund', 'refund', 'adjustment', 'payout') and type not like '%transfer%' then amount else 0 end) as total_other_transactions,\n    sum(case when type <> 'payout' and type not like '%transfer%' then amount else 0 end) as total_gross_transaction_amount,\n    sum(case when type <> 'payout' and type not like '%transfer%' then net else 0 end) as total_net_tranactions,\n    sum(case when type = 'payout' or type like '%transfer%' then fee * -1.0 else 0 end) as total_payout_fees,\n    sum(case when type = 'payout' or type like '%transfer%' then amount else 0 end) as total_gross_payout_amount,\n    sum(case when type = 'payout' or type like '%transfer%' then fee * -1.0 else net end) as daily_net_activity,\n    sum(if(type in ('payment', 'charge'), 1, 0)) as total_sales_count,\n    sum(if(type = 'payout', 1, 0)) as total_payouts_count,\n    count(distinct case when type = 'adjustment' then coalesce(source, payout_id) end) as total_adjustments_count\n  from balance_transaction_joined\n  group by 1\n\n), daily_failed_charges as (\n\n    select\n      date(created_at) as date,\n      count(*) as total_failed_charge_count,\n      sum(amount) as total_failed_charge_amount\n    from incomplete_charges\n    group by 1\n\n)\n\nselect\n  daily_balance_transactions.date,\n  daily_balance_transactions.total_sales/100.0 as total_sales,\n  daily_balance_transactions.total_refunds/100.0 as total_refunds,\n  daily_balance_transactions.total_adjustments/100.0 as total_adjustments,\n  daily_balance_transactions.total_other_transactions/100.0 as total_other_transactions,\n  daily_balance_transactions.total_gross_transaction_amount/100.0 as total_gross_transaction_amount,\n  daily_balance_transactions.total_net_tranactions/100.0 as total_net_tranactions,\n  daily_balance_transactions.total_payout_fees/100.0 as total_payout_fees,\n  daily_balance_transactions.total_gross_payout_amount/100.0 as total_gross_payout_amount,\n  daily_balance_transactions.daily_net_activity/100.0 as daily_net_activity,\n  (daily_balance_transactions.daily_net_activity + daily_balance_transactions.total_gross_payout_amount)/100.0 as daily_end_balance,\n  daily_balance_transactions.total_sales_count,\n  daily_balance_transactions.total_payouts_count,\n  daily_balance_transactions.total_adjustments_count,\n  coalesce(daily_failed_charges.total_failed_charge_count, 0) as total_failed_charge_count,\n  coalesce(daily_failed_charges.total_failed_charge_amount/100, 0) as total_failed_charge_amount\nfrom daily_balance_transactions\nleft join daily_failed_charges on daily_balance_transactions.date = daily_failed_charges.date\norder by 1 desc", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "with balance_transaction_joined as (\n\n    select *\n    from `dbt-package-testing`.`dbt_kristin_2`.`stripe_balance_transaction_joined`  \n\n), incomplete_charges as (\n\n    select *\n    from `dbt-package-testing`.`dbt_kristin_2`.`stripe_incomplete_charges`  \n\n), daily_balance_transactions as (\n\n  select\n    date(case when type = 'payout' then available_on else created_at end) as date,\n    sum(case when type in ('charge', 'payment') then amount else 0 end) as total_sales,\n    sum(case when type in ('payment_refund', 'refund') then amount else 0 end) as total_refunds,\n    sum(case when type = 'adjustment' then amount else 0 end) as total_adjustments,\n    sum(case when type not in ('charge', 'payment', 'payment_refund', 'refund', 'adjustment', 'payout') and type not like '%transfer%' then amount else 0 end) as total_other_transactions,\n    sum(case when type <> 'payout' and type not like '%transfer%' then amount else 0 end) as total_gross_transaction_amount,\n    sum(case when type <> 'payout' and type not like '%transfer%' then net else 0 end) as total_net_tranactions,\n    sum(case when type = 'payout' or type like '%transfer%' then fee * -1.0 else 0 end) as total_payout_fees,\n    sum(case when type = 'payout' or type like '%transfer%' then amount else 0 end) as total_gross_payout_amount,\n    sum(case when type = 'payout' or type like '%transfer%' then fee * -1.0 else net end) as daily_net_activity,\n    sum(if(type in ('payment', 'charge'), 1, 0)) as total_sales_count,\n    sum(if(type = 'payout', 1, 0)) as total_payouts_count,\n    count(distinct case when type = 'adjustment' then coalesce(source, payout_id) end) as total_adjustments_count\n  from balance_transaction_joined\n  group by 1\n\n), daily_failed_charges as (\n\n    select\n      date(created_at) as date,\n      count(*) as total_failed_charge_count,\n      sum(amount) as total_failed_charge_amount\n    from incomplete_charges\n    group by 1\n\n)\n\nselect\n  daily_balance_transactions.date,\n  daily_balance_transactions.total_sales/100.0 as total_sales,\n  daily_balance_transactions.total_refunds/100.0 as total_refunds,\n  daily_balance_transactions.total_adjustments/100.0 as total_adjustments,\n  daily_balance_transactions.total_other_transactions/100.0 as total_other_transactions,\n  daily_balance_transactions.total_gross_transaction_amount/100.0 as total_gross_transaction_amount,\n  daily_balance_transactions.total_net_tranactions/100.0 as total_net_tranactions,\n  daily_balance_transactions.total_payout_fees/100.0 as total_payout_fees,\n  daily_balance_transactions.total_gross_payout_amount/100.0 as total_gross_payout_amount,\n  daily_balance_transactions.daily_net_activity/100.0 as daily_net_activity,\n  (daily_balance_transactions.daily_net_activity + daily_balance_transactions.total_gross_payout_amount)/100.0 as daily_end_balance,\n  daily_balance_transactions.total_sales_count,\n  daily_balance_transactions.total_payouts_count,\n  daily_balance_transactions.total_adjustments_count,\n  coalesce(daily_failed_charges.total_failed_charge_count, 0) as total_failed_charge_count,\n  coalesce(daily_failed_charges.total_failed_charge_amount/100, 0) as total_failed_charge_amount\nfrom daily_balance_transactions\nleft join daily_failed_charges on daily_balance_transactions.date = daily_failed_charges.date\norder by 1 desc"}, "error": null, "status": null, "execution_time": 0.06957411766052246, "thread_id": "Thread-2", "timing": [{"name": "compile", "started_at": "2020-07-23T18:08:32.527677Z", "completed_at": "2020-07-23T18:08:32.584564Z"}, {"name": "execute", "started_at": "2020-07-23T18:08:32.593575Z", "completed_at": "2020-07-23T18:08:32.593585Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "with balance_transaction_joined as (\n\n    select *\n    from {{ ref('stripe_balance_transaction_joined') }}  \n\n), incomplete_charges as (\n\n    select *\n    from {{ ref('stripe_incomplete_charges') }}  \n\n), monthly_balance_transactions as (\n\n  select\n    date_trunc(date(case when type = 'payout' then available_on else created_at end), month) as month,\n    sum(case when type in ('charge', 'payment') then amount else 0 end) as total_sales,\n    sum(case when type in ('payment_refund', 'refund') then amount else 0 end) as total_refunds,\n    sum(case when type = 'adjustment' then amount else 0 end) as total_adjustments,\n    sum(case when type not in ('charge', 'payment', 'payment_refund', 'refund', 'adjustment', 'payout') and type not like '%transfer%' then amount else 0 end) as total_other_transactions,\n    sum(case when type <> 'payout' and type not like '%transfer%' then amount else 0 end) as total_gross_transaction_amount,\n    sum(case when type <> 'payout' and type not like '%transfer%' then net else 0 end) as total_net_tranactions,\n    sum(case when type = 'payout' or type like '%transfer%' then fee * -1.0 else 0 end) as total_payout_fees,\n    sum(case when type = 'payout' or type like '%transfer%' then amount else 0 end) as total_gross_payout_amount,\n    sum(case when type = 'payout' or type like '%transfer%' then fee * -1.0 else net end) as monthly_net_activity,\n    sum(if(type in ('payment', 'charge'), 1, 0)) as total_sales_count,\n    sum(if(type = 'payout', 1, 0)) as total_payout_count,\n    count(distinct case when type = 'adjustment' then coalesce(source, payout_id) end) as total_adjustments_count\n  from balance_transaction_joined\n  group by 1\n\n), monthly_failed_charges as (\n\n    select\n      date_trunc(date(created_at), month) as month,\n      count(*) as total_failed_charge_count,\n      sum(amount) as total_failed_charge_amount\n    from incomplete_charges\n    group by 1\n\n)\n\nselect\n  monthly_balance_transactions.month,\n  monthly_balance_transactions.total_sales/100.0 as total_sales,\n  monthly_balance_transactions.total_refunds/100.0 as total_refunds,\n  monthly_balance_transactions.total_adjustments/100.0 as total_adjustments,\n  monthly_balance_transactions.total_other_transactions/100.0 as total_other_transactions,\n  monthly_balance_transactions.total_gross_transaction_amount/100.0 as total_gross_transaction_amount,\n  monthly_balance_transactions.total_net_tranactions/100.0 as total_net_tranactions,\n  monthly_balance_transactions.total_payout_fees/100.0 as total_payout_fees,\n  monthly_balance_transactions.total_gross_payout_amount/100.0 as total_gross_payout_amount,\n  monthly_balance_transactions.monthly_net_activity/100.0 as monthly_net_activity,\n  (monthly_balance_transactions.monthly_net_activity + monthly_balance_transactions.total_gross_payout_amount)/100.0 as monthly_end_balance,\n  monthly_balance_transactions.total_sales_count,\n  monthly_balance_transactions.total_payout_count,\n  monthly_balance_transactions.total_adjustments_count,\n  coalesce(monthly_failed_charges.total_failed_charge_count, 0) as total_failed_charge_count,\n  coalesce(monthly_failed_charges.total_failed_charge_amount/100, 0) as total_failed_charge_amount\nfrom monthly_balance_transactions\nleft join monthly_failed_charges on monthly_balance_transactions.month = monthly_failed_charges.month\norder by 1 desc", "database": "dbt-package-testing", "schema": "dbt_kristin_2", "fqn": ["stripe", "stripe_monthly_overview"], "unique_id": "model.stripe.stripe_monthly_overview", "package_name": "stripe", "root_path": "/Users/kristin/Documents/Github/dbt_stripe", "path": "stripe_monthly_overview.sql", "original_file_path": "models/stripe_monthly_overview.sql", "name": "stripe_monthly_overview", "resource_type": "model", "alias": "stripe_monthly_overview", "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "tags": []}, "tags": [], "refs": [["stripe_balance_transaction_joined"], ["stripe_incomplete_charges"]], "sources": [], "depends_on": {"macros": [], "nodes": ["model.stripe.stripe_balance_transaction_joined", "model.stripe.stripe_incomplete_charges"]}, "description": "", "columns": {"month": {"name": "month", "description": "The first day fo the week associated with the transactions.  The available_at field is used for payouts, and the transaction created_at is used for all others.", "meta": {}, "data_type": null, "tags": []}, "total_sales": {"name": "total_sales", "description": "The sum of all sales during the reporting period.", "meta": {}, "data_type": null, "tags": []}, "total_refunds": {"name": "total_refunds", "description": "The sum of all refunds during the reporting period.", "meta": {}, "data_type": null, "tags": []}, "total_adjustments": {"name": "total_adjustments", "description": "The sum of all adjustments during the reporting period.", "meta": {}, "data_type": null, "tags": []}, "total_other_transactions": {"name": "total_other_transactions", "description": "The sum of all other transactions during the reporting period.", "meta": {}, "data_type": null, "tags": []}, "total_gross_transaction_amount": {"name": "total_gross_transaction_amount", "description": "Gross amount of all transactions (excluding payouts and transfers)", "meta": {}, "data_type": null, "tags": []}, "total_net_tranactions": {"name": "total_net_tranactions", "description": "Net amount of all transactions (excluding payouts and transfers)", "meta": {}, "data_type": null, "tags": []}, "total_payout_fees": {"name": "total_payout_fees", "description": "Fees associated with all payouts and transfers during the reporting period.", "meta": {}, "data_type": null, "tags": []}, "total_gross_payouts": {"name": "total_gross_payouts", "description": "Total amount of all payouts and transfers during the reporting period.", "meta": {}, "data_type": null, "tags": []}, "monthly_net_activity": {"name": "monthly_net_activity", "description": "Total balance transaction activity during the reporting period.", "meta": {}, "data_type": null, "tags": []}, "monthly_end_balance": {"name": "monthly_end_balance", "description": "Accout balance at the end of the reporting period.", "meta": {}, "data_type": null, "tags": []}, "total_sales_count": {"name": "total_sales_count", "description": "Number of sales transactions during the reporting period.", "meta": {}, "data_type": null, "tags": []}, "total_payouts_count": {"name": "total_payouts_count", "description": "Number of payouts made during the reporting period.", "meta": {}, "data_type": null, "tags": []}, "total_adjustments_count": {"name": "total_adjustments_count", "description": "Number of adjustments made during the reporting period.", "meta": {}, "data_type": null, "tags": []}, "total_failed_charge_count": {"name": "total_failed_charge_count", "description": "Number of incomplete charges during the reporting period.", "meta": {}, "data_type": null, "tags": []}, "total_failed_charge_amount": {"name": "total_failed_charge_amount", "description": "Total amount from incomplete charges during the reporting period.", "meta": {}, "data_type": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/stripe.yml", "build_path": "target/compiled/stripe/models/stripe_monthly_overview.sql", "compiled": true, "compiled_sql": "with balance_transaction_joined as (\n\n    select *\n    from `dbt-package-testing`.`dbt_kristin_2`.`stripe_balance_transaction_joined`  \n\n), incomplete_charges as (\n\n    select *\n    from `dbt-package-testing`.`dbt_kristin_2`.`stripe_incomplete_charges`  \n\n), monthly_balance_transactions as (\n\n  select\n    date_trunc(date(case when type = 'payout' then available_on else created_at end), month) as month,\n    sum(case when type in ('charge', 'payment') then amount else 0 end) as total_sales,\n    sum(case when type in ('payment_refund', 'refund') then amount else 0 end) as total_refunds,\n    sum(case when type = 'adjustment' then amount else 0 end) as total_adjustments,\n    sum(case when type not in ('charge', 'payment', 'payment_refund', 'refund', 'adjustment', 'payout') and type not like '%transfer%' then amount else 0 end) as total_other_transactions,\n    sum(case when type <> 'payout' and type not like '%transfer%' then amount else 0 end) as total_gross_transaction_amount,\n    sum(case when type <> 'payout' and type not like '%transfer%' then net else 0 end) as total_net_tranactions,\n    sum(case when type = 'payout' or type like '%transfer%' then fee * -1.0 else 0 end) as total_payout_fees,\n    sum(case when type = 'payout' or type like '%transfer%' then amount else 0 end) as total_gross_payout_amount,\n    sum(case when type = 'payout' or type like '%transfer%' then fee * -1.0 else net end) as monthly_net_activity,\n    sum(if(type in ('payment', 'charge'), 1, 0)) as total_sales_count,\n    sum(if(type = 'payout', 1, 0)) as total_payout_count,\n    count(distinct case when type = 'adjustment' then coalesce(source, payout_id) end) as total_adjustments_count\n  from balance_transaction_joined\n  group by 1\n\n), monthly_failed_charges as (\n\n    select\n      date_trunc(date(created_at), month) as month,\n      count(*) as total_failed_charge_count,\n      sum(amount) as total_failed_charge_amount\n    from incomplete_charges\n    group by 1\n\n)\n\nselect\n  monthly_balance_transactions.month,\n  monthly_balance_transactions.total_sales/100.0 as total_sales,\n  monthly_balance_transactions.total_refunds/100.0 as total_refunds,\n  monthly_balance_transactions.total_adjustments/100.0 as total_adjustments,\n  monthly_balance_transactions.total_other_transactions/100.0 as total_other_transactions,\n  monthly_balance_transactions.total_gross_transaction_amount/100.0 as total_gross_transaction_amount,\n  monthly_balance_transactions.total_net_tranactions/100.0 as total_net_tranactions,\n  monthly_balance_transactions.total_payout_fees/100.0 as total_payout_fees,\n  monthly_balance_transactions.total_gross_payout_amount/100.0 as total_gross_payout_amount,\n  monthly_balance_transactions.monthly_net_activity/100.0 as monthly_net_activity,\n  (monthly_balance_transactions.monthly_net_activity + monthly_balance_transactions.total_gross_payout_amount)/100.0 as monthly_end_balance,\n  monthly_balance_transactions.total_sales_count,\n  monthly_balance_transactions.total_payout_count,\n  monthly_balance_transactions.total_adjustments_count,\n  coalesce(monthly_failed_charges.total_failed_charge_count, 0) as total_failed_charge_count,\n  coalesce(monthly_failed_charges.total_failed_charge_amount/100, 0) as total_failed_charge_amount\nfrom monthly_balance_transactions\nleft join monthly_failed_charges on monthly_balance_transactions.month = monthly_failed_charges.month\norder by 1 desc", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "with balance_transaction_joined as (\n\n    select *\n    from `dbt-package-testing`.`dbt_kristin_2`.`stripe_balance_transaction_joined`  \n\n), incomplete_charges as (\n\n    select *\n    from `dbt-package-testing`.`dbt_kristin_2`.`stripe_incomplete_charges`  \n\n), monthly_balance_transactions as (\n\n  select\n    date_trunc(date(case when type = 'payout' then available_on else created_at end), month) as month,\n    sum(case when type in ('charge', 'payment') then amount else 0 end) as total_sales,\n    sum(case when type in ('payment_refund', 'refund') then amount else 0 end) as total_refunds,\n    sum(case when type = 'adjustment' then amount else 0 end) as total_adjustments,\n    sum(case when type not in ('charge', 'payment', 'payment_refund', 'refund', 'adjustment', 'payout') and type not like '%transfer%' then amount else 0 end) as total_other_transactions,\n    sum(case when type <> 'payout' and type not like '%transfer%' then amount else 0 end) as total_gross_transaction_amount,\n    sum(case when type <> 'payout' and type not like '%transfer%' then net else 0 end) as total_net_tranactions,\n    sum(case when type = 'payout' or type like '%transfer%' then fee * -1.0 else 0 end) as total_payout_fees,\n    sum(case when type = 'payout' or type like '%transfer%' then amount else 0 end) as total_gross_payout_amount,\n    sum(case when type = 'payout' or type like '%transfer%' then fee * -1.0 else net end) as monthly_net_activity,\n    sum(if(type in ('payment', 'charge'), 1, 0)) as total_sales_count,\n    sum(if(type = 'payout', 1, 0)) as total_payout_count,\n    count(distinct case when type = 'adjustment' then coalesce(source, payout_id) end) as total_adjustments_count\n  from balance_transaction_joined\n  group by 1\n\n), monthly_failed_charges as (\n\n    select\n      date_trunc(date(created_at), month) as month,\n      count(*) as total_failed_charge_count,\n      sum(amount) as total_failed_charge_amount\n    from incomplete_charges\n    group by 1\n\n)\n\nselect\n  monthly_balance_transactions.month,\n  monthly_balance_transactions.total_sales/100.0 as total_sales,\n  monthly_balance_transactions.total_refunds/100.0 as total_refunds,\n  monthly_balance_transactions.total_adjustments/100.0 as total_adjustments,\n  monthly_balance_transactions.total_other_transactions/100.0 as total_other_transactions,\n  monthly_balance_transactions.total_gross_transaction_amount/100.0 as total_gross_transaction_amount,\n  monthly_balance_transactions.total_net_tranactions/100.0 as total_net_tranactions,\n  monthly_balance_transactions.total_payout_fees/100.0 as total_payout_fees,\n  monthly_balance_transactions.total_gross_payout_amount/100.0 as total_gross_payout_amount,\n  monthly_balance_transactions.monthly_net_activity/100.0 as monthly_net_activity,\n  (monthly_balance_transactions.monthly_net_activity + monthly_balance_transactions.total_gross_payout_amount)/100.0 as monthly_end_balance,\n  monthly_balance_transactions.total_sales_count,\n  monthly_balance_transactions.total_payout_count,\n  monthly_balance_transactions.total_adjustments_count,\n  coalesce(monthly_failed_charges.total_failed_charge_count, 0) as total_failed_charge_count,\n  coalesce(monthly_failed_charges.total_failed_charge_amount/100, 0) as total_failed_charge_amount\nfrom monthly_balance_transactions\nleft join monthly_failed_charges on monthly_balance_transactions.month = monthly_failed_charges.month\norder by 1 desc"}, "error": null, "status": null, "execution_time": 0.0696568489074707, "thread_id": "Thread-4", "timing": [{"name": "compile", "started_at": "2020-07-23T18:08:32.527858Z", "completed_at": "2020-07-23T18:08:32.593091Z"}, {"name": "execute", "started_at": "2020-07-23T18:08:32.593957Z", "completed_at": "2020-07-23T18:08:32.593964Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "with balance_transaction_joined as (\n\n    select *\n    from {{ ref('stripe_balance_transaction_joined') }}  \n\n), incomplete_charges as (\n\n    select *\n    from {{ ref('stripe_incomplete_charges') }}  \n\n), quarterly_balance_transactions as (\n\n  select\n    date_trunc(date(case when type = 'payout' then available_on else created_at end), quarter) as quarter,\n    sum(case when type in ('charge', 'payment') then amount else 0 end) as total_sales,\n    sum(case when type in ('payment_refund', 'refund') then amount else 0 end) as total_refunds,\n    sum(case when type = 'adjustment' then amount else 0 end) as total_adjustments,\n    sum(case when type not in ('charge', 'payment', 'payment_refund', 'refund', 'adjustment', 'payout') and type not like '%transfer%' then amount else 0 end) as total_other_transactions,\n    sum(case when type <> 'payout' and type not like '%transfer%' then amount else 0 end) as total_gross_transaction_amount,\n    sum(case when type <> 'payout' and type not like '%transfer%' then net else 0 end) as total_net_tranactions,\n    sum(case when type = 'payout' or type like '%transfer%' then fee * -1.0 else 0 end) as total_payout_fees,\n    sum(case when type = 'payout' or type like '%transfer%' then amount else 0 end) as total_gross_payout_amount,\n    sum(case when type = 'payout' or type like '%transfer%' then fee * -1.0 else net end) as quarterly_net_activity,\n    sum(if(type in ('payment', 'charge'), 1, 0)) as total_sales_count,\n    sum(if(type = 'payout', 1, 0)) as total_payout_count,\n    count(distinct case when type = 'adjustment' then coalesce(source, payout_id) end) as total_adjustments_count\n  from balance_transaction_joined\n  group by 1\n\n), quarterly_failed_charges as (\n\n    select\n      date_trunc(date(created_at), quarter) as quarter,\n      count(*) as total_failed_charge_count,\n      sum(amount) as total_failed_charge_amount\n    from incomplete_charges\n    group by 1\n\n)\n\nselect\n  quarterly_balance_transactions.quarter,\n  quarterly_balance_transactions.total_sales/100.0 as total_sales,\n  quarterly_balance_transactions.total_refunds/100.0 as total_refunds,\n  quarterly_balance_transactions.total_adjustments/100.0 as total_adjustments,\n  quarterly_balance_transactions.total_other_transactions/100.0 as total_other_transactions,\n  quarterly_balance_transactions.total_gross_transaction_amount/100.0 as total_gross_transaction_amount,\n  quarterly_balance_transactions.total_net_tranactions/100.0 as total_net_tranactions,\n  quarterly_balance_transactions.total_payout_fees/100.0 as total_payout_fees,\n  quarterly_balance_transactions.total_gross_payout_amount/100.0 as total_gross_payout_amount,\n  quarterly_balance_transactions.quarterly_net_activity/100.0 as quarterly_net_activity,\n  (quarterly_balance_transactions.quarterly_net_activity + quarterly_balance_transactions.total_gross_payout_amount)/100.0 as quarterly_end_balance,\n  quarterly_balance_transactions.total_sales_count,\n  quarterly_balance_transactions.total_payout_count,\n  quarterly_balance_transactions.total_adjustments_count,\n  coalesce(quarterly_failed_charges.total_failed_charge_count, 0) as total_failed_charge_count,\n  coalesce(quarterly_failed_charges.total_failed_charge_amount/100, 0) as total_failed_charge_amount\nfrom quarterly_balance_transactions\nleft join quarterly_failed_charges on quarterly_balance_transactions.quarter = quarterly_failed_charges.quarter\norder by 1 desc", "database": "dbt-package-testing", "schema": "dbt_kristin_2", "fqn": ["stripe", "stripe_quarterly_overview"], "unique_id": "model.stripe.stripe_quarterly_overview", "package_name": "stripe", "root_path": "/Users/kristin/Documents/Github/dbt_stripe", "path": "stripe_quarterly_overview.sql", "original_file_path": "models/stripe_quarterly_overview.sql", "name": "stripe_quarterly_overview", "resource_type": "model", "alias": "stripe_quarterly_overview", "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "tags": []}, "tags": [], "refs": [["stripe_balance_transaction_joined"], ["stripe_incomplete_charges"]], "sources": [], "depends_on": {"macros": [], "nodes": ["model.stripe.stripe_balance_transaction_joined", "model.stripe.stripe_incomplete_charges"]}, "description": "", "columns": {"quarter": {"name": "quarter", "description": "The calander quarter associated with the transactions.  The available_at field is used for payouts, and the transaction created_at is used for all others.", "meta": {}, "data_type": null, "tags": []}, "total_sales": {"name": "total_sales", "description": "The sum of all sales during the reporting period.", "meta": {}, "data_type": null, "tags": []}, "total_refunds": {"name": "total_refunds", "description": "The sum of all refunds during the reporting period.", "meta": {}, "data_type": null, "tags": []}, "total_adjustments": {"name": "total_adjustments", "description": "The sum of all adjustments during the reporting period.", "meta": {}, "data_type": null, "tags": []}, "total_other_transactions": {"name": "total_other_transactions", "description": "The sum of all other transactions during the reporting period.", "meta": {}, "data_type": null, "tags": []}, "total_gross_transaction_amount": {"name": "total_gross_transaction_amount", "description": "Gross amount of all transactions (excluding payouts and transfers)", "meta": {}, "data_type": null, "tags": []}, "total_net_tranactions": {"name": "total_net_tranactions", "description": "Net amount of all transactions (excluding payouts and transfers)", "meta": {}, "data_type": null, "tags": []}, "total_payout_fees": {"name": "total_payout_fees", "description": "Fees associated with all payouts and transfers during the reporting period.", "meta": {}, "data_type": null, "tags": []}, "total_gross_payouts": {"name": "total_gross_payouts", "description": "Total amount of all payouts and transfers during the reporting period.", "meta": {}, "data_type": null, "tags": []}, "quarterly_net_activity": {"name": "quarterly_net_activity", "description": "Total balance transaction activity during the reporting period.", "meta": {}, "data_type": null, "tags": []}, "quarterly_end_balance": {"name": "quarterly_end_balance", "description": "Accout balance at the end of the reporting period.", "meta": {}, "data_type": null, "tags": []}, "total_sales_count": {"name": "total_sales_count", "description": "Number of sales transactions during the reporting period.", "meta": {}, "data_type": null, "tags": []}, "total_payouts_count": {"name": "total_payouts_count", "description": "Number of payouts made during the reporting period.", "meta": {}, "data_type": null, "tags": []}, "total_adjustments_count": {"name": "total_adjustments_count", "description": "Number of adjustments made during the reporting period.", "meta": {}, "data_type": null, "tags": []}, "total_failed_charge_count": {"name": "total_failed_charge_count", "description": "Number of incomplete charges during the reporting period.", "meta": {}, "data_type": null, "tags": []}, "total_failed_charge_amount": {"name": "total_failed_charge_amount", "description": "Total amount from incomplete charges during the reporting period.", "meta": {}, "data_type": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/stripe.yml", "build_path": "target/compiled/stripe/models/stripe_quarterly_overview.sql", "compiled": true, "compiled_sql": "with balance_transaction_joined as (\n\n    select *\n    from `dbt-package-testing`.`dbt_kristin_2`.`stripe_balance_transaction_joined`  \n\n), incomplete_charges as (\n\n    select *\n    from `dbt-package-testing`.`dbt_kristin_2`.`stripe_incomplete_charges`  \n\n), quarterly_balance_transactions as (\n\n  select\n    date_trunc(date(case when type = 'payout' then available_on else created_at end), quarter) as quarter,\n    sum(case when type in ('charge', 'payment') then amount else 0 end) as total_sales,\n    sum(case when type in ('payment_refund', 'refund') then amount else 0 end) as total_refunds,\n    sum(case when type = 'adjustment' then amount else 0 end) as total_adjustments,\n    sum(case when type not in ('charge', 'payment', 'payment_refund', 'refund', 'adjustment', 'payout') and type not like '%transfer%' then amount else 0 end) as total_other_transactions,\n    sum(case when type <> 'payout' and type not like '%transfer%' then amount else 0 end) as total_gross_transaction_amount,\n    sum(case when type <> 'payout' and type not like '%transfer%' then net else 0 end) as total_net_tranactions,\n    sum(case when type = 'payout' or type like '%transfer%' then fee * -1.0 else 0 end) as total_payout_fees,\n    sum(case when type = 'payout' or type like '%transfer%' then amount else 0 end) as total_gross_payout_amount,\n    sum(case when type = 'payout' or type like '%transfer%' then fee * -1.0 else net end) as quarterly_net_activity,\n    sum(if(type in ('payment', 'charge'), 1, 0)) as total_sales_count,\n    sum(if(type = 'payout', 1, 0)) as total_payout_count,\n    count(distinct case when type = 'adjustment' then coalesce(source, payout_id) end) as total_adjustments_count\n  from balance_transaction_joined\n  group by 1\n\n), quarterly_failed_charges as (\n\n    select\n      date_trunc(date(created_at), quarter) as quarter,\n      count(*) as total_failed_charge_count,\n      sum(amount) as total_failed_charge_amount\n    from incomplete_charges\n    group by 1\n\n)\n\nselect\n  quarterly_balance_transactions.quarter,\n  quarterly_balance_transactions.total_sales/100.0 as total_sales,\n  quarterly_balance_transactions.total_refunds/100.0 as total_refunds,\n  quarterly_balance_transactions.total_adjustments/100.0 as total_adjustments,\n  quarterly_balance_transactions.total_other_transactions/100.0 as total_other_transactions,\n  quarterly_balance_transactions.total_gross_transaction_amount/100.0 as total_gross_transaction_amount,\n  quarterly_balance_transactions.total_net_tranactions/100.0 as total_net_tranactions,\n  quarterly_balance_transactions.total_payout_fees/100.0 as total_payout_fees,\n  quarterly_balance_transactions.total_gross_payout_amount/100.0 as total_gross_payout_amount,\n  quarterly_balance_transactions.quarterly_net_activity/100.0 as quarterly_net_activity,\n  (quarterly_balance_transactions.quarterly_net_activity + quarterly_balance_transactions.total_gross_payout_amount)/100.0 as quarterly_end_balance,\n  quarterly_balance_transactions.total_sales_count,\n  quarterly_balance_transactions.total_payout_count,\n  quarterly_balance_transactions.total_adjustments_count,\n  coalesce(quarterly_failed_charges.total_failed_charge_count, 0) as total_failed_charge_count,\n  coalesce(quarterly_failed_charges.total_failed_charge_amount/100, 0) as total_failed_charge_amount\nfrom quarterly_balance_transactions\nleft join quarterly_failed_charges on quarterly_balance_transactions.quarter = quarterly_failed_charges.quarter\norder by 1 desc", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "with balance_transaction_joined as (\n\n    select *\n    from `dbt-package-testing`.`dbt_kristin_2`.`stripe_balance_transaction_joined`  \n\n), incomplete_charges as (\n\n    select *\n    from `dbt-package-testing`.`dbt_kristin_2`.`stripe_incomplete_charges`  \n\n), quarterly_balance_transactions as (\n\n  select\n    date_trunc(date(case when type = 'payout' then available_on else created_at end), quarter) as quarter,\n    sum(case when type in ('charge', 'payment') then amount else 0 end) as total_sales,\n    sum(case when type in ('payment_refund', 'refund') then amount else 0 end) as total_refunds,\n    sum(case when type = 'adjustment' then amount else 0 end) as total_adjustments,\n    sum(case when type not in ('charge', 'payment', 'payment_refund', 'refund', 'adjustment', 'payout') and type not like '%transfer%' then amount else 0 end) as total_other_transactions,\n    sum(case when type <> 'payout' and type not like '%transfer%' then amount else 0 end) as total_gross_transaction_amount,\n    sum(case when type <> 'payout' and type not like '%transfer%' then net else 0 end) as total_net_tranactions,\n    sum(case when type = 'payout' or type like '%transfer%' then fee * -1.0 else 0 end) as total_payout_fees,\n    sum(case when type = 'payout' or type like '%transfer%' then amount else 0 end) as total_gross_payout_amount,\n    sum(case when type = 'payout' or type like '%transfer%' then fee * -1.0 else net end) as quarterly_net_activity,\n    sum(if(type in ('payment', 'charge'), 1, 0)) as total_sales_count,\n    sum(if(type = 'payout', 1, 0)) as total_payout_count,\n    count(distinct case when type = 'adjustment' then coalesce(source, payout_id) end) as total_adjustments_count\n  from balance_transaction_joined\n  group by 1\n\n), quarterly_failed_charges as (\n\n    select\n      date_trunc(date(created_at), quarter) as quarter,\n      count(*) as total_failed_charge_count,\n      sum(amount) as total_failed_charge_amount\n    from incomplete_charges\n    group by 1\n\n)\n\nselect\n  quarterly_balance_transactions.quarter,\n  quarterly_balance_transactions.total_sales/100.0 as total_sales,\n  quarterly_balance_transactions.total_refunds/100.0 as total_refunds,\n  quarterly_balance_transactions.total_adjustments/100.0 as total_adjustments,\n  quarterly_balance_transactions.total_other_transactions/100.0 as total_other_transactions,\n  quarterly_balance_transactions.total_gross_transaction_amount/100.0 as total_gross_transaction_amount,\n  quarterly_balance_transactions.total_net_tranactions/100.0 as total_net_tranactions,\n  quarterly_balance_transactions.total_payout_fees/100.0 as total_payout_fees,\n  quarterly_balance_transactions.total_gross_payout_amount/100.0 as total_gross_payout_amount,\n  quarterly_balance_transactions.quarterly_net_activity/100.0 as quarterly_net_activity,\n  (quarterly_balance_transactions.quarterly_net_activity + quarterly_balance_transactions.total_gross_payout_amount)/100.0 as quarterly_end_balance,\n  quarterly_balance_transactions.total_sales_count,\n  quarterly_balance_transactions.total_payout_count,\n  quarterly_balance_transactions.total_adjustments_count,\n  coalesce(quarterly_failed_charges.total_failed_charge_count, 0) as total_failed_charge_count,\n  coalesce(quarterly_failed_charges.total_failed_charge_amount/100, 0) as total_failed_charge_amount\nfrom quarterly_balance_transactions\nleft join quarterly_failed_charges on quarterly_balance_transactions.quarter = quarterly_failed_charges.quarter\norder by 1 desc"}, "error": null, "status": null, "execution_time": 0.08618283271789551, "thread_id": "Thread-3", "timing": [{"name": "compile", "started_at": "2020-07-23T18:08:32.573002Z", "completed_at": "2020-07-23T18:08:32.595307Z"}, {"name": "execute", "started_at": "2020-07-23T18:08:32.613604Z", "completed_at": "2020-07-23T18:08:32.613612Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "with balance_transaction_joined as (\n\n    select *\n    from {{ ref('stripe_balance_transaction_joined') }}  \n\n), incomplete_charges as (\n\n    select *\n    from {{ ref('stripe_incomplete_charges') }}  \n\n), weekly_balance_transactions as (\n\n  select\n    date_trunc(date(case when type = 'payout' then available_on else created_at end), week) as week,\n    sum(case when type in ('charge', 'payment') then amount else 0 end) as total_sales,\n    sum(case when type in ('payment_refund', 'refund') then amount else 0 end) as total_refunds,\n    sum(case when type = 'adjustment' then amount else 0 end) as total_adjustments,\n    sum(case when type not in ('charge', 'payment', 'payment_refund', 'refund', 'adjustment', 'payout') and type not like '%transfer%' then amount else 0 end) as total_other_transactions,\n    sum(case when type <> 'payout' and type not like '%transfer%' then amount else 0 end) as total_gross_transaction_amount,\n    sum(case when type <> 'payout' and type not like '%transfer%' then net else 0 end) as total_net_tranactions,\n    sum(case when type = 'payout' or type like '%transfer%' then fee * -1.0 else 0 end) as total_payout_fees,\n    sum(case when type = 'payout' or type like '%transfer%' then amount else 0 end) as total_gross_payout_amount,\n    sum(case when type = 'payout' or type like '%transfer%' then fee * -1.0 else net end) as weekly_net_activity,\n    sum(if(type in ('payment', 'charge'), 1, 0)) as total_sales_count,\n    sum(if(type = 'payout', 1, 0)) as total_payout_count,\n    count(distinct case when type = 'adjustment' then coalesce(source, payout_id) end) as total_adjustments_count\n  from balance_transaction_joined\n  group by 1\n\n), weekly_failed_charges as (\n\n    select\n      date_trunc(date(created_at), week) as week,\n      count(*) as total_failed_charge_count,\n      sum(amount) as total_failed_charge_amount\n    from incomplete_charges\n    group by 1\n\n)\n\nselect\n  weekly_balance_transactions.week,\n  weekly_balance_transactions.total_sales/100.0 as total_sales,\n  weekly_balance_transactions.total_refunds/100.0 as total_refunds,\n  weekly_balance_transactions.total_adjustments/100.0 as total_adjustments,\n  weekly_balance_transactions.total_other_transactions/100.0 as total_other_transactions,\n  weekly_balance_transactions.total_gross_transaction_amount/100.0 as total_gross_transaction_amount,\n  weekly_balance_transactions.total_net_tranactions/100.0 as total_net_tranactions,\n  weekly_balance_transactions.total_payout_fees/100.0 as total_payout_fees,\n  weekly_balance_transactions.total_gross_payout_amount/100.0 as total_gross_payout_amount,\n  weekly_balance_transactions.weekly_net_activity/100.0 as weekly_net_activity,\n  (weekly_balance_transactions.weekly_net_activity + weekly_balance_transactions.total_gross_payout_amount)/100.0 as weekly_end_balance,\n  weekly_balance_transactions.total_sales_count,\n  weekly_balance_transactions.total_payout_count,\n  weekly_balance_transactions.total_adjustments_count,\n  coalesce(weekly_failed_charges.total_failed_charge_count, 0) as total_failed_charge_count,\n  coalesce(weekly_failed_charges.total_failed_charge_amount/100, 0) as total_failed_charge_amount\nfrom weekly_balance_transactions\nleft join weekly_failed_charges on weekly_balance_transactions.week = weekly_failed_charges.week\norder by 1 desc", "database": "dbt-package-testing", "schema": "dbt_kristin_2", "fqn": ["stripe", "stripe_weekly_overview"], "unique_id": "model.stripe.stripe_weekly_overview", "package_name": "stripe", "root_path": "/Users/kristin/Documents/Github/dbt_stripe", "path": "stripe_weekly_overview.sql", "original_file_path": "models/stripe_weekly_overview.sql", "name": "stripe_weekly_overview", "resource_type": "model", "alias": "stripe_weekly_overview", "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "tags": []}, "tags": [], "refs": [["stripe_balance_transaction_joined"], ["stripe_incomplete_charges"]], "sources": [], "depends_on": {"macros": [], "nodes": ["model.stripe.stripe_balance_transaction_joined", "model.stripe.stripe_incomplete_charges"]}, "description": "", "columns": {"week": {"name": "week", "description": "The first day fo the week associated with the transactions.  The available_at field is used for payouts, and the transaction created_at is used for all others.", "meta": {}, "data_type": null, "tags": []}, "total_sales": {"name": "total_sales", "description": "The sum of all sales during the reporting period.", "meta": {}, "data_type": null, "tags": []}, "total_refunds": {"name": "total_refunds", "description": "The sum of all refunds during the reporting period.", "meta": {}, "data_type": null, "tags": []}, "total_adjustments": {"name": "total_adjustments", "description": "The sum of all adjustments during the reporting period.", "meta": {}, "data_type": null, "tags": []}, "total_other_transactions": {"name": "total_other_transactions", "description": "The sum of all other transactions during the reporting period.", "meta": {}, "data_type": null, "tags": []}, "total_gross_transaction_amount": {"name": "total_gross_transaction_amount", "description": "Gross amount of all transactions (excluding payouts and transfers)", "meta": {}, "data_type": null, "tags": []}, "total_net_tranactions": {"name": "total_net_tranactions", "description": "Net amount of all transactions (excluding payouts and transfers)", "meta": {}, "data_type": null, "tags": []}, "total_payout_fees": {"name": "total_payout_fees", "description": "Fees associated with all payouts and transfers during the reporting period.", "meta": {}, "data_type": null, "tags": []}, "total_gross_payouts": {"name": "total_gross_payouts", "description": "Total amount of all payouts and transfers during the reporting period.", "meta": {}, "data_type": null, "tags": []}, "weekly_net_activity": {"name": "weekly_net_activity", "description": "Total balance transaction activity during the reporting period.", "meta": {}, "data_type": null, "tags": []}, "weekly_end_balance": {"name": "weekly_end_balance", "description": "Accout balance at the end of the reporting period.", "meta": {}, "data_type": null, "tags": []}, "total_sales_count": {"name": "total_sales_count", "description": "Number of sales transactions during the reporting period.", "meta": {}, "data_type": null, "tags": []}, "total_payouts_count": {"name": "total_payouts_count", "description": "Number of payouts made during the reporting period.", "meta": {}, "data_type": null, "tags": []}, "total_adjustments_count": {"name": "total_adjustments_count", "description": "Number of adjustments made during the reporting period.", "meta": {}, "data_type": null, "tags": []}, "total_failed_charge_count": {"name": "total_failed_charge_count", "description": "Number of incomplete charges during the reporting period.", "meta": {}, "data_type": null, "tags": []}, "total_failed_charge_amount": {"name": "total_failed_charge_amount", "description": "Total amount from incomplete charges during the reporting period.", "meta": {}, "data_type": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/stripe.yml", "build_path": "target/compiled/stripe/models/stripe_weekly_overview.sql", "compiled": true, "compiled_sql": "with balance_transaction_joined as (\n\n    select *\n    from `dbt-package-testing`.`dbt_kristin_2`.`stripe_balance_transaction_joined`  \n\n), incomplete_charges as (\n\n    select *\n    from `dbt-package-testing`.`dbt_kristin_2`.`stripe_incomplete_charges`  \n\n), weekly_balance_transactions as (\n\n  select\n    date_trunc(date(case when type = 'payout' then available_on else created_at end), week) as week,\n    sum(case when type in ('charge', 'payment') then amount else 0 end) as total_sales,\n    sum(case when type in ('payment_refund', 'refund') then amount else 0 end) as total_refunds,\n    sum(case when type = 'adjustment' then amount else 0 end) as total_adjustments,\n    sum(case when type not in ('charge', 'payment', 'payment_refund', 'refund', 'adjustment', 'payout') and type not like '%transfer%' then amount else 0 end) as total_other_transactions,\n    sum(case when type <> 'payout' and type not like '%transfer%' then amount else 0 end) as total_gross_transaction_amount,\n    sum(case when type <> 'payout' and type not like '%transfer%' then net else 0 end) as total_net_tranactions,\n    sum(case when type = 'payout' or type like '%transfer%' then fee * -1.0 else 0 end) as total_payout_fees,\n    sum(case when type = 'payout' or type like '%transfer%' then amount else 0 end) as total_gross_payout_amount,\n    sum(case when type = 'payout' or type like '%transfer%' then fee * -1.0 else net end) as weekly_net_activity,\n    sum(if(type in ('payment', 'charge'), 1, 0)) as total_sales_count,\n    sum(if(type = 'payout', 1, 0)) as total_payout_count,\n    count(distinct case when type = 'adjustment' then coalesce(source, payout_id) end) as total_adjustments_count\n  from balance_transaction_joined\n  group by 1\n\n), weekly_failed_charges as (\n\n    select\n      date_trunc(date(created_at), week) as week,\n      count(*) as total_failed_charge_count,\n      sum(amount) as total_failed_charge_amount\n    from incomplete_charges\n    group by 1\n\n)\n\nselect\n  weekly_balance_transactions.week,\n  weekly_balance_transactions.total_sales/100.0 as total_sales,\n  weekly_balance_transactions.total_refunds/100.0 as total_refunds,\n  weekly_balance_transactions.total_adjustments/100.0 as total_adjustments,\n  weekly_balance_transactions.total_other_transactions/100.0 as total_other_transactions,\n  weekly_balance_transactions.total_gross_transaction_amount/100.0 as total_gross_transaction_amount,\n  weekly_balance_transactions.total_net_tranactions/100.0 as total_net_tranactions,\n  weekly_balance_transactions.total_payout_fees/100.0 as total_payout_fees,\n  weekly_balance_transactions.total_gross_payout_amount/100.0 as total_gross_payout_amount,\n  weekly_balance_transactions.weekly_net_activity/100.0 as weekly_net_activity,\n  (weekly_balance_transactions.weekly_net_activity + weekly_balance_transactions.total_gross_payout_amount)/100.0 as weekly_end_balance,\n  weekly_balance_transactions.total_sales_count,\n  weekly_balance_transactions.total_payout_count,\n  weekly_balance_transactions.total_adjustments_count,\n  coalesce(weekly_failed_charges.total_failed_charge_count, 0) as total_failed_charge_count,\n  coalesce(weekly_failed_charges.total_failed_charge_amount/100, 0) as total_failed_charge_amount\nfrom weekly_balance_transactions\nleft join weekly_failed_charges on weekly_balance_transactions.week = weekly_failed_charges.week\norder by 1 desc", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "with balance_transaction_joined as (\n\n    select *\n    from `dbt-package-testing`.`dbt_kristin_2`.`stripe_balance_transaction_joined`  \n\n), incomplete_charges as (\n\n    select *\n    from `dbt-package-testing`.`dbt_kristin_2`.`stripe_incomplete_charges`  \n\n), weekly_balance_transactions as (\n\n  select\n    date_trunc(date(case when type = 'payout' then available_on else created_at end), week) as week,\n    sum(case when type in ('charge', 'payment') then amount else 0 end) as total_sales,\n    sum(case when type in ('payment_refund', 'refund') then amount else 0 end) as total_refunds,\n    sum(case when type = 'adjustment' then amount else 0 end) as total_adjustments,\n    sum(case when type not in ('charge', 'payment', 'payment_refund', 'refund', 'adjustment', 'payout') and type not like '%transfer%' then amount else 0 end) as total_other_transactions,\n    sum(case when type <> 'payout' and type not like '%transfer%' then amount else 0 end) as total_gross_transaction_amount,\n    sum(case when type <> 'payout' and type not like '%transfer%' then net else 0 end) as total_net_tranactions,\n    sum(case when type = 'payout' or type like '%transfer%' then fee * -1.0 else 0 end) as total_payout_fees,\n    sum(case when type = 'payout' or type like '%transfer%' then amount else 0 end) as total_gross_payout_amount,\n    sum(case when type = 'payout' or type like '%transfer%' then fee * -1.0 else net end) as weekly_net_activity,\n    sum(if(type in ('payment', 'charge'), 1, 0)) as total_sales_count,\n    sum(if(type = 'payout', 1, 0)) as total_payout_count,\n    count(distinct case when type = 'adjustment' then coalesce(source, payout_id) end) as total_adjustments_count\n  from balance_transaction_joined\n  group by 1\n\n), weekly_failed_charges as (\n\n    select\n      date_trunc(date(created_at), week) as week,\n      count(*) as total_failed_charge_count,\n      sum(amount) as total_failed_charge_amount\n    from incomplete_charges\n    group by 1\n\n)\n\nselect\n  weekly_balance_transactions.week,\n  weekly_balance_transactions.total_sales/100.0 as total_sales,\n  weekly_balance_transactions.total_refunds/100.0 as total_refunds,\n  weekly_balance_transactions.total_adjustments/100.0 as total_adjustments,\n  weekly_balance_transactions.total_other_transactions/100.0 as total_other_transactions,\n  weekly_balance_transactions.total_gross_transaction_amount/100.0 as total_gross_transaction_amount,\n  weekly_balance_transactions.total_net_tranactions/100.0 as total_net_tranactions,\n  weekly_balance_transactions.total_payout_fees/100.0 as total_payout_fees,\n  weekly_balance_transactions.total_gross_payout_amount/100.0 as total_gross_payout_amount,\n  weekly_balance_transactions.weekly_net_activity/100.0 as weekly_net_activity,\n  (weekly_balance_transactions.weekly_net_activity + weekly_balance_transactions.total_gross_payout_amount)/100.0 as weekly_end_balance,\n  weekly_balance_transactions.total_sales_count,\n  weekly_balance_transactions.total_payout_count,\n  weekly_balance_transactions.total_adjustments_count,\n  coalesce(weekly_failed_charges.total_failed_charge_count, 0) as total_failed_charge_count,\n  coalesce(weekly_failed_charges.total_failed_charge_amount/100, 0) as total_failed_charge_amount\nfrom weekly_balance_transactions\nleft join weekly_failed_charges on weekly_balance_transactions.week = weekly_failed_charges.week\norder by 1 desc"}, "error": null, "status": null, "execution_time": 0.04196906089782715, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2020-07-23T18:08:32.594244Z", "completed_at": "2020-07-23T18:08:32.614699Z"}, {"name": "execute", "started_at": "2020-07-23T18:08:32.614953Z", "completed_at": "2020-07-23T18:08:32.614958Z"}], "fail": null, "warn": null, "skip": false}], "generated_at": "2020-07-23T18:08:32.616798Z", "elapsed_time": 2.6595609188079834}