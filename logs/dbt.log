2020-06-10 18:36:40.322280 (Thread-1): On model.stripe.stripe_subscription_details: /* {"app": "dbt", "dbt_version": "0.17.0rc1", "profile_name": "dbt_test", "target_name": "dev", "node_id": "model.stripe.stripe_subscription_details"} */


  create or replace table `dbt-package-testing`.`dbt_erik`.`stripe_subscription_details`
  
  
  OPTIONS()
  as (
    

with  __dbt__CTE__stg_stripe_invoice as (


with invoice as (

    select *
    from `dbt-package-testing`.`stripe`.`invoice`

), fields as (

    select
      id as invoice_id,
      amount_due,
      amount_paid,
      amount_remaining,
      attempt_count,
      auto_advance,
      billing_reason,
      charge_id,
      created as created_at,
      currency,
      customer_id,
      description,
      due_date,
      number,
      paid as is_paid,
      receipt_number,
      status,
      subtotal,
      tax,
      tax_percent,
      total
    from invoice
    where not coalesce(is_deleted, false)

)

select * from fields
),  __dbt__CTE__stg_stripe_charge as (
with charge as (

    select *
    from `dbt-package-testing`.`stripe`.`charge`

), fields as (

    select 
      id as charge_id, 
      amount,
      amount_refunded,
      application_fee_amount,
      balance_transaction_id,
      captured as is_captured,
      card_id,
      created as created_at,
      customer_id,
      currency,
      description,
      failure_code,
      failure_message,
      paid as is_paid,
      payment_intent_id,
      receipt_email,
      receipt_number,
      refunded as is_refunded,
      status,
      invoice_id
    from charge
    
)

select *
from fields
),  __dbt__CTE__stg_stripe_invoice_line_item as (


with invoice_line_item as (

    select *
    from `dbt-package-testing`.`stripe`.`invoice_line_item`

), fields as (

    select
      id as invoice_line_item_id,
      invoice_id,
      amount,
      currency,
      description,
      discountable as is_discountable,
      plan_id,
      proration,
      quantity,
      subscription_id,
      subscription_item_id,
      type,
      unique_id
    from invoice_line_item
    where id not like 'sub%'

)

select * from fields
),  __dbt__CTE__stg_stripe_subscription as (


with subscription as (

    select *
    from `dbt-package-testing`.`stripe`.`subscription`

), fields as (

    select
      id as subscription_id,
      status,
      billing,
      billing_cycle_anchor,
      cancel_at,
      cancel_at_period_end,
      canceled_at,
      created as created_at,
      current_period_start,
      current_period_end,
      customer_id,
      days_until_due,
      start_date,
      ended_at
    from subscription

)

select * from fields
),  __dbt__CTE__stg_stripe_customer as (
with customer as (

    select *
    from `dbt-package-testing`.`stripe`.`customer`

), fields as (

    select 
      id as customer_id,
      account_balance,
      created as created_at,
      currency,
      default_card_id,
      delinquent as is_deliguent,
      description,
      email,
      shipping_address_city,
      shipping_address_country,
      shipping_address_line_1,
      shipping_address_line_2,
      shipping_address_postal_code,
      shipping_address_state,
      shipping_name,
      shipping_phone
    from customer
    where not is_deleted

)

select *
from fields
),invoice as (

    select *
    from __dbt__CTE__stg_stripe_invoice  

), charge as (

    select *
    from __dbt__CTE__stg_stripe_charge  

), invoice_line_item as (

    select *
    from __dbt__CTE__stg_stripe_invoice_line_item  

), subscription as (

    select *
    from __dbt__CTE__stg_stripe_subscription  

), customer as (

    select *
    from __dbt__CTE__stg_stripe_customer  

), line_items_groups as (

  select
    invoice.invoice_id,
    invoice.amount_due,
    invoice.amount_paid,
    invoice.amount_remaining,
    invoice.created_at,
    max(invoice_line_item.subscription_id) as subscription_id,
    sum(invoice_line_item.amount) as total_item_amount,
    count(distinct invoice_line_item.unique_id) as number_line_items
  from invoice_line_item
  join invoice on invoice.invoice_id = invoice_line_item.invoice_id
  group by 1, 2, 3, 4, 5

), grouped_by_subcription as (

  select
    subscription_id,
    count(distinct invoice_id) as number_invoices_generated,
    sum(amount_due) as total_amount_billing,
    sum(amount_paid) as total_amount_paid,
    sum(amount_remaining) total_amount_remaining,
    max(created_at) as most_recent_invoice_created_at,
    avg(amount_due) as average_invoice_amount,
    avg(total_item_amount) as average_line_item_amount,
    avg(number_line_items) as avg_num_invoice_items
  from line_items_groups
  group by 1

)


select
  subscription.subscription_id,
  subscription.customer_id,
  customer.description as customer_description,
  customer.email as customer_email,
  subscription.status,
  subscription.start_date,
  subscription.ended_at,
  subscription.billing,
  subscription.billing_cycle_anchor,
  subscription.canceled_at,
  subscription.created_at,
  subscription.current_period_start,
  subscription.current_period_end,
  subscription.days_until_due,
  subscription.cancel_at_period_end,
  subscription.cancel_at,
  number_invoices_generated,
  total_amount_billing,
  total_amount_paid,
  total_amount_remaining,
  most_recent_invoice_created_at,
  average_invoice_amount,
  average_line_item_amount,
  avg_num_invoice_items
from subscription
left join grouped_by_subcription on subscription.subscription_id = grouped_by_subcription.subscription_id
left join customer on subscription.customer_id = customer.customer_id
order by subscription.created_at desc
  );
    
2020-06-10 18:36:40.568868 (Thread-3): Writing runtime SQL for node "model.stripe.stripe_balance_transactions"
2020-06-10 18:36:40.569593 (Thread-3): On model.stripe.stripe_balance_transactions: /* {"app": "dbt", "dbt_version": "0.17.0rc1", "profile_name": "dbt_test", "target_name": "dev", "node_id": "model.stripe.stripe_balance_transactions"} */


  create or replace table `dbt-package-testing`.`dbt_erik`.`stripe_balance_transactions`
  
  
  OPTIONS()
  as (
    with  __dbt__CTE__stg_stripe_balance_transaction as (
with balance_transaction as (

    select *
    from `dbt-package-testing`.`stripe`.`balance_transaction`

), fields as (

    select 
      id as balance_transaction_id,
      amount,
      available_on,
      created as created_at,
      currency,
      description,
      exchange_rate,
      fee,
      net,
      source,
      status,
      type
    from balance_transaction
)

select *
from fields
),  __dbt__CTE__stg_stripe_charge as (
with charge as (

    select *
    from `dbt-package-testing`.`stripe`.`charge`

), fields as (

    select 
      id as charge_id, 
      amount,
      amount_refunded,
      application_fee_amount,
      balance_transaction_id,
      captured as is_captured,
      card_id,
      created as created_at,
      customer_id,
      currency,
      description,
      failure_code,
      failure_message,
      paid as is_paid,
      payment_intent_id,
      receipt_email,
      receipt_number,
      refunded as is_refunded,
      status,
      invoice_id
    from charge
    
)

select *
from fields
),  __dbt__CTE__stg_stripe_payment_intent as (
with payment_intent as (

    select *
    from `dbt-package-testing`.`stripe`.`payment_intent`

), fields as (

    select 
      id as payment_intent_id,
      amount,
      amount_capturable,
      amount_received,
      application,
      application_fee_amount,
      canceled_at,
      cancellation_reason,
      capture_method,
      confirmation_method,
      created as created_at,
      currency,
      customer_id,
      description,
      payment_method_id,
      receipt_email,
      statement_descriptor,
      status
    from payment_intent

)

select *
from fields
),  __dbt__CTE__stg_stripe_payment_method as (
with payment_method as (

    select *
    from `dbt-package-testing`.`stripe`.`payment_method`

), fields as (

    select 
      id as payment_method_id,
      created as created_at,
      customer_id,
      type
    from payment_method
    where not is_deleted

)

select *
from fields
),  __dbt__CTE__stg_stripe_card as (
with card as (

    select *
    from `dbt-package-testing`.`stripe`.`card`

), fields as (

    select 
      id as card_id,
      brand,
      country,
      created as created_at,
      customer_id,
      name,
      recipient,
      funding
    from card
    where not coalesce(is_deleted, false)

)

select *
from fields
),  __dbt__CTE__stg_stripe_payout as (
with payout as (

    select *
    from `dbt-package-testing`.`stripe`.`payout`

), fields as (

    select 
      id as payout_id,
      amount,
      arrival_date,
      automatic as is_automatic,
      balance_transaction_id,
      created as created_at,
      currency,
      description,
      method,
      source_type,
      status,
      type
    from payout

)

select *
from fields
),  __dbt__CTE__stg_stripe_refund as (
with refund as (

    select *
    from `dbt-package-testing`.`stripe`.`refund`

), fields as (

    select 
      id as refund_id,
      amount,
      balance_transaction_id,
      charge_id,
      created as created_at,
      currency,
      description,
      reason,
      receipt_number,
      status
    from refund

)

select *
from fields
),  __dbt__CTE__stg_stripe_customer as (
with customer as (

    select *
    from `dbt-package-testing`.`stripe`.`customer`

), fields as (

    select 
      id as customer_id,
      account_balance,
      created as created_at,
      currency,
      default_card_id,
      delinquent as is_deliguent,
      description,
      email,
      shipping_address_city,
      shipping_address_country,
      shipping_address_line_1,
      shipping_address_line_2,
      shipping_address_postal_code,
      shipping_address_state,
      shipping_name,
      shipping_phone
    from customer
    where not is_deleted

)

select *
from fields
),  __dbt__CTE__stripe_balance_transaction_joined as (
with balance_transaction as (

    select *
    from __dbt__CTE__stg_stripe_balance_transaction
  
), charge as (

    select *
    from __dbt__CTE__stg_stripe_charge

), payment_intent as (

    select *
    from __dbt__CTE__stg_stripe_payment_intent

), payment_method as (

    select *
    from __dbt__CTE__stg_stripe_payment_method

), card as (

    select *
    from __dbt__CTE__stg_stripe_card

), payout as (

    select *
    from __dbt__CTE__stg_stripe_payout

), refund as (

    select *
    from __dbt__CTE__stg_stripe_refund

), customer as (

    select *
    from __dbt__CTE__stg_stripe_customer


)

select 
  balance_transaction.balance_transaction_id,
  balance_transaction.created_at,
  balance_transaction.available_on,
  balance_transaction.currency,
  balance_transaction.amount,
  balance_transaction.fee,
  balance_transaction.net,
  balance_transaction.type,
  case
    when balance_transaction.type in ('charge', 'payment') then 'charge'
    when balance_transaction.type in ('refund', 'payment_refund') then 'refund'
    when balance_transaction.type in ('payout_cancel', 'payout_failure')	then 'payout_reversal'
    when balance_transaction.type in ('transfer', 'recipient_transfer') then	'transfer'
    when balance_transaction.type in ('transfer_cancel', 'transfer_failure', 'recipient_transfer_cancel', 'recipient_transfer_failure') then 'transfer_reversal'
    else balance_transaction.type
  end as reporting_category,
  balance_transaction.source,
  balance_transaction.description,
  case when balance_transaction.type = 'charge' then charge.amount end as customer_facing_amount, --think this might be the charge amount/currency
  case when balance_transaction.type = 'charge' then charge.currency end as customer_facing_currency,
  date_add(date(balance_transaction.available_on), interval 1 day) as effective_at,
  coalesce(charge.customer_id, refund_charge.customer_id) as customer_id,
  charge.receipt_email,
  customer.description as customer_description,
  charge.charge_id,
  charge.payment_intent_id,
  charge.created_at as charge_created_at,
  payment_method.type as payment_method_type,
  card.brand as card_brand,
  card.funding as card_funding,
  card.country as card_country,
  payout.payout_id,
  payout.arrival_date as payout_expeted_arrival_date,
  payout.status as payout_status,
  payout.type as payout_type,
  payout.description as payout_description,
  refund.reason as refund_reason
from balance_transaction
left join charge on charge.balance_transaction_id = balance_transaction.balance_transaction_id
left join customer on charge.customer_id = customer.customer_id
left join payment_intent on charge.payment_intent_id = payment_intent.payment_intent_id
left join payment_method on payment_intent.payment_method_id = payment_method.payment_method_id
left join card on charge.card_id = card.card_id
left join payout on payout.balance_transaction_id = balance_transaction.balance_transaction_id
left join refund on refund.balance_transaction_id = balance_transaction.balance_transaction_id
left join charge as refund_charge on refund.charge_id = refund_charge.charge_id
order by created_at desc
),balance_transaction_joined as (

    select *
    from __dbt__CTE__stripe_balance_transaction_joined  

)

select 
  balance_transaction_id,
  created_at,
  available_on,
  currency,
  amount,
  fee,
  net,
  type,
  reporting_category,
  source,
  description,
  customer_facing_amount,
  customer_facing_currency,
  effective_at,
  customer_id,
  receipt_email,
  customer_description,
  charge_id,
  payment_intent_id,
  charge_created_at,
  payment_method_type,
  card_brand,
  card_funding,
  card_country,
  payout_id,
  payout_expeted_arrival_date,
  payout_status,
  payout_type,
  payout_description,
  refund_reason
from balance_transaction_joined
  );
    
2020-06-10 18:36:40.583082 (Thread-2): Writing runtime SQL for node "model.stripe.stripe_customer_overview"
2020-06-10 18:36:40.583931 (Thread-2): On model.stripe.stripe_customer_overview: /* {"app": "dbt", "dbt_version": "0.17.0rc1", "profile_name": "dbt_test", "target_name": "dev", "node_id": "model.stripe.stripe_customer_overview"} */


  create or replace table `dbt-package-testing`.`dbt_erik`.`stripe_customer_overview`
  
  
  OPTIONS()
  as (
    with  __dbt__CTE__stg_stripe_balance_transaction as (
with balance_transaction as (

    select *
    from `dbt-package-testing`.`stripe`.`balance_transaction`

), fields as (

    select 
      id as balance_transaction_id,
      amount,
      available_on,
      created as created_at,
      currency,
      description,
      exchange_rate,
      fee,
      net,
      source,
      status,
      type
    from balance_transaction
)

select *
from fields
),  __dbt__CTE__stg_stripe_charge as (
with charge as (

    select *
    from `dbt-package-testing`.`stripe`.`charge`

), fields as (

    select 
      id as charge_id, 
      amount,
      amount_refunded,
      application_fee_amount,
      balance_transaction_id,
      captured as is_captured,
      card_id,
      created as created_at,
      customer_id,
      currency,
      description,
      failure_code,
      failure_message,
      paid as is_paid,
      payment_intent_id,
      receipt_email,
      receipt_number,
      refunded as is_refunded,
      status,
      invoice_id
    from charge
    
)

select *
from fields
),  __dbt__CTE__stg_stripe_payment_intent as (
with payment_intent as (

    select *
    from `dbt-package-testing`.`stripe`.`payment_intent`

), fields as (

    select 
      id as payment_intent_id,
      amount,
      amount_capturable,
      amount_received,
      application,
      application_fee_amount,
      canceled_at,
      cancellation_reason,
      capture_method,
      confirmation_method,
      created as created_at,
      currency,
      customer_id,
      description,
      payment_method_id,
      receipt_email,
      statement_descriptor,
      status
    from payment_intent

)

select *
from fields
),  __dbt__CTE__stg_stripe_payment_method as (
with payment_method as (

    select *
    from `dbt-package-testing`.`stripe`.`payment_method`

), fields as (

    select 
      id as payment_method_id,
      created as created_at,
      customer_id,
      type
    from payment_method
    where not is_deleted

)

select *
from fields
),  __dbt__CTE__stg_stripe_card as (
with card as (

    select *
    from `dbt-package-testing`.`stripe`.`card`

), fields as (

    select 
      id as card_id,
      brand,
      country,
      created as created_at,
      customer_id,
      name,
      recipient,
      funding
    from card
    where not coalesce(is_deleted, false)

)

select *
from fields
),  __dbt__CTE__stg_stripe_payout as (
with payout as (

    select *
    from `dbt-package-testing`.`stripe`.`payout`

), fields as (

    select 
      id as payout_id,
      amount,
      arrival_date,
      automatic as is_automatic,
      balance_transaction_id,
      created as created_at,
      currency,
      description,
      method,
      source_type,
      status,
      type
    from payout

)

select *
from fields
),  __dbt__CTE__stg_stripe_refund as (
with refund as (

    select *
    from `dbt-package-testing`.`stripe`.`refund`

), fields as (

    select 
      id as refund_id,
      amount,
      balance_transaction_id,
      charge_id,
      created as created_at,
      currency,
      description,
      reason,
      receipt_number,
      status
    from refund

)

select *
from fields
),  __dbt__CTE__stg_stripe_customer as (
with customer as (

    select *
    from `dbt-package-testing`.`stripe`.`customer`

), fields as (

    select 
      id as customer_id,
      account_balance,
      created as created_at,
      currency,
      default_card_id,
      delinquent as is_deliguent,
      description,
      email,
      shipping_address_city,
      shipping_address_country,
      shipping_address_line_1,
      shipping_address_line_2,
      shipping_address_postal_code,
      shipping_address_state,
      shipping_name,
      shipping_phone
    from customer
    where not is_deleted

)

select *
from fields
),  __dbt__CTE__stripe_balance_transaction_joined as (
with balance_transaction as (

    select *
    from __dbt__CTE__stg_stripe_balance_transaction
  
), charge as (

    select *
    from __dbt__CTE__stg_stripe_charge

), payment_intent as (

    select *
    from __dbt__CTE__stg_stripe_payment_intent

), payment_method as (

    select *
    from __dbt__CTE__stg_stripe_payment_method

), card as (

    select *
    from __dbt__CTE__stg_stripe_card

), payout as (

    select *
    from __dbt__CTE__stg_stripe_payout

), refund as (

    select *
    from __dbt__CTE__stg_stripe_refund

), customer as (

    select *
    from __dbt__CTE__stg_stripe_customer


)

select 
  balance_transaction.balance_transaction_id,
  balance_transaction.created_at,
  balance_transaction.available_on,
  balance_transaction.currency,
  balance_transaction.amount,
  balance_transaction.fee,
  balance_transaction.net,
  balance_transaction.type,
  case
    when balance_transaction.type in ('charge', 'payment') then 'charge'
    when balance_transaction.type in ('refund', 'payment_refund') then 'refund'
    when balance_transaction.type in ('payout_cancel', 'payout_failure')	then 'payout_reversal'
    when balance_transaction.type in ('transfer', 'recipient_transfer') then	'transfer'
    when balance_transaction.type in ('transfer_cancel', 'transfer_failure', 'recipient_transfer_cancel', 'recipient_transfer_failure') then 'transfer_reversal'
    else balance_transaction.type
  end as reporting_category,
  balance_transaction.source,
  balance_transaction.description,
  case when balance_transaction.type = 'charge' then charge.amount end as customer_facing_amount, --think this might be the charge amount/currency
  case when balance_transaction.type = 'charge' then charge.currency end as customer_facing_currency,
  date_add(date(balance_transaction.available_on), interval 1 day) as effective_at,
  coalesce(charge.customer_id, refund_charge.customer_id) as customer_id,
  charge.receipt_email,
  customer.description as customer_description,
  charge.charge_id,
  charge.payment_intent_id,
  charge.created_at as charge_created_at,
  payment_method.type as payment_method_type,
  card.brand as card_brand,
  card.funding as card_funding,
  card.country as card_country,
  payout.payout_id,
  payout.arrival_date as payout_expeted_arrival_date,
  payout.status as payout_status,
  payout.type as payout_type,
  payout.description as payout_description,
  refund.reason as refund_reason
from balance_transaction
left join charge on charge.balance_transaction_id = balance_transaction.balance_transaction_id
left join customer on charge.customer_id = customer.customer_id
left join payment_intent on charge.payment_intent_id = payment_intent.payment_intent_id
left join payment_method on payment_intent.payment_method_id = payment_method.payment_method_id
left join card on charge.card_id = card.card_id
left join payout on payout.balance_transaction_id = balance_transaction.balance_transaction_id
left join refund on refund.balance_transaction_id = balance_transaction.balance_transaction_id
left join charge as refund_charge on refund.charge_id = refund_charge.charge_id
order by created_at desc
),  __dbt__CTE__stripe_incomplete_charges as (
with charge as (

    select *
    from __dbt__CTE__stg_stripe_charge

)

select 
  created_at,
  customer_id,
  amount
from charge
where not is_captured
),balance_transaction_joined as (

    select *
    from __dbt__CTE__stripe_balance_transaction_joined  

), incomplete_charges as (

    select *
    from __dbt__CTE__stripe_incomplete_charges  

), customer as (

    select *
    from __dbt__CTE__stg_stripe_customer  

), transactions_grouped as (
 
    select
      customer_id,
      sum(if(type in ('charge', 'payment'), amount, 0)) as total_sales,
      sum(if(type in ('payment_refund', 'refund'), amount, 0)) as total_refunds,
      sum(amount) as total_gross_transaction_amount,
      sum(fee) as total_fees,
      sum(net) as total_net_transaction_amount,
      sum(if(type in ('payment', 'charge'), 1, 0)) as total_sales_count,
      sum(if(type in ('payment_refund', 'refund'), 1, 0)) as total_refund_count,    
      sum(if(type in ('charge', 'payment') and date_trunc(date(created_at), month) = date_trunc(current_date(), month),amount, 0)) as sales_this_month,
      sum(if(type in ('payment_refund', 'refund') and date_trunc(date(created_at), month) = date_trunc(current_date(), month), amount, 0)) as refunds_this_month,
      sum(if(date_trunc(date(created_at), month) = date_trunc(current_date(), month), amount, 0)) as gross_transaction_amount_this_month,
      sum(if(date_trunc(date(created_at), month) = date_trunc(current_date(), month), fee, 0)) as fees_this_month,
      sum(if(date_trunc(date(created_at), month) = date_trunc(current_date(), month), net, 0)) as net_transaction_amount_this_month,
      sum(if(type in ('payment', 'charge') and date_trunc(date(created_at), month) = date_trunc(current_date(), month) , 1, 0)) as sales_count_this_month,
      sum(if(type in ('payment_refund', 'refund') and date_trunc(date(created_at), month) = date_trunc(current_date(), month) , 1, 0)) as refund_count_this_month,
      min(if(type in ('payment', 'charge'), date(created_at), null)) as first_sale_date,
      max(if(type in ('payment', 'charge'), date(created_at), null)) as most_recent_sale_date
    from balance_transaction_joined
      where type in ('payment', 'charge', 'payment_refund', 'refund')
    group by 1

), failed_charges_by_customer as (

    select
      customer_id,
      count(*) as total_failed_charge_count,
      sum(amount) as total_failed_charge_amount,
      sum(if(date_trunc(date(created_at), month) = date_trunc(current_date(), month), 1, 0)) as failed_charge_count_this_month,
      sum(if(date_trunc(date(created_at), month) = date_trunc(current_date(), month), amount, 0)) as failed_charge_amount_this_month
    from incomplete_charges
    group by 1

)

select
  coalesce(customer.description, customer.customer_id, 'No associated customer') as customer_description,
  customer.email,
  customer.created_at as customer_created_at,
  customer.is_deliguent,
  coalesce(transactions_grouped.total_sales/100.0, 0) as total_sales,
  coalesce(transactions_grouped.total_refunds/100.0, 0) as total_refunds,
  coalesce(transactions_grouped.total_gross_transaction_amount/100.0, 0) as total_gross_transcation_amount,
  coalesce(transactions_grouped.total_fees/100.0, 0) as total_fees,
  coalesce(transactions_grouped.total_net_transaction_amount/100.0, 0) as total_net_trasnaction_amount,
  coalesce(transactions_grouped.total_sales_count, 0) as total_sales_count,
  coalesce(transactions_grouped.total_refund_count, 0) as total_refund_count,    
  coalesce(transactions_grouped.sales_this_month/100.0, 0) as sales_this_month,
  coalesce(transactions_grouped.refunds_this_month/100.0, 0) as refunds_this_month,
  coalesce(transactions_grouped.gross_transaction_amount_this_month/100.0, 0) as gross_transaction_amount_this_month,
  coalesce(transactions_grouped.fees_this_month/100.0, 0) as fees_this_month,
  coalesce(transactions_grouped.net_transaction_amount_this_month/100.0, 0) as net_transaction_amount_this_month,
  coalesce(transactions_grouped.sales_count_this_month, 0) as sales_count_this_month,
  coalesce(transactions_grouped.refund_count_this_month, 0) as refund_count_this_month,
  transactions_grouped.first_sale_date,
  transactions_grouped.most_recent_sale_date,
  coalesce(total_failed_charge_count, 0) as total_failed_charge_count,
  coalesce(total_failed_charge_amount/100, 0) as total_failed_charge_amount,
  coalesce(failed_charge_count_this_month, 0) as failed_charge_count_this_month,
  coalesce(failed_charge_amount_this_month/100, 0) as failed_charge_amount_this_month,
  customer.currency as customer_currency,
  customer.default_card_id,
  customer.shipping_name,
  customer.shipping_address_line_1,
  customer.shipping_address_line_2,
  customer.shipping_address_city,
  customer.shipping_address_state,
  customer.shipping_address_country,
  customer.shipping_address_postal_code,
  customer.shipping_phone
from customer
left join transactions_grouped on transactions_grouped.customer_id = customer.customer_id
left join failed_charges_by_customer on customer.customer_id = failed_charges_by_customer.customer_id
  );
    
2020-06-10 18:36:42.926803 (Thread-4): finished collecting timing info
2020-06-10 18:36:42.927398 (Thread-4): Sending event: {'category': 'dbt', 'action': 'run_model', 'label': '327c283d-4f2c-4969-ae83-b21d09619015', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0xa26b357d0>]}
2020-06-10 18:36:42.927617 (Thread-4): 11:36:42 | 1 of 8 OK created table model dbt_erik.stripe_invoice_details........ [CREATE TABLE (494) in 2.97s]
2020-06-10 18:36:42.927751 (Thread-4): Finished running node model.stripe.stripe_invoice_details
2020-06-10 18:36:42.927906 (Thread-4): Began running node model.stripe.stripe_daily_overview
2020-06-10 18:36:42.928157 (Thread-4): 11:36:42 | 5 of 8 START table model dbt_erik.stripe_daily_overview.............. [RUN]
2020-06-10 18:36:42.928549 (Thread-4): Acquiring new bigquery connection "model.stripe.stripe_daily_overview".
2020-06-10 18:36:42.928701 (Thread-4): Re-using an available connection from the pool (formerly model.stripe.stripe_invoice_details).
2020-06-10 18:36:42.928790 (Thread-4): Compiling model.stripe.stripe_daily_overview
2020-06-10 18:36:42.969772 (Thread-4): Writing injected SQL for node "model.stripe.stripe_daily_overview"
2020-06-10 18:36:42.970634 (Thread-4): finished collecting timing info
2020-06-10 18:36:42.975042 (Thread-4): Client.dataset is deprecated and will be removed in a future version. Use a string like 'my_project.my_dataset' or a cloud.google.bigquery.DatasetReference object, instead.
2020-06-10 18:36:43.051701 (Thread-1): finished collecting timing info
2020-06-10 18:36:43.052682 (Thread-1): Sending event: {'category': 'dbt', 'action': 'run_model', 'label': '327c283d-4f2c-4969-ae83-b21d09619015', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0xa26fe5290>]}
2020-06-10 18:36:43.053047 (Thread-1): 11:36:43 | 2 of 8 OK created table model dbt_erik.stripe_subscription_details... [CREATE TABLE (49) in 3.04s]
2020-06-10 18:36:43.053245 (Thread-1): Finished running node model.stripe.stripe_subscription_details
2020-06-10 18:36:43.053449 (Thread-1): Began running node model.stripe.stripe_monthly_overview
2020-06-10 18:36:43.053765 (Thread-1): 11:36:43 | 6 of 8 START table model dbt_erik.stripe_monthly_overview............ [RUN]
2020-06-10 18:36:43.054172 (Thread-1): Acquiring new bigquery connection "model.stripe.stripe_monthly_overview".
2020-06-10 18:36:43.054310 (Thread-1): Re-using an available connection from the pool (formerly model.stripe.stripe_subscription_details).
2020-06-10 18:36:43.054442 (Thread-1): Compiling model.stripe.stripe_monthly_overview
2020-06-10 18:36:43.152495 (Thread-1): Writing injected SQL for node "model.stripe.stripe_monthly_overview"
2020-06-10 18:36:43.153402 (Thread-4): Writing runtime SQL for node "model.stripe.stripe_daily_overview"
2020-06-10 18:36:43.155455 (Thread-4): On model.stripe.stripe_daily_overview: /* {"app": "dbt", "dbt_version": "0.17.0rc1", "profile_name": "dbt_test", "target_name": "dev", "node_id": "model.stripe.stripe_daily_overview"} */


  create or replace table `dbt-package-testing`.`dbt_erik`.`stripe_daily_overview`
  
  
  OPTIONS()
  as (
    with  __dbt__CTE__stg_stripe_balance_transaction as (
with balance_transaction as (

    select *
    from `dbt-package-testing`.`stripe`.`balance_transaction`

), fields as (

    select 
      id as balance_transaction_id,
      amount,
      available_on,
      created as created_at,
      currency,
      description,
      exchange_rate,
      fee,
      net,
      source,
      status,
      type
    from balance_transaction
)

select *
from fields
),  __dbt__CTE__stg_stripe_charge as (
with charge as (

    select *
    from `dbt-package-testing`.`stripe`.`charge`

), fields as (

    select 
      id as charge_id, 
      amount,
      amount_refunded,
      application_fee_amount,
      balance_transaction_id,
      captured as is_captured,
      card_id,
      created as created_at,
      customer_id,
      currency,
      description,
      failure_code,
      failure_message,
      paid as is_paid,
      payment_intent_id,
      receipt_email,
      receipt_number,
      refunded as is_refunded,
      status,
      invoice_id
    from charge
    
)

select *
from fields
),  __dbt__CTE__stg_stripe_payment_intent as (
with payment_intent as (

    select *
    from `dbt-package-testing`.`stripe`.`payment_intent`

), fields as (

    select 
      id as payment_intent_id,
      amount,
      amount_capturable,
      amount_received,
      application,
      application_fee_amount,
      canceled_at,
      cancellation_reason,
      capture_method,
      confirmation_method,
      created as created_at,
      currency,
      customer_id,
      description,
      payment_method_id,
      receipt_email,
      statement_descriptor,
      status
    from payment_intent

)

select *
from fields
),  __dbt__CTE__stg_stripe_payment_method as (
with payment_method as (

    select *
    from `dbt-package-testing`.`stripe`.`payment_method`

), fields as (

    select 
      id as payment_method_id,
      created as created_at,
      customer_id,
      type
    from payment_method
    where not is_deleted

)

select *
from fields
),  __dbt__CTE__stg_stripe_card as (
with card as (

    select *
    from `dbt-package-testing`.`stripe`.`card`

), fields as (

    select 
      id as card_id,
      brand,
      country,
      created as created_at,
      customer_id,
      name,
      recipient,
      funding
    from card
    where not coalesce(is_deleted, false)

)

select *
from fields
),  __dbt__CTE__stg_stripe_payout as (
with payout as (

    select *
    from `dbt-package-testing`.`stripe`.`payout`

), fields as (

    select 
      id as payout_id,
      amount,
      arrival_date,
      automatic as is_automatic,
      balance_transaction_id,
      created as created_at,
      currency,
      description,
      method,
      source_type,
      status,
      type
    from payout

)

select *
from fields
),  __dbt__CTE__stg_stripe_refund as (
with refund as (

    select *
    from `dbt-package-testing`.`stripe`.`refund`

), fields as (

    select 
      id as refund_id,
      amount,
      balance_transaction_id,
      charge_id,
      created as created_at,
      currency,
      description,
      reason,
      receipt_number,
      status
    from refund

)

select *
from fields
),  __dbt__CTE__stg_stripe_customer as (
with customer as (

    select *
    from `dbt-package-testing`.`stripe`.`customer`

), fields as (

    select 
      id as customer_id,
      account_balance,
      created as created_at,
      currency,
      default_card_id,
      delinquent as is_deliguent,
      description,
      email,
      shipping_address_city,
      shipping_address_country,
      shipping_address_line_1,
      shipping_address_line_2,
      shipping_address_postal_code,
      shipping_address_state,
      shipping_name,
      shipping_phone
    from customer
    where not is_deleted

)

select *
from fields
),  __dbt__CTE__stripe_balance_transaction_joined as (
with balance_transaction as (

    select *
    from __dbt__CTE__stg_stripe_balance_transaction
  
), charge as (

    select *
    from __dbt__CTE__stg_stripe_charge

), payment_intent as (

    select *
    from __dbt__CTE__stg_stripe_payment_intent

), payment_method as (

    select *
    from __dbt__CTE__stg_stripe_payment_method

), card as (

    select *
    from __dbt__CTE__stg_stripe_card

), payout as (

    select *
    from __dbt__CTE__stg_stripe_payout

), refund as (

    select *
    from __dbt__CTE__stg_stripe_refund

), customer as (

    select *
    from __dbt__CTE__stg_stripe_customer


)

select 
  balance_transaction.balance_transaction_id,
  balance_transaction.created_at,
  balance_transaction.available_on,
  balance_transaction.currency,
  balance_transaction.amount,
  balance_transaction.fee,
  balance_transaction.net,
  balance_transaction.type,
  case
    when balance_transaction.type in ('charge', 'payment') then 'charge'
    when balance_transaction.type in ('refund', 'payment_refund') then 'refund'
    when balance_transaction.type in ('payout_cancel', 'payout_failure')	then 'payout_reversal'
    when balance_transaction.type in ('transfer', 'recipient_transfer') then	'transfer'
    when balance_transaction.type in ('transfer_cancel', 'transfer_failure', 'recipient_transfer_cancel', 'recipient_transfer_failure') then 'transfer_reversal'
    else balance_transaction.type
  end as reporting_category,
  balance_transaction.source,
  balance_transaction.description,
  case when balance_transaction.type = 'charge' then charge.amount end as customer_facing_amount, --think this might be the charge amount/currency
  case when balance_transaction.type = 'charge' then charge.currency end as customer_facing_currency,
  date_add(date(balance_transaction.available_on), interval 1 day) as effective_at,
  coalesce(charge.customer_id, refund_charge.customer_id) as customer_id,
  charge.receipt_email,
  customer.description as customer_description,
  charge.charge_id,
  charge.payment_intent_id,
  charge.created_at as charge_created_at,
  payment_method.type as payment_method_type,
  card.brand as card_brand,
  card.funding as card_funding,
  card.country as card_country,
  payout.payout_id,
  payout.arrival_date as payout_expeted_arrival_date,
  payout.status as payout_status,
  payout.type as payout_type,
  payout.description as payout_description,
  refund.reason as refund_reason
from balance_transaction
left join charge on charge.balance_transaction_id = balance_transaction.balance_transaction_id
left join customer on charge.customer_id = customer.customer_id
left join payment_intent on charge.payment_intent_id = payment_intent.payment_intent_id
left join payment_method on payment_intent.payment_method_id = payment_method.payment_method_id
left join card on charge.card_id = card.card_id
left join payout on payout.balance_transaction_id = balance_transaction.balance_transaction_id
left join refund on refund.balance_transaction_id = balance_transaction.balance_transaction_id
left join charge as refund_charge on refund.charge_id = refund_charge.charge_id
order by created_at desc
),  __dbt__CTE__stripe_incomplete_charges as (
with charge as (

    select *
    from __dbt__CTE__stg_stripe_charge

)

select 
  created_at,
  customer_id,
  amount
from charge
where not is_captured
),balance_transaction_joined as (

    select *
    from __dbt__CTE__stripe_balance_transaction_joined  

), incomplete_charges as (

    select *
    from __dbt__CTE__stripe_incomplete_charges  

), daily_balance_transactions as (

  select
    date(case when type = 'payout' then available_on else created_at end) as date,
    sum(case when type in ('charge', 'payment') then amount else 0 end) as total_sales,
    sum(case when type in ('payment_refund', 'refund') then amount else 0 end) as total_refunds,
    sum(case when type = 'adjustment' then amount else 0 end) as total_adjustments,
    sum(case when type not in ('charge', 'payment', 'payment_refund', 'refund', 'adjustment', 'payout') and type not like '%transfer%' then amount else 0 end) as total_other_transactions,
    sum(case when type <> 'payout' and type not like '%transfer%' then amount else 0 end) as total_gross_transaction_amount,
    sum(case when type <> 'payout' and type not like '%transfer%' then net else 0 end) as total_net_tranactions,
    sum(case when type = 'payout' or type like '%transfer%' then fee * -1.0 else 0 end) as total_payout_fees,
    sum(case when type = 'payout' or type like '%transfer%' then amount else 0 end) as total_gross_payout_amount,
    sum(case when type = 'payout' or type like '%transfer%' then fee * -1.0 else net end) as daily_net_activity,
    sum(if(type in ('payment', 'charge'), 1, 0)) as total_sales_count,
    sum(if(type = 'payout', 1, 0)) as total_payouts_count,
    count(distinct case when type = 'adjustment' then coalesce(source, payout_id) end) as total_adjustments_count
  from balance_transaction_joined
  group by 1

), daily_failed_charges as (

    select
      date(created_at) as date,
      count(*) as total_failed_charge_count,
      sum(amount) as total_failed_charge_amount
    from incomplete_charges
    group by 1

)

select
  daily_balance_transactions.date,
  daily_balance_transactions.total_sales/100.0 as total_sales,
  daily_balance_transactions.total_refunds/100.0 as total_refunds,
  daily_balance_transactions.total_adjustments/100.0 as total_adjustments,
  daily_balance_transactions.total_other_transactions/100.0 as total_other_transactions,
  daily_balance_transactions.total_gross_transaction_amount/100.0 as total_gross_transaction_amount,
  daily_balance_transactions.total_net_tranactions/100.0 as total_net_tranactions,
  daily_balance_transactions.total_payout_fees/100.0 as total_payout_fees,
  daily_balance_transactions.total_gross_payout_amount/100.0 as total_gross_payout_amount,
  daily_balance_transactions.daily_net_activity/100.0 as daily_net_activity,
  (daily_balance_transactions.daily_net_activity + daily_balance_transactions.total_gross_payout_amount)/100.0 as daily_end_balance,
  daily_balance_transactions.total_sales_count,
  daily_balance_transactions.total_payouts_count,
  daily_balance_transactions.total_adjustments_count,
  coalesce(daily_failed_charges.total_failed_charge_count, 0) as total_failed_charge_count,
  coalesce(daily_failed_charges.total_failed_charge_amount/100, 0) as total_failed_charge_amount
from daily_balance_transactions
left join daily_failed_charges on daily_balance_transactions.date = daily_failed_charges.date
order by 1 desc
  );
    
2020-06-10 18:36:43.156456 (Thread-1): finished collecting timing info
2020-06-10 18:36:43.161221 (Thread-1): Client.dataset is deprecated and will be removed in a future version. Use a string like 'my_project.my_dataset' or a cloud.google.bigquery.DatasetReference object, instead.
2020-06-10 18:36:43.315525 (Thread-3): finished collecting timing info
2020-06-10 18:36:43.316653 (Thread-3): Sending event: {'category': 'dbt', 'action': 'run_model', 'label': '327c283d-4f2c-4969-ae83-b21d09619015', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0xa26f8a910>]}
2020-06-10 18:36:43.317001 (Thread-3): 11:36:43 | 3 of 8 OK created table model dbt_erik.stripe_balance_transactions... [CREATE TABLE (2071) in 3.21s]
2020-06-10 18:36:43.317219 (Thread-3): Finished running node model.stripe.stripe_balance_transactions
2020-06-10 18:36:43.317416 (Thread-3): Began running node model.stripe.stripe_quarterly_overview
2020-06-10 18:36:43.317727 (Thread-3): 11:36:43 | 7 of 8 START table model dbt_erik.stripe_quarterly_overview.......... [RUN]
2020-06-10 18:36:43.318138 (Thread-3): Acquiring new bigquery connection "model.stripe.stripe_quarterly_overview".
2020-06-10 18:36:43.318276 (Thread-3): Re-using an available connection from the pool (formerly model.stripe.stripe_balance_transactions).
2020-06-10 18:36:43.318409 (Thread-3): Compiling model.stripe.stripe_quarterly_overview
2020-06-10 18:36:43.338160 (Thread-1): Writing runtime SQL for node "model.stripe.stripe_monthly_overview"
2020-06-10 18:36:43.366355 (Thread-3): Writing injected SQL for node "model.stripe.stripe_quarterly_overview"
2020-06-10 18:36:43.366557 (Thread-1): On model.stripe.stripe_monthly_overview: /* {"app": "dbt", "dbt_version": "0.17.0rc1", "profile_name": "dbt_test", "target_name": "dev", "node_id": "model.stripe.stripe_monthly_overview"} */


  create or replace table `dbt-package-testing`.`dbt_erik`.`stripe_monthly_overview`
  
  
  OPTIONS()
  as (
    with  __dbt__CTE__stg_stripe_balance_transaction as (
with balance_transaction as (

    select *
    from `dbt-package-testing`.`stripe`.`balance_transaction`

), fields as (

    select 
      id as balance_transaction_id,
      amount,
      available_on,
      created as created_at,
      currency,
      description,
      exchange_rate,
      fee,
      net,
      source,
      status,
      type
    from balance_transaction
)

select *
from fields
),  __dbt__CTE__stg_stripe_charge as (
with charge as (

    select *
    from `dbt-package-testing`.`stripe`.`charge`

), fields as (

    select 
      id as charge_id, 
      amount,
      amount_refunded,
      application_fee_amount,
      balance_transaction_id,
      captured as is_captured,
      card_id,
      created as created_at,
      customer_id,
      currency,
      description,
      failure_code,
      failure_message,
      paid as is_paid,
      payment_intent_id,
      receipt_email,
      receipt_number,
      refunded as is_refunded,
      status,
      invoice_id
    from charge
    
)

select *
from fields
),  __dbt__CTE__stg_stripe_payment_intent as (
with payment_intent as (

    select *
    from `dbt-package-testing`.`stripe`.`payment_intent`

), fields as (

    select 
      id as payment_intent_id,
      amount,
      amount_capturable,
      amount_received,
      application,
      application_fee_amount,
      canceled_at,
      cancellation_reason,
      capture_method,
      confirmation_method,
      created as created_at,
      currency,
      customer_id,
      description,
      payment_method_id,
      receipt_email,
      statement_descriptor,
      status
    from payment_intent

)

select *
from fields
),  __dbt__CTE__stg_stripe_payment_method as (
with payment_method as (

    select *
    from `dbt-package-testing`.`stripe`.`payment_method`

), fields as (

    select 
      id as payment_method_id,
      created as created_at,
      customer_id,
      type
    from payment_method
    where not is_deleted

)

select *
from fields
),  __dbt__CTE__stg_stripe_card as (
with card as (

    select *
    from `dbt-package-testing`.`stripe`.`card`

), fields as (

    select 
      id as card_id,
      brand,
      country,
      created as created_at,
      customer_id,
      name,
      recipient,
      funding
    from card
    where not coalesce(is_deleted, false)

)

select *
from fields
),  __dbt__CTE__stg_stripe_payout as (
with payout as (

    select *
    from `dbt-package-testing`.`stripe`.`payout`

), fields as (

    select 
      id as payout_id,
      amount,
      arrival_date,
      automatic as is_automatic,
      balance_transaction_id,
      created as created_at,
      currency,
      description,
      method,
      source_type,
      status,
      type
    from payout

)

select *
from fields
),  __dbt__CTE__stg_stripe_refund as (
with refund as (

    select *
    from `dbt-package-testing`.`stripe`.`refund`

), fields as (

    select 
      id as refund_id,
      amount,
      balance_transaction_id,
      charge_id,
      created as created_at,
      currency,
      description,
      reason,
      receipt_number,
      status
    from refund

)

select *
from fields
),  __dbt__CTE__stg_stripe_customer as (
with customer as (

    select *
    from `dbt-package-testing`.`stripe`.`customer`

), fields as (

    select 
      id as customer_id,
      account_balance,
      created as created_at,
      currency,
      default_card_id,
      delinquent as is_deliguent,
      description,
      email,
      shipping_address_city,
      shipping_address_country,
      shipping_address_line_1,
      shipping_address_line_2,
      shipping_address_postal_code,
      shipping_address_state,
      shipping_name,
      shipping_phone
    from customer
    where not is_deleted

)

select *
from fields
),  __dbt__CTE__stripe_balance_transaction_joined as (
with balance_transaction as (

    select *
    from __dbt__CTE__stg_stripe_balance_transaction
  
), charge as (

    select *
    from __dbt__CTE__stg_stripe_charge

), payment_intent as (

    select *
    from __dbt__CTE__stg_stripe_payment_intent

), payment_method as (

    select *
    from __dbt__CTE__stg_stripe_payment_method

), card as (

    select *
    from __dbt__CTE__stg_stripe_card

), payout as (

    select *
    from __dbt__CTE__stg_stripe_payout

), refund as (

    select *
    from __dbt__CTE__stg_stripe_refund

), customer as (

    select *
    from __dbt__CTE__stg_stripe_customer


)

select 
  balance_transaction.balance_transaction_id,
  balance_transaction.created_at,
  balance_transaction.available_on,
  balance_transaction.currency,
  balance_transaction.amount,
  balance_transaction.fee,
  balance_transaction.net,
  balance_transaction.type,
  case
    when balance_transaction.type in ('charge', 'payment') then 'charge'
    when balance_transaction.type in ('refund', 'payment_refund') then 'refund'
    when balance_transaction.type in ('payout_cancel', 'payout_failure')	then 'payout_reversal'
    when balance_transaction.type in ('transfer', 'recipient_transfer') then	'transfer'
    when balance_transaction.type in ('transfer_cancel', 'transfer_failure', 'recipient_transfer_cancel', 'recipient_transfer_failure') then 'transfer_reversal'
    else balance_transaction.type
  end as reporting_category,
  balance_transaction.source,
  balance_transaction.description,
  case when balance_transaction.type = 'charge' then charge.amount end as customer_facing_amount, --think this might be the charge amount/currency
  case when balance_transaction.type = 'charge' then charge.currency end as customer_facing_currency,
  date_add(date(balance_transaction.available_on), interval 1 day) as effective_at,
  coalesce(charge.customer_id, refund_charge.customer_id) as customer_id,
  charge.receipt_email,
  customer.description as customer_description,
  charge.charge_id,
  charge.payment_intent_id,
  charge.created_at as charge_created_at,
  payment_method.type as payment_method_type,
  card.brand as card_brand,
  card.funding as card_funding,
  card.country as card_country,
  payout.payout_id,
  payout.arrival_date as payout_expeted_arrival_date,
  payout.status as payout_status,
  payout.type as payout_type,
  payout.description as payout_description,
  refund.reason as refund_reason
from balance_transaction
left join charge on charge.balance_transaction_id = balance_transaction.balance_transaction_id
left join customer on charge.customer_id = customer.customer_id
left join payment_intent on charge.payment_intent_id = payment_intent.payment_intent_id
left join payment_method on payment_intent.payment_method_id = payment_method.payment_method_id
left join card on charge.card_id = card.card_id
left join payout on payout.balance_transaction_id = balance_transaction.balance_transaction_id
left join refund on refund.balance_transaction_id = balance_transaction.balance_transaction_id
left join charge as refund_charge on refund.charge_id = refund_charge.charge_id
order by created_at desc
),  __dbt__CTE__stripe_incomplete_charges as (
with charge as (

    select *
    from __dbt__CTE__stg_stripe_charge

)

select 
  created_at,
  customer_id,
  amount
from charge
where not is_captured
),balance_transaction_joined as (

    select *
    from __dbt__CTE__stripe_balance_transaction_joined  

), incomplete_charges as (

    select *
    from __dbt__CTE__stripe_incomplete_charges  

), monthly_balance_transactions as (

  select
    date_trunc(date(case when type = 'payout' then available_on else created_at end), month) as month,
    sum(case when type in ('charge', 'payment') then amount else 0 end) as total_sales,
    sum(case when type in ('payment_refund', 'refund') then amount else 0 end) as total_refunds,
    sum(case when type = 'adjustment' then amount else 0 end) as total_adjustments,
    sum(case when type not in ('charge', 'payment', 'payment_refund', 'refund', 'adjustment', 'payout') and type not like '%transfer%' then amount else 0 end) as total_other_transactions,
    sum(case when type <> 'payout' and type not like '%transfer%' then amount else 0 end) as total_gross_transaction_amount,
    sum(case when type <> 'payout' and type not like '%transfer%' then net else 0 end) as total_net_tranactions,
    sum(case when type = 'payout' or type like '%transfer%' then fee * -1.0 else 0 end) as total_payout_fees,
    sum(case when type = 'payout' or type like '%transfer%' then amount else 0 end) as total_gross_payout_amount,
    sum(case when type = 'payout' or type like '%transfer%' then fee * -1.0 else net end) as monthly_net_activity,
    sum(if(type in ('payment', 'charge'), 1, 0)) as total_sales_count,
    sum(if(type = 'payout', 1, 0)) as total_payout_count,
    count(distinct case when type = 'adjustment' then coalesce(source, payout_id) end) as total_adjustments_count
  from balance_transaction_joined
  group by 1

), monthly_failed_charges as (

    select
      date_trunc(date(created_at), month) as month,
      count(*) as total_failed_charge_count,
      sum(amount) as total_failed_charge_amount
    from incomplete_charges
    group by 1

)

select
  monthly_balance_transactions.month,
  monthly_balance_transactions.total_sales/100.0 as total_sales,
  monthly_balance_transactions.total_refunds/100.0 as total_refunds,
  monthly_balance_transactions.total_adjustments/100.0 as total_adjustments,
  monthly_balance_transactions.total_other_transactions/100.0 as total_other_transactions,
  monthly_balance_transactions.total_gross_transaction_amount/100.0 as total_gross_transaction_amount,
  monthly_balance_transactions.total_net_tranactions/100.0 as total_net_tranactions,
  monthly_balance_transactions.total_payout_fees/100.0 as total_payout_fees,
  monthly_balance_transactions.total_gross_payout_amount/100.0 as total_gross_payout_amount,
  monthly_balance_transactions.monthly_net_activity/100.0 as monthly_net_activity,
  (monthly_balance_transactions.monthly_net_activity + monthly_balance_transactions.total_gross_payout_amount)/100.0 as monthly_end_balance,
  monthly_balance_transactions.total_sales_count,
  monthly_balance_transactions.total_payout_count,
  monthly_balance_transactions.total_adjustments_count,
  coalesce(monthly_failed_charges.total_failed_charge_count, 0) as total_failed_charge_count,
  coalesce(monthly_failed_charges.total_failed_charge_amount/100, 0) as total_failed_charge_amount
from monthly_balance_transactions
left join monthly_failed_charges on monthly_balance_transactions.month = monthly_failed_charges.month
order by 1 desc
  );
    
2020-06-10 18:36:43.367865 (Thread-3): finished collecting timing info
2020-06-10 18:36:43.372914 (Thread-3): Client.dataset is deprecated and will be removed in a future version. Use a string like 'my_project.my_dataset' or a cloud.google.bigquery.DatasetReference object, instead.
2020-06-10 18:36:43.534722 (Thread-3): Writing runtime SQL for node "model.stripe.stripe_quarterly_overview"
2020-06-10 18:36:43.537113 (Thread-3): On model.stripe.stripe_quarterly_overview: /* {"app": "dbt", "dbt_version": "0.17.0rc1", "profile_name": "dbt_test", "target_name": "dev", "node_id": "model.stripe.stripe_quarterly_overview"} */


  create or replace table `dbt-package-testing`.`dbt_erik`.`stripe_quarterly_overview`
  
  
  OPTIONS()
  as (
    with  __dbt__CTE__stg_stripe_balance_transaction as (
with balance_transaction as (

    select *
    from `dbt-package-testing`.`stripe`.`balance_transaction`

), fields as (

    select 
      id as balance_transaction_id,
      amount,
      available_on,
      created as created_at,
      currency,
      description,
      exchange_rate,
      fee,
      net,
      source,
      status,
      type
    from balance_transaction
)

select *
from fields
),  __dbt__CTE__stg_stripe_charge as (
with charge as (

    select *
    from `dbt-package-testing`.`stripe`.`charge`

), fields as (

    select 
      id as charge_id, 
      amount,
      amount_refunded,
      application_fee_amount,
      balance_transaction_id,
      captured as is_captured,
      card_id,
      created as created_at,
      customer_id,
      currency,
      description,
      failure_code,
      failure_message,
      paid as is_paid,
      payment_intent_id,
      receipt_email,
      receipt_number,
      refunded as is_refunded,
      status,
      invoice_id
    from charge
    
)

select *
from fields
),  __dbt__CTE__stg_stripe_payment_intent as (
with payment_intent as (

    select *
    from `dbt-package-testing`.`stripe`.`payment_intent`

), fields as (

    select 
      id as payment_intent_id,
      amount,
      amount_capturable,
      amount_received,
      application,
      application_fee_amount,
      canceled_at,
      cancellation_reason,
      capture_method,
      confirmation_method,
      created as created_at,
      currency,
      customer_id,
      description,
      payment_method_id,
      receipt_email,
      statement_descriptor,
      status
    from payment_intent

)

select *
from fields
),  __dbt__CTE__stg_stripe_payment_method as (
with payment_method as (

    select *
    from `dbt-package-testing`.`stripe`.`payment_method`

), fields as (

    select 
      id as payment_method_id,
      created as created_at,
      customer_id,
      type
    from payment_method
    where not is_deleted

)

select *
from fields
),  __dbt__CTE__stg_stripe_card as (
with card as (

    select *
    from `dbt-package-testing`.`stripe`.`card`

), fields as (

    select 
      id as card_id,
      brand,
      country,
      created as created_at,
      customer_id,
      name,
      recipient,
      funding
    from card
    where not coalesce(is_deleted, false)

)

select *
from fields
),  __dbt__CTE__stg_stripe_payout as (
with payout as (

    select *
    from `dbt-package-testing`.`stripe`.`payout`

), fields as (

    select 
      id as payout_id,
      amount,
      arrival_date,
      automatic as is_automatic,
      balance_transaction_id,
      created as created_at,
      currency,
      description,
      method,
      source_type,
      status,
      type
    from payout

)

select *
from fields
),  __dbt__CTE__stg_stripe_refund as (
with refund as (

    select *
    from `dbt-package-testing`.`stripe`.`refund`

), fields as (

    select 
      id as refund_id,
      amount,
      balance_transaction_id,
      charge_id,
      created as created_at,
      currency,
      description,
      reason,
      receipt_number,
      status
    from refund

)

select *
from fields
),  __dbt__CTE__stg_stripe_customer as (
with customer as (

    select *
    from `dbt-package-testing`.`stripe`.`customer`

), fields as (

    select 
      id as customer_id,
      account_balance,
      created as created_at,
      currency,
      default_card_id,
      delinquent as is_deliguent,
      description,
      email,
      shipping_address_city,
      shipping_address_country,
      shipping_address_line_1,
      shipping_address_line_2,
      shipping_address_postal_code,
      shipping_address_state,
      shipping_name,
      shipping_phone
    from customer
    where not is_deleted

)

select *
from fields
),  __dbt__CTE__stripe_balance_transaction_joined as (
with balance_transaction as (

    select *
    from __dbt__CTE__stg_stripe_balance_transaction
  
), charge as (

    select *
    from __dbt__CTE__stg_stripe_charge

), payment_intent as (

    select *
    from __dbt__CTE__stg_stripe_payment_intent

), payment_method as (

    select *
    from __dbt__CTE__stg_stripe_payment_method

), card as (

    select *
    from __dbt__CTE__stg_stripe_card

), payout as (

    select *
    from __dbt__CTE__stg_stripe_payout

), refund as (

    select *
    from __dbt__CTE__stg_stripe_refund

), customer as (

    select *
    from __dbt__CTE__stg_stripe_customer


)

select 
  balance_transaction.balance_transaction_id,
  balance_transaction.created_at,
  balance_transaction.available_on,
  balance_transaction.currency,
  balance_transaction.amount,
  balance_transaction.fee,
  balance_transaction.net,
  balance_transaction.type,
  case
    when balance_transaction.type in ('charge', 'payment') then 'charge'
    when balance_transaction.type in ('refund', 'payment_refund') then 'refund'
    when balance_transaction.type in ('payout_cancel', 'payout_failure')	then 'payout_reversal'
    when balance_transaction.type in ('transfer', 'recipient_transfer') then	'transfer'
    when balance_transaction.type in ('transfer_cancel', 'transfer_failure', 'recipient_transfer_cancel', 'recipient_transfer_failure') then 'transfer_reversal'
    else balance_transaction.type
  end as reporting_category,
  balance_transaction.source,
  balance_transaction.description,
  case when balance_transaction.type = 'charge' then charge.amount end as customer_facing_amount, --think this might be the charge amount/currency
  case when balance_transaction.type = 'charge' then charge.currency end as customer_facing_currency,
  date_add(date(balance_transaction.available_on), interval 1 day) as effective_at,
  coalesce(charge.customer_id, refund_charge.customer_id) as customer_id,
  charge.receipt_email,
  customer.description as customer_description,
  charge.charge_id,
  charge.payment_intent_id,
  charge.created_at as charge_created_at,
  payment_method.type as payment_method_type,
  card.brand as card_brand,
  card.funding as card_funding,
  card.country as card_country,
  payout.payout_id,
  payout.arrival_date as payout_expeted_arrival_date,
  payout.status as payout_status,
  payout.type as payout_type,
  payout.description as payout_description,
  refund.reason as refund_reason
from balance_transaction
left join charge on charge.balance_transaction_id = balance_transaction.balance_transaction_id
left join customer on charge.customer_id = customer.customer_id
left join payment_intent on charge.payment_intent_id = payment_intent.payment_intent_id
left join payment_method on payment_intent.payment_method_id = payment_method.payment_method_id
left join card on charge.card_id = card.card_id
left join payout on payout.balance_transaction_id = balance_transaction.balance_transaction_id
left join refund on refund.balance_transaction_id = balance_transaction.balance_transaction_id
left join charge as refund_charge on refund.charge_id = refund_charge.charge_id
order by created_at desc
),  __dbt__CTE__stripe_incomplete_charges as (
with charge as (

    select *
    from __dbt__CTE__stg_stripe_charge

)

select 
  created_at,
  customer_id,
  amount
from charge
where not is_captured
),balance_transaction_joined as (

    select *
    from __dbt__CTE__stripe_balance_transaction_joined  

), incomplete_charges as (

    select *
    from __dbt__CTE__stripe_incomplete_charges  

), quarterly_balance_transactions as (

  select
    date_trunc(date(case when type = 'payout' then available_on else created_at end), quarter) as quarter,
    sum(case when type in ('charge', 'payment') then amount else 0 end) as total_sales,
    sum(case when type in ('payment_refund', 'refund') then amount else 0 end) as total_refunds,
    sum(case when type = 'adjustment' then amount else 0 end) as total_adjustments,
    sum(case when type not in ('charge', 'payment', 'payment_refund', 'refund', 'adjustment', 'payout') and type not like '%transfer%' then amount else 0 end) as total_other_transactions,
    sum(case when type <> 'payout' and type not like '%transfer%' then amount else 0 end) as total_gross_transaction_amount,
    sum(case when type <> 'payout' and type not like '%transfer%' then net else 0 end) as total_net_tranactions,
    sum(case when type = 'payout' or type like '%transfer%' then fee * -1.0 else 0 end) as total_payout_fees,
    sum(case when type = 'payout' or type like '%transfer%' then amount else 0 end) as total_gross_payout_amount,
    sum(case when type = 'payout' or type like '%transfer%' then fee * -1.0 else net end) as quarterly_net_activity,
    sum(if(type in ('payment', 'charge'), 1, 0)) as total_sales_count,
    sum(if(type = 'payout', 1, 0)) as total_payout_count,
    count(distinct case when type = 'adjustment' then coalesce(source, payout_id) end) as total_adjustments_count
  from balance_transaction_joined
  group by 1

), quarterly_failed_charges as (

    select
      date_trunc(date(created_at), quarter) as quarter,
      count(*) as total_failed_charge_count,
      sum(amount) as total_failed_charge_amount
    from incomplete_charges
    group by 1

)

select
  quarterly_balance_transactions.quarter,
  quarterly_balance_transactions.total_sales/100.0 as total_sales,
  quarterly_balance_transactions.total_refunds/100.0 as total_refunds,
  quarterly_balance_transactions.total_adjustments/100.0 as total_adjustments,
  quarterly_balance_transactions.total_other_transactions/100.0 as total_other_transactions,
  quarterly_balance_transactions.total_gross_transaction_amount/100.0 as total_gross_transaction_amount,
  quarterly_balance_transactions.total_net_tranactions/100.0 as total_net_tranactions,
  quarterly_balance_transactions.total_payout_fees/100.0 as total_payout_fees,
  quarterly_balance_transactions.total_gross_payout_amount/100.0 as total_gross_payout_amount,
  quarterly_balance_transactions.quarterly_net_activity/100.0 as quarterly_net_activity,
  (quarterly_balance_transactions.quarterly_net_activity + quarterly_balance_transactions.total_gross_payout_amount)/100.0 as quarterly_end_balance,
  quarterly_balance_transactions.total_sales_count,
  quarterly_balance_transactions.total_payout_count,
  quarterly_balance_transactions.total_adjustments_count,
  coalesce(quarterly_failed_charges.total_failed_charge_count, 0) as total_failed_charge_count,
  coalesce(quarterly_failed_charges.total_failed_charge_amount/100, 0) as total_failed_charge_amount
from quarterly_balance_transactions
left join quarterly_failed_charges on quarterly_balance_transactions.quarter = quarterly_failed_charges.quarter
order by 1 desc
  );
    
2020-06-10 18:36:43.653769 (Thread-2): finished collecting timing info
2020-06-10 18:36:43.654983 (Thread-2): Sending event: {'category': 'dbt', 'action': 'run_model', 'label': '327c283d-4f2c-4969-ae83-b21d09619015', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0xa268f5c50>]}
2020-06-10 18:36:43.655428 (Thread-2): 11:36:43 | 4 of 8 OK created table model dbt_erik.stripe_customer_overview...... [CREATE TABLE (399) in 3.54s]
2020-06-10 18:36:43.655636 (Thread-2): Finished running node model.stripe.stripe_customer_overview
2020-06-10 18:36:43.655832 (Thread-2): Began running node model.stripe.stripe_weekly_overview
2020-06-10 18:36:43.656144 (Thread-2): 11:36:43 | 8 of 8 START table model dbt_erik.stripe_weekly_overview............. [RUN]
2020-06-10 18:36:43.656537 (Thread-2): Acquiring new bigquery connection "model.stripe.stripe_weekly_overview".
2020-06-10 18:36:43.656672 (Thread-2): Re-using an available connection from the pool (formerly model.stripe.stripe_customer_overview).
2020-06-10 18:36:43.656800 (Thread-2): Compiling model.stripe.stripe_weekly_overview
2020-06-10 18:36:43.703948 (Thread-2): Writing injected SQL for node "model.stripe.stripe_weekly_overview"
2020-06-10 18:36:43.704439 (Thread-2): finished collecting timing info
2020-06-10 18:36:43.708869 (Thread-2): Client.dataset is deprecated and will be removed in a future version. Use a string like 'my_project.my_dataset' or a cloud.google.bigquery.DatasetReference object, instead.
2020-06-10 18:36:43.855184 (Thread-2): Writing runtime SQL for node "model.stripe.stripe_weekly_overview"
2020-06-10 18:36:43.858542 (Thread-2): On model.stripe.stripe_weekly_overview: /* {"app": "dbt", "dbt_version": "0.17.0rc1", "profile_name": "dbt_test", "target_name": "dev", "node_id": "model.stripe.stripe_weekly_overview"} */


  create or replace table `dbt-package-testing`.`dbt_erik`.`stripe_weekly_overview`
  
  
  OPTIONS()
  as (
    with  __dbt__CTE__stg_stripe_balance_transaction as (
with balance_transaction as (

    select *
    from `dbt-package-testing`.`stripe`.`balance_transaction`

), fields as (

    select 
      id as balance_transaction_id,
      amount,
      available_on,
      created as created_at,
      currency,
      description,
      exchange_rate,
      fee,
      net,
      source,
      status,
      type
    from balance_transaction
)

select *
from fields
),  __dbt__CTE__stg_stripe_charge as (
with charge as (

    select *
    from `dbt-package-testing`.`stripe`.`charge`

), fields as (

    select 
      id as charge_id, 
      amount,
      amount_refunded,
      application_fee_amount,
      balance_transaction_id,
      captured as is_captured,
      card_id,
      created as created_at,
      customer_id,
      currency,
      description,
      failure_code,
      failure_message,
      paid as is_paid,
      payment_intent_id,
      receipt_email,
      receipt_number,
      refunded as is_refunded,
      status,
      invoice_id
    from charge
    
)

select *
from fields
),  __dbt__CTE__stg_stripe_payment_intent as (
with payment_intent as (

    select *
    from `dbt-package-testing`.`stripe`.`payment_intent`

), fields as (

    select 
      id as payment_intent_id,
      amount,
      amount_capturable,
      amount_received,
      application,
      application_fee_amount,
      canceled_at,
      cancellation_reason,
      capture_method,
      confirmation_method,
      created as created_at,
      currency,
      customer_id,
      description,
      payment_method_id,
      receipt_email,
      statement_descriptor,
      status
    from payment_intent

)

select *
from fields
),  __dbt__CTE__stg_stripe_payment_method as (
with payment_method as (

    select *
    from `dbt-package-testing`.`stripe`.`payment_method`

), fields as (

    select 
      id as payment_method_id,
      created as created_at,
      customer_id,
      type
    from payment_method
    where not is_deleted

)

select *
from fields
),  __dbt__CTE__stg_stripe_card as (
with card as (

    select *
    from `dbt-package-testing`.`stripe`.`card`

), fields as (

    select 
      id as card_id,
      brand,
      country,
      created as created_at,
      customer_id,
      name,
      recipient,
      funding
    from card
    where not coalesce(is_deleted, false)

)

select *
from fields
),  __dbt__CTE__stg_stripe_payout as (
with payout as (

    select *
    from `dbt-package-testing`.`stripe`.`payout`

), fields as (

    select 
      id as payout_id,
      amount,
      arrival_date,
      automatic as is_automatic,
      balance_transaction_id,
      created as created_at,
      currency,
      description,
      method,
      source_type,
      status,
      type
    from payout

)

select *
from fields
),  __dbt__CTE__stg_stripe_refund as (
with refund as (

    select *
    from `dbt-package-testing`.`stripe`.`refund`

), fields as (

    select 
      id as refund_id,
      amount,
      balance_transaction_id,
      charge_id,
      created as created_at,
      currency,
      description,
      reason,
      receipt_number,
      status
    from refund

)

select *
from fields
),  __dbt__CTE__stg_stripe_customer as (
with customer as (

    select *
    from `dbt-package-testing`.`stripe`.`customer`

), fields as (

    select 
      id as customer_id,
      account_balance,
      created as created_at,
      currency,
      default_card_id,
      delinquent as is_deliguent,
      description,
      email,
      shipping_address_city,
      shipping_address_country,
      shipping_address_line_1,
      shipping_address_line_2,
      shipping_address_postal_code,
      shipping_address_state,
      shipping_name,
      shipping_phone
    from customer
    where not is_deleted

)

select *
from fields
),  __dbt__CTE__stripe_balance_transaction_joined as (
with balance_transaction as (

    select *
    from __dbt__CTE__stg_stripe_balance_transaction
  
), charge as (

    select *
    from __dbt__CTE__stg_stripe_charge

), payment_intent as (

    select *
    from __dbt__CTE__stg_stripe_payment_intent

), payment_method as (

    select *
    from __dbt__CTE__stg_stripe_payment_method

), card as (

    select *
    from __dbt__CTE__stg_stripe_card

), payout as (

    select *
    from __dbt__CTE__stg_stripe_payout

), refund as (

    select *
    from __dbt__CTE__stg_stripe_refund

), customer as (

    select *
    from __dbt__CTE__stg_stripe_customer


)

select 
  balance_transaction.balance_transaction_id,
  balance_transaction.created_at,
  balance_transaction.available_on,
  balance_transaction.currency,
  balance_transaction.amount,
  balance_transaction.fee,
  balance_transaction.net,
  balance_transaction.type,
  case
    when balance_transaction.type in ('charge', 'payment') then 'charge'
    when balance_transaction.type in ('refund', 'payment_refund') then 'refund'
    when balance_transaction.type in ('payout_cancel', 'payout_failure')	then 'payout_reversal'
    when balance_transaction.type in ('transfer', 'recipient_transfer') then	'transfer'
    when balance_transaction.type in ('transfer_cancel', 'transfer_failure', 'recipient_transfer_cancel', 'recipient_transfer_failure') then 'transfer_reversal'
    else balance_transaction.type
  end as reporting_category,
  balance_transaction.source,
  balance_transaction.description,
  case when balance_transaction.type = 'charge' then charge.amount end as customer_facing_amount, --think this might be the charge amount/currency
  case when balance_transaction.type = 'charge' then charge.currency end as customer_facing_currency,
  date_add(date(balance_transaction.available_on), interval 1 day) as effective_at,
  coalesce(charge.customer_id, refund_charge.customer_id) as customer_id,
  charge.receipt_email,
  customer.description as customer_description,
  charge.charge_id,
  charge.payment_intent_id,
  charge.created_at as charge_created_at,
  payment_method.type as payment_method_type,
  card.brand as card_brand,
  card.funding as card_funding,
  card.country as card_country,
  payout.payout_id,
  payout.arrival_date as payout_expeted_arrival_date,
  payout.status as payout_status,
  payout.type as payout_type,
  payout.description as payout_description,
  refund.reason as refund_reason
from balance_transaction
left join charge on charge.balance_transaction_id = balance_transaction.balance_transaction_id
left join customer on charge.customer_id = customer.customer_id
left join payment_intent on charge.payment_intent_id = payment_intent.payment_intent_id
left join payment_method on payment_intent.payment_method_id = payment_method.payment_method_id
left join card on charge.card_id = card.card_id
left join payout on payout.balance_transaction_id = balance_transaction.balance_transaction_id
left join refund on refund.balance_transaction_id = balance_transaction.balance_transaction_id
left join charge as refund_charge on refund.charge_id = refund_charge.charge_id
order by created_at desc
),  __dbt__CTE__stripe_incomplete_charges as (
with charge as (

    select *
    from __dbt__CTE__stg_stripe_charge

)

select 
  created_at,
  customer_id,
  amount
from charge
where not is_captured
),balance_transaction_joined as (

    select *
    from __dbt__CTE__stripe_balance_transaction_joined  

), incomplete_charges as (

    select *
    from __dbt__CTE__stripe_incomplete_charges  

), weekly_balance_transactions as (

  select
    date_trunc(date(case when type = 'payout' then available_on else created_at end), week) as week,
    sum(case when type in ('charge', 'payment') then amount else 0 end) as total_sales,
    sum(case when type in ('payment_refund', 'refund') then amount else 0 end) as total_refunds,
    sum(case when type = 'adjustment' then amount else 0 end) as total_adjustments,
    sum(case when type not in ('charge', 'payment', 'payment_refund', 'refund', 'adjustment', 'payout') and type not like '%transfer%' then amount else 0 end) as total_other_transactions,
    sum(case when type <> 'payout' and type not like '%transfer%' then amount else 0 end) as total_gross_transaction_amount,
    sum(case when type <> 'payout' and type not like '%transfer%' then net else 0 end) as total_net_tranactions,
    sum(case when type = 'payout' or type like '%transfer%' then fee * -1.0 else 0 end) as total_payout_fees,
    sum(case when type = 'payout' or type like '%transfer%' then amount else 0 end) as total_gross_payout_amount,
    sum(case when type = 'payout' or type like '%transfer%' then fee * -1.0 else net end) as weekly_net_activity,
    sum(if(type in ('payment', 'charge'), 1, 0)) as total_sales_count,
    sum(if(type = 'payout', 1, 0)) as total_payout_count,
    count(distinct case when type = 'adjustment' then coalesce(source, payout_id) end) as total_adjustments_count
  from balance_transaction_joined
  group by 1

), weekly_failed_charges as (

    select
      date_trunc(date(created_at), week) as week,
      count(*) as total_failed_charge_count,
      sum(amount) as total_failed_charge_amount
    from incomplete_charges
    group by 1

)

select
  weekly_balance_transactions.week,
  weekly_balance_transactions.total_sales/100.0 as total_sales,
  weekly_balance_transactions.total_refunds/100.0 as total_refunds,
  weekly_balance_transactions.total_adjustments/100.0 as total_adjustments,
  weekly_balance_transactions.total_other_transactions/100.0 as total_other_transactions,
  weekly_balance_transactions.total_gross_transaction_amount/100.0 as total_gross_transaction_amount,
  weekly_balance_transactions.total_net_tranactions/100.0 as total_net_tranactions,
  weekly_balance_transactions.total_payout_fees/100.0 as total_payout_fees,
  weekly_balance_transactions.total_gross_payout_amount/100.0 as total_gross_payout_amount,
  weekly_balance_transactions.weekly_net_activity/100.0 as weekly_net_activity,
  (weekly_balance_transactions.weekly_net_activity + weekly_balance_transactions.total_gross_payout_amount)/100.0 as weekly_end_balance,
  weekly_balance_transactions.total_sales_count,
  weekly_balance_transactions.total_payout_count,
  weekly_balance_transactions.total_adjustments_count,
  coalesce(weekly_failed_charges.total_failed_charge_count, 0) as total_failed_charge_count,
  coalesce(weekly_failed_charges.total_failed_charge_amount/100, 0) as total_failed_charge_amount
from weekly_balance_transactions
left join weekly_failed_charges on weekly_balance_transactions.week = weekly_failed_charges.week
order by 1 desc
  );
    
2020-06-10 18:36:46.264460 (Thread-4): finished collecting timing info
2020-06-10 18:36:46.265961 (Thread-4): Sending event: {'category': 'dbt', 'action': 'run_model', 'label': '327c283d-4f2c-4969-ae83-b21d09619015', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0xa26bc4a90>]}
2020-06-10 18:36:46.266440 (Thread-4): 11:36:46 | 5 of 8 OK created table model dbt_erik.stripe_daily_overview......... [CREATE TABLE (1223) in 3.34s]
2020-06-10 18:36:46.266670 (Thread-4): Finished running node model.stripe.stripe_daily_overview
2020-06-10 18:36:46.367685 (Thread-1): finished collecting timing info
2020-06-10 18:36:46.368705 (Thread-1): Sending event: {'category': 'dbt', 'action': 'run_model', 'label': '327c283d-4f2c-4969-ae83-b21d09619015', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0xa267d0790>]}
2020-06-10 18:36:46.369063 (Thread-1): 11:36:46 | 6 of 8 OK created table model dbt_erik.stripe_monthly_overview....... [CREATE TABLE (62) in 3.31s]
2020-06-10 18:36:46.369256 (Thread-1): Finished running node model.stripe.stripe_monthly_overview
2020-06-10 18:36:46.499531 (Thread-3): finished collecting timing info
2020-06-10 18:36:46.500190 (Thread-3): Sending event: {'category': 'dbt', 'action': 'run_model', 'label': '327c283d-4f2c-4969-ae83-b21d09619015', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0xa26f389d0>]}
2020-06-10 18:36:46.500438 (Thread-3): 11:36:46 | 7 of 8 OK created table model dbt_erik.stripe_quarterly_overview..... [CREATE TABLE (21) in 3.18s]
2020-06-10 18:36:46.500554 (Thread-3): Finished running node model.stripe.stripe_quarterly_overview
2020-06-10 18:36:46.954352 (Thread-2): finished collecting timing info
2020-06-10 18:36:46.955305 (Thread-2): Sending event: {'category': 'dbt', 'action': 'run_model', 'label': '327c283d-4f2c-4969-ae83-b21d09619015', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0xa26832d90>]}
2020-06-10 18:36:46.955660 (Thread-2): 11:36:46 | 8 of 8 OK created table model dbt_erik.stripe_weekly_overview........ [CREATE TABLE (264) in 3.30s]
2020-06-10 18:36:46.955849 (Thread-2): Finished running node model.stripe.stripe_weekly_overview
2020-06-10 18:36:46.967990 (MainThread): Acquiring new bigquery connection "master".
2020-06-10 18:36:46.968195 (MainThread): Opening a new connection, currently in state closed
2020-06-10 18:36:46.968626 (MainThread): 11:36:46 | 
2020-06-10 18:36:46.968815 (MainThread): 11:36:46 | Finished running 8 table models in 7.73s.
2020-06-10 18:36:46.968965 (MainThread): Connection 'master' was properly closed.
2020-06-10 18:36:46.969075 (MainThread): Connection 'model.stripe.stripe_monthly_overview' was left open.
2020-06-10 18:36:46.969174 (MainThread): Connection 'model.stripe.stripe_weekly_overview' was left open.
2020-06-10 18:36:46.969270 (MainThread): Connection 'model.stripe.stripe_quarterly_overview' was left open.
2020-06-10 18:36:46.969364 (MainThread): Connection 'model.stripe.stripe_daily_overview' was left open.
2020-06-10 18:36:47.001356 (MainThread): 
2020-06-10 18:36:47.001555 (MainThread): Completed successfully
2020-06-10 18:36:47.001750 (MainThread): 
Done. PASS=8 WARN=0 ERROR=0 SKIP=0 TOTAL=8
2020-06-10 18:36:47.001998 (MainThread): Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'end', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0xa26c92850>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0xa27062a10>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0xa26ec0f10>]}
2020-06-10 18:36:47.002208 (MainThread): Flushing usage events
2020-07-14 21:55:09.035220 (MainThread): Running with dbt=0.17.0-rc1
2020-07-14 21:55:09.279635 (MainThread): running dbt with arguments Namespace(cls=<class 'dbt.task.deps.DepsTask'>, debug=False, log_cache_events=False, log_format='default', partial_parse=None, profile=None, profiles_dir='/Users/kristin/.dbt', project_dir=None, record_timing_info=None, rpc_method='deps', single_threaded=False, strict=False, target=None, test_new_parser=False, use_cache=True, vars='{}', warn_error=False, which='deps', write_json=True)
2020-07-14 21:55:09.280395 (MainThread): Tracking: tracking
2020-07-14 21:55:09.297657 (MainThread): Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'start', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x10d0f7640>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x10d121e20>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x10d1249d0>]}
2020-07-14 21:55:09.299285 (MainThread): Set downloads directory='/var/folders/sk/bwywl8692vlbvlbk71j59w780000gp/T/dbt-downloads-3toyz_wc'
2020-07-14 21:55:09.300932 (MainThread): Making package registry request: GET https://hub.getdbt.com/api/v1/index.json
2020-07-14 21:55:09.579681 (MainThread): Response from registry: GET https://hub.getdbt.com/api/v1/index.json 200
2020-07-14 21:55:09.580002 (MainThread): Making package registry request: GET https://hub.getdbt.com/api/v1/fishtown-analytics/dbt_utils.json
2020-07-14 21:55:09.704715 (MainThread): Response from registry: GET https://hub.getdbt.com/api/v1/fishtown-analytics/dbt_utils.json 200
2020-07-14 21:55:09.717691 (MainThread): Making package registry request: GET https://hub.getdbt.com/api/v1/fishtown-analytics/dbt_utils/0.3.0.json
2020-07-14 21:55:09.850796 (MainThread): Response from registry: GET https://hub.getdbt.com/api/v1/fishtown-analytics/dbt_utils/0.3.0.json 200
2020-07-14 21:55:09.874689 (MainThread): Making package registry request: GET https://hub.getdbt.com/api/v1/fishtown-analytics/dbt_utils.json
2020-07-14 21:55:09.985939 (MainThread): Response from registry: GET https://hub.getdbt.com/api/v1/fishtown-analytics/dbt_utils.json 200
2020-07-14 21:55:09.999209 (MainThread): Making package registry request: GET https://hub.getdbt.com/api/v1/fishtown-analytics/dbt_utils/0.3.0.json
2020-07-14 21:55:10.116736 (MainThread): Response from registry: GET https://hub.getdbt.com/api/v1/fishtown-analytics/dbt_utils/0.3.0.json 200
2020-07-14 21:55:10.117615 (MainThread): Making package registry request: GET https://hub.getdbt.com/api/v1/fishtown-analytics/dbt_utils.json
2020-07-14 21:55:10.232368 (MainThread): Response from registry: GET https://hub.getdbt.com/api/v1/fishtown-analytics/dbt_utils.json 200
2020-07-14 21:55:10.245176 (MainThread): Making package registry request: GET https://hub.getdbt.com/api/v1/fishtown-analytics/dbt_utils/0.3.0.json
2020-07-14 21:55:10.364291 (MainThread): Response from registry: GET https://hub.getdbt.com/api/v1/fishtown-analytics/dbt_utils/0.3.0.json 200
2020-07-14 21:55:10.380027 (MainThread): Installing fishtown-analytics/dbt_utils@0.3.0
2020-07-14 21:55:10.911075 (MainThread):   Installed from version 0.3.0

2020-07-14 21:55:10.911298 (MainThread): Sending event: {'category': 'dbt', 'action': 'package', 'label': 'ccc8fdfc-100f-45ea-b779-7d6db4fe5903', 'property_': 'install', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x10a814ac0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x10d124d00>]}
2020-07-14 21:55:10.911492 (MainThread): Installing ~/Documents/Github/dbt_stripe_source
2020-07-14 21:55:10.911634 (MainThread):   Creating symlink to local dependency.
2020-07-14 21:55:10.911796 (MainThread):   Installed from <local @ ~/Documents/Github/dbt_stripe_source>

2020-07-14 21:55:10.911904 (MainThread): Sending event: {'category': 'dbt', 'action': 'package', 'label': 'ccc8fdfc-100f-45ea-b779-7d6db4fe5903', 'property_': 'install', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x10a814ac0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x10d124bb0>]}
2020-07-14 21:55:10.912392 (MainThread): Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'end', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x10d15ba90>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x10d116370>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x10d1240d0>]}
2020-07-14 21:55:10.912550 (MainThread): Flushing usage events
2020-07-14 21:56:19.602722 (MainThread): Running with dbt=0.17.0-rc1
2020-07-14 21:56:19.811135 (MainThread): running dbt with arguments Namespace(cls=<class 'dbt.task.deps.DepsTask'>, debug=False, log_cache_events=False, log_format='default', partial_parse=None, profile=None, profiles_dir='/Users/kristin/.dbt', project_dir=None, record_timing_info=None, rpc_method='deps', single_threaded=False, strict=False, target=None, test_new_parser=False, use_cache=True, vars='{}', warn_error=False, which='deps', write_json=True)
2020-07-14 21:56:19.812123 (MainThread): Tracking: tracking
2020-07-14 21:56:19.823186 (MainThread): Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'start', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x112490e20>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x1124ccd00>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x1124d8760>]}
2020-07-14 21:56:19.824661 (MainThread): Set downloads directory='/var/folders/sk/bwywl8692vlbvlbk71j59w780000gp/T/dbt-downloads-frxezcii'
2020-07-14 21:56:19.826171 (MainThread): Making package registry request: GET https://hub.getdbt.com/api/v1/index.json
2020-07-14 21:56:19.978849 (MainThread): Response from registry: GET https://hub.getdbt.com/api/v1/index.json 200
2020-07-14 21:56:19.979163 (MainThread): Making package registry request: GET https://hub.getdbt.com/api/v1/fishtown-analytics/dbt_utils.json
2020-07-14 21:56:20.097272 (MainThread): Response from registry: GET https://hub.getdbt.com/api/v1/fishtown-analytics/dbt_utils.json 200
2020-07-14 21:56:20.110392 (MainThread): Making package registry request: GET https://hub.getdbt.com/api/v1/fishtown-analytics/dbt_utils/0.5.0.json
2020-07-14 21:56:20.248181 (MainThread): Response from registry: GET https://hub.getdbt.com/api/v1/fishtown-analytics/dbt_utils/0.5.0.json 200
2020-07-14 21:56:20.269589 (MainThread): Making package registry request: GET https://hub.getdbt.com/api/v1/fishtown-analytics/dbt_utils.json
2020-07-14 21:56:20.410848 (MainThread): Response from registry: GET https://hub.getdbt.com/api/v1/fishtown-analytics/dbt_utils.json 200
2020-07-14 21:56:20.423586 (MainThread): Making package registry request: GET https://hub.getdbt.com/api/v1/fishtown-analytics/dbt_utils/0.5.0.json
2020-07-14 21:56:20.549186 (MainThread): Response from registry: GET https://hub.getdbt.com/api/v1/fishtown-analytics/dbt_utils/0.5.0.json 200
2020-07-14 21:56:20.549974 (MainThread): Making package registry request: GET https://hub.getdbt.com/api/v1/fishtown-analytics/dbt_utils.json
2020-07-14 21:56:20.661589 (MainThread): Response from registry: GET https://hub.getdbt.com/api/v1/fishtown-analytics/dbt_utils.json 200
2020-07-14 21:56:20.674583 (MainThread): Making package registry request: GET https://hub.getdbt.com/api/v1/fishtown-analytics/dbt_utils/0.5.0.json
2020-07-14 21:56:20.802951 (MainThread): Response from registry: GET https://hub.getdbt.com/api/v1/fishtown-analytics/dbt_utils/0.5.0.json 200
2020-07-14 21:56:20.818754 (MainThread): Installing fishtown-analytics/dbt_utils@0.5.0
2020-07-14 21:56:21.213723 (MainThread): DEBUG** Window rmdir sys.platform: darwin
2020-07-14 21:56:21.225571 (MainThread):   Installed from version 0.5.0

2020-07-14 21:56:21.225768 (MainThread): Sending event: {'category': 'dbt', 'action': 'package', 'label': 'e8b1b6a5-7d26-4f1b-a475-554520cd7c7c', 'property_': 'install', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x10fbbf9a0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x112587070>]}
2020-07-14 21:56:21.225947 (MainThread): Installing ~/Documents/Github/dbt_stripe_source
2020-07-14 21:56:21.226153 (MainThread):   Creating symlink to local dependency.
2020-07-14 21:56:21.226301 (MainThread):   Installed from <local @ ~/Documents/Github/dbt_stripe_source>

2020-07-14 21:56:21.226409 (MainThread): Sending event: {'category': 'dbt', 'action': 'package', 'label': 'e8b1b6a5-7d26-4f1b-a475-554520cd7c7c', 'property_': 'install', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x10fbbf9a0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x1125870d0>]}
2020-07-14 21:56:21.226854 (MainThread): Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'end', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x112506a30>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x10fbbf9a0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x1125870d0>]}
2020-07-14 21:56:21.227006 (MainThread): Flushing usage events
2020-07-14 21:58:19.906046 (MainThread): Running with dbt=0.17.0-rc1
2020-07-14 21:58:20.118632 (MainThread): running dbt with arguments Namespace(cls=<class 'dbt.task.generate.GenerateTask'>, compile=True, debug=False, exclude=None, log_cache_events=False, log_format='default', models=None, partial_parse=None, profile=None, profiles_dir='/Users/kristin/.dbt', project_dir=None, record_timing_info=None, rpc_method='docs.generate', single_threaded=False, strict=False, target=None, test_new_parser=False, threads=None, use_cache=True, vars='{}', version_check=True, warn_error=False, which='generate', write_json=True)
2020-07-14 21:58:20.119463 (MainThread): Tracking: tracking
2020-07-14 21:58:20.131774 (MainThread): Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'start', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x1075f34c0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x107caafd0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x107cb7b20>]}
2020-07-14 21:58:20.166568 (MainThread): Partial parsing not enabled
2020-07-14 21:58:20.170075 (MainThread): Parsing macros/core.sql
2020-07-14 21:58:20.176490 (MainThread): Parsing macros/materializations/helpers.sql
2020-07-14 21:58:20.185892 (MainThread): Parsing macros/materializations/snapshot/snapshot_merge.sql
2020-07-14 21:58:20.188670 (MainThread): Parsing macros/materializations/snapshot/strategies.sql
2020-07-14 21:58:20.206785 (MainThread): Parsing macros/materializations/snapshot/snapshot.sql
2020-07-14 21:58:20.234682 (MainThread): Parsing macros/materializations/seed/seed.sql
2020-07-14 21:58:20.255378 (MainThread): Parsing macros/materializations/incremental/helpers.sql
2020-07-14 21:58:20.258278 (MainThread): Parsing macros/materializations/incremental/incremental.sql
2020-07-14 21:58:20.264412 (MainThread): Parsing macros/materializations/common/merge.sql
2020-07-14 21:58:20.277196 (MainThread): Parsing macros/materializations/table/table.sql
2020-07-14 21:58:20.283494 (MainThread): Parsing macros/materializations/view/view.sql
2020-07-14 21:58:20.289333 (MainThread): Parsing macros/materializations/view/create_or_replace_view.sql
2020-07-14 21:58:20.294222 (MainThread): Parsing macros/etc/get_custom_alias.sql
2020-07-14 21:58:20.295531 (MainThread): Parsing macros/etc/query.sql
2020-07-14 21:58:20.296727 (MainThread): Parsing macros/etc/is_incremental.sql
2020-07-14 21:58:20.298396 (MainThread): Parsing macros/etc/datetime.sql
2020-07-14 21:58:20.306486 (MainThread): Parsing macros/etc/get_custom_schema.sql
2020-07-14 21:58:20.308413 (MainThread): Parsing macros/etc/get_custom_database.sql
2020-07-14 21:58:20.309956 (MainThread): Parsing macros/adapters/common.sql
2020-07-14 21:58:20.353513 (MainThread): Parsing macros/schema_tests/relationships.sql
2020-07-14 21:58:20.354737 (MainThread): Parsing macros/schema_tests/not_null.sql
2020-07-14 21:58:20.355776 (MainThread): Parsing macros/schema_tests/unique.sql
2020-07-14 21:58:20.356954 (MainThread): Parsing macros/schema_tests/accepted_values.sql
2020-07-14 21:58:20.359555 (MainThread): Parsing macros/catalog.sql
2020-07-14 21:58:20.370529 (MainThread): Parsing macros/relations.sql
2020-07-14 21:58:20.371721 (MainThread): Parsing macros/adapters.sql
2020-07-14 21:58:20.393320 (MainThread): Parsing macros/materializations/snapshot_merge.sql
2020-07-14 21:58:20.394402 (MainThread): Parsing macros/catalog.sql
2020-07-14 21:58:20.396620 (MainThread): Parsing macros/relations.sql
2020-07-14 21:58:20.398388 (MainThread): Parsing macros/adapters.sql
2020-07-14 21:58:20.416922 (MainThread): Parsing macros/materializations/snapshot_merge.sql
2020-07-14 21:58:20.473884 (MainThread): Partial parsing not enabled
2020-07-14 21:58:20.476176 (MainThread): Parsing macros/cross_db_utils/except.sql
2020-07-14 21:58:20.479307 (MainThread): Parsing macros/cross_db_utils/replace.sql
2020-07-14 21:58:20.482237 (MainThread): Parsing macros/cross_db_utils/concat.sql
2020-07-14 21:58:20.486318 (MainThread): Parsing macros/cross_db_utils/datatypes.sql
2020-07-14 21:58:20.493319 (MainThread): Parsing macros/cross_db_utils/_is_relation.sql
2020-07-14 21:58:20.494920 (MainThread): Parsing macros/cross_db_utils/length.sql
2020-07-14 21:58:20.496685 (MainThread): Parsing macros/cross_db_utils/dateadd.sql
2020-07-14 21:58:20.499680 (MainThread): Parsing macros/cross_db_utils/intersect.sql
2020-07-14 21:58:20.501320 (MainThread): Parsing macros/cross_db_utils/right.sql
2020-07-14 21:58:20.504275 (MainThread): Parsing macros/cross_db_utils/datediff.sql
2020-07-14 21:58:20.514186 (MainThread): Parsing macros/cross_db_utils/safe_cast.sql
2020-07-14 21:58:20.516318 (MainThread): Parsing macros/cross_db_utils/hash.sql
2020-07-14 21:58:20.517798 (MainThread): Parsing macros/cross_db_utils/identifier.sql
2020-07-14 21:58:20.519219 (MainThread): Parsing macros/cross_db_utils/position.sql
2020-07-14 21:58:20.520739 (MainThread): Parsing macros/cross_db_utils/literal.sql
2020-07-14 21:58:20.521752 (MainThread): Parsing macros/cross_db_utils/current_timestamp.sql
2020-07-14 21:58:20.524624 (MainThread): Parsing macros/cross_db_utils/width_bucket.sql
2020-07-14 21:58:20.529408 (MainThread): Parsing macros/cross_db_utils/last_day.sql
2020-07-14 21:58:20.532093 (MainThread): Parsing macros/cross_db_utils/split_part.sql
2020-07-14 21:58:20.534405 (MainThread): Parsing macros/cross_db_utils/date_trunc.sql
2020-07-14 21:58:20.536279 (MainThread): Parsing macros/cross_db_utils/_is_ephemeral.sql
2020-07-14 21:58:20.538464 (MainThread): Parsing macros/materializations/insert_by_period_materialization.sql
2020-07-14 21:58:20.560114 (MainThread): Parsing macros/logger/pretty_log_format.sql
2020-07-14 21:58:20.560830 (MainThread): Parsing macros/logger/pretty_time.sql
2020-07-14 21:58:20.561669 (MainThread): Parsing macros/logger/log_info.sql
2020-07-14 21:58:20.562465 (MainThread): Parsing macros/datetime/date_spine.sql
2020-07-14 21:58:20.566229 (MainThread): Parsing macros/web/get_url_host.sql
2020-07-14 21:58:20.568210 (MainThread): Parsing macros/web/get_url_path.sql
2020-07-14 21:58:20.570504 (MainThread): Parsing macros/web/get_url_parameter.sql
2020-07-14 21:58:20.571660 (MainThread): Parsing macros/geo/haversine_distance.sql
2020-07-14 21:58:20.572665 (MainThread): Parsing macros/schema_tests/equal_rowcount.sql
2020-07-14 21:58:20.574041 (MainThread): Parsing macros/schema_tests/relationships_where.sql
2020-07-14 21:58:20.575995 (MainThread): Parsing macros/schema_tests/recency.sql
2020-07-14 21:58:20.577290 (MainThread): Parsing macros/schema_tests/not_constant.sql
2020-07-14 21:58:20.578340 (MainThread): Parsing macros/schema_tests/test_unique_where.sql
2020-07-14 21:58:20.579884 (MainThread): Parsing macros/schema_tests/at_least_one.sql
2020-07-14 21:58:20.580991 (MainThread): Parsing macros/schema_tests/unique_combination_of_columns.sql
2020-07-14 21:58:20.582205 (MainThread): Parsing macros/schema_tests/cardinality_equality.sql
2020-07-14 21:58:20.583763 (MainThread): Parsing macros/schema_tests/expression_is_true.sql
2020-07-14 21:58:20.584810 (MainThread): Parsing macros/schema_tests/test_not_null_where.sql
2020-07-14 21:58:20.586204 (MainThread): Parsing macros/schema_tests/equality.sql
2020-07-14 21:58:20.589252 (MainThread): Parsing macros/schema_tests/mutually_exclusive_ranges.sql
2020-07-14 21:58:20.594352 (MainThread): Parsing macros/sql/nullcheck_table.sql
2020-07-14 21:58:20.595601 (MainThread): Parsing macros/sql/get_relations_by_pattern.sql
2020-07-14 21:58:20.598238 (MainThread): Parsing macros/sql/generate_series.sql
2020-07-14 21:58:20.601726 (MainThread): Parsing macros/sql/get_relations_by_prefix.sql
2020-07-14 21:58:20.605463 (MainThread): Parsing macros/sql/get_tables_by_prefix_sql.sql
2020-07-14 21:58:20.608076 (MainThread): Parsing macros/sql/star.sql
2020-07-14 21:58:20.610770 (MainThread): Parsing macros/sql/unpivot.sql
2020-07-14 21:58:20.616372 (MainThread): Parsing macros/sql/union.sql
2020-07-14 21:58:20.624929 (MainThread): Parsing macros/sql/groupby.sql
2020-07-14 21:58:20.625920 (MainThread): Parsing macros/sql/get_tables_by_pattern.sql
2020-07-14 21:58:20.626923 (MainThread): Parsing macros/sql/surrogate_key.sql
2020-07-14 21:58:20.629581 (MainThread): Parsing macros/sql/safe_add.sql
2020-07-14 21:58:20.630678 (MainThread): Parsing macros/sql/nullcheck.sql
2020-07-14 21:58:20.631951 (MainThread): Parsing macros/sql/get_column_values.sql
2020-07-14 21:58:20.635589 (MainThread): Parsing macros/sql/pivot.sql
2020-07-14 21:58:20.638198 (MainThread): Parsing macros/sql/get_query_results_as_dict.sql
2020-07-14 21:58:20.705702 (MainThread): Acquiring new redshift connection "model.stripe.stripe_weekly_overview".
2020-07-14 21:58:20.705837 (MainThread): Opening a new connection, currently in state init
2020-07-14 21:58:20.726569 (MainThread): Acquiring new redshift connection "model.stripe.stripe_daily_overview".
2020-07-14 21:58:20.726699 (MainThread): Opening a new connection, currently in state init
2020-07-14 21:58:20.737801 (MainThread): Acquiring new redshift connection "model.stripe.stripe_invoice_details".
2020-07-14 21:58:20.737886 (MainThread): Opening a new connection, currently in state init
2020-07-14 21:58:20.750865 (MainThread): Acquiring new redshift connection "model.stripe.stripe_customer_overview".
2020-07-14 21:58:20.750963 (MainThread): Opening a new connection, currently in state init
2020-07-14 21:58:20.762316 (MainThread): Acquiring new redshift connection "model.stripe.stripe_balance_transactions".
2020-07-14 21:58:20.762403 (MainThread): Opening a new connection, currently in state init
2020-07-14 21:58:20.773764 (MainThread): Acquiring new redshift connection "model.stripe.stripe_quarterly_overview".
2020-07-14 21:58:20.773886 (MainThread): Opening a new connection, currently in state init
2020-07-14 21:58:20.785285 (MainThread): Acquiring new redshift connection "model.stripe.stripe_monthly_overview".
2020-07-14 21:58:20.785384 (MainThread): Opening a new connection, currently in state init
2020-07-14 21:58:20.795080 (MainThread): Acquiring new redshift connection "model.stripe.stripe_subscription_details".
2020-07-14 21:58:20.795159 (MainThread): Opening a new connection, currently in state init
2020-07-14 21:58:20.808409 (MainThread): Acquiring new redshift connection "model.stripe.stripe_balance_transaction_joined".
2020-07-14 21:58:20.808529 (MainThread): Opening a new connection, currently in state init
2020-07-14 21:58:20.823174 (MainThread): Acquiring new redshift connection "model.stripe.stripe_incomplete_charges".
2020-07-14 21:58:20.823251 (MainThread): Opening a new connection, currently in state init
2020-07-14 21:58:21.120662 (MainThread): Acquiring new redshift connection "model.stripe_source.stg_stripe_card".
2020-07-14 21:58:21.120794 (MainThread): Opening a new connection, currently in state init
2020-07-14 21:58:21.131897 (MainThread): Acquiring new redshift connection "model.stripe_source.stg_stripe_payment_method_card".
2020-07-14 21:58:21.132019 (MainThread): Opening a new connection, currently in state init
2020-07-14 21:58:21.141723 (MainThread): Acquiring new redshift connection "model.stripe_source.stg_stripe_charge".
2020-07-14 21:58:21.141799 (MainThread): Opening a new connection, currently in state init
2020-07-14 21:58:21.150993 (MainThread): Acquiring new redshift connection "model.stripe_source.stg_stripe_payout".
2020-07-14 21:58:21.151069 (MainThread): Opening a new connection, currently in state init
2020-07-14 21:58:21.160489 (MainThread): Acquiring new redshift connection "model.stripe_source.stg_stripe_customer".
2020-07-14 21:58:21.160608 (MainThread): Opening a new connection, currently in state init
2020-07-14 21:58:21.169993 (MainThread): Acquiring new redshift connection "model.stripe_source.stg_stripe_refund".
2020-07-14 21:58:21.170070 (MainThread): Opening a new connection, currently in state init
2020-07-14 21:58:21.178943 (MainThread): Acquiring new redshift connection "model.stripe_source.stg_stripe_payment_method".
2020-07-14 21:58:21.179020 (MainThread): Opening a new connection, currently in state init
2020-07-14 21:58:21.187955 (MainThread): Acquiring new redshift connection "model.stripe_source.stg_stripe_payment_intent".
2020-07-14 21:58:21.188032 (MainThread): Opening a new connection, currently in state init
2020-07-14 21:58:21.196811 (MainThread): Acquiring new redshift connection "model.stripe_source.stg_stripe_fee".
2020-07-14 21:58:21.196889 (MainThread): Opening a new connection, currently in state init
2020-07-14 21:58:21.206331 (MainThread): Acquiring new redshift connection "model.stripe_source.stg_stripe_balance_transaction".
2020-07-14 21:58:21.206408 (MainThread): Opening a new connection, currently in state init
2020-07-14 21:58:22.258933 (MainThread): Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'end', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x107f61550>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x1080a20a0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x108235df0>]}
2020-07-14 21:58:22.259242 (MainThread): Flushing usage events
2020-07-14 21:58:22.789792 (MainThread): Connection 'model.stripe_source.stg_stripe_balance_transaction' was properly closed.
2020-07-14 21:58:22.790009 (MainThread): Encountered an error:
2020-07-14 21:58:22.790187 (MainThread): Compilation Error in model stripe_invoice_details (models/stripe_invoice_details.sql)
  Model 'model.stripe.stripe_invoice_details' (models/stripe_invoice_details.sql) depends on a node named 'stg_stripe_invoice' which was not found
2020-07-14 21:58:22.800113 (MainThread): Traceback (most recent call last):
  File "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/main.py", line 81, in main
    results, succeeded = handle_and_check(args)
  File "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/main.py", line 159, in handle_and_check
    task, res = run_from_args(parsed)
  File "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/main.py", line 212, in run_from_args
    results = task.run()
  File "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/task/generate.py", line 208, in run
    compile_results = CompileTask.run(self)
  File "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/task/runnable.py", line 396, in run
    self._runtime_initialize()
  File "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/task/runnable.py", line 110, in _runtime_initialize
    super()._runtime_initialize()
  File "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/task/runnable.py", line 78, in _runtime_initialize
    self.load_manifest()
  File "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/task/runnable.py", line 66, in load_manifest
    self.manifest = get_full_manifest(self.config)
  File "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/perf_utils.py", line 23, in get_full_manifest
    return load_manifest(config, internal, set_header)
  File "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/parser/manifest.py", line 641, in load_manifest
    return ManifestLoader.load_all(config, internal_manifest, macro_hook)
  File "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/parser/manifest.py", line 358, in load_all
    manifest = loader.create_manifest()
  File "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/parser/manifest.py", line 334, in create_manifest
    self.process_manifest(manifest)
  File "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/parser/manifest.py", line 306, in process_manifest
    process_refs(manifest, project_name)
  File "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/parser/manifest.py", line 564, in process_refs
    _process_refs_for_node(manifest, current_project, node)
  File "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/parser/manifest.py", line 546, in _process_refs_for_node
    dbt.utils.invalid_ref_fail_unless_test(
  File "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/utils.py", line 323, in invalid_ref_fail_unless_test
    dbt.exceptions.ref_target_not_found(
  File "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/exceptions.py", line 523, in ref_target_not_found
    raise_compiler_error(msg, model)
  File "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/exceptions.py", line 392, in raise_compiler_error
    raise CompilationException(msg, node)
dbt.exceptions.CompilationException: Compilation Error in model stripe_invoice_details (models/stripe_invoice_details.sql)
  Model 'model.stripe.stripe_invoice_details' (models/stripe_invoice_details.sql) depends on a node named 'stg_stripe_invoice' which was not found

2020-07-14 22:01:25.991503 (MainThread): Running with dbt=0.17.0-rc1
2020-07-14 22:01:26.207128 (MainThread): running dbt with arguments Namespace(cls=<class 'dbt.task.generate.GenerateTask'>, compile=True, debug=False, exclude=None, log_cache_events=False, log_format='default', models=None, partial_parse=None, profile=None, profiles_dir='/Users/kristin/.dbt', project_dir=None, record_timing_info=None, rpc_method='docs.generate', single_threaded=False, strict=False, target=None, test_new_parser=False, threads=None, use_cache=True, vars='{}', version_check=True, warn_error=False, which='generate', write_json=True)
2020-07-14 22:01:26.207963 (MainThread): Tracking: tracking
2020-07-14 22:01:26.218177 (MainThread): Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'start', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x106055f10>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x1066ebbe0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x1066eba90>]}
2020-07-14 22:01:26.249259 (MainThread): Partial parsing not enabled
2020-07-14 22:01:26.251443 (MainThread): Parsing macros/core.sql
2020-07-14 22:01:26.257267 (MainThread): Parsing macros/materializations/helpers.sql
2020-07-14 22:01:26.265781 (MainThread): Parsing macros/materializations/snapshot/snapshot_merge.sql
2020-07-14 22:01:26.268138 (MainThread): Parsing macros/materializations/snapshot/strategies.sql
2020-07-14 22:01:26.284311 (MainThread): Parsing macros/materializations/snapshot/snapshot.sql
2020-07-14 22:01:26.311256 (MainThread): Parsing macros/materializations/seed/seed.sql
2020-07-14 22:01:26.332995 (MainThread): Parsing macros/materializations/incremental/helpers.sql
2020-07-14 22:01:26.335184 (MainThread): Parsing macros/materializations/incremental/incremental.sql
2020-07-14 22:01:26.341503 (MainThread): Parsing macros/materializations/common/merge.sql
2020-07-14 22:01:26.356300 (MainThread): Parsing macros/materializations/table/table.sql
2020-07-14 22:01:26.362390 (MainThread): Parsing macros/materializations/view/view.sql
2020-07-14 22:01:26.368443 (MainThread): Parsing macros/materializations/view/create_or_replace_view.sql
2020-07-14 22:01:26.373219 (MainThread): Parsing macros/etc/get_custom_alias.sql
2020-07-14 22:01:26.374395 (MainThread): Parsing macros/etc/query.sql
2020-07-14 22:01:26.375490 (MainThread): Parsing macros/etc/is_incremental.sql
2020-07-14 22:01:26.377085 (MainThread): Parsing macros/etc/datetime.sql
2020-07-14 22:01:26.385070 (MainThread): Parsing macros/etc/get_custom_schema.sql
2020-07-14 22:01:26.386908 (MainThread): Parsing macros/etc/get_custom_database.sql
2020-07-14 22:01:26.388541 (MainThread): Parsing macros/adapters/common.sql
2020-07-14 22:01:26.431862 (MainThread): Parsing macros/schema_tests/relationships.sql
2020-07-14 22:01:26.434615 (MainThread): Parsing macros/schema_tests/not_null.sql
2020-07-14 22:01:26.436213 (MainThread): Parsing macros/schema_tests/unique.sql
2020-07-14 22:01:26.437809 (MainThread): Parsing macros/schema_tests/accepted_values.sql
2020-07-14 22:01:26.441552 (MainThread): Parsing macros/catalog.sql
2020-07-14 22:01:26.454891 (MainThread): Parsing macros/relations.sql
2020-07-14 22:01:26.456055 (MainThread): Parsing macros/adapters.sql
2020-07-14 22:01:26.477611 (MainThread): Parsing macros/materializations/snapshot_merge.sql
2020-07-14 22:01:26.478688 (MainThread): Parsing macros/catalog.sql
2020-07-14 22:01:26.480872 (MainThread): Parsing macros/relations.sql
2020-07-14 22:01:26.482668 (MainThread): Parsing macros/adapters.sql
2020-07-14 22:01:26.501175 (MainThread): Parsing macros/materializations/snapshot_merge.sql
2020-07-14 22:01:26.557049 (MainThread): Partial parsing not enabled
2020-07-14 22:01:26.559289 (MainThread): Parsing macros/cross_db_utils/except.sql
2020-07-14 22:01:26.560957 (MainThread): Parsing macros/cross_db_utils/replace.sql
2020-07-14 22:01:26.562599 (MainThread): Parsing macros/cross_db_utils/concat.sql
2020-07-14 22:01:26.565056 (MainThread): Parsing macros/cross_db_utils/datatypes.sql
2020-07-14 22:01:26.570502 (MainThread): Parsing macros/cross_db_utils/_is_relation.sql
2020-07-14 22:01:26.571758 (MainThread): Parsing macros/cross_db_utils/length.sql
2020-07-14 22:01:26.573038 (MainThread): Parsing macros/cross_db_utils/dateadd.sql
2020-07-14 22:01:26.575633 (MainThread): Parsing macros/cross_db_utils/intersect.sql
2020-07-14 22:01:26.577000 (MainThread): Parsing macros/cross_db_utils/right.sql
2020-07-14 22:01:26.579665 (MainThread): Parsing macros/cross_db_utils/datediff.sql
2020-07-14 22:01:26.588662 (MainThread): Parsing macros/cross_db_utils/safe_cast.sql
2020-07-14 22:01:26.590989 (MainThread): Parsing macros/cross_db_utils/hash.sql
2020-07-14 22:01:26.592426 (MainThread): Parsing macros/cross_db_utils/identifier.sql
2020-07-14 22:01:26.593826 (MainThread): Parsing macros/cross_db_utils/position.sql
2020-07-14 22:01:26.595632 (MainThread): Parsing macros/cross_db_utils/literal.sql
2020-07-14 22:01:26.596602 (MainThread): Parsing macros/cross_db_utils/current_timestamp.sql
2020-07-14 22:01:26.599713 (MainThread): Parsing macros/cross_db_utils/width_bucket.sql
2020-07-14 22:01:26.604449 (MainThread): Parsing macros/cross_db_utils/last_day.sql
2020-07-14 22:01:26.607201 (MainThread): Parsing macros/cross_db_utils/split_part.sql
2020-07-14 22:01:26.608988 (MainThread): Parsing macros/cross_db_utils/date_trunc.sql
2020-07-14 22:01:26.610436 (MainThread): Parsing macros/cross_db_utils/_is_ephemeral.sql
2020-07-14 22:01:26.612186 (MainThread): Parsing macros/materializations/insert_by_period_materialization.sql
2020-07-14 22:01:26.633091 (MainThread): Parsing macros/logger/pretty_log_format.sql
2020-07-14 22:01:26.633922 (MainThread): Parsing macros/logger/pretty_time.sql
2020-07-14 22:01:26.634819 (MainThread): Parsing macros/logger/log_info.sql
2020-07-14 22:01:26.635678 (MainThread): Parsing macros/datetime/date_spine.sql
2020-07-14 22:01:26.639412 (MainThread): Parsing macros/web/get_url_host.sql
2020-07-14 22:01:26.641047 (MainThread): Parsing macros/web/get_url_path.sql
2020-07-14 22:01:26.643036 (MainThread): Parsing macros/web/get_url_parameter.sql
2020-07-14 22:01:26.644871 (MainThread): Parsing macros/geo/haversine_distance.sql
2020-07-14 22:01:26.645974 (MainThread): Parsing macros/schema_tests/equal_rowcount.sql
2020-07-14 22:01:26.647674 (MainThread): Parsing macros/schema_tests/relationships_where.sql
2020-07-14 22:01:26.650373 (MainThread): Parsing macros/schema_tests/recency.sql
2020-07-14 22:01:26.651757 (MainThread): Parsing macros/schema_tests/not_constant.sql
2020-07-14 22:01:26.653478 (MainThread): Parsing macros/schema_tests/test_unique_where.sql
2020-07-14 22:01:26.655524 (MainThread): Parsing macros/schema_tests/at_least_one.sql
2020-07-14 22:01:26.656591 (MainThread): Parsing macros/schema_tests/unique_combination_of_columns.sql
2020-07-14 22:01:26.657764 (MainThread): Parsing macros/schema_tests/cardinality_equality.sql
2020-07-14 22:01:26.659845 (MainThread): Parsing macros/schema_tests/expression_is_true.sql
2020-07-14 22:01:26.661620 (MainThread): Parsing macros/schema_tests/test_not_null_where.sql
2020-07-14 22:01:26.663019 (MainThread): Parsing macros/schema_tests/equality.sql
2020-07-14 22:01:26.666187 (MainThread): Parsing macros/schema_tests/mutually_exclusive_ranges.sql
2020-07-14 22:01:26.671494 (MainThread): Parsing macros/sql/nullcheck_table.sql
2020-07-14 22:01:26.672699 (MainThread): Parsing macros/sql/get_relations_by_pattern.sql
2020-07-14 22:01:26.675075 (MainThread): Parsing macros/sql/generate_series.sql
2020-07-14 22:01:26.678005 (MainThread): Parsing macros/sql/get_relations_by_prefix.sql
2020-07-14 22:01:26.681473 (MainThread): Parsing macros/sql/get_tables_by_prefix_sql.sql
2020-07-14 22:01:26.683888 (MainThread): Parsing macros/sql/star.sql
2020-07-14 22:01:26.687216 (MainThread): Parsing macros/sql/unpivot.sql
2020-07-14 22:01:26.693304 (MainThread): Parsing macros/sql/union.sql
2020-07-14 22:01:26.702255 (MainThread): Parsing macros/sql/groupby.sql
2020-07-14 22:01:26.703320 (MainThread): Parsing macros/sql/get_tables_by_pattern.sql
2020-07-14 22:01:26.704508 (MainThread): Parsing macros/sql/surrogate_key.sql
2020-07-14 22:01:26.706963 (MainThread): Parsing macros/sql/safe_add.sql
2020-07-14 22:01:26.708057 (MainThread): Parsing macros/sql/nullcheck.sql
2020-07-14 22:01:26.709414 (MainThread): Parsing macros/sql/get_column_values.sql
2020-07-14 22:01:26.713449 (MainThread): Parsing macros/sql/pivot.sql
2020-07-14 22:01:26.716080 (MainThread): Parsing macros/sql/get_query_results_as_dict.sql
2020-07-14 22:01:26.782777 (MainThread): Acquiring new redshift connection "model.stripe.stripe_weekly_overview".
2020-07-14 22:01:26.782913 (MainThread): Opening a new connection, currently in state init
2020-07-14 22:01:26.806174 (MainThread): Acquiring new redshift connection "model.stripe.stripe_daily_overview".
2020-07-14 22:01:26.806346 (MainThread): Opening a new connection, currently in state init
2020-07-14 22:01:26.819752 (MainThread): Acquiring new redshift connection "model.stripe.stripe_invoice_details".
2020-07-14 22:01:26.819864 (MainThread): Opening a new connection, currently in state init
2020-07-14 22:01:26.834347 (MainThread): Acquiring new redshift connection "model.stripe.stripe_customer_overview".
2020-07-14 22:01:26.834430 (MainThread): Opening a new connection, currently in state init
2020-07-14 22:01:26.845512 (MainThread): Acquiring new redshift connection "model.stripe.stripe_balance_transactions".
2020-07-14 22:01:26.845634 (MainThread): Opening a new connection, currently in state init
2020-07-14 22:01:26.854498 (MainThread): Acquiring new redshift connection "model.stripe.stripe_quarterly_overview".
2020-07-14 22:01:26.854573 (MainThread): Opening a new connection, currently in state init
2020-07-14 22:01:26.864163 (MainThread): Acquiring new redshift connection "model.stripe.stripe_monthly_overview".
2020-07-14 22:01:26.864239 (MainThread): Opening a new connection, currently in state init
2020-07-14 22:01:26.873739 (MainThread): Acquiring new redshift connection "model.stripe.stripe_subscription_details".
2020-07-14 22:01:26.873814 (MainThread): Opening a new connection, currently in state init
2020-07-14 22:01:26.886877 (MainThread): Acquiring new redshift connection "model.stripe.stripe_balance_transaction_joined".
2020-07-14 22:01:26.886995 (MainThread): Opening a new connection, currently in state init
2020-07-14 22:01:26.902544 (MainThread): Acquiring new redshift connection "model.stripe.stripe_incomplete_charges".
2020-07-14 22:01:26.902638 (MainThread): Opening a new connection, currently in state init
2020-07-14 22:01:27.201821 (MainThread): Acquiring new redshift connection "model.stripe_source.stg_stripe_card".
2020-07-14 22:01:27.201968 (MainThread): Opening a new connection, currently in state init
2020-07-14 22:01:27.213518 (MainThread): Acquiring new redshift connection "model.stripe_source.stg_stripe_invoice_line_item".
2020-07-14 22:01:27.213643 (MainThread): Opening a new connection, currently in state init
2020-07-14 22:01:27.229147 (MainThread): Acquiring new redshift connection "model.stripe_source.stg_stripe_payment_method_card".
2020-07-14 22:01:27.229256 (MainThread): Opening a new connection, currently in state init
2020-07-14 22:01:27.242092 (MainThread): Acquiring new redshift connection "model.stripe_source.stg_stripe_charge".
2020-07-14 22:01:27.242231 (MainThread): Opening a new connection, currently in state init
2020-07-14 22:01:27.255359 (MainThread): Acquiring new redshift connection "model.stripe_source.stg_stripe_payout".
2020-07-14 22:01:27.255495 (MainThread): Opening a new connection, currently in state init
2020-07-14 22:01:27.265923 (MainThread): Acquiring new redshift connection "model.stripe_source.stg_stripe_customer".
2020-07-14 22:01:27.266052 (MainThread): Opening a new connection, currently in state init
2020-07-14 22:01:27.275726 (MainThread): Acquiring new redshift connection "model.stripe_source.stg_stripe_refund".
2020-07-14 22:01:27.275804 (MainThread): Opening a new connection, currently in state init
2020-07-14 22:01:27.285002 (MainThread): Acquiring new redshift connection "model.stripe_source.stg_stripe_subscription".
2020-07-14 22:01:27.285078 (MainThread): Opening a new connection, currently in state init
2020-07-14 22:01:27.295145 (MainThread): Acquiring new redshift connection "model.stripe_source.stg_stripe_payment_method".
2020-07-14 22:01:27.295221 (MainThread): Opening a new connection, currently in state init
2020-07-14 22:01:27.306564 (MainThread): Acquiring new redshift connection "model.stripe_source.stg_stripe_payment_intent".
2020-07-14 22:01:27.306701 (MainThread): Opening a new connection, currently in state init
2020-07-14 22:01:27.320981 (MainThread): Acquiring new redshift connection "model.stripe_source.stg_stripe_invoice".
2020-07-14 22:01:27.321092 (MainThread): Opening a new connection, currently in state init
2020-07-14 22:01:27.334976 (MainThread): Acquiring new redshift connection "model.stripe_source.stg_stripe_fee".
2020-07-14 22:01:27.335087 (MainThread): Opening a new connection, currently in state init
2020-07-14 22:01:27.346215 (MainThread): Acquiring new redshift connection "model.stripe_source.stg_stripe_balance_transaction".
2020-07-14 22:01:27.346298 (MainThread): Opening a new connection, currently in state init
2020-07-14 22:01:29.410478 (MainThread): Found 23 models, 16 tests, 0 snapshots, 0 analyses, 290 macros, 0 operations, 0 seed files, 13 sources
2020-07-14 22:01:29.442738 (MainThread): 
2020-07-14 22:01:29.443044 (MainThread): Acquiring new redshift connection "master".
2020-07-14 22:01:29.443164 (MainThread): Opening a new connection, currently in state init
2020-07-14 22:01:29.452225 (ThreadPoolExecutor-0_0): Acquiring new redshift connection "list_redshift-test-kristin".
2020-07-14 22:01:29.452432 (ThreadPoolExecutor-0_0): Opening a new connection, currently in state init
2020-07-14 22:01:29.468185 (ThreadPoolExecutor-0_0): Using redshift connection "list_redshift-test-kristin".
2020-07-14 22:01:29.468299 (ThreadPoolExecutor-0_0): On list_redshift-test-kristin: /* {"app": "dbt", "dbt_version": "0.17.0rc1", "profile_name": "integration_test", "target_name": "dev_redshift", "connection_name": "list_redshift-test-kristin"} */

    select distinct nspname from pg_namespace
  
2020-07-14 22:01:29.468371 (ThreadPoolExecutor-0_0): Connecting to Redshift using 'database' credentials
2020-07-14 22:01:30.297573 (ThreadPoolExecutor-0_0): SQL status: SELECT in 0.83 seconds
2020-07-14 22:01:30.349611 (ThreadPoolExecutor-1_0): Acquiring new redshift connection "list_redshift-test-kristin_hubspot".
2020-07-14 22:01:30.349741 (ThreadPoolExecutor-1_0): Re-using an available connection from the pool (formerly list_redshift-test-kristin).
2020-07-14 22:01:30.355408 (ThreadPoolExecutor-1_0): Using redshift connection "list_redshift-test-kristin_hubspot".
2020-07-14 22:01:30.355494 (ThreadPoolExecutor-1_0): On list_redshift-test-kristin_hubspot: BEGIN
2020-07-14 22:01:30.438220 (ThreadPoolExecutor-1_0): SQL status: BEGIN in 0.08 seconds
2020-07-14 22:01:30.438603 (ThreadPoolExecutor-1_0): Using redshift connection "list_redshift-test-kristin_hubspot".
2020-07-14 22:01:30.438844 (ThreadPoolExecutor-1_0): On list_redshift-test-kristin_hubspot: /* {"app": "dbt", "dbt_version": "0.17.0rc1", "profile_name": "integration_test", "target_name": "dev_redshift", "connection_name": "list_redshift-test-kristin_hubspot"} */
select
      'redshift-test-kristin' as database,
      tablename as name,
      schemaname as schema,
      'table' as type
    from pg_tables
    where schemaname ilike 'hubspot'
    union all
    select
      'redshift-test-kristin' as database,
      viewname as name,
      schemaname as schema,
      'view' as type
    from pg_views
    where schemaname ilike 'hubspot'
  
2020-07-14 22:01:30.552581 (ThreadPoolExecutor-1_0): SQL status: SELECT in 0.11 seconds
2020-07-14 22:01:30.571480 (ThreadPoolExecutor-1_0): On list_redshift-test-kristin_hubspot: ROLLBACK
2020-07-14 22:01:30.712731 (MainThread): Using redshift connection "master".
2020-07-14 22:01:30.712843 (MainThread): On master: BEGIN
2020-07-14 22:01:30.712916 (MainThread): Connecting to Redshift using 'database' credentials
2020-07-14 22:01:31.585672 (MainThread): SQL status: BEGIN in 0.87 seconds
2020-07-14 22:01:31.586054 (MainThread): Using redshift connection "master".
2020-07-14 22:01:31.586307 (MainThread): On master: /* {"app": "dbt", "dbt_version": "0.17.0rc1", "profile_name": "integration_test", "target_name": "dev_redshift", "connection_name": "master"} */
with relation as (
        select
            pg_rewrite.ev_class as class,
            pg_rewrite.oid as id
        from pg_rewrite
    ),
    class as (
        select
            oid as id,
            relname as name,
            relnamespace as schema,
            relkind as kind
        from pg_class
    ),
    dependency as (
        select
            pg_depend.objid as id,
            pg_depend.refobjid as ref
        from pg_depend
    ),
    schema as (
        select
            pg_namespace.oid as id,
            pg_namespace.nspname as name
        from pg_namespace
        where nspname != 'information_schema' and nspname not like 'pg\_%'
    ),
    referenced as (
        select
            relation.id AS id,
            referenced_class.name ,
            referenced_class.schema ,
            referenced_class.kind
        from relation
        join class as referenced_class on relation.class=referenced_class.id
        where referenced_class.kind in ('r', 'v')
    ),
    relationships as (
        select
            referenced.name as referenced_name,
            referenced.schema as referenced_schema_id,
            dependent_class.name as dependent_name,
            dependent_class.schema as dependent_schema_id,
            referenced.kind as kind
        from referenced
        join dependency on referenced.id=dependency.id
        join class as dependent_class on dependency.ref=dependent_class.id
        where
            (referenced.name != dependent_class.name or
             referenced.schema != dependent_class.schema)
    )

    select
        referenced_schema.name as referenced_schema,
        relationships.referenced_name as referenced_name,
        dependent_schema.name as dependent_schema,
        relationships.dependent_name as dependent_name
    from relationships
    join schema as dependent_schema on relationships.dependent_schema_id=dependent_schema.id
    join schema as referenced_schema on relationships.referenced_schema_id=referenced_schema.id
    group by referenced_schema, referenced_name, dependent_schema, dependent_name
    order by referenced_schema, referenced_name, dependent_schema, dependent_name;
2020-07-14 22:01:31.734186 (MainThread): SQL status: SELECT in 0.15 seconds
2020-07-14 22:01:31.734867 (MainThread): On master: ROLLBACK
2020-07-14 22:01:31.835040 (MainThread): 15:01:31 | Concurrency: 1 threads (target='dev_redshift')
2020-07-14 22:01:31.835430 (MainThread): 15:01:31 | 
2020-07-14 22:01:31.843522 (Thread-1): Began running node model.stripe_source.stg_stripe_charge
2020-07-14 22:01:31.843911 (Thread-1): Acquiring new redshift connection "model.stripe_source.stg_stripe_charge".
2020-07-14 22:01:31.844024 (Thread-1): Re-using an available connection from the pool (formerly list_redshift-test-kristin_hubspot).
2020-07-14 22:01:31.844130 (Thread-1): Compiling model.stripe_source.stg_stripe_charge
2020-07-14 22:01:31.860026 (Thread-1): Writing injected SQL for node "model.stripe_source.stg_stripe_charge"
2020-07-14 22:01:31.860579 (Thread-1): finished collecting timing info
2020-07-14 22:01:31.861084 (Thread-1): Finished running node model.stripe_source.stg_stripe_charge
2020-07-14 22:01:31.861249 (Thread-1): Began running node model.stripe_source.stg_stripe_customer
2020-07-14 22:01:31.861536 (Thread-1): Acquiring new redshift connection "model.stripe_source.stg_stripe_customer".
2020-07-14 22:01:31.861645 (Thread-1): Re-using an available connection from the pool (formerly model.stripe_source.stg_stripe_charge).
2020-07-14 22:01:31.861747 (Thread-1): Compiling model.stripe_source.stg_stripe_customer
2020-07-14 22:01:31.869862 (Thread-1): Writing injected SQL for node "model.stripe_source.stg_stripe_customer"
2020-07-14 22:01:31.871087 (Thread-1): finished collecting timing info
2020-07-14 22:01:31.871577 (Thread-1): Finished running node model.stripe_source.stg_stripe_customer
2020-07-14 22:01:31.871732 (Thread-1): Began running node model.stripe_source.stg_stripe_balance_transaction
2020-07-14 22:01:31.872010 (Thread-1): Acquiring new redshift connection "model.stripe_source.stg_stripe_balance_transaction".
2020-07-14 22:01:31.872116 (Thread-1): Re-using an available connection from the pool (formerly model.stripe_source.stg_stripe_customer).
2020-07-14 22:01:31.872217 (Thread-1): Compiling model.stripe_source.stg_stripe_balance_transaction
2020-07-14 22:01:31.880011 (Thread-1): Writing injected SQL for node "model.stripe_source.stg_stripe_balance_transaction"
2020-07-14 22:01:31.880415 (Thread-1): finished collecting timing info
2020-07-14 22:01:31.880865 (Thread-1): Finished running node model.stripe_source.stg_stripe_balance_transaction
2020-07-14 22:01:31.881016 (Thread-1): Began running node model.stripe_source.stg_stripe_card
2020-07-14 22:01:31.881287 (Thread-1): Acquiring new redshift connection "model.stripe_source.stg_stripe_card".
2020-07-14 22:01:31.881394 (Thread-1): Re-using an available connection from the pool (formerly model.stripe_source.stg_stripe_balance_transaction).
2020-07-14 22:01:31.881494 (Thread-1): Compiling model.stripe_source.stg_stripe_card
2020-07-14 22:01:31.889353 (Thread-1): Writing injected SQL for node "model.stripe_source.stg_stripe_card"
2020-07-14 22:01:31.889804 (Thread-1): finished collecting timing info
2020-07-14 22:01:31.890261 (Thread-1): Finished running node model.stripe_source.stg_stripe_card
2020-07-14 22:01:31.890413 (Thread-1): Began running node model.stripe_source.stg_stripe_payment_intent
2020-07-14 22:01:31.890689 (Thread-1): Acquiring new redshift connection "model.stripe_source.stg_stripe_payment_intent".
2020-07-14 22:01:31.890794 (Thread-1): Re-using an available connection from the pool (formerly model.stripe_source.stg_stripe_card).
2020-07-14 22:01:31.890892 (Thread-1): Compiling model.stripe_source.stg_stripe_payment_intent
2020-07-14 22:01:31.899890 (Thread-1): Writing injected SQL for node "model.stripe_source.stg_stripe_payment_intent"
2020-07-14 22:01:31.900352 (Thread-1): finished collecting timing info
2020-07-14 22:01:31.900821 (Thread-1): Finished running node model.stripe_source.stg_stripe_payment_intent
2020-07-14 22:01:31.900975 (Thread-1): Began running node model.stripe_source.stg_stripe_payment_method
2020-07-14 22:01:31.901248 (Thread-1): Acquiring new redshift connection "model.stripe_source.stg_stripe_payment_method".
2020-07-14 22:01:31.901355 (Thread-1): Re-using an available connection from the pool (formerly model.stripe_source.stg_stripe_payment_intent).
2020-07-14 22:01:31.901455 (Thread-1): Compiling model.stripe_source.stg_stripe_payment_method
2020-07-14 22:01:31.909162 (Thread-1): Writing injected SQL for node "model.stripe_source.stg_stripe_payment_method"
2020-07-14 22:01:31.909579 (Thread-1): finished collecting timing info
2020-07-14 22:01:31.910029 (Thread-1): Finished running node model.stripe_source.stg_stripe_payment_method
2020-07-14 22:01:31.910184 (Thread-1): Began running node model.stripe_source.stg_stripe_payout
2020-07-14 22:01:31.910457 (Thread-1): Acquiring new redshift connection "model.stripe_source.stg_stripe_payout".
2020-07-14 22:01:31.910564 (Thread-1): Re-using an available connection from the pool (formerly model.stripe_source.stg_stripe_payment_method).
2020-07-14 22:01:31.910668 (Thread-1): Compiling model.stripe_source.stg_stripe_payout
2020-07-14 22:01:31.918675 (Thread-1): Writing injected SQL for node "model.stripe_source.stg_stripe_payout"
2020-07-14 22:01:31.919146 (Thread-1): finished collecting timing info
2020-07-14 22:01:31.920515 (Thread-1): Finished running node model.stripe_source.stg_stripe_payout
2020-07-14 22:01:31.920678 (Thread-1): Began running node model.stripe_source.stg_stripe_refund
2020-07-14 22:01:31.920952 (Thread-1): Acquiring new redshift connection "model.stripe_source.stg_stripe_refund".
2020-07-14 22:01:31.921060 (Thread-1): Re-using an available connection from the pool (formerly model.stripe_source.stg_stripe_payout).
2020-07-14 22:01:31.921161 (Thread-1): Compiling model.stripe_source.stg_stripe_refund
2020-07-14 22:01:31.928731 (Thread-1): Writing injected SQL for node "model.stripe_source.stg_stripe_refund"
2020-07-14 22:01:31.929096 (Thread-1): finished collecting timing info
2020-07-14 22:01:31.929521 (Thread-1): Finished running node model.stripe_source.stg_stripe_refund
2020-07-14 22:01:31.929668 (Thread-1): Began running node model.stripe_source.stg_stripe_invoice
2020-07-14 22:01:31.929982 (Thread-1): Acquiring new redshift connection "model.stripe_source.stg_stripe_invoice".
2020-07-14 22:01:31.930110 (Thread-1): Re-using an available connection from the pool (formerly model.stripe_source.stg_stripe_refund).
2020-07-14 22:01:31.930213 (Thread-1): Compiling model.stripe_source.stg_stripe_invoice
2020-07-14 22:01:31.938094 (Thread-1): Writing injected SQL for node "model.stripe_source.stg_stripe_invoice"
2020-07-14 22:01:31.938578 (Thread-1): finished collecting timing info
2020-07-14 22:01:31.938995 (Thread-1): Finished running node model.stripe_source.stg_stripe_invoice
2020-07-14 22:01:31.939133 (Thread-1): Began running node model.stripe_source.stg_stripe_invoice_line_item
2020-07-14 22:01:31.939380 (Thread-1): Acquiring new redshift connection "model.stripe_source.stg_stripe_invoice_line_item".
2020-07-14 22:01:31.939477 (Thread-1): Re-using an available connection from the pool (formerly model.stripe_source.stg_stripe_invoice).
2020-07-14 22:01:31.939567 (Thread-1): Compiling model.stripe_source.stg_stripe_invoice_line_item
2020-07-14 22:01:31.946845 (Thread-1): Writing injected SQL for node "model.stripe_source.stg_stripe_invoice_line_item"
2020-07-14 22:01:31.947191 (Thread-1): finished collecting timing info
2020-07-14 22:01:31.947560 (Thread-1): Finished running node model.stripe_source.stg_stripe_invoice_line_item
2020-07-14 22:01:31.947690 (Thread-1): Began running node model.stripe_source.stg_stripe_subscription
2020-07-14 22:01:31.947917 (Thread-1): Acquiring new redshift connection "model.stripe_source.stg_stripe_subscription".
2020-07-14 22:01:31.948006 (Thread-1): Re-using an available connection from the pool (formerly model.stripe_source.stg_stripe_invoice_line_item).
2020-07-14 22:01:31.948089 (Thread-1): Compiling model.stripe_source.stg_stripe_subscription
2020-07-14 22:01:31.954993 (Thread-1): Writing injected SQL for node "model.stripe_source.stg_stripe_subscription"
2020-07-14 22:01:31.955403 (Thread-1): finished collecting timing info
2020-07-14 22:01:31.955866 (Thread-1): Finished running node model.stripe_source.stg_stripe_subscription
2020-07-14 22:01:31.956008 (Thread-1): Began running node model.stripe_source.stg_stripe_fee
2020-07-14 22:01:31.956246 (Thread-1): Acquiring new redshift connection "model.stripe_source.stg_stripe_fee".
2020-07-14 22:01:31.956435 (Thread-1): Re-using an available connection from the pool (formerly model.stripe_source.stg_stripe_subscription).
2020-07-14 22:01:31.956642 (Thread-1): Compiling model.stripe_source.stg_stripe_fee
2020-07-14 22:01:31.962933 (Thread-1): Writing injected SQL for node "model.stripe_source.stg_stripe_fee"
2020-07-14 22:01:31.963603 (Thread-1): finished collecting timing info
2020-07-14 22:01:31.964002 (Thread-1): Finished running node model.stripe_source.stg_stripe_fee
2020-07-14 22:01:31.964132 (Thread-1): Began running node model.stripe_source.stg_stripe_payment_method_card
2020-07-14 22:01:31.964354 (Thread-1): Acquiring new redshift connection "model.stripe_source.stg_stripe_payment_method_card".
2020-07-14 22:01:31.964439 (Thread-1): Re-using an available connection from the pool (formerly model.stripe_source.stg_stripe_fee).
2020-07-14 22:01:31.964519 (Thread-1): Compiling model.stripe_source.stg_stripe_payment_method_card
2020-07-14 22:01:31.970632 (Thread-1): Writing injected SQL for node "model.stripe_source.stg_stripe_payment_method_card"
2020-07-14 22:01:31.970925 (Thread-1): finished collecting timing info
2020-07-14 22:01:31.971249 (Thread-1): Finished running node model.stripe_source.stg_stripe_payment_method_card
2020-07-14 22:01:31.971363 (Thread-1): Began running node test.stripe_source.source_not_null_stripe_balance_transaction_id
2020-07-14 22:01:31.971569 (Thread-1): Acquiring new redshift connection "test.stripe_source.source_not_null_stripe_balance_transaction_id".
2020-07-14 22:01:31.971650 (Thread-1): Re-using an available connection from the pool (formerly model.stripe_source.stg_stripe_payment_method_card).
2020-07-14 22:01:31.971724 (Thread-1): Compiling test.stripe_source.source_not_null_stripe_balance_transaction_id
2020-07-14 22:01:31.984974 (Thread-1): Writing injected SQL for node "test.stripe_source.source_not_null_stripe_balance_transaction_id"
2020-07-14 22:01:31.985321 (Thread-1): finished collecting timing info
2020-07-14 22:01:31.985537 (Thread-1): finished collecting timing info
2020-07-14 22:01:31.985841 (Thread-1): Finished running node test.stripe_source.source_not_null_stripe_balance_transaction_id
2020-07-14 22:01:31.985951 (Thread-1): Began running node test.stripe_source.source_not_null_stripe_card_id
2020-07-14 22:01:31.986148 (Thread-1): Acquiring new redshift connection "test.stripe_source.source_not_null_stripe_card_id".
2020-07-14 22:01:31.986224 (Thread-1): Re-using an available connection from the pool (formerly test.stripe_source.source_not_null_stripe_balance_transaction_id).
2020-07-14 22:01:31.986295 (Thread-1): Compiling test.stripe_source.source_not_null_stripe_card_id
2020-07-14 22:01:32.017154 (Thread-1): Writing injected SQL for node "test.stripe_source.source_not_null_stripe_card_id"
2020-07-14 22:01:32.017638 (Thread-1): finished collecting timing info
2020-07-14 22:01:32.017902 (Thread-1): finished collecting timing info
2020-07-14 22:01:32.018305 (Thread-1): Finished running node test.stripe_source.source_not_null_stripe_card_id
2020-07-14 22:01:32.018448 (Thread-1): Began running node test.stripe_source.source_not_null_stripe_charge_id
2020-07-14 22:01:32.018704 (Thread-1): Acquiring new redshift connection "test.stripe_source.source_not_null_stripe_charge_id".
2020-07-14 22:01:32.018804 (Thread-1): Re-using an available connection from the pool (formerly test.stripe_source.source_not_null_stripe_card_id).
2020-07-14 22:01:32.018896 (Thread-1): Compiling test.stripe_source.source_not_null_stripe_charge_id
2020-07-14 22:01:32.027756 (Thread-1): Writing injected SQL for node "test.stripe_source.source_not_null_stripe_charge_id"
2020-07-14 22:01:32.028106 (Thread-1): finished collecting timing info
2020-07-14 22:01:32.028407 (Thread-1): finished collecting timing info
2020-07-14 22:01:32.028778 (Thread-1): Finished running node test.stripe_source.source_not_null_stripe_charge_id
2020-07-14 22:01:32.028919 (Thread-1): Began running node test.stripe_source.source_not_null_stripe_customer_id
2020-07-14 22:01:32.029166 (Thread-1): Acquiring new redshift connection "test.stripe_source.source_not_null_stripe_customer_id".
2020-07-14 22:01:32.029264 (Thread-1): Re-using an available connection from the pool (formerly test.stripe_source.source_not_null_stripe_charge_id).
2020-07-14 22:01:32.029353 (Thread-1): Compiling test.stripe_source.source_not_null_stripe_customer_id
2020-07-14 22:01:32.037924 (Thread-1): Writing injected SQL for node "test.stripe_source.source_not_null_stripe_customer_id"
2020-07-14 22:01:32.038289 (Thread-1): finished collecting timing info
2020-07-14 22:01:32.038557 (Thread-1): finished collecting timing info
2020-07-14 22:01:32.038897 (Thread-1): Finished running node test.stripe_source.source_not_null_stripe_customer_id
2020-07-14 22:01:32.039021 (Thread-1): Began running node test.stripe_source.source_not_null_stripe_payment_intent_id
2020-07-14 22:01:32.039246 (Thread-1): Acquiring new redshift connection "test.stripe_source.source_not_null_stripe_payment_intent_id".
2020-07-14 22:01:32.039333 (Thread-1): Re-using an available connection from the pool (formerly test.stripe_source.source_not_null_stripe_customer_id).
2020-07-14 22:01:32.039413 (Thread-1): Compiling test.stripe_source.source_not_null_stripe_payment_intent_id
2020-07-14 22:01:32.047337 (Thread-1): Writing injected SQL for node "test.stripe_source.source_not_null_stripe_payment_intent_id"
2020-07-14 22:01:32.047702 (Thread-1): finished collecting timing info
2020-07-14 22:01:32.047929 (Thread-1): finished collecting timing info
2020-07-14 22:01:32.048272 (Thread-1): Finished running node test.stripe_source.source_not_null_stripe_payment_intent_id
2020-07-14 22:01:32.048457 (Thread-1): Began running node test.stripe_source.source_not_null_stripe_payment_method_id
2020-07-14 22:01:32.048826 (Thread-1): Acquiring new redshift connection "test.stripe_source.source_not_null_stripe_payment_method_id".
2020-07-14 22:01:32.048920 (Thread-1): Re-using an available connection from the pool (formerly test.stripe_source.source_not_null_stripe_payment_intent_id).
2020-07-14 22:01:32.049000 (Thread-1): Compiling test.stripe_source.source_not_null_stripe_payment_method_id
2020-07-14 22:01:32.056936 (Thread-1): Writing injected SQL for node "test.stripe_source.source_not_null_stripe_payment_method_id"
2020-07-14 22:01:32.057340 (Thread-1): finished collecting timing info
2020-07-14 22:01:32.057578 (Thread-1): finished collecting timing info
2020-07-14 22:01:32.057923 (Thread-1): Finished running node test.stripe_source.source_not_null_stripe_payment_method_id
2020-07-14 22:01:32.058047 (Thread-1): Began running node test.stripe_source.source_not_null_stripe_payout_id
2020-07-14 22:01:32.058260 (Thread-1): Acquiring new redshift connection "test.stripe_source.source_not_null_stripe_payout_id".
2020-07-14 22:01:32.058342 (Thread-1): Re-using an available connection from the pool (formerly test.stripe_source.source_not_null_stripe_payment_method_id).
2020-07-14 22:01:32.058418 (Thread-1): Compiling test.stripe_source.source_not_null_stripe_payout_id
2020-07-14 22:01:32.066970 (Thread-1): Writing injected SQL for node "test.stripe_source.source_not_null_stripe_payout_id"
2020-07-14 22:01:32.067370 (Thread-1): finished collecting timing info
2020-07-14 22:01:32.067646 (Thread-1): finished collecting timing info
2020-07-14 22:01:32.067993 (Thread-1): Finished running node test.stripe_source.source_not_null_stripe_payout_id
2020-07-14 22:01:32.068116 (Thread-1): Began running node test.stripe_source.source_not_null_stripe_refund_id
2020-07-14 22:01:32.068462 (Thread-1): Acquiring new redshift connection "test.stripe_source.source_not_null_stripe_refund_id".
2020-07-14 22:01:32.068561 (Thread-1): Re-using an available connection from the pool (formerly test.stripe_source.source_not_null_stripe_payout_id).
2020-07-14 22:01:32.068644 (Thread-1): Compiling test.stripe_source.source_not_null_stripe_refund_id
2020-07-14 22:01:32.076440 (Thread-1): Writing injected SQL for node "test.stripe_source.source_not_null_stripe_refund_id"
2020-07-14 22:01:32.076816 (Thread-1): finished collecting timing info
2020-07-14 22:01:32.077039 (Thread-1): finished collecting timing info
2020-07-14 22:01:32.077380 (Thread-1): Finished running node test.stripe_source.source_not_null_stripe_refund_id
2020-07-14 22:01:32.077503 (Thread-1): Began running node test.stripe_source.source_unique_stripe_balance_transaction_id
2020-07-14 22:01:32.077718 (Thread-1): Acquiring new redshift connection "test.stripe_source.source_unique_stripe_balance_transaction_id".
2020-07-14 22:01:32.077802 (Thread-1): Re-using an available connection from the pool (formerly test.stripe_source.source_not_null_stripe_refund_id).
2020-07-14 22:01:32.077879 (Thread-1): Compiling test.stripe_source.source_unique_stripe_balance_transaction_id
2020-07-14 22:01:32.085818 (Thread-1): Writing injected SQL for node "test.stripe_source.source_unique_stripe_balance_transaction_id"
2020-07-14 22:01:32.086179 (Thread-1): finished collecting timing info
2020-07-14 22:01:32.086398 (Thread-1): finished collecting timing info
2020-07-14 22:01:32.086727 (Thread-1): Finished running node test.stripe_source.source_unique_stripe_balance_transaction_id
2020-07-14 22:01:32.086845 (Thread-1): Began running node test.stripe_source.source_unique_stripe_card_id
2020-07-14 22:01:32.087235 (Thread-1): Acquiring new redshift connection "test.stripe_source.source_unique_stripe_card_id".
2020-07-14 22:01:32.087331 (Thread-1): Re-using an available connection from the pool (formerly test.stripe_source.source_unique_stripe_balance_transaction_id).
2020-07-14 22:01:32.087410 (Thread-1): Compiling test.stripe_source.source_unique_stripe_card_id
2020-07-14 22:01:32.095322 (Thread-1): Writing injected SQL for node "test.stripe_source.source_unique_stripe_card_id"
2020-07-14 22:01:32.095715 (Thread-1): finished collecting timing info
2020-07-14 22:01:32.095944 (Thread-1): finished collecting timing info
2020-07-14 22:01:32.096290 (Thread-1): Finished running node test.stripe_source.source_unique_stripe_card_id
2020-07-14 22:01:32.096411 (Thread-1): Began running node test.stripe_source.source_unique_stripe_charge_id
2020-07-14 22:01:32.096624 (Thread-1): Acquiring new redshift connection "test.stripe_source.source_unique_stripe_charge_id".
2020-07-14 22:01:32.096847 (Thread-1): Re-using an available connection from the pool (formerly test.stripe_source.source_unique_stripe_card_id).
2020-07-14 22:01:32.096941 (Thread-1): Compiling test.stripe_source.source_unique_stripe_charge_id
2020-07-14 22:01:32.104381 (Thread-1): Writing injected SQL for node "test.stripe_source.source_unique_stripe_charge_id"
2020-07-14 22:01:32.104706 (Thread-1): finished collecting timing info
2020-07-14 22:01:32.104908 (Thread-1): finished collecting timing info
2020-07-14 22:01:32.105297 (Thread-1): Finished running node test.stripe_source.source_unique_stripe_charge_id
2020-07-14 22:01:32.105453 (Thread-1): Began running node test.stripe_source.source_unique_stripe_customer_id
2020-07-14 22:01:32.105737 (Thread-1): Acquiring new redshift connection "test.stripe_source.source_unique_stripe_customer_id".
2020-07-14 22:01:32.105838 (Thread-1): Re-using an available connection from the pool (formerly test.stripe_source.source_unique_stripe_charge_id).
2020-07-14 22:01:32.105919 (Thread-1): Compiling test.stripe_source.source_unique_stripe_customer_id
2020-07-14 22:01:32.113760 (Thread-1): Writing injected SQL for node "test.stripe_source.source_unique_stripe_customer_id"
2020-07-14 22:01:32.114198 (Thread-1): finished collecting timing info
2020-07-14 22:01:32.114434 (Thread-1): finished collecting timing info
2020-07-14 22:01:32.114781 (Thread-1): Finished running node test.stripe_source.source_unique_stripe_customer_id
2020-07-14 22:01:32.114903 (Thread-1): Began running node test.stripe_source.source_unique_stripe_payment_intent_id
2020-07-14 22:01:32.115117 (Thread-1): Acquiring new redshift connection "test.stripe_source.source_unique_stripe_payment_intent_id".
2020-07-14 22:01:32.115197 (Thread-1): Re-using an available connection from the pool (formerly test.stripe_source.source_unique_stripe_customer_id).
2020-07-14 22:01:32.115272 (Thread-1): Compiling test.stripe_source.source_unique_stripe_payment_intent_id
2020-07-14 22:01:32.122873 (Thread-1): Writing injected SQL for node "test.stripe_source.source_unique_stripe_payment_intent_id"
2020-07-14 22:01:32.123200 (Thread-1): finished collecting timing info
2020-07-14 22:01:32.123401 (Thread-1): finished collecting timing info
2020-07-14 22:01:32.123708 (Thread-1): Finished running node test.stripe_source.source_unique_stripe_payment_intent_id
2020-07-14 22:01:32.123843 (Thread-1): Began running node test.stripe_source.source_unique_stripe_payment_method_id
2020-07-14 22:01:32.124044 (Thread-1): Acquiring new redshift connection "test.stripe_source.source_unique_stripe_payment_method_id".
2020-07-14 22:01:32.124119 (Thread-1): Re-using an available connection from the pool (formerly test.stripe_source.source_unique_stripe_payment_intent_id).
2020-07-14 22:01:32.124187 (Thread-1): Compiling test.stripe_source.source_unique_stripe_payment_method_id
2020-07-14 22:01:32.131802 (Thread-1): Writing injected SQL for node "test.stripe_source.source_unique_stripe_payment_method_id"
2020-07-14 22:01:32.132212 (Thread-1): finished collecting timing info
2020-07-14 22:01:32.132435 (Thread-1): finished collecting timing info
2020-07-14 22:01:32.132769 (Thread-1): Finished running node test.stripe_source.source_unique_stripe_payment_method_id
2020-07-14 22:01:32.132884 (Thread-1): Began running node test.stripe_source.source_unique_stripe_payout_id
2020-07-14 22:01:32.133088 (Thread-1): Acquiring new redshift connection "test.stripe_source.source_unique_stripe_payout_id".
2020-07-14 22:01:32.133165 (Thread-1): Re-using an available connection from the pool (formerly test.stripe_source.source_unique_stripe_payment_method_id).
2020-07-14 22:01:32.133238 (Thread-1): Compiling test.stripe_source.source_unique_stripe_payout_id
2020-07-14 22:01:32.141907 (Thread-1): Writing injected SQL for node "test.stripe_source.source_unique_stripe_payout_id"
2020-07-14 22:01:32.142280 (Thread-1): finished collecting timing info
2020-07-14 22:01:32.142495 (Thread-1): finished collecting timing info
2020-07-14 22:01:32.142818 (Thread-1): Finished running node test.stripe_source.source_unique_stripe_payout_id
2020-07-14 22:01:32.142931 (Thread-1): Began running node test.stripe_source.source_unique_stripe_refund_id
2020-07-14 22:01:32.143153 (Thread-1): Acquiring new redshift connection "test.stripe_source.source_unique_stripe_refund_id".
2020-07-14 22:01:32.143308 (Thread-1): Re-using an available connection from the pool (formerly test.stripe_source.source_unique_stripe_payout_id).
2020-07-14 22:01:32.143405 (Thread-1): Compiling test.stripe_source.source_unique_stripe_refund_id
2020-07-14 22:01:32.151464 (Thread-1): Writing injected SQL for node "test.stripe_source.source_unique_stripe_refund_id"
2020-07-14 22:01:32.151845 (Thread-1): finished collecting timing info
2020-07-14 22:01:32.152065 (Thread-1): finished collecting timing info
2020-07-14 22:01:32.152398 (Thread-1): Finished running node test.stripe_source.source_unique_stripe_refund_id
2020-07-14 22:01:32.152516 (Thread-1): Began running node model.stripe.stripe_incomplete_charges
2020-07-14 22:01:32.152725 (Thread-1): Acquiring new redshift connection "model.stripe.stripe_incomplete_charges".
2020-07-14 22:01:32.152803 (Thread-1): Re-using an available connection from the pool (formerly test.stripe_source.source_unique_stripe_refund_id).
2020-07-14 22:01:32.152875 (Thread-1): Compiling model.stripe.stripe_incomplete_charges
2020-07-14 22:01:32.160414 (Thread-1): Writing injected SQL for node "model.stripe.stripe_incomplete_charges"
2020-07-14 22:01:32.160737 (Thread-1): finished collecting timing info
2020-07-14 22:01:32.161068 (Thread-1): Finished running node model.stripe.stripe_incomplete_charges
2020-07-14 22:01:32.161181 (Thread-1): Began running node model.stripe.stripe_balance_transaction_joined
2020-07-14 22:01:32.161382 (Thread-1): Acquiring new redshift connection "model.stripe.stripe_balance_transaction_joined".
2020-07-14 22:01:32.161458 (Thread-1): Re-using an available connection from the pool (formerly model.stripe.stripe_incomplete_charges).
2020-07-14 22:01:32.161528 (Thread-1): Compiling model.stripe.stripe_balance_transaction_joined
2020-07-14 22:01:32.199154 (Thread-1): Writing injected SQL for node "model.stripe.stripe_balance_transaction_joined"
2020-07-14 22:01:32.199529 (Thread-1): finished collecting timing info
2020-07-14 22:01:32.199874 (Thread-1): Finished running node model.stripe.stripe_balance_transaction_joined
2020-07-14 22:01:32.199978 (Thread-1): Began running node model.stripe.stripe_invoice_details
2020-07-14 22:01:32.200160 (Thread-1): Acquiring new redshift connection "model.stripe.stripe_invoice_details".
2020-07-14 22:01:32.200227 (Thread-1): Re-using an available connection from the pool (formerly model.stripe.stripe_balance_transaction_joined).
2020-07-14 22:01:32.200291 (Thread-1): Compiling model.stripe.stripe_invoice_details
2020-07-14 22:01:32.231806 (Thread-1): Writing injected SQL for node "model.stripe.stripe_invoice_details"
2020-07-14 22:01:32.232181 (Thread-1): finished collecting timing info
2020-07-14 22:01:32.232374 (Thread-1): finished collecting timing info
2020-07-14 22:01:32.232680 (Thread-1): Finished running node model.stripe.stripe_invoice_details
2020-07-14 22:01:32.232781 (Thread-1): Began running node model.stripe.stripe_subscription_details
2020-07-14 22:01:32.232961 (Thread-1): Acquiring new redshift connection "model.stripe.stripe_subscription_details".
2020-07-14 22:01:32.233028 (Thread-1): Re-using an available connection from the pool (formerly model.stripe.stripe_invoice_details).
2020-07-14 22:01:32.233146 (Thread-1): Compiling model.stripe.stripe_subscription_details
2020-07-14 22:01:32.266146 (Thread-1): Writing injected SQL for node "model.stripe.stripe_subscription_details"
2020-07-14 22:01:32.266504 (Thread-1): finished collecting timing info
2020-07-14 22:01:32.266694 (Thread-1): finished collecting timing info
2020-07-14 22:01:32.266998 (Thread-1): Finished running node model.stripe.stripe_subscription_details
2020-07-14 22:01:32.267101 (Thread-1): Began running node model.stripe.stripe_balance_transactions
2020-07-14 22:01:32.267438 (Thread-1): Acquiring new redshift connection "model.stripe.stripe_balance_transactions".
2020-07-14 22:01:32.267505 (Thread-1): Re-using an available connection from the pool (formerly model.stripe.stripe_subscription_details).
2020-07-14 22:01:32.267567 (Thread-1): Compiling model.stripe.stripe_balance_transactions
2020-07-14 22:01:32.286389 (Thread-1): Writing injected SQL for node "model.stripe.stripe_balance_transactions"
2020-07-14 22:01:32.286756 (Thread-1): finished collecting timing info
2020-07-14 22:01:32.286945 (Thread-1): finished collecting timing info
2020-07-14 22:01:32.287253 (Thread-1): Finished running node model.stripe.stripe_balance_transactions
2020-07-14 22:01:32.287367 (Thread-1): Began running node model.stripe.stripe_customer_overview
2020-07-14 22:01:32.287551 (Thread-1): Acquiring new redshift connection "model.stripe.stripe_customer_overview".
2020-07-14 22:01:32.287619 (Thread-1): Re-using an available connection from the pool (formerly model.stripe.stripe_balance_transactions).
2020-07-14 22:01:32.287682 (Thread-1): Compiling model.stripe.stripe_customer_overview
2020-07-14 22:01:32.353264 (Thread-1): Writing injected SQL for node "model.stripe.stripe_customer_overview"
2020-07-14 22:01:32.354081 (Thread-1): finished collecting timing info
2020-07-14 22:01:32.354354 (Thread-1): finished collecting timing info
2020-07-14 22:01:32.354690 (Thread-1): Finished running node model.stripe.stripe_customer_overview
2020-07-14 22:01:32.354801 (Thread-1): Began running node model.stripe.stripe_daily_overview
2020-07-14 22:01:32.355005 (Thread-1): Acquiring new redshift connection "model.stripe.stripe_daily_overview".
2020-07-14 22:01:32.355074 (Thread-1): Re-using an available connection from the pool (formerly model.stripe.stripe_customer_overview).
2020-07-14 22:01:32.355137 (Thread-1): Compiling model.stripe.stripe_daily_overview
2020-07-14 22:01:32.391166 (Thread-1): Writing injected SQL for node "model.stripe.stripe_daily_overview"
2020-07-14 22:01:32.391941 (Thread-1): finished collecting timing info
2020-07-14 22:01:32.392153 (Thread-1): finished collecting timing info
2020-07-14 22:01:32.392465 (Thread-1): Finished running node model.stripe.stripe_daily_overview
2020-07-14 22:01:32.392565 (Thread-1): Began running node model.stripe.stripe_monthly_overview
2020-07-14 22:01:32.392741 (Thread-1): Acquiring new redshift connection "model.stripe.stripe_monthly_overview".
2020-07-14 22:01:32.392809 (Thread-1): Re-using an available connection from the pool (formerly model.stripe.stripe_daily_overview).
2020-07-14 22:01:32.392871 (Thread-1): Compiling model.stripe.stripe_monthly_overview
2020-07-14 22:01:32.430831 (Thread-1): Writing injected SQL for node "model.stripe.stripe_monthly_overview"
2020-07-14 22:01:32.431205 (Thread-1): finished collecting timing info
2020-07-14 22:01:32.431392 (Thread-1): finished collecting timing info
2020-07-14 22:01:32.431696 (Thread-1): Finished running node model.stripe.stripe_monthly_overview
2020-07-14 22:01:32.431795 (Thread-1): Began running node model.stripe.stripe_quarterly_overview
2020-07-14 22:01:32.431968 (Thread-1): Acquiring new redshift connection "model.stripe.stripe_quarterly_overview".
2020-07-14 22:01:32.432033 (Thread-1): Re-using an available connection from the pool (formerly model.stripe.stripe_monthly_overview).
2020-07-14 22:01:32.432093 (Thread-1): Compiling model.stripe.stripe_quarterly_overview
2020-07-14 22:01:32.472161 (Thread-1): Writing injected SQL for node "model.stripe.stripe_quarterly_overview"
2020-07-14 22:01:32.472516 (Thread-1): finished collecting timing info
2020-07-14 22:01:32.472707 (Thread-1): finished collecting timing info
2020-07-14 22:01:32.473012 (Thread-1): Finished running node model.stripe.stripe_quarterly_overview
2020-07-14 22:01:32.473115 (Thread-1): Began running node model.stripe.stripe_weekly_overview
2020-07-14 22:01:32.473292 (Thread-1): Acquiring new redshift connection "model.stripe.stripe_weekly_overview".
2020-07-14 22:01:32.473359 (Thread-1): Re-using an available connection from the pool (formerly model.stripe.stripe_quarterly_overview).
2020-07-14 22:01:32.473421 (Thread-1): Compiling model.stripe.stripe_weekly_overview
2020-07-14 22:01:32.513698 (Thread-1): Writing injected SQL for node "model.stripe.stripe_weekly_overview"
2020-07-14 22:01:32.514055 (Thread-1): finished collecting timing info
2020-07-14 22:01:32.514244 (Thread-1): finished collecting timing info
2020-07-14 22:01:32.514551 (Thread-1): Finished running node model.stripe.stripe_weekly_overview
2020-07-14 22:01:32.515579 (MainThread): Connection 'master' was left open.
2020-07-14 22:01:32.515660 (MainThread): On master: Close
2020-07-14 22:01:32.515838 (MainThread): Connection 'model.stripe.stripe_weekly_overview' was left open.
2020-07-14 22:01:32.515901 (MainThread): On model.stripe.stripe_weekly_overview: Close
2020-07-14 22:01:32.574283 (MainThread): 15:01:32 | Done.
2020-07-14 22:01:32.577316 (MainThread): Acquiring new redshift connection "generate_catalog".
2020-07-14 22:01:32.577439 (MainThread): Opening a new connection, currently in state init
2020-07-14 22:01:32.577510 (MainThread): 15:01:32 | Building catalog
2020-07-14 22:01:32.706925 (ThreadPoolExecutor-2_0): Acquiring new redshift connection "redshift-test-kristin.information_schema".
2020-07-14 22:01:32.707044 (ThreadPoolExecutor-2_0): Opening a new connection, currently in state init
2020-07-14 22:01:32.715896 (ThreadPoolExecutor-2_0): Using redshift connection "redshift-test-kristin.information_schema".
2020-07-14 22:01:32.715975 (ThreadPoolExecutor-2_0): On redshift-test-kristin.information_schema: BEGIN
2020-07-14 22:01:32.716041 (ThreadPoolExecutor-2_0): Connecting to Redshift using 'database' credentials
2020-07-14 22:01:33.475580 (ThreadPoolExecutor-2_0): SQL status: BEGIN in 0.76 seconds
2020-07-14 22:01:33.475831 (ThreadPoolExecutor-2_0): Using redshift connection "redshift-test-kristin.information_schema".
2020-07-14 22:01:33.475971 (ThreadPoolExecutor-2_0): On redshift-test-kristin.information_schema: /* {"app": "dbt", "dbt_version": "0.17.0rc1", "profile_name": "integration_test", "target_name": "dev_redshift", "connection_name": "redshift-test-kristin.information_schema"} */

    

    with late_binding as (
      select
        'redshift-test-kristin'::varchar as table_database,
        table_schema,
        table_name,
        'LATE BINDING VIEW'::varchar as table_type,
        null::text as table_comment,

        column_name,
        column_index,
        column_type,
        null::text as column_comment
      from pg_get_late_binding_view_cols()
        cols(table_schema name, table_name name, column_name name,
             column_type varchar,
             column_index int)
        order by "column_index"
    ),

    early_binding as (
        select
            'redshift-test-kristin'::varchar as table_database,
            sch.nspname as table_schema,
            tbl.relname as table_name,
            case tbl.relkind
                when 'v' then 'VIEW'
                else 'BASE TABLE'
            end as table_type,
            tbl_desc.description as table_comment,
            col.attname as column_name,
            col.attnum as column_index,
            pg_catalog.format_type(col.atttypid, col.atttypmod) as column_type,
            col_desc.description as column_comment

        from pg_catalog.pg_namespace sch
        join pg_catalog.pg_class tbl on tbl.relnamespace = sch.oid
        join pg_catalog.pg_attribute col on col.attrelid = tbl.oid
        left outer join pg_catalog.pg_description tbl_desc on (tbl_desc.objoid = tbl.oid and tbl_desc.objsubid = 0)
        left outer join pg_catalog.pg_description col_desc on (col_desc.objoid = tbl.oid and col_desc.objsubid = col.attnum)
        where upper(sch.nspname) = upper('hubspot')
            and tbl.relkind in ('r', 'v', 'f', 'p')
            and col.attnum > 0
            and not col.attisdropped
    ),

    table_owners as (

        select
            'redshift-test-kristin'::varchar as table_database,
            schemaname as table_schema,
            tablename as table_name,
            tableowner as table_owner

        from pg_tables

        union all

        select
            'redshift-test-kristin'::varchar as table_database,
            schemaname as table_schema,
            viewname as table_name,
            viewowner as table_owner

        from pg_views

    ),

    unioned as (

        select *
        from early_binding

        union all

        select *
        from late_binding

    )

    select *,
        table_database || '.' || table_schema || '.' || table_name as table_id

    from unioned
    join table_owners using (table_database, table_schema, table_name)

    where (upper(table_schema) = upper('hubspot') or upper(table_schema) = upper('stripe'))

    order by "column_index"
2020-07-14 22:01:33.781191 (ThreadPoolExecutor-2_0): SQL status: SELECT in 0.31 seconds
2020-07-14 22:01:33.792649 (ThreadPoolExecutor-2_0): Using redshift connection "redshift-test-kristin.information_schema".
2020-07-14 22:01:33.792762 (ThreadPoolExecutor-2_0): On redshift-test-kristin.information_schema: /* {"app": "dbt", "dbt_version": "0.17.0rc1", "profile_name": "integration_test", "target_name": "dev_redshift", "connection_name": "redshift-test-kristin.information_schema"} */
select has_table_privilege(current_user, 'svv_table_info', 'SELECT') as can_select
2020-07-14 22:01:33.876994 (ThreadPoolExecutor-2_0): SQL status: SELECT in 0.08 seconds
2020-07-14 22:01:33.883078 (ThreadPoolExecutor-2_0): Using redshift connection "redshift-test-kristin.information_schema".
2020-07-14 22:01:33.883233 (ThreadPoolExecutor-2_0): On redshift-test-kristin.information_schema: /* {"app": "dbt", "dbt_version": "0.17.0rc1", "profile_name": "integration_test", "target_name": "dev_redshift", "connection_name": "redshift-test-kristin.information_schema"} */
select
        "database" || '.' || "schema" || '.' || "table" as table_id,

        'Encoded'::text as "stats:encoded:label",
        encoded as "stats:encoded:value",
        'Indicates whether any column in the table has compression encoding defined.'::text as "stats:encoded:description",
        true as "stats:encoded:include",

        'Dist Style' as "stats:diststyle:label",
        diststyle as "stats:diststyle:value",
        'Distribution style or distribution key column, if key distribution is defined.'::text as "stats:diststyle:description",
        true as "stats:diststyle:include",

        'Sort Key 1' as "stats:sortkey1:label",
        -- handle 0xFF byte in response for interleaved sort styles
        case
            when sortkey1 like 'INTERLEAVED%' then 'INTERLEAVED'::text
            else sortkey1
        end as "stats:sortkey1:value",
        'First column in the sort key.'::text as "stats:sortkey1:description",
        (sortkey1 is not null) as "stats:sortkey1:include",

        'Max Varchar' as "stats:max_varchar:label",
        max_varchar as "stats:max_varchar:value",
        'Size of the largest column that uses a VARCHAR data type.'::text as "stats:max_varchar:description",
        true as "stats:max_varchar:include",

        -- exclude this, as the data is strangely returned with null-byte characters
        'Sort Key 1 Encoding' as "stats:sortkey1_enc:label",
        sortkey1_enc as "stats:sortkey1_enc:value",
        'Compression encoding of the first column in the sort key.' as "stats:sortkey1_enc:description",
        false as "stats:sortkey1_enc:include",

        '# Sort Keys' as "stats:sortkey_num:label",
        sortkey_num as "stats:sortkey_num:value",
        'Number of columns defined as sort keys.' as "stats:sortkey_num:description",
        (sortkey_num > 0) as "stats:sortkey_num:include",

        'Approximate Size' as "stats:size:label",
        size / 1000000.0 as "stats:size:value",
        'Approximate size of the table, calculated from a count of 1MB blocks'::text as "stats:size:description",
        true as "stats:size:include",

        'Disk Utilization' as "stats:pct_used:label",
        pct_used / 100.0 as "stats:pct_used:value",
        'Percent of available space that is used by the table.'::text as "stats:pct_used:description",
        true as "stats:pct_used:include",

        'Unsorted %' as "stats:unsorted:label",
        unsorted / 100.0 as "stats:unsorted:value",
        'Percent of unsorted rows in the table.'::text as "stats:unsorted:description",
        (unsorted is not null) as "stats:unsorted:include",

        'Stats Off' as "stats:stats_off:label",
        stats_off as "stats:stats_off:value",
        'Number that indicates how stale the table statistics are; 0 is current, 100 is out of date.'::text as "stats:stats_off:description",
        true as "stats:stats_off:include",

        'Approximate Row Count' as "stats:rows:label",
        tbl_rows as "stats:rows:value",
        'Approximate number of rows in the table. This value includes rows marked for deletion, but not yet vacuumed.'::text as "stats:rows:description",
        true as "stats:rows:include",

        'Sort Key Skew' as "stats:skew_sortkey1:label",
        skew_sortkey1 as "stats:skew_sortkey1:value",
        'Ratio of the size of the largest non-sort key column to the size of the first column of the sort key.'::text as "stats:skew_sortkey1:description",
        (skew_sortkey1 is not null) as "stats:skew_sortkey1:include",

        'Skew Rows' as "stats:skew_rows:label",
        skew_rows as "stats:skew_rows:value",
        'Ratio of the number of rows in the slice with the most rows to the number of rows in the slice with the fewest rows.'::text as "stats:skew_rows:description",
        (skew_rows is not null) as "stats:skew_rows:include"

    from svv_table_info
    where (upper(schema) = upper('hubspot') or upper(schema) = upper('stripe'))
2020-07-14 22:01:35.385923 (ThreadPoolExecutor-2_0): SQL status: SELECT in 1.50 seconds
2020-07-14 22:01:35.396116 (ThreadPoolExecutor-2_0): On redshift-test-kristin.information_schema: ROLLBACK
2020-07-14 22:01:35.852646 (MainThread): 15:01:35 | Catalog written to /Users/kristin/Documents/Github/dbt_stripe/target/catalog.json
2020-07-14 22:01:35.854783 (MainThread): Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'end', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x106055f10>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x10678d340>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x10678d220>]}
2020-07-14 22:01:35.855061 (MainThread): Flushing usage events
2020-07-14 22:01:36.335641 (MainThread): Connection 'generate_catalog' was properly closed.
2020-07-14 22:01:36.335828 (MainThread): Connection 'redshift-test-kristin.information_schema' was left open.
2020-07-14 22:01:36.335941 (MainThread): On redshift-test-kristin.information_schema: Close
2020-07-14 22:06:05.633614 (MainThread): Running with dbt=0.17.0-rc1
2020-07-14 22:06:05.846506 (MainThread): running dbt with arguments Namespace(cls=<class 'dbt.task.serve.ServeTask'>, debug=False, log_cache_events=False, log_format='default', open_browser=True, partial_parse=None, port=8080, profile=None, profiles_dir='/Users/kristin/.dbt', project_dir=None, record_timing_info=None, rpc_method=None, single_threaded=False, strict=False, target=None, test_new_parser=False, use_cache=True, vars='{}', warn_error=False, which='serve', write_json=True)
2020-07-14 22:06:05.847348 (MainThread): Tracking: tracking
2020-07-14 22:06:05.858531 (MainThread): Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'start', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x1063c1fd0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x1063d6eb0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x1063e1a00>]}
2020-07-14 22:06:05.861395 (MainThread): Serving docs at 0.0.0.0:8080
2020-07-14 22:06:05.861575 (MainThread): To access from your browser, navigate to:  http://localhost:8080
2020-07-14 22:06:05.861666 (MainThread): Press Ctrl+C to exit.


2020-07-14 22:07:38.661747 (MainThread): Flushing usage events
2020-07-14 22:07:39.075283 (MainThread): ctrl-c
2020-07-14 22:08:34.455965 (MainThread): Running with dbt=0.17.0-rc1
2020-07-14 22:08:34.865793 (MainThread): running dbt with arguments Namespace(cls=<class 'dbt.task.run.RunTask'>, debug=False, exclude=None, fail_fast=False, full_refresh=False, log_cache_events=False, log_format='default', models=None, partial_parse=None, profile=None, profiles_dir='/Users/kristin/.dbt', project_dir=None, record_timing_info=None, rpc_method='run', single_threaded=False, strict=False, target=None, test_new_parser=False, threads=None, use_cache=True, vars='{}', version_check=True, warn_error=False, which='run', write_json=True)
2020-07-14 22:08:34.866695 (MainThread): Tracking: tracking
2020-07-14 22:08:34.873790 (MainThread): Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'start', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x109cfeb20>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x109d10df0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x109d0e0d0>]}
2020-07-14 22:08:34.895603 (MainThread): Partial parsing not enabled
2020-07-14 22:08:34.897931 (MainThread): Parsing macros/core.sql
2020-07-14 22:08:34.902663 (MainThread): Parsing macros/materializations/helpers.sql
2020-07-14 22:08:34.909986 (MainThread): Parsing macros/materializations/snapshot/snapshot_merge.sql
2020-07-14 22:08:34.912174 (MainThread): Parsing macros/materializations/snapshot/strategies.sql
2020-07-14 22:08:34.927390 (MainThread): Parsing macros/materializations/snapshot/snapshot.sql
2020-07-14 22:08:34.954087 (MainThread): Parsing macros/materializations/seed/seed.sql
2020-07-14 22:08:34.977886 (MainThread): Parsing macros/materializations/incremental/helpers.sql
2020-07-14 22:08:34.979977 (MainThread): Parsing macros/materializations/incremental/incremental.sql
2020-07-14 22:08:34.986758 (MainThread): Parsing macros/materializations/common/merge.sql
2020-07-14 22:08:35.001111 (MainThread): Parsing macros/materializations/table/table.sql
2020-07-14 22:08:35.007448 (MainThread): Parsing macros/materializations/view/view.sql
2020-07-14 22:08:35.013811 (MainThread): Parsing macros/materializations/view/create_or_replace_view.sql
2020-07-14 22:08:35.019471 (MainThread): Parsing macros/etc/get_custom_alias.sql
2020-07-14 22:08:35.020764 (MainThread): Parsing macros/etc/query.sql
2020-07-14 22:08:35.021958 (MainThread): Parsing macros/etc/is_incremental.sql
2020-07-14 22:08:35.023620 (MainThread): Parsing macros/etc/datetime.sql
2020-07-14 22:08:35.031843 (MainThread): Parsing macros/etc/get_custom_schema.sql
2020-07-14 22:08:35.033852 (MainThread): Parsing macros/etc/get_custom_database.sql
2020-07-14 22:08:35.035375 (MainThread): Parsing macros/adapters/common.sql
2020-07-14 22:08:35.082817 (MainThread): Parsing macros/schema_tests/relationships.sql
2020-07-14 22:08:35.084047 (MainThread): Parsing macros/schema_tests/not_null.sql
2020-07-14 22:08:35.085063 (MainThread): Parsing macros/schema_tests/unique.sql
2020-07-14 22:08:35.086290 (MainThread): Parsing macros/schema_tests/accepted_values.sql
2020-07-14 22:08:35.088792 (MainThread): Parsing macros/etc.sql
2020-07-14 22:08:35.089866 (MainThread): Parsing macros/catalog.sql
2020-07-14 22:08:35.098342 (MainThread): Parsing macros/adapters.sql
2020-07-14 22:08:35.116320 (MainThread): Parsing macros/materializations/seed.sql
2020-07-14 22:08:35.118619 (MainThread): Parsing macros/materializations/view.sql
2020-07-14 22:08:35.120836 (MainThread): Parsing macros/materializations/table.sql
2020-07-14 22:08:35.132367 (MainThread): Parsing macros/materializations/incremental.sql
2020-07-14 22:08:35.146418 (MainThread): Parsing macros/materializations/snapshot.sql
2020-07-14 22:08:35.203320 (MainThread): Partial parsing not enabled
2020-07-14 22:08:35.205316 (MainThread): Parsing macros/cross_db_utils/except.sql
2020-07-14 22:08:35.206755 (MainThread): Parsing macros/cross_db_utils/replace.sql
2020-07-14 22:08:35.208482 (MainThread): Parsing macros/cross_db_utils/concat.sql
2020-07-14 22:08:35.211496 (MainThread): Parsing macros/cross_db_utils/datatypes.sql
2020-07-14 22:08:35.217216 (MainThread): Parsing macros/cross_db_utils/_is_relation.sql
2020-07-14 22:08:35.218582 (MainThread): Parsing macros/cross_db_utils/length.sql
2020-07-14 22:08:35.220083 (MainThread): Parsing macros/cross_db_utils/dateadd.sql
2020-07-14 22:08:35.222514 (MainThread): Parsing macros/cross_db_utils/intersect.sql
2020-07-14 22:08:35.223921 (MainThread): Parsing macros/cross_db_utils/right.sql
2020-07-14 22:08:35.226427 (MainThread): Parsing macros/cross_db_utils/datediff.sql
2020-07-14 22:08:35.236033 (MainThread): Parsing macros/cross_db_utils/safe_cast.sql
2020-07-14 22:08:35.238164 (MainThread): Parsing macros/cross_db_utils/hash.sql
2020-07-14 22:08:35.239623 (MainThread): Parsing macros/cross_db_utils/identifier.sql
2020-07-14 22:08:35.241124 (MainThread): Parsing macros/cross_db_utils/position.sql
2020-07-14 22:08:35.242772 (MainThread): Parsing macros/cross_db_utils/literal.sql
2020-07-14 22:08:35.243808 (MainThread): Parsing macros/cross_db_utils/current_timestamp.sql
2020-07-14 22:08:35.269528 (MainThread): Parsing macros/cross_db_utils/width_bucket.sql
2020-07-14 22:08:35.276973 (MainThread): Parsing macros/cross_db_utils/last_day.sql
2020-07-14 22:08:35.280855 (MainThread): Parsing macros/cross_db_utils/split_part.sql
2020-07-14 22:08:35.283512 (MainThread): Parsing macros/cross_db_utils/date_trunc.sql
2020-07-14 22:08:35.285719 (MainThread): Parsing macros/cross_db_utils/_is_ephemeral.sql
2020-07-14 22:08:35.288203 (MainThread): Parsing macros/materializations/insert_by_period_materialization.sql
2020-07-14 22:08:35.315269 (MainThread): Parsing macros/logger/pretty_log_format.sql
2020-07-14 22:08:35.316396 (MainThread): Parsing macros/logger/pretty_time.sql
2020-07-14 22:08:35.317609 (MainThread): Parsing macros/logger/log_info.sql
2020-07-14 22:08:35.318792 (MainThread): Parsing macros/datetime/date_spine.sql
2020-07-14 22:08:35.323203 (MainThread): Parsing macros/web/get_url_host.sql
2020-07-14 22:08:35.325514 (MainThread): Parsing macros/web/get_url_path.sql
2020-07-14 22:08:35.328301 (MainThread): Parsing macros/web/get_url_parameter.sql
2020-07-14 22:08:35.330235 (MainThread): Parsing macros/geo/haversine_distance.sql
2020-07-14 22:08:35.331621 (MainThread): Parsing macros/schema_tests/equal_rowcount.sql
2020-07-14 22:08:35.333489 (MainThread): Parsing macros/schema_tests/relationships_where.sql
2020-07-14 22:08:35.336082 (MainThread): Parsing macros/schema_tests/recency.sql
2020-07-14 22:08:35.337618 (MainThread): Parsing macros/schema_tests/not_constant.sql
2020-07-14 22:08:35.338950 (MainThread): Parsing macros/schema_tests/test_unique_where.sql
2020-07-14 22:08:35.340864 (MainThread): Parsing macros/schema_tests/at_least_one.sql
2020-07-14 22:08:35.342008 (MainThread): Parsing macros/schema_tests/unique_combination_of_columns.sql
2020-07-14 22:08:35.343330 (MainThread): Parsing macros/schema_tests/cardinality_equality.sql
2020-07-14 22:08:35.345120 (MainThread): Parsing macros/schema_tests/expression_is_true.sql
2020-07-14 22:08:35.346388 (MainThread): Parsing macros/schema_tests/test_not_null_where.sql
2020-07-14 22:08:35.347981 (MainThread): Parsing macros/schema_tests/equality.sql
2020-07-14 22:08:35.351270 (MainThread): Parsing macros/schema_tests/mutually_exclusive_ranges.sql
2020-07-14 22:08:35.356512 (MainThread): Parsing macros/sql/nullcheck_table.sql
2020-07-14 22:08:35.357953 (MainThread): Parsing macros/sql/get_relations_by_pattern.sql
2020-07-14 22:08:35.360371 (MainThread): Parsing macros/sql/generate_series.sql
2020-07-14 22:08:35.365750 (MainThread): Parsing macros/sql/get_relations_by_prefix.sql
2020-07-14 22:08:35.372508 (MainThread): Parsing macros/sql/get_tables_by_prefix_sql.sql
2020-07-14 22:08:35.376060 (MainThread): Parsing macros/sql/star.sql
2020-07-14 22:08:35.379612 (MainThread): Parsing macros/sql/unpivot.sql
2020-07-14 22:08:35.386373 (MainThread): Parsing macros/sql/union.sql
2020-07-14 22:08:35.395802 (MainThread): Parsing macros/sql/groupby.sql
2020-07-14 22:08:35.397183 (MainThread): Parsing macros/sql/get_tables_by_pattern.sql
2020-07-14 22:08:35.398549 (MainThread): Parsing macros/sql/surrogate_key.sql
2020-07-14 22:08:35.401593 (MainThread): Parsing macros/sql/safe_add.sql
2020-07-14 22:08:35.402958 (MainThread): Parsing macros/sql/nullcheck.sql
2020-07-14 22:08:35.404627 (MainThread): Parsing macros/sql/get_column_values.sql
2020-07-14 22:08:35.409215 (MainThread): Parsing macros/sql/pivot.sql
2020-07-14 22:08:35.412197 (MainThread): Parsing macros/sql/get_query_results_as_dict.sql
2020-07-14 22:08:35.450074 (MainThread): Acquiring new bigquery connection "model.stripe.stripe_weekly_overview".
2020-07-14 22:08:35.450178 (MainThread): Opening a new connection, currently in state init
2020-07-14 22:08:35.467732 (MainThread): Acquiring new bigquery connection "model.stripe.stripe_daily_overview".
2020-07-14 22:08:35.467848 (MainThread): Opening a new connection, currently in state closed
2020-07-14 22:08:35.477802 (MainThread): Acquiring new bigquery connection "model.stripe.stripe_invoice_details".
2020-07-14 22:08:35.477878 (MainThread): Opening a new connection, currently in state closed
2020-07-14 22:08:35.490999 (MainThread): Acquiring new bigquery connection "model.stripe.stripe_customer_overview".
2020-07-14 22:08:35.491084 (MainThread): Opening a new connection, currently in state closed
2020-07-14 22:08:35.501861 (MainThread): Acquiring new bigquery connection "model.stripe.stripe_balance_transactions".
2020-07-14 22:08:35.501979 (MainThread): Opening a new connection, currently in state closed
2020-07-14 22:08:35.510918 (MainThread): Acquiring new bigquery connection "model.stripe.stripe_quarterly_overview".
2020-07-14 22:08:35.510994 (MainThread): Opening a new connection, currently in state closed
2020-07-14 22:08:35.520396 (MainThread): Acquiring new bigquery connection "model.stripe.stripe_monthly_overview".
2020-07-14 22:08:35.520471 (MainThread): Opening a new connection, currently in state closed
2020-07-14 22:08:35.530062 (MainThread): Acquiring new bigquery connection "model.stripe.stripe_subscription_details".
2020-07-14 22:08:35.530139 (MainThread): Opening a new connection, currently in state closed
2020-07-14 22:08:35.543738 (MainThread): Acquiring new bigquery connection "model.stripe.stripe_balance_transaction_joined".
2020-07-14 22:08:35.543860 (MainThread): Opening a new connection, currently in state closed
2020-07-14 22:08:35.561522 (MainThread): Acquiring new bigquery connection "model.stripe.stripe_incomplete_charges".
2020-07-14 22:08:35.561664 (MainThread): Opening a new connection, currently in state closed
2020-07-14 22:08:35.860626 (MainThread): Acquiring new bigquery connection "model.stripe_source.stg_stripe_card".
2020-07-14 22:08:35.860765 (MainThread): Opening a new connection, currently in state closed
2020-07-14 22:08:35.873608 (MainThread): Acquiring new bigquery connection "model.stripe_source.stg_stripe_invoice_line_item".
2020-07-14 22:08:35.873739 (MainThread): Opening a new connection, currently in state closed
2020-07-14 22:08:35.887531 (MainThread): Acquiring new bigquery connection "model.stripe_source.stg_stripe_payment_method_card".
2020-07-14 22:08:35.887671 (MainThread): Opening a new connection, currently in state closed
2020-07-14 22:08:35.899356 (MainThread): Acquiring new bigquery connection "model.stripe_source.stg_stripe_charge".
2020-07-14 22:08:35.899467 (MainThread): Opening a new connection, currently in state closed
2020-07-14 22:08:35.910312 (MainThread): Acquiring new bigquery connection "model.stripe_source.stg_stripe_payout".
2020-07-14 22:08:35.910419 (MainThread): Opening a new connection, currently in state closed
2020-07-14 22:08:35.922046 (MainThread): Acquiring new bigquery connection "model.stripe_source.stg_stripe_customer".
2020-07-14 22:08:35.922175 (MainThread): Opening a new connection, currently in state closed
2020-07-14 22:08:35.933170 (MainThread): Acquiring new bigquery connection "model.stripe_source.stg_stripe_refund".
2020-07-14 22:08:35.933273 (MainThread): Opening a new connection, currently in state closed
2020-07-14 22:08:35.943173 (MainThread): Acquiring new bigquery connection "model.stripe_source.stg_stripe_subscription".
2020-07-14 22:08:35.943267 (MainThread): Opening a new connection, currently in state closed
2020-07-14 22:08:35.955023 (MainThread): Acquiring new bigquery connection "model.stripe_source.stg_stripe_payment_method".
2020-07-14 22:08:35.955120 (MainThread): Opening a new connection, currently in state closed
2020-07-14 22:08:35.965397 (MainThread): Acquiring new bigquery connection "model.stripe_source.stg_stripe_payment_intent".
2020-07-14 22:08:35.965505 (MainThread): Opening a new connection, currently in state closed
2020-07-14 22:08:35.975521 (MainThread): Acquiring new bigquery connection "model.stripe_source.stg_stripe_invoice".
2020-07-14 22:08:35.975628 (MainThread): Opening a new connection, currently in state closed
2020-07-14 22:08:35.986774 (MainThread): Acquiring new bigquery connection "model.stripe_source.stg_stripe_fee".
2020-07-14 22:08:35.986869 (MainThread): Opening a new connection, currently in state closed
2020-07-14 22:08:35.996856 (MainThread): Acquiring new bigquery connection "model.stripe_source.stg_stripe_balance_transaction".
2020-07-14 22:08:35.996955 (MainThread): Opening a new connection, currently in state closed
2020-07-14 22:08:38.115140 (MainThread): Found 23 models, 16 tests, 0 snapshots, 0 analyses, 278 macros, 0 operations, 0 seed files, 13 sources
2020-07-14 22:08:38.147400 (MainThread): 
2020-07-14 22:08:38.147705 (MainThread): Acquiring new bigquery connection "master".
2020-07-14 22:08:38.147840 (MainThread): Opening a new connection, currently in state closed
2020-07-14 22:08:38.158142 (ThreadPoolExecutor-0_0): Acquiring new bigquery connection "list_dbt-package-testing".
2020-07-14 22:08:38.158257 (ThreadPoolExecutor-0_0): Opening a new connection, currently in state init
2020-07-14 22:08:38.664889 (ThreadPoolExecutor-1_0): Acquiring new bigquery connection "list_dbt-package-testing_dbt_kristin".
2020-07-14 22:08:38.665023 (ThreadPoolExecutor-1_0): Re-using an available connection from the pool (formerly list_dbt-package-testing).
2020-07-14 22:08:38.665140 (ThreadPoolExecutor-1_0): Client.dataset is deprecated and will be removed in a future version. Use a string like 'my_project.my_dataset' or a cloud.google.bigquery.DatasetReference object, instead.
2020-07-14 22:08:38.835450 (MainThread): Acquiring new bigquery connection "master".
2020-07-14 22:08:38.835669 (MainThread): Opening a new connection, currently in state closed
2020-07-14 22:08:38.836079 (MainThread): 15:08:38 | Concurrency: 4 threads (target='dev_bigquery_dbt_testing')
2020-07-14 22:08:38.836294 (MainThread): 15:08:38 | 
2020-07-14 22:08:38.842313 (Thread-1): Began running node model.stripe_source.stg_stripe_charge
2020-07-14 22:08:38.842538 (Thread-2): Began running node model.stripe_source.stg_stripe_customer
2020-07-14 22:08:38.842874 (Thread-1): Acquiring new bigquery connection "model.stripe_source.stg_stripe_charge".
2020-07-14 22:08:38.842986 (Thread-3): Began running node model.stripe_source.stg_stripe_balance_transaction
2020-07-14 22:08:38.843197 (Thread-4): Began running node model.stripe_source.stg_stripe_card
2020-07-14 22:08:38.843603 (Thread-2): Acquiring new bigquery connection "model.stripe_source.stg_stripe_customer".
2020-07-14 22:08:38.843764 (Thread-1): Re-using an available connection from the pool (formerly list_dbt-package-testing_dbt_kristin).
2020-07-14 22:08:38.844069 (Thread-3): Acquiring new bigquery connection "model.stripe_source.stg_stripe_balance_transaction".
2020-07-14 22:08:38.844355 (Thread-4): Acquiring new bigquery connection "model.stripe_source.stg_stripe_card".
2020-07-14 22:08:38.844481 (Thread-2): Opening a new connection, currently in state init
2020-07-14 22:08:38.844603 (Thread-1): Compiling model.stripe_source.stg_stripe_charge
2020-07-14 22:08:38.844701 (Thread-3): Opening a new connection, currently in state init
2020-07-14 22:08:38.844794 (Thread-4): Opening a new connection, currently in state init
2020-07-14 22:08:38.844895 (Thread-2): Compiling model.stripe_source.stg_stripe_customer
2020-07-14 22:08:38.857085 (Thread-3): Compiling model.stripe_source.stg_stripe_balance_transaction
2020-07-14 22:08:38.862296 (Thread-1): Writing injected SQL for node "model.stripe_source.stg_stripe_charge"
2020-07-14 22:08:38.862473 (Thread-4): Compiling model.stripe_source.stg_stripe_card
2020-07-14 22:08:38.870057 (Thread-2): Writing injected SQL for node "model.stripe_source.stg_stripe_customer"
2020-07-14 22:08:38.876871 (Thread-3): Writing injected SQL for node "model.stripe_source.stg_stripe_balance_transaction"
2020-07-14 22:08:38.883086 (Thread-4): Writing injected SQL for node "model.stripe_source.stg_stripe_card"
2020-07-14 22:08:38.883731 (Thread-2): finished collecting timing info
2020-07-14 22:08:38.884152 (Thread-2): Finished running node model.stripe_source.stg_stripe_customer
2020-07-14 22:08:38.884289 (Thread-2): Began running node model.stripe_source.stg_stripe_payment_intent
2020-07-14 22:08:38.884514 (Thread-2): Acquiring new bigquery connection "model.stripe_source.stg_stripe_payment_intent".
2020-07-14 22:08:38.884605 (Thread-2): Opening a new connection, currently in state closed
2020-07-14 22:08:38.884691 (Thread-2): Compiling model.stripe_source.stg_stripe_payment_intent
2020-07-14 22:08:38.890528 (Thread-3): finished collecting timing info
2020-07-14 22:08:38.890886 (Thread-3): Finished running node model.stripe_source.stg_stripe_balance_transaction
2020-07-14 22:08:38.891009 (Thread-3): Began running node model.stripe_source.stg_stripe_payment_method
2020-07-14 22:08:38.891221 (Thread-3): Acquiring new bigquery connection "model.stripe_source.stg_stripe_payment_method".
2020-07-14 22:08:38.891306 (Thread-3): Opening a new connection, currently in state closed
2020-07-14 22:08:38.891386 (Thread-3): Compiling model.stripe_source.stg_stripe_payment_method
2020-07-14 22:08:38.897965 (Thread-2): Writing injected SQL for node "model.stripe_source.stg_stripe_payment_intent"
2020-07-14 22:08:38.898106 (Thread-1): finished collecting timing info
2020-07-14 22:08:38.898443 (Thread-1): Finished running node model.stripe_source.stg_stripe_charge
2020-07-14 22:08:38.898560 (Thread-1): Began running node model.stripe_source.stg_stripe_payout
2020-07-14 22:08:38.898762 (Thread-1): Acquiring new bigquery connection "model.stripe_source.stg_stripe_payout".
2020-07-14 22:08:38.898845 (Thread-1): Re-using an available connection from the pool (formerly model.stripe_source.stg_stripe_charge).
2020-07-14 22:08:38.898924 (Thread-1): Compiling model.stripe_source.stg_stripe_payout
2020-07-14 22:08:38.904388 (Thread-1): Writing injected SQL for node "model.stripe_source.stg_stripe_payout"
2020-07-14 22:08:38.904666 (Thread-4): finished collecting timing info
2020-07-14 22:08:38.904985 (Thread-4): Finished running node model.stripe_source.stg_stripe_card
2020-07-14 22:08:38.905097 (Thread-4): Began running node model.stripe_source.stg_stripe_refund
2020-07-14 22:08:38.905290 (Thread-4): Acquiring new bigquery connection "model.stripe_source.stg_stripe_refund".
2020-07-14 22:08:38.905368 (Thread-4): Opening a new connection, currently in state closed
2020-07-14 22:08:38.905527 (Thread-3): Writing injected SQL for node "model.stripe_source.stg_stripe_payment_method"
2020-07-14 22:08:38.905600 (Thread-4): Compiling model.stripe_source.stg_stripe_refund
2020-07-14 22:08:38.905912 (Thread-2): finished collecting timing info
2020-07-14 22:08:38.911232 (Thread-4): Writing injected SQL for node "model.stripe_source.stg_stripe_refund"
2020-07-14 22:08:38.911297 (Thread-1): finished collecting timing info
2020-07-14 22:08:38.911677 (Thread-2): Finished running node model.stripe_source.stg_stripe_payment_intent
2020-07-14 22:08:38.911745 (Thread-3): finished collecting timing info
2020-07-14 22:08:38.912090 (Thread-1): Finished running node model.stripe_source.stg_stripe_payout
2020-07-14 22:08:38.912265 (Thread-2): Began running node model.stripe_source.stg_stripe_invoice
2020-07-14 22:08:38.912471 (Thread-4): finished collecting timing info
2020-07-14 22:08:38.912764 (Thread-3): Finished running node model.stripe_source.stg_stripe_payment_method
2020-07-14 22:08:38.912866 (Thread-1): Began running node model.stripe_source.stg_stripe_invoice_line_item
2020-07-14 22:08:38.913084 (Thread-2): Acquiring new bigquery connection "model.stripe_source.stg_stripe_invoice".
2020-07-14 22:08:38.913332 (Thread-4): Finished running node model.stripe_source.stg_stripe_refund
2020-07-14 22:08:38.913441 (Thread-3): Began running node model.stripe_source.stg_stripe_subscription
2020-07-14 22:08:38.913658 (Thread-1): Acquiring new bigquery connection "model.stripe_source.stg_stripe_invoice_line_item".
2020-07-14 22:08:38.913770 (Thread-2): Opening a new connection, currently in state closed
2020-07-14 22:08:38.913882 (Thread-4): Began running node model.stripe_source.stg_stripe_fee
2020-07-14 22:08:38.914115 (Thread-3): Acquiring new bigquery connection "model.stripe_source.stg_stripe_subscription".
2020-07-14 22:08:38.914311 (Thread-1): Re-using an available connection from the pool (formerly model.stripe_source.stg_stripe_payout).
2020-07-14 22:08:38.914411 (Thread-2): Compiling model.stripe_source.stg_stripe_invoice
2020-07-14 22:08:38.914581 (Thread-4): Acquiring new bigquery connection "model.stripe_source.stg_stripe_fee".
2020-07-14 22:08:38.914656 (Thread-3): Opening a new connection, currently in state closed
2020-07-14 22:08:38.914744 (Thread-1): Compiling model.stripe_source.stg_stripe_invoice_line_item
2020-07-14 22:08:38.920012 (Thread-2): Writing injected SQL for node "model.stripe_source.stg_stripe_invoice"
2020-07-14 22:08:38.920095 (Thread-4): Opening a new connection, currently in state closed
2020-07-14 22:08:38.920169 (Thread-3): Compiling model.stripe_source.stg_stripe_subscription
2020-07-14 22:08:38.925642 (Thread-1): Writing injected SQL for node "model.stripe_source.stg_stripe_invoice_line_item"
2020-07-14 22:08:38.925853 (Thread-4): Compiling model.stripe_source.stg_stripe_fee
2020-07-14 22:08:38.931231 (Thread-3): Writing injected SQL for node "model.stripe_source.stg_stripe_subscription"
2020-07-14 22:08:38.931444 (Thread-2): finished collecting timing info
2020-07-14 22:08:38.936453 (Thread-4): Writing injected SQL for node "model.stripe_source.stg_stripe_fee"
2020-07-14 22:08:38.936577 (Thread-1): finished collecting timing info
2020-07-14 22:08:38.936920 (Thread-2): Finished running node model.stripe_source.stg_stripe_invoice
2020-07-14 22:08:38.937305 (Thread-3): finished collecting timing info
2020-07-14 22:08:38.937569 (Thread-1): Finished running node model.stripe_source.stg_stripe_invoice_line_item
2020-07-14 22:08:38.937766 (Thread-2): Began running node model.stripe_source.stg_stripe_payment_method_card
2020-07-14 22:08:38.937959 (Thread-4): finished collecting timing info
2020-07-14 22:08:38.938363 (Thread-3): Finished running node model.stripe_source.stg_stripe_subscription
2020-07-14 22:08:38.938595 (Thread-1): Began running node model.stripe.stripe_incomplete_charges
2020-07-14 22:08:38.938874 (Thread-2): Acquiring new bigquery connection "model.stripe_source.stg_stripe_payment_method_card".
2020-07-14 22:08:38.939073 (Thread-4): Finished running node model.stripe_source.stg_stripe_fee
2020-07-14 22:08:38.939178 (Thread-3): Began running node model.stripe.stripe_balance_transaction_joined
2020-07-14 22:08:38.939403 (Thread-1): Acquiring new bigquery connection "model.stripe.stripe_incomplete_charges".
2020-07-14 22:08:38.939626 (Thread-2): Opening a new connection, currently in state closed
2020-07-14 22:08:38.939722 (Thread-4): Began running node model.stripe.stripe_invoice_details
2020-07-14 22:08:38.939902 (Thread-3): Acquiring new bigquery connection "model.stripe.stripe_balance_transaction_joined".
2020-07-14 22:08:38.940031 (Thread-1): Re-using an available connection from the pool (formerly model.stripe_source.stg_stripe_invoice_line_item).
2020-07-14 22:08:38.940120 (Thread-2): Compiling model.stripe_source.stg_stripe_payment_method_card
2020-07-14 22:08:38.940223 (Thread-4): 15:08:38 | 1 of 8 START table model dbt_kristin.stripe_invoice_details.......... [RUN]
2020-07-14 22:08:38.940295 (Thread-3): Opening a new connection, currently in state closed
2020-07-14 22:08:38.940369 (Thread-1): Compiling model.stripe.stripe_incomplete_charges
2020-07-14 22:08:38.945286 (Thread-2): Writing injected SQL for node "model.stripe_source.stg_stripe_payment_method_card"
2020-07-14 22:08:38.945573 (Thread-4): Acquiring new bigquery connection "model.stripe.stripe_invoice_details".
2020-07-14 22:08:38.945669 (Thread-3): Compiling model.stripe.stripe_balance_transaction_joined
2020-07-14 22:08:38.953124 (Thread-1): Writing injected SQL for node "model.stripe.stripe_incomplete_charges"
2020-07-14 22:08:38.953279 (Thread-4): Opening a new connection, currently in state closed
2020-07-14 22:08:38.977398 (Thread-4): Compiling model.stripe.stripe_invoice_details
2020-07-14 22:08:39.001372 (Thread-3): Writing injected SQL for node "model.stripe.stripe_balance_transaction_joined"
2020-07-14 22:08:39.007956 (Thread-2): finished collecting timing info
2020-07-14 22:08:39.008306 (Thread-2): Finished running node model.stripe_source.stg_stripe_payment_method_card
2020-07-14 22:08:39.008458 (Thread-2): Began running node model.stripe.stripe_subscription_details
2020-07-14 22:08:39.008562 (Thread-2): 15:08:39 | 2 of 8 START table model dbt_kristin.stripe_subscription_details..... [RUN]
2020-07-14 22:08:39.008805 (Thread-2): Acquiring new bigquery connection "model.stripe.stripe_subscription_details".
2020-07-14 22:08:39.020558 (Thread-4): Writing injected SQL for node "model.stripe.stripe_invoice_details"
2020-07-14 22:08:39.020653 (Thread-1): finished collecting timing info
2020-07-14 22:08:39.020849 (Thread-2): Opening a new connection, currently in state closed
2020-07-14 22:08:39.021225 (Thread-1): Finished running node model.stripe.stripe_incomplete_charges
2020-07-14 22:08:39.021297 (Thread-3): finished collecting timing info
2020-07-14 22:08:39.021468 (Thread-2): Compiling model.stripe.stripe_subscription_details
2020-07-14 22:08:39.021820 (Thread-3): Finished running node model.stripe.stripe_balance_transaction_joined
2020-07-14 22:08:39.027585 (Thread-4): finished collecting timing info
2020-07-14 22:08:39.081816 (Thread-1): Began running node model.stripe.stripe_balance_transactions
2020-07-14 22:08:39.081979 (Thread-1): 15:08:39 | 3 of 8 START table model dbt_kristin.stripe_balance_transactions..... [RUN]
2020-07-14 22:08:39.082234 (Thread-1): Acquiring new bigquery connection "model.stripe.stripe_balance_transactions".
2020-07-14 22:08:39.085106 (Thread-2): Writing injected SQL for node "model.stripe.stripe_subscription_details"
2020-07-14 22:08:39.085171 (Thread-1): Re-using an available connection from the pool (formerly model.stripe.stripe_incomplete_charges).
2020-07-14 22:08:39.085231 (Thread-3): Began running node model.stripe.stripe_customer_overview
2020-07-14 22:08:39.096314 (Thread-4): Writing runtime SQL for node "model.stripe.stripe_invoice_details"
2020-07-14 22:08:39.096513 (Thread-1): Compiling model.stripe.stripe_balance_transactions
2020-07-14 22:08:39.096685 (Thread-3): 15:08:39 | 4 of 8 START table model dbt_kristin.stripe_customer_overview........ [RUN]
2020-07-14 22:08:39.096911 (Thread-2): finished collecting timing info
2020-07-14 22:08:39.108217 (Thread-3): Acquiring new bigquery connection "model.stripe.stripe_customer_overview".
2020-07-14 22:08:39.119001 (Thread-1): Writing injected SQL for node "model.stripe.stripe_balance_transactions"
2020-07-14 22:08:39.123520 (Thread-2): Writing runtime SQL for node "model.stripe.stripe_subscription_details"
2020-07-14 22:08:39.123787 (Thread-3): Opening a new connection, currently in state closed
2020-07-14 22:08:39.124234 (Thread-4): On model.stripe.stripe_invoice_details: /* {"app": "dbt", "dbt_version": "0.17.0rc1", "profile_name": "integration_test", "target_name": "dev_bigquery_dbt_testing", "node_id": "model.stripe.stripe_invoice_details"} */


  create or replace table `dbt-package-testing`.`dbt_kristin`.`stripe_invoice_details`
  
  
  OPTIONS()
  as (
    

with  __dbt__CTE__stg_stripe_invoice as (


with invoice as (

    select *
    from `dbt-package-testing`.`stripe`.`invoice`

), fields as (

    select
      id as invoice_id,
      amount_due,
      amount_paid,
      amount_remaining,
      attempt_count,
      auto_advance,
      billing_reason,
      charge_id,
      created as created_at,
      currency,
      customer_id,
      description,
      due_date,
      number,
      paid as is_paid,
      receipt_number,
      status,
      subtotal,
      tax,
      tax_percent,
      total
    from invoice
    where not coalesce(is_deleted, false)

)

select * from fields
),  __dbt__CTE__stg_stripe_charge as (
with charge as (

    select *
    from `dbt-package-testing`.`stripe`.`charge`

), fields as (

    select 
      id as charge_id, 
      amount,
      amount_refunded,
      application_fee_amount,
      balance_transaction_id,
      captured as is_captured,
      card_id,
      created as created_at,
      customer_id,
      currency,
      description,
      failure_code,
      failure_message,
      paid as is_paid,
      payment_intent_id,
      receipt_email,
      receipt_number,
      refunded as is_refunded,
      status,
      invoice_id
    from charge
    
)

select *
from fields
),  __dbt__CTE__stg_stripe_invoice_line_item as (


with invoice_line_item as (

    select *
    from `dbt-package-testing`.`stripe`.`invoice_line_item`

), fields as (

    select
      id as invoice_line_item_id,
      invoice_id,
      amount,
      currency,
      description,
      discountable as is_discountable,
      plan_id,
      proration,
      quantity,
      subscription_id,
      subscription_item_id,
      type,
      unique_id
    from invoice_line_item
    where id not like 'sub%'

)

select * from fields
),  __dbt__CTE__stg_stripe_subscription as (


with subscription as (

    select *
    from `dbt-package-testing`.`stripe`.`subscription`

), fields as (

    select
      id as subscription_id,
      status,
      billing,
      billing_cycle_anchor,
      cancel_at,
      cancel_at_period_end,
      canceled_at,
      created as created_at,
      current_period_start,
      current_period_end,
      customer_id,
      days_until_due,
      start_date,
      ended_at
    from subscription

)

select * from fields
),  __dbt__CTE__stg_stripe_customer as (
with customer as (

    select *
    from `dbt-package-testing`.`stripe`.`customer`

), fields as (

    select 
      id as customer_id,
      account_balance,
      created as created_at,
      currency,
      default_card_id,
      delinquent as is_deliguent,
      description,
      email,
      shipping_address_city,
      shipping_address_country,
      shipping_address_line_1,
      shipping_address_line_2,
      shipping_address_postal_code,
      shipping_address_state,
      shipping_name,
      shipping_phone
    from customer
    where not is_deleted

)

select *
from fields
),invoice as (

    select *
    from __dbt__CTE__stg_stripe_invoice  

), charge as (

    select *
    from __dbt__CTE__stg_stripe_charge  

), invoice_line_item as (

    select *
    from __dbt__CTE__stg_stripe_invoice_line_item  

), subscription as (

    select *
    from __dbt__CTE__stg_stripe_subscription  

), customer as (

    select *
    from __dbt__CTE__stg_stripe_customer  

)

select 
  invoice.invoice_id,
  invoice.number,
  invoice.created_at as invoice_created_at,
  invoice.status,
  invoice.due_date,
  invoice.amount_due,
  invoice.subtotal,
  invoice.tax,
  invoice.total,
  invoice.amount_paid,
  invoice.amount_remaining,
  invoice.attempt_count,
  invoice.description as invoice_memo,
  invoice_line_item.description as line_item_desc,
  invoice_line_item.amount as line_item_amount,
  invoice_line_item.quantity,
  charge.balance_transaction_id,
  charge.amount as charge_amount, 
  charge.status as charge_status,
  charge.created_at as charge_created_at,
  customer.description as customer_description,
  customer.email as customer_email,
  subscription.subscription_id,
  subscription.billing as subcription_billing,
  subscription.start_date as subscription_start_date,
  subscription.ended_at as subscription_ended_at
from invoice
left join charge on charge.charge_id = invoice.charge_id
left join invoice_line_item on invoice.invoice_id = invoice_line_item.invoice_id
left join subscription on invoice_line_item.subscription_id = subscription.subscription_id
left join customer on invoice.customer_id = customer.customer_id
order by invoice.created_at desc
  );
    
2020-07-14 22:08:39.124546 (Thread-3): Compiling model.stripe.stripe_customer_overview
2020-07-14 22:08:39.125478 (Thread-1): finished collecting timing info
2020-07-14 22:08:39.161931 (Thread-2): On model.stripe.stripe_subscription_details: /* {"app": "dbt", "dbt_version": "0.17.0rc1", "profile_name": "integration_test", "target_name": "dev_bigquery_dbt_testing", "node_id": "model.stripe.stripe_subscription_details"} */


  create or replace table `dbt-package-testing`.`dbt_kristin`.`stripe_subscription_details`
  
  
  OPTIONS()
  as (
    

with  __dbt__CTE__stg_stripe_invoice as (


with invoice as (

    select *
    from `dbt-package-testing`.`stripe`.`invoice`

), fields as (

    select
      id as invoice_id,
      amount_due,
      amount_paid,
      amount_remaining,
      attempt_count,
      auto_advance,
      billing_reason,
      charge_id,
      created as created_at,
      currency,
      customer_id,
      description,
      due_date,
      number,
      paid as is_paid,
      receipt_number,
      status,
      subtotal,
      tax,
      tax_percent,
      total
    from invoice
    where not coalesce(is_deleted, false)

)

select * from fields
),  __dbt__CTE__stg_stripe_charge as (
with charge as (

    select *
    from `dbt-package-testing`.`stripe`.`charge`

), fields as (

    select 
      id as charge_id, 
      amount,
      amount_refunded,
      application_fee_amount,
      balance_transaction_id,
      captured as is_captured,
      card_id,
      created as created_at,
      customer_id,
      currency,
      description,
      failure_code,
      failure_message,
      paid as is_paid,
      payment_intent_id,
      receipt_email,
      receipt_number,
      refunded as is_refunded,
      status,
      invoice_id
    from charge
    
)

select *
from fields
),  __dbt__CTE__stg_stripe_invoice_line_item as (


with invoice_line_item as (

    select *
    from `dbt-package-testing`.`stripe`.`invoice_line_item`

), fields as (

    select
      id as invoice_line_item_id,
      invoice_id,
      amount,
      currency,
      description,
      discountable as is_discountable,
      plan_id,
      proration,
      quantity,
      subscription_id,
      subscription_item_id,
      type,
      unique_id
    from invoice_line_item
    where id not like 'sub%'

)

select * from fields
),  __dbt__CTE__stg_stripe_subscription as (


with subscription as (

    select *
    from `dbt-package-testing`.`stripe`.`subscription`

), fields as (

    select
      id as subscription_id,
      status,
      billing,
      billing_cycle_anchor,
      cancel_at,
      cancel_at_period_end,
      canceled_at,
      created as created_at,
      current_period_start,
      current_period_end,
      customer_id,
      days_until_due,
      start_date,
      ended_at
    from subscription

)

select * from fields
),  __dbt__CTE__stg_stripe_customer as (
with customer as (

    select *
    from `dbt-package-testing`.`stripe`.`customer`

), fields as (

    select 
      id as customer_id,
      account_balance,
      created as created_at,
      currency,
      default_card_id,
      delinquent as is_deliguent,
      description,
      email,
      shipping_address_city,
      shipping_address_country,
      shipping_address_line_1,
      shipping_address_line_2,
      shipping_address_postal_code,
      shipping_address_state,
      shipping_name,
      shipping_phone
    from customer
    where not is_deleted

)

select *
from fields
),invoice as (

    select *
    from __dbt__CTE__stg_stripe_invoice  

), charge as (

    select *
    from __dbt__CTE__stg_stripe_charge  

), invoice_line_item as (

    select *
    from __dbt__CTE__stg_stripe_invoice_line_item  

), subscription as (

    select *
    from __dbt__CTE__stg_stripe_subscription  

), customer as (

    select *
    from __dbt__CTE__stg_stripe_customer  

), line_items_groups as (

  select
    invoice.invoice_id,
    invoice.amount_due,
    invoice.amount_paid,
    invoice.amount_remaining,
    invoice.created_at,
    max(invoice_line_item.subscription_id) as subscription_id,
    sum(invoice_line_item.amount) as total_item_amount,
    count(distinct invoice_line_item.unique_id) as number_line_items
  from invoice_line_item
  join invoice on invoice.invoice_id = invoice_line_item.invoice_id
  group by 1, 2, 3, 4, 5

), grouped_by_subcription as (

  select
    subscription_id,
    count(distinct invoice_id) as number_invoices_generated,
    sum(amount_due) as total_amount_billed,
    sum(amount_paid) as total_amount_paid,
    sum(amount_remaining) total_amount_remaining,
    max(created_at) as most_recent_invoice_created_at,
    avg(amount_due) as average_invoice_amount,
    avg(total_item_amount) as average_line_item_amount,
    avg(number_line_items) as avg_num_invoice_items
  from line_items_groups
  group by 1

)


select
  subscription.subscription_id,
  subscription.customer_id,
  customer.description as customer_description,
  customer.email as customer_email,
  subscription.status,
  subscription.start_date,
  subscription.ended_at,
  subscription.billing,
  subscription.billing_cycle_anchor,
  subscription.canceled_at,
  subscription.created_at,
  subscription.current_period_start,
  subscription.current_period_end,
  subscription.days_until_due,
  subscription.cancel_at_period_end,
  subscription.cancel_at,
  number_invoices_generated,
  total_amount_billed,
  total_amount_paid,
  total_amount_remaining,
  most_recent_invoice_created_at,
  average_invoice_amount,
  average_line_item_amount,
  avg_num_invoice_items
from subscription
left join grouped_by_subcription on subscription.subscription_id = grouped_by_subcription.subscription_id
left join customer on subscription.customer_id = customer.customer_id
order by subscription.created_at desc
  );
    
2020-07-14 22:08:39.169587 (Thread-1): Writing runtime SQL for node "model.stripe.stripe_balance_transactions"
2020-07-14 22:08:39.205906 (Thread-3): Writing injected SQL for node "model.stripe.stripe_customer_overview"
2020-07-14 22:08:39.206854 (Thread-1): On model.stripe.stripe_balance_transactions: /* {"app": "dbt", "dbt_version": "0.17.0rc1", "profile_name": "integration_test", "target_name": "dev_bigquery_dbt_testing", "node_id": "model.stripe.stripe_balance_transactions"} */


  create or replace table `dbt-package-testing`.`dbt_kristin`.`stripe_balance_transactions`
  
  
  OPTIONS()
  as (
    with  __dbt__CTE__stg_stripe_balance_transaction as (
with balance_transaction as (

    select *
    from `dbt-package-testing`.`stripe`.`balance_transaction`

), fields as (

    select 
      id as balance_transaction_id,
      amount,
      available_on,
      created as created_at,
      currency,
      description,
      exchange_rate,
      fee,
      net,
      source,
      status,
      type
    from balance_transaction
)

select *
from fields
),  __dbt__CTE__stg_stripe_charge as (
with charge as (

    select *
    from `dbt-package-testing`.`stripe`.`charge`

), fields as (

    select 
      id as charge_id, 
      amount,
      amount_refunded,
      application_fee_amount,
      balance_transaction_id,
      captured as is_captured,
      card_id,
      created as created_at,
      customer_id,
      currency,
      description,
      failure_code,
      failure_message,
      paid as is_paid,
      payment_intent_id,
      receipt_email,
      receipt_number,
      refunded as is_refunded,
      status,
      invoice_id
    from charge
    
)

select *
from fields
),  __dbt__CTE__stg_stripe_payment_intent as (
with payment_intent as (

    select *
    from `dbt-package-testing`.`stripe`.`payment_intent`

), fields as (

    select 
      id as payment_intent_id,
      amount,
      amount_capturable,
      amount_received,
      application,
      application_fee_amount,
      canceled_at,
      cancellation_reason,
      capture_method,
      confirmation_method,
      created as created_at,
      currency,
      customer_id,
      description,
      payment_method_id,
      receipt_email,
      statement_descriptor,
      status
    from payment_intent

)

select *
from fields
),  __dbt__CTE__stg_stripe_payment_method as (
with payment_method as (

    select *
    from `dbt-package-testing`.`stripe`.`payment_method`

), fields as (

    select 
      id as payment_method_id,
      created as created_at,
      customer_id,
      type
    from payment_method
    where not is_deleted

)

select *
from fields
),  __dbt__CTE__stg_stripe_card as (
with card as (

    select *
    from `dbt-package-testing`.`stripe`.`card`

), fields as (

    select 
      id as card_id,
      brand,
      country,
      created as created_at,
      customer_id,
      name,
      recipient,
      funding
    from card
    where not coalesce(is_deleted, false)

)

select *
from fields
),  __dbt__CTE__stg_stripe_payout as (
with payout as (

    select *
    from `dbt-package-testing`.`stripe`.`payout`

), fields as (

    select 
      id as payout_id,
      amount,
      arrival_date,
      automatic as is_automatic,
      balance_transaction_id,
      created as created_at,
      currency,
      description,
      method,
      source_type,
      status,
      type
    from payout

)

select *
from fields
),  __dbt__CTE__stg_stripe_refund as (
with refund as (

    select *
    from `dbt-package-testing`.`stripe`.`refund`

), fields as (

    select 
      id as refund_id,
      amount,
      balance_transaction_id,
      charge_id,
      created as created_at,
      currency,
      description,
      reason,
      receipt_number,
      status
    from refund

)

select *
from fields
),  __dbt__CTE__stg_stripe_customer as (
with customer as (

    select *
    from `dbt-package-testing`.`stripe`.`customer`

), fields as (

    select 
      id as customer_id,
      account_balance,
      created as created_at,
      currency,
      default_card_id,
      delinquent as is_deliguent,
      description,
      email,
      shipping_address_city,
      shipping_address_country,
      shipping_address_line_1,
      shipping_address_line_2,
      shipping_address_postal_code,
      shipping_address_state,
      shipping_name,
      shipping_phone
    from customer
    where not is_deleted

)

select *
from fields
),  __dbt__CTE__stripe_balance_transaction_joined as (
with balance_transaction as (

    select *
    from __dbt__CTE__stg_stripe_balance_transaction
  
), charge as (

    select *
    from __dbt__CTE__stg_stripe_charge

), payment_intent as (

    select *
    from __dbt__CTE__stg_stripe_payment_intent

), payment_method as (

    select *
    from __dbt__CTE__stg_stripe_payment_method

), card as (

    select *
    from __dbt__CTE__stg_stripe_card

), payout as (

    select *
    from __dbt__CTE__stg_stripe_payout

), refund as (

    select *
    from __dbt__CTE__stg_stripe_refund

), customer as (

    select *
    from __dbt__CTE__stg_stripe_customer


)

select 
  balance_transaction.balance_transaction_id,
  balance_transaction.created_at,
  balance_transaction.available_on,
  balance_transaction.currency,
  balance_transaction.amount,
  balance_transaction.fee,
  balance_transaction.net,
  balance_transaction.type,
  case
    when balance_transaction.type in ('charge', 'payment') then 'charge'
    when balance_transaction.type in ('refund', 'payment_refund') then 'refund'
    when balance_transaction.type in ('payout_cancel', 'payout_failure')	then 'payout_reversal'
    when balance_transaction.type in ('transfer', 'recipient_transfer') then	'transfer'
    when balance_transaction.type in ('transfer_cancel', 'transfer_failure', 'recipient_transfer_cancel', 'recipient_transfer_failure') then 'transfer_reversal'
    else balance_transaction.type
  end as reporting_category,
  balance_transaction.source,
  balance_transaction.description,
  case when balance_transaction.type = 'charge' then charge.amount end as customer_facing_amount, --think this might be the charge amount/currency
  case when balance_transaction.type = 'charge' then charge.currency end as customer_facing_currency,
  date_add(date(balance_transaction.available_on), interval 1 day) as effective_at,
  coalesce(charge.customer_id, refund_charge.customer_id) as customer_id,
  charge.receipt_email,
  customer.description as customer_description,
  charge.charge_id,
  charge.payment_intent_id,
  charge.created_at as charge_created_at,
  payment_method.type as payment_method_type,
  card.brand as card_brand,
  card.funding as card_funding,
  card.country as card_country,
  payout.payout_id,
  payout.arrival_date as payout_expeted_arrival_date,
  payout.status as payout_status,
  payout.type as payout_type,
  payout.description as payout_description,
  refund.reason as refund_reason
from balance_transaction
left join charge on charge.balance_transaction_id = balance_transaction.balance_transaction_id
left join customer on charge.customer_id = customer.customer_id
left join payment_intent on charge.payment_intent_id = payment_intent.payment_intent_id
left join payment_method on payment_intent.payment_method_id = payment_method.payment_method_id
left join card on charge.card_id = card.card_id
left join payout on payout.balance_transaction_id = balance_transaction.balance_transaction_id
left join refund on refund.balance_transaction_id = balance_transaction.balance_transaction_id
left join charge as refund_charge on refund.charge_id = refund_charge.charge_id
order by created_at desc
),balance_transaction_joined as (

    select *
    from __dbt__CTE__stripe_balance_transaction_joined  

)

select 
  balance_transaction_id,
  created_at,
  available_on,
  currency,
  amount,
  fee,
  net,
  type,
  reporting_category,
  source,
  description,
  customer_facing_amount,
  customer_facing_currency,
  effective_at,
  customer_id,
  receipt_email,
  customer_description,
  charge_id,
  payment_intent_id,
  charge_created_at,
  payment_method_type,
  card_brand,
  card_funding,
  card_country,
  payout_id,
  payout_expeted_arrival_date,
  payout_status,
  payout_type,
  payout_description,
  refund_reason
from balance_transaction_joined
  );
    
2020-07-14 22:08:39.207697 (Thread-3): finished collecting timing info
2020-07-14 22:08:39.237732 (Thread-3): Writing runtime SQL for node "model.stripe.stripe_customer_overview"
2020-07-14 22:08:39.239717 (Thread-3): On model.stripe.stripe_customer_overview: /* {"app": "dbt", "dbt_version": "0.17.0rc1", "profile_name": "integration_test", "target_name": "dev_bigquery_dbt_testing", "node_id": "model.stripe.stripe_customer_overview"} */


  create or replace table `dbt-package-testing`.`dbt_kristin`.`stripe_customer_overview`
  
  
  OPTIONS()
  as (
    with  __dbt__CTE__stg_stripe_balance_transaction as (
with balance_transaction as (

    select *
    from `dbt-package-testing`.`stripe`.`balance_transaction`

), fields as (

    select 
      id as balance_transaction_id,
      amount,
      available_on,
      created as created_at,
      currency,
      description,
      exchange_rate,
      fee,
      net,
      source,
      status,
      type
    from balance_transaction
)

select *
from fields
),  __dbt__CTE__stg_stripe_charge as (
with charge as (

    select *
    from `dbt-package-testing`.`stripe`.`charge`

), fields as (

    select 
      id as charge_id, 
      amount,
      amount_refunded,
      application_fee_amount,
      balance_transaction_id,
      captured as is_captured,
      card_id,
      created as created_at,
      customer_id,
      currency,
      description,
      failure_code,
      failure_message,
      paid as is_paid,
      payment_intent_id,
      receipt_email,
      receipt_number,
      refunded as is_refunded,
      status,
      invoice_id
    from charge
    
)

select *
from fields
),  __dbt__CTE__stg_stripe_payment_intent as (
with payment_intent as (

    select *
    from `dbt-package-testing`.`stripe`.`payment_intent`

), fields as (

    select 
      id as payment_intent_id,
      amount,
      amount_capturable,
      amount_received,
      application,
      application_fee_amount,
      canceled_at,
      cancellation_reason,
      capture_method,
      confirmation_method,
      created as created_at,
      currency,
      customer_id,
      description,
      payment_method_id,
      receipt_email,
      statement_descriptor,
      status
    from payment_intent

)

select *
from fields
),  __dbt__CTE__stg_stripe_payment_method as (
with payment_method as (

    select *
    from `dbt-package-testing`.`stripe`.`payment_method`

), fields as (

    select 
      id as payment_method_id,
      created as created_at,
      customer_id,
      type
    from payment_method
    where not is_deleted

)

select *
from fields
),  __dbt__CTE__stg_stripe_card as (
with card as (

    select *
    from `dbt-package-testing`.`stripe`.`card`

), fields as (

    select 
      id as card_id,
      brand,
      country,
      created as created_at,
      customer_id,
      name,
      recipient,
      funding
    from card
    where not coalesce(is_deleted, false)

)

select *
from fields
),  __dbt__CTE__stg_stripe_payout as (
with payout as (

    select *
    from `dbt-package-testing`.`stripe`.`payout`

), fields as (

    select 
      id as payout_id,
      amount,
      arrival_date,
      automatic as is_automatic,
      balance_transaction_id,
      created as created_at,
      currency,
      description,
      method,
      source_type,
      status,
      type
    from payout

)

select *
from fields
),  __dbt__CTE__stg_stripe_refund as (
with refund as (

    select *
    from `dbt-package-testing`.`stripe`.`refund`

), fields as (

    select 
      id as refund_id,
      amount,
      balance_transaction_id,
      charge_id,
      created as created_at,
      currency,
      description,
      reason,
      receipt_number,
      status
    from refund

)

select *
from fields
),  __dbt__CTE__stg_stripe_customer as (
with customer as (

    select *
    from `dbt-package-testing`.`stripe`.`customer`

), fields as (

    select 
      id as customer_id,
      account_balance,
      created as created_at,
      currency,
      default_card_id,
      delinquent as is_deliguent,
      description,
      email,
      shipping_address_city,
      shipping_address_country,
      shipping_address_line_1,
      shipping_address_line_2,
      shipping_address_postal_code,
      shipping_address_state,
      shipping_name,
      shipping_phone
    from customer
    where not is_deleted

)

select *
from fields
),  __dbt__CTE__stripe_balance_transaction_joined as (
with balance_transaction as (

    select *
    from __dbt__CTE__stg_stripe_balance_transaction
  
), charge as (

    select *
    from __dbt__CTE__stg_stripe_charge

), payment_intent as (

    select *
    from __dbt__CTE__stg_stripe_payment_intent

), payment_method as (

    select *
    from __dbt__CTE__stg_stripe_payment_method

), card as (

    select *
    from __dbt__CTE__stg_stripe_card

), payout as (

    select *
    from __dbt__CTE__stg_stripe_payout

), refund as (

    select *
    from __dbt__CTE__stg_stripe_refund

), customer as (

    select *
    from __dbt__CTE__stg_stripe_customer


)

select 
  balance_transaction.balance_transaction_id,
  balance_transaction.created_at,
  balance_transaction.available_on,
  balance_transaction.currency,
  balance_transaction.amount,
  balance_transaction.fee,
  balance_transaction.net,
  balance_transaction.type,
  case
    when balance_transaction.type in ('charge', 'payment') then 'charge'
    when balance_transaction.type in ('refund', 'payment_refund') then 'refund'
    when balance_transaction.type in ('payout_cancel', 'payout_failure')	then 'payout_reversal'
    when balance_transaction.type in ('transfer', 'recipient_transfer') then	'transfer'
    when balance_transaction.type in ('transfer_cancel', 'transfer_failure', 'recipient_transfer_cancel', 'recipient_transfer_failure') then 'transfer_reversal'
    else balance_transaction.type
  end as reporting_category,
  balance_transaction.source,
  balance_transaction.description,
  case when balance_transaction.type = 'charge' then charge.amount end as customer_facing_amount, --think this might be the charge amount/currency
  case when balance_transaction.type = 'charge' then charge.currency end as customer_facing_currency,
  date_add(date(balance_transaction.available_on), interval 1 day) as effective_at,
  coalesce(charge.customer_id, refund_charge.customer_id) as customer_id,
  charge.receipt_email,
  customer.description as customer_description,
  charge.charge_id,
  charge.payment_intent_id,
  charge.created_at as charge_created_at,
  payment_method.type as payment_method_type,
  card.brand as card_brand,
  card.funding as card_funding,
  card.country as card_country,
  payout.payout_id,
  payout.arrival_date as payout_expeted_arrival_date,
  payout.status as payout_status,
  payout.type as payout_type,
  payout.description as payout_description,
  refund.reason as refund_reason
from balance_transaction
left join charge on charge.balance_transaction_id = balance_transaction.balance_transaction_id
left join customer on charge.customer_id = customer.customer_id
left join payment_intent on charge.payment_intent_id = payment_intent.payment_intent_id
left join payment_method on payment_intent.payment_method_id = payment_method.payment_method_id
left join card on charge.card_id = card.card_id
left join payout on payout.balance_transaction_id = balance_transaction.balance_transaction_id
left join refund on refund.balance_transaction_id = balance_transaction.balance_transaction_id
left join charge as refund_charge on refund.charge_id = refund_charge.charge_id
order by created_at desc
),  __dbt__CTE__stripe_incomplete_charges as (
with charge as (

    select *
    from __dbt__CTE__stg_stripe_charge

)

select 
  created_at,
  customer_id,
  amount
from charge
where not is_captured
),balance_transaction_joined as (

    select *
    from __dbt__CTE__stripe_balance_transaction_joined  

), incomplete_charges as (

    select *
    from __dbt__CTE__stripe_incomplete_charges  

), customer as (

    select *
    from __dbt__CTE__stg_stripe_customer  

), transactions_grouped as (
 
    select
      customer_id,
      sum(if(type in ('charge', 'payment'), amount, 0)) as total_sales,
      sum(if(type in ('payment_refund', 'refund'), amount, 0)) as total_refunds,
      sum(amount) as total_gross_transaction_amount,
      sum(fee) as total_fees,
      sum(net) as total_net_transaction_amount,
      sum(if(type in ('payment', 'charge'), 1, 0)) as total_sales_count,
      sum(if(type in ('payment_refund', 'refund'), 1, 0)) as total_refund_count,    
      sum(if(type in ('charge', 'payment') and date_trunc(date(created_at), month) = date_trunc(current_date(), month),amount, 0)) as sales_this_month,
      sum(if(type in ('payment_refund', 'refund') and date_trunc(date(created_at), month) = date_trunc(current_date(), month), amount, 0)) as refunds_this_month,
      sum(if(date_trunc(date(created_at), month) = date_trunc(current_date(), month), amount, 0)) as gross_transaction_amount_this_month,
      sum(if(date_trunc(date(created_at), month) = date_trunc(current_date(), month), fee, 0)) as fees_this_month,
      sum(if(date_trunc(date(created_at), month) = date_trunc(current_date(), month), net, 0)) as net_transaction_amount_this_month,
      sum(if(type in ('payment', 'charge') and date_trunc(date(created_at), month) = date_trunc(current_date(), month) , 1, 0)) as sales_count_this_month,
      sum(if(type in ('payment_refund', 'refund') and date_trunc(date(created_at), month) = date_trunc(current_date(), month) , 1, 0)) as refund_count_this_month,
      min(if(type in ('payment', 'charge'), date(created_at), null)) as first_sale_date,
      max(if(type in ('payment', 'charge'), date(created_at), null)) as most_recent_sale_date
    from balance_transaction_joined
      where type in ('payment', 'charge', 'payment_refund', 'refund')
    group by 1

), failed_charges_by_customer as (

    select
      customer_id,
      count(*) as total_failed_charge_count,
      sum(amount) as total_failed_charge_amount,
      sum(if(date_trunc(date(created_at), month) = date_trunc(current_date(), month), 1, 0)) as failed_charge_count_this_month,
      sum(if(date_trunc(date(created_at), month) = date_trunc(current_date(), month), amount, 0)) as failed_charge_amount_this_month
    from incomplete_charges
    group by 1

)

select
  coalesce(customer.description, customer.customer_id, 'No associated customer') as customer_description,
  customer.email,
  customer.created_at as customer_created_at,
  customer.is_deliguent,
  coalesce(transactions_grouped.total_sales/100.0, 0) as total_sales,
  coalesce(transactions_grouped.total_refunds/100.0, 0) as total_refunds,
  coalesce(transactions_grouped.total_gross_transaction_amount/100.0, 0) as total_gross_transcation_amount,
  coalesce(transactions_grouped.total_fees/100.0, 0) as total_fees,
  coalesce(transactions_grouped.total_net_transaction_amount/100.0, 0) as total_net_trasnaction_amount,
  coalesce(transactions_grouped.total_sales_count, 0) as total_sales_count,
  coalesce(transactions_grouped.total_refund_count, 0) as total_refund_count,    
  coalesce(transactions_grouped.sales_this_month/100.0, 0) as sales_this_month,
  coalesce(transactions_grouped.refunds_this_month/100.0, 0) as refunds_this_month,
  coalesce(transactions_grouped.gross_transaction_amount_this_month/100.0, 0) as gross_transaction_amount_this_month,
  coalesce(transactions_grouped.fees_this_month/100.0, 0) as fees_this_month,
  coalesce(transactions_grouped.net_transaction_amount_this_month/100.0, 0) as net_transaction_amount_this_month,
  coalesce(transactions_grouped.sales_count_this_month, 0) as sales_count_this_month,
  coalesce(transactions_grouped.refund_count_this_month, 0) as refund_count_this_month,
  transactions_grouped.first_sale_date,
  transactions_grouped.most_recent_sale_date,
  coalesce(total_failed_charge_count, 0) as total_failed_charge_count,
  coalesce(total_failed_charge_amount/100, 0) as total_failed_charge_amount,
  coalesce(failed_charge_count_this_month, 0) as failed_charge_count_this_month,
  coalesce(failed_charge_amount_this_month/100, 0) as failed_charge_amount_this_month,
  customer.currency as customer_currency,
  customer.default_card_id,
  customer.shipping_name,
  customer.shipping_address_line_1,
  customer.shipping_address_line_2,
  customer.shipping_address_city,
  customer.shipping_address_state,
  customer.shipping_address_country,
  customer.shipping_address_postal_code,
  customer.shipping_phone
from customer
left join transactions_grouped on transactions_grouped.customer_id = customer.customer_id
left join failed_charges_by_customer on customer.customer_id = failed_charges_by_customer.customer_id
  );
    
2020-07-14 22:08:42.160642 (Thread-4): finished collecting timing info
2020-07-14 22:08:42.161364 (Thread-4): Sending event: {'category': 'dbt', 'action': 'run_model', 'label': '4de8b9d1-fbba-41e1-ae62-eb8517a60820', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x109f79c10>]}
2020-07-14 22:08:42.161628 (Thread-4): 15:08:42 | 1 of 8 OK created table model dbt_kristin.stripe_invoice_details..... [CREATE TABLE (494) in 3.22s]
2020-07-14 22:08:42.161771 (Thread-4): Finished running node model.stripe.stripe_invoice_details
2020-07-14 22:08:42.161916 (Thread-4): Began running node model.stripe.stripe_daily_overview
2020-07-14 22:08:42.162159 (Thread-4): 15:08:42 | 5 of 8 START table model dbt_kristin.stripe_daily_overview........... [RUN]
2020-07-14 22:08:42.162448 (Thread-4): Acquiring new bigquery connection "model.stripe.stripe_daily_overview".
2020-07-14 22:08:42.162559 (Thread-4): Re-using an available connection from the pool (formerly model.stripe.stripe_invoice_details).
2020-07-14 22:08:42.162650 (Thread-4): Compiling model.stripe.stripe_daily_overview
2020-07-14 22:08:42.210284 (Thread-4): Writing injected SQL for node "model.stripe.stripe_daily_overview"
2020-07-14 22:08:42.210708 (Thread-4): finished collecting timing info
2020-07-14 22:08:42.215354 (Thread-4): Writing runtime SQL for node "model.stripe.stripe_daily_overview"
2020-07-14 22:08:42.215666 (Thread-4): On model.stripe.stripe_daily_overview: /* {"app": "dbt", "dbt_version": "0.17.0rc1", "profile_name": "integration_test", "target_name": "dev_bigquery_dbt_testing", "node_id": "model.stripe.stripe_daily_overview"} */


  create or replace table `dbt-package-testing`.`dbt_kristin`.`stripe_daily_overview`
  
  
  OPTIONS()
  as (
    with  __dbt__CTE__stg_stripe_balance_transaction as (
with balance_transaction as (

    select *
    from `dbt-package-testing`.`stripe`.`balance_transaction`

), fields as (

    select 
      id as balance_transaction_id,
      amount,
      available_on,
      created as created_at,
      currency,
      description,
      exchange_rate,
      fee,
      net,
      source,
      status,
      type
    from balance_transaction
)

select *
from fields
),  __dbt__CTE__stg_stripe_charge as (
with charge as (

    select *
    from `dbt-package-testing`.`stripe`.`charge`

), fields as (

    select 
      id as charge_id, 
      amount,
      amount_refunded,
      application_fee_amount,
      balance_transaction_id,
      captured as is_captured,
      card_id,
      created as created_at,
      customer_id,
      currency,
      description,
      failure_code,
      failure_message,
      paid as is_paid,
      payment_intent_id,
      receipt_email,
      receipt_number,
      refunded as is_refunded,
      status,
      invoice_id
    from charge
    
)

select *
from fields
),  __dbt__CTE__stg_stripe_payment_intent as (
with payment_intent as (

    select *
    from `dbt-package-testing`.`stripe`.`payment_intent`

), fields as (

    select 
      id as payment_intent_id,
      amount,
      amount_capturable,
      amount_received,
      application,
      application_fee_amount,
      canceled_at,
      cancellation_reason,
      capture_method,
      confirmation_method,
      created as created_at,
      currency,
      customer_id,
      description,
      payment_method_id,
      receipt_email,
      statement_descriptor,
      status
    from payment_intent

)

select *
from fields
),  __dbt__CTE__stg_stripe_payment_method as (
with payment_method as (

    select *
    from `dbt-package-testing`.`stripe`.`payment_method`

), fields as (

    select 
      id as payment_method_id,
      created as created_at,
      customer_id,
      type
    from payment_method
    where not is_deleted

)

select *
from fields
),  __dbt__CTE__stg_stripe_card as (
with card as (

    select *
    from `dbt-package-testing`.`stripe`.`card`

), fields as (

    select 
      id as card_id,
      brand,
      country,
      created as created_at,
      customer_id,
      name,
      recipient,
      funding
    from card
    where not coalesce(is_deleted, false)

)

select *
from fields
),  __dbt__CTE__stg_stripe_payout as (
with payout as (

    select *
    from `dbt-package-testing`.`stripe`.`payout`

), fields as (

    select 
      id as payout_id,
      amount,
      arrival_date,
      automatic as is_automatic,
      balance_transaction_id,
      created as created_at,
      currency,
      description,
      method,
      source_type,
      status,
      type
    from payout

)

select *
from fields
),  __dbt__CTE__stg_stripe_refund as (
with refund as (

    select *
    from `dbt-package-testing`.`stripe`.`refund`

), fields as (

    select 
      id as refund_id,
      amount,
      balance_transaction_id,
      charge_id,
      created as created_at,
      currency,
      description,
      reason,
      receipt_number,
      status
    from refund

)

select *
from fields
),  __dbt__CTE__stg_stripe_customer as (
with customer as (

    select *
    from `dbt-package-testing`.`stripe`.`customer`

), fields as (

    select 
      id as customer_id,
      account_balance,
      created as created_at,
      currency,
      default_card_id,
      delinquent as is_deliguent,
      description,
      email,
      shipping_address_city,
      shipping_address_country,
      shipping_address_line_1,
      shipping_address_line_2,
      shipping_address_postal_code,
      shipping_address_state,
      shipping_name,
      shipping_phone
    from customer
    where not is_deleted

)

select *
from fields
),  __dbt__CTE__stripe_balance_transaction_joined as (
with balance_transaction as (

    select *
    from __dbt__CTE__stg_stripe_balance_transaction
  
), charge as (

    select *
    from __dbt__CTE__stg_stripe_charge

), payment_intent as (

    select *
    from __dbt__CTE__stg_stripe_payment_intent

), payment_method as (

    select *
    from __dbt__CTE__stg_stripe_payment_method

), card as (

    select *
    from __dbt__CTE__stg_stripe_card

), payout as (

    select *
    from __dbt__CTE__stg_stripe_payout

), refund as (

    select *
    from __dbt__CTE__stg_stripe_refund

), customer as (

    select *
    from __dbt__CTE__stg_stripe_customer


)

select 
  balance_transaction.balance_transaction_id,
  balance_transaction.created_at,
  balance_transaction.available_on,
  balance_transaction.currency,
  balance_transaction.amount,
  balance_transaction.fee,
  balance_transaction.net,
  balance_transaction.type,
  case
    when balance_transaction.type in ('charge', 'payment') then 'charge'
    when balance_transaction.type in ('refund', 'payment_refund') then 'refund'
    when balance_transaction.type in ('payout_cancel', 'payout_failure')	then 'payout_reversal'
    when balance_transaction.type in ('transfer', 'recipient_transfer') then	'transfer'
    when balance_transaction.type in ('transfer_cancel', 'transfer_failure', 'recipient_transfer_cancel', 'recipient_transfer_failure') then 'transfer_reversal'
    else balance_transaction.type
  end as reporting_category,
  balance_transaction.source,
  balance_transaction.description,
  case when balance_transaction.type = 'charge' then charge.amount end as customer_facing_amount, --think this might be the charge amount/currency
  case when balance_transaction.type = 'charge' then charge.currency end as customer_facing_currency,
  date_add(date(balance_transaction.available_on), interval 1 day) as effective_at,
  coalesce(charge.customer_id, refund_charge.customer_id) as customer_id,
  charge.receipt_email,
  customer.description as customer_description,
  charge.charge_id,
  charge.payment_intent_id,
  charge.created_at as charge_created_at,
  payment_method.type as payment_method_type,
  card.brand as card_brand,
  card.funding as card_funding,
  card.country as card_country,
  payout.payout_id,
  payout.arrival_date as payout_expeted_arrival_date,
  payout.status as payout_status,
  payout.type as payout_type,
  payout.description as payout_description,
  refund.reason as refund_reason
from balance_transaction
left join charge on charge.balance_transaction_id = balance_transaction.balance_transaction_id
left join customer on charge.customer_id = customer.customer_id
left join payment_intent on charge.payment_intent_id = payment_intent.payment_intent_id
left join payment_method on payment_intent.payment_method_id = payment_method.payment_method_id
left join card on charge.card_id = card.card_id
left join payout on payout.balance_transaction_id = balance_transaction.balance_transaction_id
left join refund on refund.balance_transaction_id = balance_transaction.balance_transaction_id
left join charge as refund_charge on refund.charge_id = refund_charge.charge_id
order by created_at desc
),  __dbt__CTE__stripe_incomplete_charges as (
with charge as (

    select *
    from __dbt__CTE__stg_stripe_charge

)

select 
  created_at,
  customer_id,
  amount
from charge
where not is_captured
),balance_transaction_joined as (

    select *
    from __dbt__CTE__stripe_balance_transaction_joined  

), incomplete_charges as (

    select *
    from __dbt__CTE__stripe_incomplete_charges  

), daily_balance_transactions as (

  select
    date(case when type = 'payout' then available_on else created_at end) as date,
    sum(case when type in ('charge', 'payment') then amount else 0 end) as total_sales,
    sum(case when type in ('payment_refund', 'refund') then amount else 0 end) as total_refunds,
    sum(case when type = 'adjustment' then amount else 0 end) as total_adjustments,
    sum(case when type not in ('charge', 'payment', 'payment_refund', 'refund', 'adjustment', 'payout') and type not like '%transfer%' then amount else 0 end) as total_other_transactions,
    sum(case when type <> 'payout' and type not like '%transfer%' then amount else 0 end) as total_gross_transaction_amount,
    sum(case when type <> 'payout' and type not like '%transfer%' then net else 0 end) as total_net_tranactions,
    sum(case when type = 'payout' or type like '%transfer%' then fee * -1.0 else 0 end) as total_payout_fees,
    sum(case when type = 'payout' or type like '%transfer%' then amount else 0 end) as total_gross_payout_amount,
    sum(case when type = 'payout' or type like '%transfer%' then fee * -1.0 else net end) as daily_net_activity,
    sum(if(type in ('payment', 'charge'), 1, 0)) as total_sales_count,
    sum(if(type = 'payout', 1, 0)) as total_payouts_count,
    count(distinct case when type = 'adjustment' then coalesce(source, payout_id) end) as total_adjustments_count
  from balance_transaction_joined
  group by 1

), daily_failed_charges as (

    select
      date(created_at) as date,
      count(*) as total_failed_charge_count,
      sum(amount) as total_failed_charge_amount
    from incomplete_charges
    group by 1

)

select
  daily_balance_transactions.date,
  daily_balance_transactions.total_sales/100.0 as total_sales,
  daily_balance_transactions.total_refunds/100.0 as total_refunds,
  daily_balance_transactions.total_adjustments/100.0 as total_adjustments,
  daily_balance_transactions.total_other_transactions/100.0 as total_other_transactions,
  daily_balance_transactions.total_gross_transaction_amount/100.0 as total_gross_transaction_amount,
  daily_balance_transactions.total_net_tranactions/100.0 as total_net_tranactions,
  daily_balance_transactions.total_payout_fees/100.0 as total_payout_fees,
  daily_balance_transactions.total_gross_payout_amount/100.0 as total_gross_payout_amount,
  daily_balance_transactions.daily_net_activity/100.0 as daily_net_activity,
  (daily_balance_transactions.daily_net_activity + daily_balance_transactions.total_gross_payout_amount)/100.0 as daily_end_balance,
  daily_balance_transactions.total_sales_count,
  daily_balance_transactions.total_payouts_count,
  daily_balance_transactions.total_adjustments_count,
  coalesce(daily_failed_charges.total_failed_charge_count, 0) as total_failed_charge_count,
  coalesce(daily_failed_charges.total_failed_charge_amount/100, 0) as total_failed_charge_amount
from daily_balance_transactions
left join daily_failed_charges on daily_balance_transactions.date = daily_failed_charges.date
order by 1 desc
  );
    
2020-07-14 22:08:42.638769 (Thread-1): finished collecting timing info
2020-07-14 22:08:42.639589 (Thread-1): Sending event: {'category': 'dbt', 'action': 'run_model', 'label': '4de8b9d1-fbba-41e1-ae62-eb8517a60820', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x109f3ba90>]}
2020-07-14 22:08:42.639890 (Thread-1): 15:08:42 | 3 of 8 OK created table model dbt_kristin.stripe_balance_transactions [CREATE TABLE (2124) in 3.56s]
2020-07-14 22:08:42.640053 (Thread-1): Finished running node model.stripe.stripe_balance_transactions
2020-07-14 22:08:42.640221 (Thread-1): Began running node model.stripe.stripe_monthly_overview
2020-07-14 22:08:42.640389 (Thread-1): 15:08:42 | 6 of 8 START table model dbt_kristin.stripe_monthly_overview......... [RUN]
2020-07-14 22:08:42.640822 (Thread-1): Acquiring new bigquery connection "model.stripe.stripe_monthly_overview".
2020-07-14 22:08:42.640949 (Thread-1): Re-using an available connection from the pool (formerly model.stripe.stripe_balance_transactions).
2020-07-14 22:08:42.641062 (Thread-1): Compiling model.stripe.stripe_monthly_overview
2020-07-14 22:08:42.690830 (Thread-1): Writing injected SQL for node "model.stripe.stripe_monthly_overview"
2020-07-14 22:08:42.691257 (Thread-1): finished collecting timing info
2020-07-14 22:08:42.695785 (Thread-1): Writing runtime SQL for node "model.stripe.stripe_monthly_overview"
2020-07-14 22:08:42.696102 (Thread-1): On model.stripe.stripe_monthly_overview: /* {"app": "dbt", "dbt_version": "0.17.0rc1", "profile_name": "integration_test", "target_name": "dev_bigquery_dbt_testing", "node_id": "model.stripe.stripe_monthly_overview"} */


  create or replace table `dbt-package-testing`.`dbt_kristin`.`stripe_monthly_overview`
  
  
  OPTIONS()
  as (
    with  __dbt__CTE__stg_stripe_balance_transaction as (
with balance_transaction as (

    select *
    from `dbt-package-testing`.`stripe`.`balance_transaction`

), fields as (

    select 
      id as balance_transaction_id,
      amount,
      available_on,
      created as created_at,
      currency,
      description,
      exchange_rate,
      fee,
      net,
      source,
      status,
      type
    from balance_transaction
)

select *
from fields
),  __dbt__CTE__stg_stripe_charge as (
with charge as (

    select *
    from `dbt-package-testing`.`stripe`.`charge`

), fields as (

    select 
      id as charge_id, 
      amount,
      amount_refunded,
      application_fee_amount,
      balance_transaction_id,
      captured as is_captured,
      card_id,
      created as created_at,
      customer_id,
      currency,
      description,
      failure_code,
      failure_message,
      paid as is_paid,
      payment_intent_id,
      receipt_email,
      receipt_number,
      refunded as is_refunded,
      status,
      invoice_id
    from charge
    
)

select *
from fields
),  __dbt__CTE__stg_stripe_payment_intent as (
with payment_intent as (

    select *
    from `dbt-package-testing`.`stripe`.`payment_intent`

), fields as (

    select 
      id as payment_intent_id,
      amount,
      amount_capturable,
      amount_received,
      application,
      application_fee_amount,
      canceled_at,
      cancellation_reason,
      capture_method,
      confirmation_method,
      created as created_at,
      currency,
      customer_id,
      description,
      payment_method_id,
      receipt_email,
      statement_descriptor,
      status
    from payment_intent

)

select *
from fields
),  __dbt__CTE__stg_stripe_payment_method as (
with payment_method as (

    select *
    from `dbt-package-testing`.`stripe`.`payment_method`

), fields as (

    select 
      id as payment_method_id,
      created as created_at,
      customer_id,
      type
    from payment_method
    where not is_deleted

)

select *
from fields
),  __dbt__CTE__stg_stripe_card as (
with card as (

    select *
    from `dbt-package-testing`.`stripe`.`card`

), fields as (

    select 
      id as card_id,
      brand,
      country,
      created as created_at,
      customer_id,
      name,
      recipient,
      funding
    from card
    where not coalesce(is_deleted, false)

)

select *
from fields
),  __dbt__CTE__stg_stripe_payout as (
with payout as (

    select *
    from `dbt-package-testing`.`stripe`.`payout`

), fields as (

    select 
      id as payout_id,
      amount,
      arrival_date,
      automatic as is_automatic,
      balance_transaction_id,
      created as created_at,
      currency,
      description,
      method,
      source_type,
      status,
      type
    from payout

)

select *
from fields
),  __dbt__CTE__stg_stripe_refund as (
with refund as (

    select *
    from `dbt-package-testing`.`stripe`.`refund`

), fields as (

    select 
      id as refund_id,
      amount,
      balance_transaction_id,
      charge_id,
      created as created_at,
      currency,
      description,
      reason,
      receipt_number,
      status
    from refund

)

select *
from fields
),  __dbt__CTE__stg_stripe_customer as (
with customer as (

    select *
    from `dbt-package-testing`.`stripe`.`customer`

), fields as (

    select 
      id as customer_id,
      account_balance,
      created as created_at,
      currency,
      default_card_id,
      delinquent as is_deliguent,
      description,
      email,
      shipping_address_city,
      shipping_address_country,
      shipping_address_line_1,
      shipping_address_line_2,
      shipping_address_postal_code,
      shipping_address_state,
      shipping_name,
      shipping_phone
    from customer
    where not is_deleted

)

select *
from fields
),  __dbt__CTE__stripe_balance_transaction_joined as (
with balance_transaction as (

    select *
    from __dbt__CTE__stg_stripe_balance_transaction
  
), charge as (

    select *
    from __dbt__CTE__stg_stripe_charge

), payment_intent as (

    select *
    from __dbt__CTE__stg_stripe_payment_intent

), payment_method as (

    select *
    from __dbt__CTE__stg_stripe_payment_method

), card as (

    select *
    from __dbt__CTE__stg_stripe_card

), payout as (

    select *
    from __dbt__CTE__stg_stripe_payout

), refund as (

    select *
    from __dbt__CTE__stg_stripe_refund

), customer as (

    select *
    from __dbt__CTE__stg_stripe_customer


)

select 
  balance_transaction.balance_transaction_id,
  balance_transaction.created_at,
  balance_transaction.available_on,
  balance_transaction.currency,
  balance_transaction.amount,
  balance_transaction.fee,
  balance_transaction.net,
  balance_transaction.type,
  case
    when balance_transaction.type in ('charge', 'payment') then 'charge'
    when balance_transaction.type in ('refund', 'payment_refund') then 'refund'
    when balance_transaction.type in ('payout_cancel', 'payout_failure')	then 'payout_reversal'
    when balance_transaction.type in ('transfer', 'recipient_transfer') then	'transfer'
    when balance_transaction.type in ('transfer_cancel', 'transfer_failure', 'recipient_transfer_cancel', 'recipient_transfer_failure') then 'transfer_reversal'
    else balance_transaction.type
  end as reporting_category,
  balance_transaction.source,
  balance_transaction.description,
  case when balance_transaction.type = 'charge' then charge.amount end as customer_facing_amount, --think this might be the charge amount/currency
  case when balance_transaction.type = 'charge' then charge.currency end as customer_facing_currency,
  date_add(date(balance_transaction.available_on), interval 1 day) as effective_at,
  coalesce(charge.customer_id, refund_charge.customer_id) as customer_id,
  charge.receipt_email,
  customer.description as customer_description,
  charge.charge_id,
  charge.payment_intent_id,
  charge.created_at as charge_created_at,
  payment_method.type as payment_method_type,
  card.brand as card_brand,
  card.funding as card_funding,
  card.country as card_country,
  payout.payout_id,
  payout.arrival_date as payout_expeted_arrival_date,
  payout.status as payout_status,
  payout.type as payout_type,
  payout.description as payout_description,
  refund.reason as refund_reason
from balance_transaction
left join charge on charge.balance_transaction_id = balance_transaction.balance_transaction_id
left join customer on charge.customer_id = customer.customer_id
left join payment_intent on charge.payment_intent_id = payment_intent.payment_intent_id
left join payment_method on payment_intent.payment_method_id = payment_method.payment_method_id
left join card on charge.card_id = card.card_id
left join payout on payout.balance_transaction_id = balance_transaction.balance_transaction_id
left join refund on refund.balance_transaction_id = balance_transaction.balance_transaction_id
left join charge as refund_charge on refund.charge_id = refund_charge.charge_id
order by created_at desc
),  __dbt__CTE__stripe_incomplete_charges as (
with charge as (

    select *
    from __dbt__CTE__stg_stripe_charge

)

select 
  created_at,
  customer_id,
  amount
from charge
where not is_captured
),balance_transaction_joined as (

    select *
    from __dbt__CTE__stripe_balance_transaction_joined  

), incomplete_charges as (

    select *
    from __dbt__CTE__stripe_incomplete_charges  

), monthly_balance_transactions as (

  select
    date_trunc(date(case when type = 'payout' then available_on else created_at end), month) as month,
    sum(case when type in ('charge', 'payment') then amount else 0 end) as total_sales,
    sum(case when type in ('payment_refund', 'refund') then amount else 0 end) as total_refunds,
    sum(case when type = 'adjustment' then amount else 0 end) as total_adjustments,
    sum(case when type not in ('charge', 'payment', 'payment_refund', 'refund', 'adjustment', 'payout') and type not like '%transfer%' then amount else 0 end) as total_other_transactions,
    sum(case when type <> 'payout' and type not like '%transfer%' then amount else 0 end) as total_gross_transaction_amount,
    sum(case when type <> 'payout' and type not like '%transfer%' then net else 0 end) as total_net_tranactions,
    sum(case when type = 'payout' or type like '%transfer%' then fee * -1.0 else 0 end) as total_payout_fees,
    sum(case when type = 'payout' or type like '%transfer%' then amount else 0 end) as total_gross_payout_amount,
    sum(case when type = 'payout' or type like '%transfer%' then fee * -1.0 else net end) as monthly_net_activity,
    sum(if(type in ('payment', 'charge'), 1, 0)) as total_sales_count,
    sum(if(type = 'payout', 1, 0)) as total_payout_count,
    count(distinct case when type = 'adjustment' then coalesce(source, payout_id) end) as total_adjustments_count
  from balance_transaction_joined
  group by 1

), monthly_failed_charges as (

    select
      date_trunc(date(created_at), month) as month,
      count(*) as total_failed_charge_count,
      sum(amount) as total_failed_charge_amount
    from incomplete_charges
    group by 1

)

select
  monthly_balance_transactions.month,
  monthly_balance_transactions.total_sales/100.0 as total_sales,
  monthly_balance_transactions.total_refunds/100.0 as total_refunds,
  monthly_balance_transactions.total_adjustments/100.0 as total_adjustments,
  monthly_balance_transactions.total_other_transactions/100.0 as total_other_transactions,
  monthly_balance_transactions.total_gross_transaction_amount/100.0 as total_gross_transaction_amount,
  monthly_balance_transactions.total_net_tranactions/100.0 as total_net_tranactions,
  monthly_balance_transactions.total_payout_fees/100.0 as total_payout_fees,
  monthly_balance_transactions.total_gross_payout_amount/100.0 as total_gross_payout_amount,
  monthly_balance_transactions.monthly_net_activity/100.0 as monthly_net_activity,
  (monthly_balance_transactions.monthly_net_activity + monthly_balance_transactions.total_gross_payout_amount)/100.0 as monthly_end_balance,
  monthly_balance_transactions.total_sales_count,
  monthly_balance_transactions.total_payout_count,
  monthly_balance_transactions.total_adjustments_count,
  coalesce(monthly_failed_charges.total_failed_charge_count, 0) as total_failed_charge_count,
  coalesce(monthly_failed_charges.total_failed_charge_amount/100, 0) as total_failed_charge_amount
from monthly_balance_transactions
left join monthly_failed_charges on monthly_balance_transactions.month = monthly_failed_charges.month
order by 1 desc
  );
    
2020-07-14 22:08:43.253497 (Thread-3): finished collecting timing info
2020-07-14 22:08:43.254336 (Thread-3): Sending event: {'category': 'dbt', 'action': 'run_model', 'label': '4de8b9d1-fbba-41e1-ae62-eb8517a60820', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x10a13b4f0>]}
2020-07-14 22:08:43.254650 (Thread-3): 15:08:43 | 4 of 8 OK created table model dbt_kristin.stripe_customer_overview... [CREATE TABLE (405) in 4.15s]
2020-07-14 22:08:43.254817 (Thread-3): Finished running node model.stripe.stripe_customer_overview
2020-07-14 22:08:43.254999 (Thread-3): Began running node model.stripe.stripe_quarterly_overview
2020-07-14 22:08:43.255276 (Thread-3): 15:08:43 | 7 of 8 START table model dbt_kristin.stripe_quarterly_overview....... [RUN]
2020-07-14 22:08:43.255612 (Thread-3): Acquiring new bigquery connection "model.stripe.stripe_quarterly_overview".
2020-07-14 22:08:43.255726 (Thread-3): Re-using an available connection from the pool (formerly model.stripe.stripe_customer_overview).
2020-07-14 22:08:43.255834 (Thread-3): Compiling model.stripe.stripe_quarterly_overview
2020-07-14 22:08:43.304059 (Thread-3): Writing injected SQL for node "model.stripe.stripe_quarterly_overview"
2020-07-14 22:08:43.304474 (Thread-3): finished collecting timing info
2020-07-14 22:08:43.310298 (Thread-3): Writing runtime SQL for node "model.stripe.stripe_quarterly_overview"
2020-07-14 22:08:43.311345 (Thread-3): On model.stripe.stripe_quarterly_overview: /* {"app": "dbt", "dbt_version": "0.17.0rc1", "profile_name": "integration_test", "target_name": "dev_bigquery_dbt_testing", "node_id": "model.stripe.stripe_quarterly_overview"} */


  create or replace table `dbt-package-testing`.`dbt_kristin`.`stripe_quarterly_overview`
  
  
  OPTIONS()
  as (
    with  __dbt__CTE__stg_stripe_balance_transaction as (
with balance_transaction as (

    select *
    from `dbt-package-testing`.`stripe`.`balance_transaction`

), fields as (

    select 
      id as balance_transaction_id,
      amount,
      available_on,
      created as created_at,
      currency,
      description,
      exchange_rate,
      fee,
      net,
      source,
      status,
      type
    from balance_transaction
)

select *
from fields
),  __dbt__CTE__stg_stripe_charge as (
with charge as (

    select *
    from `dbt-package-testing`.`stripe`.`charge`

), fields as (

    select 
      id as charge_id, 
      amount,
      amount_refunded,
      application_fee_amount,
      balance_transaction_id,
      captured as is_captured,
      card_id,
      created as created_at,
      customer_id,
      currency,
      description,
      failure_code,
      failure_message,
      paid as is_paid,
      payment_intent_id,
      receipt_email,
      receipt_number,
      refunded as is_refunded,
      status,
      invoice_id
    from charge
    
)

select *
from fields
),  __dbt__CTE__stg_stripe_payment_intent as (
with payment_intent as (

    select *
    from `dbt-package-testing`.`stripe`.`payment_intent`

), fields as (

    select 
      id as payment_intent_id,
      amount,
      amount_capturable,
      amount_received,
      application,
      application_fee_amount,
      canceled_at,
      cancellation_reason,
      capture_method,
      confirmation_method,
      created as created_at,
      currency,
      customer_id,
      description,
      payment_method_id,
      receipt_email,
      statement_descriptor,
      status
    from payment_intent

)

select *
from fields
),  __dbt__CTE__stg_stripe_payment_method as (
with payment_method as (

    select *
    from `dbt-package-testing`.`stripe`.`payment_method`

), fields as (

    select 
      id as payment_method_id,
      created as created_at,
      customer_id,
      type
    from payment_method
    where not is_deleted

)

select *
from fields
),  __dbt__CTE__stg_stripe_card as (
with card as (

    select *
    from `dbt-package-testing`.`stripe`.`card`

), fields as (

    select 
      id as card_id,
      brand,
      country,
      created as created_at,
      customer_id,
      name,
      recipient,
      funding
    from card
    where not coalesce(is_deleted, false)

)

select *
from fields
),  __dbt__CTE__stg_stripe_payout as (
with payout as (

    select *
    from `dbt-package-testing`.`stripe`.`payout`

), fields as (

    select 
      id as payout_id,
      amount,
      arrival_date,
      automatic as is_automatic,
      balance_transaction_id,
      created as created_at,
      currency,
      description,
      method,
      source_type,
      status,
      type
    from payout

)

select *
from fields
),  __dbt__CTE__stg_stripe_refund as (
with refund as (

    select *
    from `dbt-package-testing`.`stripe`.`refund`

), fields as (

    select 
      id as refund_id,
      amount,
      balance_transaction_id,
      charge_id,
      created as created_at,
      currency,
      description,
      reason,
      receipt_number,
      status
    from refund

)

select *
from fields
),  __dbt__CTE__stg_stripe_customer as (
with customer as (

    select *
    from `dbt-package-testing`.`stripe`.`customer`

), fields as (

    select 
      id as customer_id,
      account_balance,
      created as created_at,
      currency,
      default_card_id,
      delinquent as is_deliguent,
      description,
      email,
      shipping_address_city,
      shipping_address_country,
      shipping_address_line_1,
      shipping_address_line_2,
      shipping_address_postal_code,
      shipping_address_state,
      shipping_name,
      shipping_phone
    from customer
    where not is_deleted

)

select *
from fields
),  __dbt__CTE__stripe_balance_transaction_joined as (
with balance_transaction as (

    select *
    from __dbt__CTE__stg_stripe_balance_transaction
  
), charge as (

    select *
    from __dbt__CTE__stg_stripe_charge

), payment_intent as (

    select *
    from __dbt__CTE__stg_stripe_payment_intent

), payment_method as (

    select *
    from __dbt__CTE__stg_stripe_payment_method

), card as (

    select *
    from __dbt__CTE__stg_stripe_card

), payout as (

    select *
    from __dbt__CTE__stg_stripe_payout

), refund as (

    select *
    from __dbt__CTE__stg_stripe_refund

), customer as (

    select *
    from __dbt__CTE__stg_stripe_customer


)

select 
  balance_transaction.balance_transaction_id,
  balance_transaction.created_at,
  balance_transaction.available_on,
  balance_transaction.currency,
  balance_transaction.amount,
  balance_transaction.fee,
  balance_transaction.net,
  balance_transaction.type,
  case
    when balance_transaction.type in ('charge', 'payment') then 'charge'
    when balance_transaction.type in ('refund', 'payment_refund') then 'refund'
    when balance_transaction.type in ('payout_cancel', 'payout_failure')	then 'payout_reversal'
    when balance_transaction.type in ('transfer', 'recipient_transfer') then	'transfer'
    when balance_transaction.type in ('transfer_cancel', 'transfer_failure', 'recipient_transfer_cancel', 'recipient_transfer_failure') then 'transfer_reversal'
    else balance_transaction.type
  end as reporting_category,
  balance_transaction.source,
  balance_transaction.description,
  case when balance_transaction.type = 'charge' then charge.amount end as customer_facing_amount, --think this might be the charge amount/currency
  case when balance_transaction.type = 'charge' then charge.currency end as customer_facing_currency,
  date_add(date(balance_transaction.available_on), interval 1 day) as effective_at,
  coalesce(charge.customer_id, refund_charge.customer_id) as customer_id,
  charge.receipt_email,
  customer.description as customer_description,
  charge.charge_id,
  charge.payment_intent_id,
  charge.created_at as charge_created_at,
  payment_method.type as payment_method_type,
  card.brand as card_brand,
  card.funding as card_funding,
  card.country as card_country,
  payout.payout_id,
  payout.arrival_date as payout_expeted_arrival_date,
  payout.status as payout_status,
  payout.type as payout_type,
  payout.description as payout_description,
  refund.reason as refund_reason
from balance_transaction
left join charge on charge.balance_transaction_id = balance_transaction.balance_transaction_id
left join customer on charge.customer_id = customer.customer_id
left join payment_intent on charge.payment_intent_id = payment_intent.payment_intent_id
left join payment_method on payment_intent.payment_method_id = payment_method.payment_method_id
left join card on charge.card_id = card.card_id
left join payout on payout.balance_transaction_id = balance_transaction.balance_transaction_id
left join refund on refund.balance_transaction_id = balance_transaction.balance_transaction_id
left join charge as refund_charge on refund.charge_id = refund_charge.charge_id
order by created_at desc
),  __dbt__CTE__stripe_incomplete_charges as (
with charge as (

    select *
    from __dbt__CTE__stg_stripe_charge

)

select 
  created_at,
  customer_id,
  amount
from charge
where not is_captured
),balance_transaction_joined as (

    select *
    from __dbt__CTE__stripe_balance_transaction_joined  

), incomplete_charges as (

    select *
    from __dbt__CTE__stripe_incomplete_charges  

), quarterly_balance_transactions as (

  select
    date_trunc(date(case when type = 'payout' then available_on else created_at end), quarter) as quarter,
    sum(case when type in ('charge', 'payment') then amount else 0 end) as total_sales,
    sum(case when type in ('payment_refund', 'refund') then amount else 0 end) as total_refunds,
    sum(case when type = 'adjustment' then amount else 0 end) as total_adjustments,
    sum(case when type not in ('charge', 'payment', 'payment_refund', 'refund', 'adjustment', 'payout') and type not like '%transfer%' then amount else 0 end) as total_other_transactions,
    sum(case when type <> 'payout' and type not like '%transfer%' then amount else 0 end) as total_gross_transaction_amount,
    sum(case when type <> 'payout' and type not like '%transfer%' then net else 0 end) as total_net_tranactions,
    sum(case when type = 'payout' or type like '%transfer%' then fee * -1.0 else 0 end) as total_payout_fees,
    sum(case when type = 'payout' or type like '%transfer%' then amount else 0 end) as total_gross_payout_amount,
    sum(case when type = 'payout' or type like '%transfer%' then fee * -1.0 else net end) as quarterly_net_activity,
    sum(if(type in ('payment', 'charge'), 1, 0)) as total_sales_count,
    sum(if(type = 'payout', 1, 0)) as total_payout_count,
    count(distinct case when type = 'adjustment' then coalesce(source, payout_id) end) as total_adjustments_count
  from balance_transaction_joined
  group by 1

), quarterly_failed_charges as (

    select
      date_trunc(date(created_at), quarter) as quarter,
      count(*) as total_failed_charge_count,
      sum(amount) as total_failed_charge_amount
    from incomplete_charges
    group by 1

)

select
  quarterly_balance_transactions.quarter,
  quarterly_balance_transactions.total_sales/100.0 as total_sales,
  quarterly_balance_transactions.total_refunds/100.0 as total_refunds,
  quarterly_balance_transactions.total_adjustments/100.0 as total_adjustments,
  quarterly_balance_transactions.total_other_transactions/100.0 as total_other_transactions,
  quarterly_balance_transactions.total_gross_transaction_amount/100.0 as total_gross_transaction_amount,
  quarterly_balance_transactions.total_net_tranactions/100.0 as total_net_tranactions,
  quarterly_balance_transactions.total_payout_fees/100.0 as total_payout_fees,
  quarterly_balance_transactions.total_gross_payout_amount/100.0 as total_gross_payout_amount,
  quarterly_balance_transactions.quarterly_net_activity/100.0 as quarterly_net_activity,
  (quarterly_balance_transactions.quarterly_net_activity + quarterly_balance_transactions.total_gross_payout_amount)/100.0 as quarterly_end_balance,
  quarterly_balance_transactions.total_sales_count,
  quarterly_balance_transactions.total_payout_count,
  quarterly_balance_transactions.total_adjustments_count,
  coalesce(quarterly_failed_charges.total_failed_charge_count, 0) as total_failed_charge_count,
  coalesce(quarterly_failed_charges.total_failed_charge_amount/100, 0) as total_failed_charge_amount
from quarterly_balance_transactions
left join quarterly_failed_charges on quarterly_balance_transactions.quarter = quarterly_failed_charges.quarter
order by 1 desc
  );
    
2020-07-14 22:08:43.877285 (Thread-2): finished collecting timing info
2020-07-14 22:08:43.878026 (Thread-2): Sending event: {'category': 'dbt', 'action': 'run_model', 'label': '4de8b9d1-fbba-41e1-ae62-eb8517a60820', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x109e59df0>]}
2020-07-14 22:08:43.878300 (Thread-2): 15:08:43 | 2 of 8 OK created table model dbt_kristin.stripe_subscription_details [CREATE TABLE (49) in 4.87s]
2020-07-14 22:08:43.878452 (Thread-2): Finished running node model.stripe.stripe_subscription_details
2020-07-14 22:08:43.878602 (Thread-2): Began running node model.stripe.stripe_weekly_overview
2020-07-14 22:08:43.878861 (Thread-2): 15:08:43 | 8 of 8 START table model dbt_kristin.stripe_weekly_overview.......... [RUN]
2020-07-14 22:08:43.879147 (Thread-2): Acquiring new bigquery connection "model.stripe.stripe_weekly_overview".
2020-07-14 22:08:43.879246 (Thread-2): Re-using an available connection from the pool (formerly model.stripe.stripe_subscription_details).
2020-07-14 22:08:43.879343 (Thread-2): Compiling model.stripe.stripe_weekly_overview
2020-07-14 22:08:43.927728 (Thread-2): Writing injected SQL for node "model.stripe.stripe_weekly_overview"
2020-07-14 22:08:43.928132 (Thread-2): finished collecting timing info
2020-07-14 22:08:43.932829 (Thread-2): Writing runtime SQL for node "model.stripe.stripe_weekly_overview"
2020-07-14 22:08:43.933141 (Thread-2): On model.stripe.stripe_weekly_overview: /* {"app": "dbt", "dbt_version": "0.17.0rc1", "profile_name": "integration_test", "target_name": "dev_bigquery_dbt_testing", "node_id": "model.stripe.stripe_weekly_overview"} */


  create or replace table `dbt-package-testing`.`dbt_kristin`.`stripe_weekly_overview`
  
  
  OPTIONS()
  as (
    with  __dbt__CTE__stg_stripe_balance_transaction as (
with balance_transaction as (

    select *
    from `dbt-package-testing`.`stripe`.`balance_transaction`

), fields as (

    select 
      id as balance_transaction_id,
      amount,
      available_on,
      created as created_at,
      currency,
      description,
      exchange_rate,
      fee,
      net,
      source,
      status,
      type
    from balance_transaction
)

select *
from fields
),  __dbt__CTE__stg_stripe_charge as (
with charge as (

    select *
    from `dbt-package-testing`.`stripe`.`charge`

), fields as (

    select 
      id as charge_id, 
      amount,
      amount_refunded,
      application_fee_amount,
      balance_transaction_id,
      captured as is_captured,
      card_id,
      created as created_at,
      customer_id,
      currency,
      description,
      failure_code,
      failure_message,
      paid as is_paid,
      payment_intent_id,
      receipt_email,
      receipt_number,
      refunded as is_refunded,
      status,
      invoice_id
    from charge
    
)

select *
from fields
),  __dbt__CTE__stg_stripe_payment_intent as (
with payment_intent as (

    select *
    from `dbt-package-testing`.`stripe`.`payment_intent`

), fields as (

    select 
      id as payment_intent_id,
      amount,
      amount_capturable,
      amount_received,
      application,
      application_fee_amount,
      canceled_at,
      cancellation_reason,
      capture_method,
      confirmation_method,
      created as created_at,
      currency,
      customer_id,
      description,
      payment_method_id,
      receipt_email,
      statement_descriptor,
      status
    from payment_intent

)

select *
from fields
),  __dbt__CTE__stg_stripe_payment_method as (
with payment_method as (

    select *
    from `dbt-package-testing`.`stripe`.`payment_method`

), fields as (

    select 
      id as payment_method_id,
      created as created_at,
      customer_id,
      type
    from payment_method
    where not is_deleted

)

select *
from fields
),  __dbt__CTE__stg_stripe_card as (
with card as (

    select *
    from `dbt-package-testing`.`stripe`.`card`

), fields as (

    select 
      id as card_id,
      brand,
      country,
      created as created_at,
      customer_id,
      name,
      recipient,
      funding
    from card
    where not coalesce(is_deleted, false)

)

select *
from fields
),  __dbt__CTE__stg_stripe_payout as (
with payout as (

    select *
    from `dbt-package-testing`.`stripe`.`payout`

), fields as (

    select 
      id as payout_id,
      amount,
      arrival_date,
      automatic as is_automatic,
      balance_transaction_id,
      created as created_at,
      currency,
      description,
      method,
      source_type,
      status,
      type
    from payout

)

select *
from fields
),  __dbt__CTE__stg_stripe_refund as (
with refund as (

    select *
    from `dbt-package-testing`.`stripe`.`refund`

), fields as (

    select 
      id as refund_id,
      amount,
      balance_transaction_id,
      charge_id,
      created as created_at,
      currency,
      description,
      reason,
      receipt_number,
      status
    from refund

)

select *
from fields
),  __dbt__CTE__stg_stripe_customer as (
with customer as (

    select *
    from `dbt-package-testing`.`stripe`.`customer`

), fields as (

    select 
      id as customer_id,
      account_balance,
      created as created_at,
      currency,
      default_card_id,
      delinquent as is_deliguent,
      description,
      email,
      shipping_address_city,
      shipping_address_country,
      shipping_address_line_1,
      shipping_address_line_2,
      shipping_address_postal_code,
      shipping_address_state,
      shipping_name,
      shipping_phone
    from customer
    where not is_deleted

)

select *
from fields
),  __dbt__CTE__stripe_balance_transaction_joined as (
with balance_transaction as (

    select *
    from __dbt__CTE__stg_stripe_balance_transaction
  
), charge as (

    select *
    from __dbt__CTE__stg_stripe_charge

), payment_intent as (

    select *
    from __dbt__CTE__stg_stripe_payment_intent

), payment_method as (

    select *
    from __dbt__CTE__stg_stripe_payment_method

), card as (

    select *
    from __dbt__CTE__stg_stripe_card

), payout as (

    select *
    from __dbt__CTE__stg_stripe_payout

), refund as (

    select *
    from __dbt__CTE__stg_stripe_refund

), customer as (

    select *
    from __dbt__CTE__stg_stripe_customer


)

select 
  balance_transaction.balance_transaction_id,
  balance_transaction.created_at,
  balance_transaction.available_on,
  balance_transaction.currency,
  balance_transaction.amount,
  balance_transaction.fee,
  balance_transaction.net,
  balance_transaction.type,
  case
    when balance_transaction.type in ('charge', 'payment') then 'charge'
    when balance_transaction.type in ('refund', 'payment_refund') then 'refund'
    when balance_transaction.type in ('payout_cancel', 'payout_failure')	then 'payout_reversal'
    when balance_transaction.type in ('transfer', 'recipient_transfer') then	'transfer'
    when balance_transaction.type in ('transfer_cancel', 'transfer_failure', 'recipient_transfer_cancel', 'recipient_transfer_failure') then 'transfer_reversal'
    else balance_transaction.type
  end as reporting_category,
  balance_transaction.source,
  balance_transaction.description,
  case when balance_transaction.type = 'charge' then charge.amount end as customer_facing_amount, --think this might be the charge amount/currency
  case when balance_transaction.type = 'charge' then charge.currency end as customer_facing_currency,
  date_add(date(balance_transaction.available_on), interval 1 day) as effective_at,
  coalesce(charge.customer_id, refund_charge.customer_id) as customer_id,
  charge.receipt_email,
  customer.description as customer_description,
  charge.charge_id,
  charge.payment_intent_id,
  charge.created_at as charge_created_at,
  payment_method.type as payment_method_type,
  card.brand as card_brand,
  card.funding as card_funding,
  card.country as card_country,
  payout.payout_id,
  payout.arrival_date as payout_expeted_arrival_date,
  payout.status as payout_status,
  payout.type as payout_type,
  payout.description as payout_description,
  refund.reason as refund_reason
from balance_transaction
left join charge on charge.balance_transaction_id = balance_transaction.balance_transaction_id
left join customer on charge.customer_id = customer.customer_id
left join payment_intent on charge.payment_intent_id = payment_intent.payment_intent_id
left join payment_method on payment_intent.payment_method_id = payment_method.payment_method_id
left join card on charge.card_id = card.card_id
left join payout on payout.balance_transaction_id = balance_transaction.balance_transaction_id
left join refund on refund.balance_transaction_id = balance_transaction.balance_transaction_id
left join charge as refund_charge on refund.charge_id = refund_charge.charge_id
order by created_at desc
),  __dbt__CTE__stripe_incomplete_charges as (
with charge as (

    select *
    from __dbt__CTE__stg_stripe_charge

)

select 
  created_at,
  customer_id,
  amount
from charge
where not is_captured
),balance_transaction_joined as (

    select *
    from __dbt__CTE__stripe_balance_transaction_joined  

), incomplete_charges as (

    select *
    from __dbt__CTE__stripe_incomplete_charges  

), weekly_balance_transactions as (

  select
    date_trunc(date(case when type = 'payout' then available_on else created_at end), week) as week,
    sum(case when type in ('charge', 'payment') then amount else 0 end) as total_sales,
    sum(case when type in ('payment_refund', 'refund') then amount else 0 end) as total_refunds,
    sum(case when type = 'adjustment' then amount else 0 end) as total_adjustments,
    sum(case when type not in ('charge', 'payment', 'payment_refund', 'refund', 'adjustment', 'payout') and type not like '%transfer%' then amount else 0 end) as total_other_transactions,
    sum(case when type <> 'payout' and type not like '%transfer%' then amount else 0 end) as total_gross_transaction_amount,
    sum(case when type <> 'payout' and type not like '%transfer%' then net else 0 end) as total_net_tranactions,
    sum(case when type = 'payout' or type like '%transfer%' then fee * -1.0 else 0 end) as total_payout_fees,
    sum(case when type = 'payout' or type like '%transfer%' then amount else 0 end) as total_gross_payout_amount,
    sum(case when type = 'payout' or type like '%transfer%' then fee * -1.0 else net end) as weekly_net_activity,
    sum(if(type in ('payment', 'charge'), 1, 0)) as total_sales_count,
    sum(if(type = 'payout', 1, 0)) as total_payout_count,
    count(distinct case when type = 'adjustment' then coalesce(source, payout_id) end) as total_adjustments_count
  from balance_transaction_joined
  group by 1

), weekly_failed_charges as (

    select
      date_trunc(date(created_at), week) as week,
      count(*) as total_failed_charge_count,
      sum(amount) as total_failed_charge_amount
    from incomplete_charges
    group by 1

)

select
  weekly_balance_transactions.week,
  weekly_balance_transactions.total_sales/100.0 as total_sales,
  weekly_balance_transactions.total_refunds/100.0 as total_refunds,
  weekly_balance_transactions.total_adjustments/100.0 as total_adjustments,
  weekly_balance_transactions.total_other_transactions/100.0 as total_other_transactions,
  weekly_balance_transactions.total_gross_transaction_amount/100.0 as total_gross_transaction_amount,
  weekly_balance_transactions.total_net_tranactions/100.0 as total_net_tranactions,
  weekly_balance_transactions.total_payout_fees/100.0 as total_payout_fees,
  weekly_balance_transactions.total_gross_payout_amount/100.0 as total_gross_payout_amount,
  weekly_balance_transactions.weekly_net_activity/100.0 as weekly_net_activity,
  (weekly_balance_transactions.weekly_net_activity + weekly_balance_transactions.total_gross_payout_amount)/100.0 as weekly_end_balance,
  weekly_balance_transactions.total_sales_count,
  weekly_balance_transactions.total_payout_count,
  weekly_balance_transactions.total_adjustments_count,
  coalesce(weekly_failed_charges.total_failed_charge_count, 0) as total_failed_charge_count,
  coalesce(weekly_failed_charges.total_failed_charge_amount/100, 0) as total_failed_charge_amount
from weekly_balance_transactions
left join weekly_failed_charges on weekly_balance_transactions.week = weekly_failed_charges.week
order by 1 desc
  );
    
2020-07-14 22:08:45.351614 (Thread-4): finished collecting timing info
2020-07-14 22:08:45.352449 (Thread-4): Sending event: {'category': 'dbt', 'action': 'run_model', 'label': '4de8b9d1-fbba-41e1-ae62-eb8517a60820', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x10a05e400>]}
2020-07-14 22:08:45.352750 (Thread-4): 15:08:45 | 5 of 8 OK created table model dbt_kristin.stripe_daily_overview...... [CREATE TABLE (1246) in 3.19s]
2020-07-14 22:08:45.352914 (Thread-4): Finished running node model.stripe.stripe_daily_overview
2020-07-14 22:08:46.498697 (Thread-3): finished collecting timing info
2020-07-14 22:08:46.499537 (Thread-3): Sending event: {'category': 'dbt', 'action': 'run_model', 'label': '4de8b9d1-fbba-41e1-ae62-eb8517a60820', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x109e4dee0>]}
2020-07-14 22:08:46.499841 (Thread-3): 15:08:46 | 7 of 8 OK created table model dbt_kristin.stripe_quarterly_overview.. [CREATE TABLE (22) in 3.24s]
2020-07-14 22:08:46.500006 (Thread-3): Finished running node model.stripe.stripe_quarterly_overview
2020-07-14 22:08:46.536983 (Thread-1): finished collecting timing info
2020-07-14 22:08:46.537809 (Thread-1): Sending event: {'category': 'dbt', 'action': 'run_model', 'label': '4de8b9d1-fbba-41e1-ae62-eb8517a60820', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x10a0c5100>]}
2020-07-14 22:08:46.538111 (Thread-1): 15:08:46 | 6 of 8 OK created table model dbt_kristin.stripe_monthly_overview.... [CREATE TABLE (63) in 3.90s]
2020-07-14 22:08:46.538284 (Thread-1): Finished running node model.stripe.stripe_monthly_overview
2020-07-14 22:08:47.918262 (Thread-2): finished collecting timing info
2020-07-14 22:08:47.919098 (Thread-2): Sending event: {'category': 'dbt', 'action': 'run_model', 'label': '4de8b9d1-fbba-41e1-ae62-eb8517a60820', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x10a16a430>]}
2020-07-14 22:08:47.919404 (Thread-2): 15:08:47 | 8 of 8 OK created table model dbt_kristin.stripe_weekly_overview..... [CREATE TABLE (269) in 4.04s]
2020-07-14 22:08:47.919570 (Thread-2): Finished running node model.stripe.stripe_weekly_overview
2020-07-14 22:08:47.922088 (MainThread): Acquiring new bigquery connection "master".
2020-07-14 22:08:47.922269 (MainThread): Opening a new connection, currently in state closed
2020-07-14 22:08:47.922633 (MainThread): 15:08:47 | 
2020-07-14 22:08:47.922795 (MainThread): 15:08:47 | Finished running 8 table models in 9.77s.
2020-07-14 22:08:47.922922 (MainThread): Connection 'master' was properly closed.
2020-07-14 22:08:47.923015 (MainThread): Connection 'model.stripe.stripe_monthly_overview' was left open.
2020-07-14 22:08:47.923102 (MainThread): Connection 'model.stripe.stripe_weekly_overview' was left open.
2020-07-14 22:08:47.923188 (MainThread): Connection 'model.stripe.stripe_quarterly_overview' was left open.
2020-07-14 22:08:47.923272 (MainThread): Connection 'model.stripe.stripe_daily_overview' was left open.
2020-07-14 22:08:47.959443 (MainThread): 
2020-07-14 22:08:47.959623 (MainThread): Completed successfully
2020-07-14 22:08:47.959736 (MainThread): 
Done. PASS=8 WARN=0 ERROR=0 SKIP=0 TOTAL=8
2020-07-14 22:08:47.959897 (MainThread): Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'end', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x10a0d4d60>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x10a0a06a0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x10a0a4f10>]}
2020-07-14 22:08:47.960083 (MainThread): Flushing usage events
2020-07-14 22:09:45.272653 (MainThread): Running with dbt=0.17.0-rc1
2020-07-14 22:09:45.606540 (MainThread): running dbt with arguments Namespace(cls=<class 'dbt.task.run.RunTask'>, debug=False, exclude=None, fail_fast=False, full_refresh=False, log_cache_events=False, log_format='default', models=None, partial_parse=None, profile=None, profiles_dir='/Users/kristin/.dbt', project_dir=None, record_timing_info=None, rpc_method='run', single_threaded=False, strict=False, target=None, test_new_parser=False, threads=None, use_cache=True, vars='{}', version_check=True, warn_error=False, which='run', write_json=True)
2020-07-14 22:09:45.607735 (MainThread): Tracking: tracking
2020-07-14 22:09:45.614152 (MainThread): Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'start', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x10ca5fb50>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x10ca70fa0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x10ca70d30>]}
2020-07-14 22:09:45.635853 (MainThread): Partial parsing not enabled
2020-07-14 22:09:45.638236 (MainThread): Parsing macros/core.sql
2020-07-14 22:09:45.642897 (MainThread): Parsing macros/materializations/helpers.sql
2020-07-14 22:09:45.650108 (MainThread): Parsing macros/materializations/snapshot/snapshot_merge.sql
2020-07-14 22:09:45.652360 (MainThread): Parsing macros/materializations/snapshot/strategies.sql
2020-07-14 22:09:45.667250 (MainThread): Parsing macros/materializations/snapshot/snapshot.sql
2020-07-14 22:09:45.693532 (MainThread): Parsing macros/materializations/seed/seed.sql
2020-07-14 22:09:45.712233 (MainThread): Parsing macros/materializations/incremental/helpers.sql
2020-07-14 22:09:45.714155 (MainThread): Parsing macros/materializations/incremental/incremental.sql
2020-07-14 22:09:45.720154 (MainThread): Parsing macros/materializations/common/merge.sql
2020-07-14 22:09:45.732493 (MainThread): Parsing macros/materializations/table/table.sql
2020-07-14 22:09:45.738730 (MainThread): Parsing macros/materializations/view/view.sql
2020-07-14 22:09:45.744745 (MainThread): Parsing macros/materializations/view/create_or_replace_view.sql
2020-07-14 22:09:45.749633 (MainThread): Parsing macros/etc/get_custom_alias.sql
2020-07-14 22:09:45.750883 (MainThread): Parsing macros/etc/query.sql
2020-07-14 22:09:45.751991 (MainThread): Parsing macros/etc/is_incremental.sql
2020-07-14 22:09:45.753597 (MainThread): Parsing macros/etc/datetime.sql
2020-07-14 22:09:45.761368 (MainThread): Parsing macros/etc/get_custom_schema.sql
2020-07-14 22:09:45.763222 (MainThread): Parsing macros/etc/get_custom_database.sql
2020-07-14 22:09:45.764631 (MainThread): Parsing macros/adapters/common.sql
2020-07-14 22:09:45.807602 (MainThread): Parsing macros/schema_tests/relationships.sql
2020-07-14 22:09:45.810380 (MainThread): Parsing macros/schema_tests/not_null.sql
2020-07-14 22:09:45.812167 (MainThread): Parsing macros/schema_tests/unique.sql
2020-07-14 22:09:45.814086 (MainThread): Parsing macros/schema_tests/accepted_values.sql
2020-07-14 22:09:45.817328 (MainThread): Parsing macros/etc.sql
2020-07-14 22:09:45.818778 (MainThread): Parsing macros/catalog.sql
2020-07-14 22:09:45.826412 (MainThread): Parsing macros/adapters.sql
2020-07-14 22:09:45.844031 (MainThread): Parsing macros/materializations/seed.sql
2020-07-14 22:09:45.846542 (MainThread): Parsing macros/materializations/view.sql
2020-07-14 22:09:45.849266 (MainThread): Parsing macros/materializations/table.sql
2020-07-14 22:09:45.859854 (MainThread): Parsing macros/materializations/incremental.sql
2020-07-14 22:09:45.873732 (MainThread): Parsing macros/materializations/snapshot.sql
2020-07-14 22:09:45.926552 (MainThread): Partial parsing not enabled
2020-07-14 22:09:45.930477 (MainThread): Parsing macros/cross_db_utils/except.sql
2020-07-14 22:09:45.931781 (MainThread): Parsing macros/cross_db_utils/replace.sql
2020-07-14 22:09:45.933213 (MainThread): Parsing macros/cross_db_utils/concat.sql
2020-07-14 22:09:45.935566 (MainThread): Parsing macros/cross_db_utils/datatypes.sql
2020-07-14 22:09:45.940614 (MainThread): Parsing macros/cross_db_utils/_is_relation.sql
2020-07-14 22:09:45.941895 (MainThread): Parsing macros/cross_db_utils/length.sql
2020-07-14 22:09:45.943378 (MainThread): Parsing macros/cross_db_utils/dateadd.sql
2020-07-14 22:09:45.945755 (MainThread): Parsing macros/cross_db_utils/intersect.sql
2020-07-14 22:09:45.947156 (MainThread): Parsing macros/cross_db_utils/right.sql
2020-07-14 22:09:45.949611 (MainThread): Parsing macros/cross_db_utils/datediff.sql
2020-07-14 22:09:45.961940 (MainThread): Parsing macros/cross_db_utils/safe_cast.sql
2020-07-14 22:09:45.964772 (MainThread): Parsing macros/cross_db_utils/hash.sql
2020-07-14 22:09:45.966575 (MainThread): Parsing macros/cross_db_utils/identifier.sql
2020-07-14 22:09:45.968344 (MainThread): Parsing macros/cross_db_utils/position.sql
2020-07-14 22:09:45.970277 (MainThread): Parsing macros/cross_db_utils/literal.sql
2020-07-14 22:09:45.971447 (MainThread): Parsing macros/cross_db_utils/current_timestamp.sql
2020-07-14 22:09:46.000156 (MainThread): Parsing macros/cross_db_utils/width_bucket.sql
2020-07-14 22:09:46.008279 (MainThread): Parsing macros/cross_db_utils/last_day.sql
2020-07-14 22:09:46.012453 (MainThread): Parsing macros/cross_db_utils/split_part.sql
2020-07-14 22:09:46.015171 (MainThread): Parsing macros/cross_db_utils/date_trunc.sql
2020-07-14 22:09:46.017351 (MainThread): Parsing macros/cross_db_utils/_is_ephemeral.sql
2020-07-14 22:09:46.019933 (MainThread): Parsing macros/materializations/insert_by_period_materialization.sql
2020-07-14 22:09:46.047605 (MainThread): Parsing macros/logger/pretty_log_format.sql
2020-07-14 22:09:46.048593 (MainThread): Parsing macros/logger/pretty_time.sql
2020-07-14 22:09:46.049634 (MainThread): Parsing macros/logger/log_info.sql
2020-07-14 22:09:46.050651 (MainThread): Parsing macros/datetime/date_spine.sql
2020-07-14 22:09:46.054623 (MainThread): Parsing macros/web/get_url_host.sql
2020-07-14 22:09:46.056793 (MainThread): Parsing macros/web/get_url_path.sql
2020-07-14 22:09:46.059276 (MainThread): Parsing macros/web/get_url_parameter.sql
2020-07-14 22:09:46.060572 (MainThread): Parsing macros/geo/haversine_distance.sql
2020-07-14 22:09:46.061754 (MainThread): Parsing macros/schema_tests/equal_rowcount.sql
2020-07-14 22:09:46.063273 (MainThread): Parsing macros/schema_tests/relationships_where.sql
2020-07-14 22:09:46.065550 (MainThread): Parsing macros/schema_tests/recency.sql
2020-07-14 22:09:46.066944 (MainThread): Parsing macros/schema_tests/not_constant.sql
2020-07-14 22:09:46.068088 (MainThread): Parsing macros/schema_tests/test_unique_where.sql
2020-07-14 22:09:46.069810 (MainThread): Parsing macros/schema_tests/at_least_one.sql
2020-07-14 22:09:46.070897 (MainThread): Parsing macros/schema_tests/unique_combination_of_columns.sql
2020-07-14 22:09:46.072121 (MainThread): Parsing macros/schema_tests/cardinality_equality.sql
2020-07-14 22:09:46.073674 (MainThread): Parsing macros/schema_tests/expression_is_true.sql
2020-07-14 22:09:46.074794 (MainThread): Parsing macros/schema_tests/test_not_null_where.sql
2020-07-14 22:09:46.076206 (MainThread): Parsing macros/schema_tests/equality.sql
2020-07-14 22:09:46.079293 (MainThread): Parsing macros/schema_tests/mutually_exclusive_ranges.sql
2020-07-14 22:09:46.084351 (MainThread): Parsing macros/sql/nullcheck_table.sql
2020-07-14 22:09:46.085572 (MainThread): Parsing macros/sql/get_relations_by_pattern.sql
2020-07-14 22:09:46.088009 (MainThread): Parsing macros/sql/generate_series.sql
2020-07-14 22:09:46.091175 (MainThread): Parsing macros/sql/get_relations_by_prefix.sql
2020-07-14 22:09:46.094504 (MainThread): Parsing macros/sql/get_tables_by_prefix_sql.sql
2020-07-14 22:09:46.096947 (MainThread): Parsing macros/sql/star.sql
2020-07-14 22:09:46.099639 (MainThread): Parsing macros/sql/unpivot.sql
2020-07-14 22:09:46.105216 (MainThread): Parsing macros/sql/union.sql
2020-07-14 22:09:46.113616 (MainThread): Parsing macros/sql/groupby.sql
2020-07-14 22:09:46.114606 (MainThread): Parsing macros/sql/get_tables_by_pattern.sql
2020-07-14 22:09:46.115607 (MainThread): Parsing macros/sql/surrogate_key.sql
2020-07-14 22:09:46.118114 (MainThread): Parsing macros/sql/safe_add.sql
2020-07-14 22:09:46.119208 (MainThread): Parsing macros/sql/nullcheck.sql
2020-07-14 22:09:46.120471 (MainThread): Parsing macros/sql/get_column_values.sql
2020-07-14 22:09:46.124244 (MainThread): Parsing macros/sql/pivot.sql
2020-07-14 22:09:46.126816 (MainThread): Parsing macros/sql/get_query_results_as_dict.sql
2020-07-14 22:09:46.166886 (MainThread): Acquiring new bigquery connection "model.stripe.stripe_weekly_overview".
2020-07-14 22:09:46.167024 (MainThread): Opening a new connection, currently in state init
2020-07-14 22:09:46.185098 (MainThread): Acquiring new bigquery connection "model.stripe.stripe_daily_overview".
2020-07-14 22:09:46.185219 (MainThread): Opening a new connection, currently in state closed
2020-07-14 22:09:46.194843 (MainThread): Acquiring new bigquery connection "model.stripe.stripe_invoice_details".
2020-07-14 22:09:46.194918 (MainThread): Opening a new connection, currently in state closed
2020-07-14 22:09:46.208034 (MainThread): Acquiring new bigquery connection "model.stripe.stripe_customer_overview".
2020-07-14 22:09:46.208131 (MainThread): Opening a new connection, currently in state closed
2020-07-14 22:09:46.219773 (MainThread): Acquiring new bigquery connection "model.stripe.stripe_balance_transactions".
2020-07-14 22:09:46.219893 (MainThread): Opening a new connection, currently in state closed
2020-07-14 22:09:46.229076 (MainThread): Acquiring new bigquery connection "model.stripe.stripe_quarterly_overview".
2020-07-14 22:09:46.229172 (MainThread): Opening a new connection, currently in state closed
2020-07-14 22:09:46.240993 (MainThread): Acquiring new bigquery connection "model.stripe.stripe_monthly_overview".
2020-07-14 22:09:46.241132 (MainThread): Opening a new connection, currently in state closed
2020-07-14 22:09:46.254159 (MainThread): Acquiring new bigquery connection "model.stripe.stripe_subscription_details".
2020-07-14 22:09:46.254248 (MainThread): Opening a new connection, currently in state closed
2020-07-14 22:09:46.267740 (MainThread): Acquiring new bigquery connection "model.stripe.stripe_balance_transaction_joined".
2020-07-14 22:09:46.267838 (MainThread): Opening a new connection, currently in state closed
2020-07-14 22:09:46.282604 (MainThread): Acquiring new bigquery connection "model.stripe.stripe_incomplete_charges".
2020-07-14 22:09:46.282678 (MainThread): Opening a new connection, currently in state closed
2020-07-14 22:09:46.557579 (MainThread): Acquiring new bigquery connection "model.stripe_source.stg_stripe_card".
2020-07-14 22:09:46.557717 (MainThread): Opening a new connection, currently in state closed
2020-07-14 22:09:46.569769 (MainThread): Acquiring new bigquery connection "model.stripe_source.stg_stripe_invoice_line_item".
2020-07-14 22:09:46.569900 (MainThread): Opening a new connection, currently in state closed
2020-07-14 22:09:46.583154 (MainThread): Acquiring new bigquery connection "model.stripe_source.stg_stripe_payment_method_card".
2020-07-14 22:09:46.583287 (MainThread): Opening a new connection, currently in state closed
2020-07-14 22:09:46.594302 (MainThread): Acquiring new bigquery connection "model.stripe_source.stg_stripe_charge".
2020-07-14 22:09:46.594389 (MainThread): Opening a new connection, currently in state closed
2020-07-14 22:09:46.604244 (MainThread): Acquiring new bigquery connection "model.stripe_source.stg_stripe_payout".
2020-07-14 22:09:46.604555 (MainThread): Opening a new connection, currently in state closed
2020-07-14 22:09:46.614883 (MainThread): Acquiring new bigquery connection "model.stripe_source.stg_stripe_customer".
2020-07-14 22:09:46.615003 (MainThread): Opening a new connection, currently in state closed
2020-07-14 22:09:46.624284 (MainThread): Acquiring new bigquery connection "model.stripe_source.stg_stripe_refund".
2020-07-14 22:09:46.624359 (MainThread): Opening a new connection, currently in state closed
2020-07-14 22:09:46.633266 (MainThread): Acquiring new bigquery connection "model.stripe_source.stg_stripe_subscription".
2020-07-14 22:09:46.633341 (MainThread): Opening a new connection, currently in state closed
2020-07-14 22:09:46.643246 (MainThread): Acquiring new bigquery connection "model.stripe_source.stg_stripe_payment_method".
2020-07-14 22:09:46.643321 (MainThread): Opening a new connection, currently in state closed
2020-07-14 22:09:46.652412 (MainThread): Acquiring new bigquery connection "model.stripe_source.stg_stripe_payment_intent".
2020-07-14 22:09:46.652487 (MainThread): Opening a new connection, currently in state closed
2020-07-14 22:09:46.661360 (MainThread): Acquiring new bigquery connection "model.stripe_source.stg_stripe_invoice".
2020-07-14 22:09:46.661435 (MainThread): Opening a new connection, currently in state closed
2020-07-14 22:09:46.671247 (MainThread): Acquiring new bigquery connection "model.stripe_source.stg_stripe_fee".
2020-07-14 22:09:46.671325 (MainThread): Opening a new connection, currently in state closed
2020-07-14 22:09:46.681091 (MainThread): Acquiring new bigquery connection "model.stripe_source.stg_stripe_balance_transaction".
2020-07-14 22:09:46.681176 (MainThread): Opening a new connection, currently in state closed
2020-07-14 22:09:48.820770 (MainThread): Found 23 models, 16 tests, 0 snapshots, 0 analyses, 278 macros, 0 operations, 0 seed files, 13 sources
2020-07-14 22:09:48.853458 (MainThread): 
2020-07-14 22:09:48.853756 (MainThread): Acquiring new bigquery connection "master".
2020-07-14 22:09:48.853876 (MainThread): Opening a new connection, currently in state closed
2020-07-14 22:09:48.863378 (ThreadPoolExecutor-0_0): Acquiring new bigquery connection "list_dbt-package-testing".
2020-07-14 22:09:48.863499 (ThreadPoolExecutor-0_0): Opening a new connection, currently in state init
2020-07-14 22:09:49.266345 (ThreadPoolExecutor-0_0): Acquiring new bigquery connection "create_dbt-package-testing_dbt_kristin".
2020-07-14 22:09:49.266505 (ThreadPoolExecutor-0_0): Re-using an available connection from the pool (formerly list_dbt-package-testing).
2020-07-14 22:09:49.266601 (ThreadPoolExecutor-0_0): Creating schema "dbt-package-testing.dbt_kristin".
2020-07-14 22:09:49.266738 (ThreadPoolExecutor-0_0): Client.dataset is deprecated and will be removed in a future version. Use a string like 'my_project.my_dataset' or a cloud.google.bigquery.DatasetReference object, instead.
2020-07-14 22:09:49.934687 (ThreadPoolExecutor-1_0): Acquiring new bigquery connection "list_dbt-package-testing_dbt_kristin".
2020-07-14 22:09:49.934886 (ThreadPoolExecutor-1_0): Re-using an available connection from the pool (formerly create_dbt-package-testing_dbt_kristin).
2020-07-14 22:09:49.935008 (ThreadPoolExecutor-1_0): Client.dataset is deprecated and will be removed in a future version. Use a string like 'my_project.my_dataset' or a cloud.google.bigquery.DatasetReference object, instead.
2020-07-14 22:09:50.075311 (MainThread): Acquiring new bigquery connection "master".
2020-07-14 22:09:50.075451 (MainThread): Opening a new connection, currently in state closed
2020-07-14 22:09:50.075681 (MainThread): 15:09:50 | Concurrency: 4 threads (target='dev_bigquery_dbt_testing')
2020-07-14 22:09:50.075799 (MainThread): 15:09:50 | 
2020-07-14 22:09:50.079421 (Thread-1): Began running node model.stripe_source.stg_stripe_charge
2020-07-14 22:09:50.079589 (Thread-2): Began running node model.stripe_source.stg_stripe_customer
2020-07-14 22:09:50.079852 (Thread-1): Acquiring new bigquery connection "model.stripe_source.stg_stripe_charge".
2020-07-14 22:09:50.079939 (Thread-3): Began running node model.stripe_source.stg_stripe_balance_transaction
2020-07-14 22:09:50.080187 (Thread-2): Acquiring new bigquery connection "model.stripe_source.stg_stripe_customer".
2020-07-14 22:09:50.080273 (Thread-4): Began running node model.stripe_source.stg_stripe_card
2020-07-14 22:09:50.080375 (Thread-1): Re-using an available connection from the pool (formerly list_dbt-package-testing_dbt_kristin).
2020-07-14 22:09:50.080581 (Thread-3): Acquiring new bigquery connection "model.stripe_source.stg_stripe_balance_transaction".
2020-07-14 22:09:50.080677 (Thread-2): Opening a new connection, currently in state init
2020-07-14 22:09:50.080882 (Thread-4): Acquiring new bigquery connection "model.stripe_source.stg_stripe_card".
2020-07-14 22:09:50.080991 (Thread-1): Compiling model.stripe_source.stg_stripe_charge
2020-07-14 22:09:50.081070 (Thread-3): Opening a new connection, currently in state init
2020-07-14 22:09:50.081153 (Thread-2): Compiling model.stripe_source.stg_stripe_customer
2020-07-14 22:09:50.081227 (Thread-4): Opening a new connection, currently in state init
2020-07-14 22:09:50.086785 (Thread-3): Compiling model.stripe_source.stg_stripe_balance_transaction
2020-07-14 22:09:50.094025 (Thread-1): Writing injected SQL for node "model.stripe_source.stg_stripe_charge"
2020-07-14 22:09:50.099824 (Thread-2): Writing injected SQL for node "model.stripe_source.stg_stripe_customer"
2020-07-14 22:09:50.099942 (Thread-4): Compiling model.stripe_source.stg_stripe_card
2020-07-14 22:09:50.105295 (Thread-3): Writing injected SQL for node "model.stripe_source.stg_stripe_balance_transaction"
2020-07-14 22:09:50.111130 (Thread-4): Writing injected SQL for node "model.stripe_source.stg_stripe_card"
2020-07-14 22:09:50.111428 (Thread-1): finished collecting timing info
2020-07-14 22:09:50.111810 (Thread-2): finished collecting timing info
2020-07-14 22:09:50.112304 (Thread-1): Finished running node model.stripe_source.stg_stripe_charge
2020-07-14 22:09:50.112377 (Thread-3): finished collecting timing info
2020-07-14 22:09:50.112518 (Thread-4): finished collecting timing info
2020-07-14 22:09:50.112792 (Thread-2): Finished running node model.stripe_source.stg_stripe_customer
2020-07-14 22:09:50.112996 (Thread-1): Began running node model.stripe_source.stg_stripe_payment_intent
2020-07-14 22:09:50.113199 (Thread-3): Finished running node model.stripe_source.stg_stripe_balance_transaction
2020-07-14 22:09:50.113536 (Thread-4): Finished running node model.stripe_source.stg_stripe_card
2020-07-14 22:09:50.113642 (Thread-2): Began running node model.stripe_source.stg_stripe_payment_method
2020-07-14 22:09:50.113827 (Thread-1): Acquiring new bigquery connection "model.stripe_source.stg_stripe_payment_intent".
2020-07-14 22:09:50.113966 (Thread-3): Began running node model.stripe_source.stg_stripe_payout
2020-07-14 22:09:50.114067 (Thread-4): Began running node model.stripe_source.stg_stripe_refund
2020-07-14 22:09:50.114307 (Thread-2): Acquiring new bigquery connection "model.stripe_source.stg_stripe_payment_method".
2020-07-14 22:09:50.114401 (Thread-1): Re-using an available connection from the pool (formerly model.stripe_source.stg_stripe_charge).
2020-07-14 22:09:50.114594 (Thread-3): Acquiring new bigquery connection "model.stripe_source.stg_stripe_payout".
2020-07-14 22:09:50.114776 (Thread-4): Acquiring new bigquery connection "model.stripe_source.stg_stripe_refund".
2020-07-14 22:09:50.114859 (Thread-2): Opening a new connection, currently in state closed
2020-07-14 22:09:50.114935 (Thread-1): Compiling model.stripe_source.stg_stripe_payment_intent
2020-07-14 22:09:50.115000 (Thread-3): Opening a new connection, currently in state closed
2020-07-14 22:09:50.115083 (Thread-4): Opening a new connection, currently in state closed
2020-07-14 22:09:50.115172 (Thread-2): Compiling model.stripe_source.stg_stripe_payment_method
2020-07-14 22:09:50.120816 (Thread-3): Compiling model.stripe_source.stg_stripe_payout
2020-07-14 22:09:50.121348 (Thread-1): Writing injected SQL for node "model.stripe_source.stg_stripe_payment_intent"
2020-07-14 22:09:50.121440 (Thread-4): Compiling model.stripe_source.stg_stripe_refund
2020-07-14 22:09:50.126318 (Thread-2): Writing injected SQL for node "model.stripe_source.stg_stripe_payment_method"
2020-07-14 22:09:50.131177 (Thread-3): Writing injected SQL for node "model.stripe_source.stg_stripe_payout"
2020-07-14 22:09:50.136102 (Thread-4): Writing injected SQL for node "model.stripe_source.stg_stripe_refund"
2020-07-14 22:09:50.136304 (Thread-1): finished collecting timing info
2020-07-14 22:09:50.136891 (Thread-4): finished collecting timing info
2020-07-14 22:09:50.137041 (Thread-2): finished collecting timing info
2020-07-14 22:09:50.137360 (Thread-1): Finished running node model.stripe_source.stg_stripe_payment_intent
2020-07-14 22:09:50.137569 (Thread-4): Finished running node model.stripe_source.stg_stripe_refund
2020-07-14 22:09:50.137633 (Thread-3): finished collecting timing info
2020-07-14 22:09:50.137908 (Thread-2): Finished running node model.stripe_source.stg_stripe_payment_method
2020-07-14 22:09:50.138014 (Thread-1): Began running node model.stripe_source.stg_stripe_invoice
2020-07-14 22:09:50.138114 (Thread-4): Began running node model.stripe_source.stg_stripe_invoice_line_item
2020-07-14 22:09:50.138385 (Thread-3): Finished running node model.stripe_source.stg_stripe_payout
2020-07-14 22:09:50.138487 (Thread-2): Began running node model.stripe_source.stg_stripe_subscription
2020-07-14 22:09:50.138666 (Thread-1): Acquiring new bigquery connection "model.stripe_source.stg_stripe_invoice".
2020-07-14 22:09:50.138907 (Thread-4): Acquiring new bigquery connection "model.stripe_source.stg_stripe_invoice_line_item".
2020-07-14 22:09:50.139016 (Thread-3): Began running node model.stripe_source.stg_stripe_fee
2020-07-14 22:09:50.139204 (Thread-2): Acquiring new bigquery connection "model.stripe_source.stg_stripe_subscription".
2020-07-14 22:09:50.139387 (Thread-1): Re-using an available connection from the pool (formerly model.stripe_source.stg_stripe_payment_intent).
2020-07-14 22:09:50.139473 (Thread-4): Opening a new connection, currently in state closed
2020-07-14 22:09:50.139647 (Thread-3): Acquiring new bigquery connection "model.stripe_source.stg_stripe_fee".
2020-07-14 22:09:50.139746 (Thread-2): Opening a new connection, currently in state closed
2020-07-14 22:09:50.139838 (Thread-1): Compiling model.stripe_source.stg_stripe_invoice
2020-07-14 22:09:50.139918 (Thread-4): Compiling model.stripe_source.stg_stripe_invoice_line_item
2020-07-14 22:09:50.139989 (Thread-3): Opening a new connection, currently in state closed
2020-07-14 22:09:50.140065 (Thread-2): Compiling model.stripe_source.stg_stripe_subscription
2020-07-14 22:09:50.152841 (Thread-4): Writing injected SQL for node "model.stripe_source.stg_stripe_invoice_line_item"
2020-07-14 22:09:50.153403 (Thread-1): Writing injected SQL for node "model.stripe_source.stg_stripe_invoice"
2020-07-14 22:09:50.153480 (Thread-3): Compiling model.stripe_source.stg_stripe_fee
2020-07-14 22:09:50.158845 (Thread-2): Writing injected SQL for node "model.stripe_source.stg_stripe_subscription"
2020-07-14 22:09:50.164069 (Thread-3): Writing injected SQL for node "model.stripe_source.stg_stripe_fee"
2020-07-14 22:09:50.164337 (Thread-4): finished collecting timing info
2020-07-14 22:09:50.164701 (Thread-1): finished collecting timing info
2020-07-14 22:09:50.165028 (Thread-4): Finished running node model.stripe_source.stg_stripe_invoice_line_item
2020-07-14 22:09:50.165311 (Thread-1): Finished running node model.stripe_source.stg_stripe_invoice
2020-07-14 22:09:50.165467 (Thread-2): finished collecting timing info
2020-07-14 22:09:50.165647 (Thread-4): Began running node model.stripe_source.stg_stripe_payment_method_card
2020-07-14 22:09:50.165716 (Thread-3): finished collecting timing info
2020-07-14 22:09:50.165895 (Thread-1): Began running node model.stripe.stripe_incomplete_charges
2020-07-14 22:09:50.166180 (Thread-2): Finished running node model.stripe_source.stg_stripe_subscription
2020-07-14 22:09:50.166370 (Thread-4): Acquiring new bigquery connection "model.stripe_source.stg_stripe_payment_method_card".
2020-07-14 22:09:50.166564 (Thread-3): Finished running node model.stripe_source.stg_stripe_fee
2020-07-14 22:09:50.166745 (Thread-1): Acquiring new bigquery connection "model.stripe.stripe_incomplete_charges".
2020-07-14 22:09:50.166846 (Thread-2): Began running node model.stripe.stripe_balance_transaction_joined
2020-07-14 22:09:50.166931 (Thread-4): Opening a new connection, currently in state closed
2020-07-14 22:09:50.167133 (Thread-3): Began running node model.stripe.stripe_invoice_details
2020-07-14 22:09:50.167218 (Thread-1): Re-using an available connection from the pool (formerly model.stripe_source.stg_stripe_invoice).
2020-07-14 22:09:50.167449 (Thread-2): Acquiring new bigquery connection "model.stripe.stripe_balance_transaction_joined".
2020-07-14 22:09:50.167543 (Thread-4): Compiling model.stripe_source.stg_stripe_payment_method_card
2020-07-14 22:09:50.167640 (Thread-3): 15:09:50 | 1 of 8 START table model dbt_kristin.stripe_invoice_details.......... [RUN]
2020-07-14 22:09:50.167717 (Thread-1): Compiling model.stripe.stripe_incomplete_charges
2020-07-14 22:09:50.167781 (Thread-2): Opening a new connection, currently in state closed
2020-07-14 22:09:50.172799 (Thread-4): Writing injected SQL for node "model.stripe_source.stg_stripe_payment_method_card"
2020-07-14 22:09:50.173077 (Thread-3): Acquiring new bigquery connection "model.stripe.stripe_invoice_details".
2020-07-14 22:09:50.180326 (Thread-1): Writing injected SQL for node "model.stripe.stripe_incomplete_charges"
2020-07-14 22:09:50.180420 (Thread-2): Compiling model.stripe.stripe_balance_transaction_joined
2020-07-14 22:09:50.180579 (Thread-3): Opening a new connection, currently in state closed
2020-07-14 22:09:50.186994 (Thread-4): finished collecting timing info
2020-07-14 22:09:50.193842 (Thread-3): Compiling model.stripe.stripe_invoice_details
2020-07-14 22:09:50.211110 (Thread-1): finished collecting timing info
2020-07-14 22:09:50.211452 (Thread-4): Finished running node model.stripe_source.stg_stripe_payment_method_card
2020-07-14 22:09:50.216251 (Thread-2): Writing injected SQL for node "model.stripe.stripe_balance_transaction_joined"
2020-07-14 22:09:50.228444 (Thread-1): Finished running node model.stripe.stripe_incomplete_charges
2020-07-14 22:09:50.244740 (Thread-3): Writing injected SQL for node "model.stripe.stripe_invoice_details"
2020-07-14 22:09:50.244832 (Thread-4): Began running node model.stripe.stripe_subscription_details
2020-07-14 22:09:50.245380 (Thread-4): 15:09:50 | 2 of 8 START table model dbt_kristin.stripe_subscription_details..... [RUN]
2020-07-14 22:09:50.245578 (Thread-4): Acquiring new bigquery connection "model.stripe.stripe_subscription_details".
2020-07-14 22:09:50.245647 (Thread-4): Opening a new connection, currently in state closed
2020-07-14 22:09:50.245750 (Thread-4): Compiling model.stripe.stripe_subscription_details
2020-07-14 22:09:50.279667 (Thread-4): Writing injected SQL for node "model.stripe.stripe_subscription_details"
2020-07-14 22:09:50.279869 (Thread-2): finished collecting timing info
2020-07-14 22:09:50.280224 (Thread-2): Finished running node model.stripe.stripe_balance_transaction_joined
2020-07-14 22:09:50.280470 (Thread-3): finished collecting timing info
2020-07-14 22:09:50.312104 (Thread-1): Began running node model.stripe.stripe_balance_transactions
2020-07-14 22:09:50.312264 (Thread-1): 15:09:50 | 3 of 8 START table model dbt_kristin.stripe_balance_transactions..... [RUN]
2020-07-14 22:09:50.312530 (Thread-1): Acquiring new bigquery connection "model.stripe.stripe_balance_transactions".
2020-07-14 22:09:50.319113 (Thread-4): finished collecting timing info
2020-07-14 22:09:50.319637 (Thread-1): Re-using an available connection from the pool (formerly model.stripe.stripe_incomplete_charges).
2020-07-14 22:09:50.319716 (Thread-2): Began running node model.stripe.stripe_customer_overview
2020-07-14 22:09:50.324580 (Thread-3): Writing runtime SQL for node "model.stripe.stripe_invoice_details"
2020-07-14 22:09:50.328718 (Thread-4): Writing runtime SQL for node "model.stripe.stripe_subscription_details"
2020-07-14 22:09:50.328816 (Thread-1): Compiling model.stripe.stripe_balance_transactions
2020-07-14 22:09:50.328913 (Thread-2): 15:09:50 | 4 of 8 START table model dbt_kristin.stripe_customer_overview........ [RUN]
2020-07-14 22:09:50.347042 (Thread-2): Acquiring new bigquery connection "model.stripe.stripe_customer_overview".
2020-07-14 22:09:50.350278 (Thread-1): Writing injected SQL for node "model.stripe.stripe_balance_transactions"
2020-07-14 22:09:50.350665 (Thread-2): Opening a new connection, currently in state closed
2020-07-14 22:09:50.350963 (Thread-3): On model.stripe.stripe_invoice_details: /* {"app": "dbt", "dbt_version": "0.17.0rc1", "profile_name": "integration_test", "target_name": "dev_bigquery_dbt_testing", "node_id": "model.stripe.stripe_invoice_details"} */


  create or replace table `dbt-package-testing`.`dbt_kristin`.`stripe_invoice_details`
  
  
  OPTIONS()
  as (
    

with  __dbt__CTE__stg_stripe_invoice as (


with invoice as (

    select *
    from `dbt-package-testing`.`stripe`.`invoice`

), fields as (

    select
      id as invoice_id,
      amount_due,
      amount_paid,
      amount_remaining,
      attempt_count,
      auto_advance,
      billing_reason,
      charge_id,
      created as created_at,
      currency,
      customer_id,
      description,
      due_date,
      number,
      paid as is_paid,
      receipt_number,
      status,
      subtotal,
      tax,
      tax_percent,
      total
    from invoice
    where not coalesce(is_deleted, false)

)

select * from fields
),  __dbt__CTE__stg_stripe_charge as (
with charge as (

    select *
    from `dbt-package-testing`.`stripe`.`charge`

), fields as (

    select 
      id as charge_id, 
      amount,
      amount_refunded,
      application_fee_amount,
      balance_transaction_id,
      captured as is_captured,
      card_id,
      created as created_at,
      customer_id,
      currency,
      description,
      failure_code,
      failure_message,
      paid as is_paid,
      payment_intent_id,
      receipt_email,
      receipt_number,
      refunded as is_refunded,
      status,
      invoice_id
    from charge
    
)

select *
from fields
),  __dbt__CTE__stg_stripe_invoice_line_item as (


with invoice_line_item as (

    select *
    from `dbt-package-testing`.`stripe`.`invoice_line_item`

), fields as (

    select
      id as invoice_line_item_id,
      invoice_id,
      amount,
      currency,
      description,
      discountable as is_discountable,
      plan_id,
      proration,
      quantity,
      subscription_id,
      subscription_item_id,
      type,
      unique_id
    from invoice_line_item
    where id not like 'sub%'

)

select * from fields
),  __dbt__CTE__stg_stripe_subscription as (


with subscription as (

    select *
    from `dbt-package-testing`.`stripe`.`subscription`

), fields as (

    select
      id as subscription_id,
      status,
      billing,
      billing_cycle_anchor,
      cancel_at,
      cancel_at_period_end,
      canceled_at,
      created as created_at,
      current_period_start,
      current_period_end,
      customer_id,
      days_until_due,
      start_date,
      ended_at
    from subscription

)

select * from fields
),  __dbt__CTE__stg_stripe_customer as (
with customer as (

    select *
    from `dbt-package-testing`.`stripe`.`customer`

), fields as (

    select 
      id as customer_id,
      account_balance,
      created as created_at,
      currency,
      default_card_id,
      delinquent as is_deliguent,
      description,
      email,
      shipping_address_city,
      shipping_address_country,
      shipping_address_line_1,
      shipping_address_line_2,
      shipping_address_postal_code,
      shipping_address_state,
      shipping_name,
      shipping_phone
    from customer
    where not is_deleted

)

select *
from fields
),invoice as (

    select *
    from __dbt__CTE__stg_stripe_invoice  

), charge as (

    select *
    from __dbt__CTE__stg_stripe_charge  

), invoice_line_item as (

    select *
    from __dbt__CTE__stg_stripe_invoice_line_item  

), subscription as (

    select *
    from __dbt__CTE__stg_stripe_subscription  

), customer as (

    select *
    from __dbt__CTE__stg_stripe_customer  

)

select 
  invoice.invoice_id,
  invoice.number,
  invoice.created_at as invoice_created_at,
  invoice.status,
  invoice.due_date,
  invoice.amount_due,
  invoice.subtotal,
  invoice.tax,
  invoice.total,
  invoice.amount_paid,
  invoice.amount_remaining,
  invoice.attempt_count,
  invoice.description as invoice_memo,
  invoice_line_item.description as line_item_desc,
  invoice_line_item.amount as line_item_amount,
  invoice_line_item.quantity,
  charge.balance_transaction_id,
  charge.amount as charge_amount, 
  charge.status as charge_status,
  charge.created_at as charge_created_at,
  customer.description as customer_description,
  customer.email as customer_email,
  subscription.subscription_id,
  subscription.billing as subcription_billing,
  subscription.start_date as subscription_start_date,
  subscription.ended_at as subscription_ended_at
from invoice
left join charge on charge.charge_id = invoice.charge_id
left join invoice_line_item on invoice.invoice_id = invoice_line_item.invoice_id
left join subscription on invoice_line_item.subscription_id = subscription.subscription_id
left join customer on invoice.customer_id = customer.customer_id
order by invoice.created_at desc
  );
    
2020-07-14 22:09:50.351256 (Thread-2): Compiling model.stripe.stripe_customer_overview
2020-07-14 22:09:50.351347 (Thread-4): On model.stripe.stripe_subscription_details: /* {"app": "dbt", "dbt_version": "0.17.0rc1", "profile_name": "integration_test", "target_name": "dev_bigquery_dbt_testing", "node_id": "model.stripe.stripe_subscription_details"} */


  create or replace table `dbt-package-testing`.`dbt_kristin`.`stripe_subscription_details`
  
  
  OPTIONS()
  as (
    

with  __dbt__CTE__stg_stripe_invoice as (


with invoice as (

    select *
    from `dbt-package-testing`.`stripe`.`invoice`

), fields as (

    select
      id as invoice_id,
      amount_due,
      amount_paid,
      amount_remaining,
      attempt_count,
      auto_advance,
      billing_reason,
      charge_id,
      created as created_at,
      currency,
      customer_id,
      description,
      due_date,
      number,
      paid as is_paid,
      receipt_number,
      status,
      subtotal,
      tax,
      tax_percent,
      total
    from invoice
    where not coalesce(is_deleted, false)

)

select * from fields
),  __dbt__CTE__stg_stripe_charge as (
with charge as (

    select *
    from `dbt-package-testing`.`stripe`.`charge`

), fields as (

    select 
      id as charge_id, 
      amount,
      amount_refunded,
      application_fee_amount,
      balance_transaction_id,
      captured as is_captured,
      card_id,
      created as created_at,
      customer_id,
      currency,
      description,
      failure_code,
      failure_message,
      paid as is_paid,
      payment_intent_id,
      receipt_email,
      receipt_number,
      refunded as is_refunded,
      status,
      invoice_id
    from charge
    
)

select *
from fields
),  __dbt__CTE__stg_stripe_invoice_line_item as (


with invoice_line_item as (

    select *
    from `dbt-package-testing`.`stripe`.`invoice_line_item`

), fields as (

    select
      id as invoice_line_item_id,
      invoice_id,
      amount,
      currency,
      description,
      discountable as is_discountable,
      plan_id,
      proration,
      quantity,
      subscription_id,
      subscription_item_id,
      type,
      unique_id
    from invoice_line_item
    where id not like 'sub%'

)

select * from fields
),  __dbt__CTE__stg_stripe_subscription as (


with subscription as (

    select *
    from `dbt-package-testing`.`stripe`.`subscription`

), fields as (

    select
      id as subscription_id,
      status,
      billing,
      billing_cycle_anchor,
      cancel_at,
      cancel_at_period_end,
      canceled_at,
      created as created_at,
      current_period_start,
      current_period_end,
      customer_id,
      days_until_due,
      start_date,
      ended_at
    from subscription

)

select * from fields
),  __dbt__CTE__stg_stripe_customer as (
with customer as (

    select *
    from `dbt-package-testing`.`stripe`.`customer`

), fields as (

    select 
      id as customer_id,
      account_balance,
      created as created_at,
      currency,
      default_card_id,
      delinquent as is_deliguent,
      description,
      email,
      shipping_address_city,
      shipping_address_country,
      shipping_address_line_1,
      shipping_address_line_2,
      shipping_address_postal_code,
      shipping_address_state,
      shipping_name,
      shipping_phone
    from customer
    where not is_deleted

)

select *
from fields
),invoice as (

    select *
    from __dbt__CTE__stg_stripe_invoice  

), charge as (

    select *
    from __dbt__CTE__stg_stripe_charge  

), invoice_line_item as (

    select *
    from __dbt__CTE__stg_stripe_invoice_line_item  

), subscription as (

    select *
    from __dbt__CTE__stg_stripe_subscription  

), customer as (

    select *
    from __dbt__CTE__stg_stripe_customer  

), line_items_groups as (

  select
    invoice.invoice_id,
    invoice.amount_due,
    invoice.amount_paid,
    invoice.amount_remaining,
    invoice.created_at,
    max(invoice_line_item.subscription_id) as subscription_id,
    sum(invoice_line_item.amount) as total_item_amount,
    count(distinct invoice_line_item.unique_id) as number_line_items
  from invoice_line_item
  join invoice on invoice.invoice_id = invoice_line_item.invoice_id
  group by 1, 2, 3, 4, 5

), grouped_by_subcription as (

  select
    subscription_id,
    count(distinct invoice_id) as number_invoices_generated,
    sum(amount_due) as total_amount_billed,
    sum(amount_paid) as total_amount_paid,
    sum(amount_remaining) total_amount_remaining,
    max(created_at) as most_recent_invoice_created_at,
    avg(amount_due) as average_invoice_amount,
    avg(total_item_amount) as average_line_item_amount,
    avg(number_line_items) as avg_num_invoice_items
  from line_items_groups
  group by 1

)


select
  subscription.subscription_id,
  subscription.customer_id,
  customer.description as customer_description,
  customer.email as customer_email,
  subscription.status,
  subscription.start_date,
  subscription.ended_at,
  subscription.billing,
  subscription.billing_cycle_anchor,
  subscription.canceled_at,
  subscription.created_at,
  subscription.current_period_start,
  subscription.current_period_end,
  subscription.days_until_due,
  subscription.cancel_at_period_end,
  subscription.cancel_at,
  number_invoices_generated,
  total_amount_billed,
  total_amount_paid,
  total_amount_remaining,
  most_recent_invoice_created_at,
  average_invoice_amount,
  average_line_item_amount,
  avg_num_invoice_items
from subscription
left join grouped_by_subcription on subscription.subscription_id = grouped_by_subcription.subscription_id
left join customer on subscription.customer_id = customer.customer_id
order by subscription.created_at desc
  );
    
2020-07-14 22:09:50.351932 (Thread-1): finished collecting timing info
2020-07-14 22:09:50.386056 (Thread-1): Writing runtime SQL for node "model.stripe.stripe_balance_transactions"
2020-07-14 22:09:50.422293 (Thread-1): On model.stripe.stripe_balance_transactions: /* {"app": "dbt", "dbt_version": "0.17.0rc1", "profile_name": "integration_test", "target_name": "dev_bigquery_dbt_testing", "node_id": "model.stripe.stripe_balance_transactions"} */


  create or replace table `dbt-package-testing`.`dbt_kristin`.`stripe_balance_transactions`
  
  
  OPTIONS()
  as (
    with  __dbt__CTE__stg_stripe_balance_transaction as (
with balance_transaction as (

    select *
    from `dbt-package-testing`.`stripe`.`balance_transaction`

), fields as (

    select 
      id as balance_transaction_id,
      amount,
      available_on,
      created as created_at,
      currency,
      description,
      exchange_rate,
      fee,
      net,
      source,
      status,
      type
    from balance_transaction
)

select *
from fields
),  __dbt__CTE__stg_stripe_charge as (
with charge as (

    select *
    from `dbt-package-testing`.`stripe`.`charge`

), fields as (

    select 
      id as charge_id, 
      amount,
      amount_refunded,
      application_fee_amount,
      balance_transaction_id,
      captured as is_captured,
      card_id,
      created as created_at,
      customer_id,
      currency,
      description,
      failure_code,
      failure_message,
      paid as is_paid,
      payment_intent_id,
      receipt_email,
      receipt_number,
      refunded as is_refunded,
      status,
      invoice_id
    from charge
    
)

select *
from fields
),  __dbt__CTE__stg_stripe_payment_intent as (
with payment_intent as (

    select *
    from `dbt-package-testing`.`stripe`.`payment_intent`

), fields as (

    select 
      id as payment_intent_id,
      amount,
      amount_capturable,
      amount_received,
      application,
      application_fee_amount,
      canceled_at,
      cancellation_reason,
      capture_method,
      confirmation_method,
      created as created_at,
      currency,
      customer_id,
      description,
      payment_method_id,
      receipt_email,
      statement_descriptor,
      status
    from payment_intent

)

select *
from fields
),  __dbt__CTE__stg_stripe_payment_method as (
with payment_method as (

    select *
    from `dbt-package-testing`.`stripe`.`payment_method`

), fields as (

    select 
      id as payment_method_id,
      created as created_at,
      customer_id,
      type
    from payment_method
    where not is_deleted

)

select *
from fields
),  __dbt__CTE__stg_stripe_card as (
with card as (

    select *
    from `dbt-package-testing`.`stripe`.`card`

), fields as (

    select 
      id as card_id,
      brand,
      country,
      created as created_at,
      customer_id,
      name,
      recipient,
      funding
    from card
    where not coalesce(is_deleted, false)

)

select *
from fields
),  __dbt__CTE__stg_stripe_payout as (
with payout as (

    select *
    from `dbt-package-testing`.`stripe`.`payout`

), fields as (

    select 
      id as payout_id,
      amount,
      arrival_date,
      automatic as is_automatic,
      balance_transaction_id,
      created as created_at,
      currency,
      description,
      method,
      source_type,
      status,
      type
    from payout

)

select *
from fields
),  __dbt__CTE__stg_stripe_refund as (
with refund as (

    select *
    from `dbt-package-testing`.`stripe`.`refund`

), fields as (

    select 
      id as refund_id,
      amount,
      balance_transaction_id,
      charge_id,
      created as created_at,
      currency,
      description,
      reason,
      receipt_number,
      status
    from refund

)

select *
from fields
),  __dbt__CTE__stg_stripe_customer as (
with customer as (

    select *
    from `dbt-package-testing`.`stripe`.`customer`

), fields as (

    select 
      id as customer_id,
      account_balance,
      created as created_at,
      currency,
      default_card_id,
      delinquent as is_deliguent,
      description,
      email,
      shipping_address_city,
      shipping_address_country,
      shipping_address_line_1,
      shipping_address_line_2,
      shipping_address_postal_code,
      shipping_address_state,
      shipping_name,
      shipping_phone
    from customer
    where not is_deleted

)

select *
from fields
),  __dbt__CTE__stripe_balance_transaction_joined as (
with balance_transaction as (

    select *
    from __dbt__CTE__stg_stripe_balance_transaction
  
), charge as (

    select *
    from __dbt__CTE__stg_stripe_charge

), payment_intent as (

    select *
    from __dbt__CTE__stg_stripe_payment_intent

), payment_method as (

    select *
    from __dbt__CTE__stg_stripe_payment_method

), card as (

    select *
    from __dbt__CTE__stg_stripe_card

), payout as (

    select *
    from __dbt__CTE__stg_stripe_payout

), refund as (

    select *
    from __dbt__CTE__stg_stripe_refund

), customer as (

    select *
    from __dbt__CTE__stg_stripe_customer


)

select 
  balance_transaction.balance_transaction_id,
  balance_transaction.created_at,
  balance_transaction.available_on,
  balance_transaction.currency,
  balance_transaction.amount,
  balance_transaction.fee,
  balance_transaction.net,
  balance_transaction.type,
  case
    when balance_transaction.type in ('charge', 'payment') then 'charge'
    when balance_transaction.type in ('refund', 'payment_refund') then 'refund'
    when balance_transaction.type in ('payout_cancel', 'payout_failure')	then 'payout_reversal'
    when balance_transaction.type in ('transfer', 'recipient_transfer') then	'transfer'
    when balance_transaction.type in ('transfer_cancel', 'transfer_failure', 'recipient_transfer_cancel', 'recipient_transfer_failure') then 'transfer_reversal'
    else balance_transaction.type
  end as reporting_category,
  balance_transaction.source,
  balance_transaction.description,
  case when balance_transaction.type = 'charge' then charge.amount end as customer_facing_amount, --think this might be the charge amount/currency
  case when balance_transaction.type = 'charge' then charge.currency end as customer_facing_currency,
  date_add(date(balance_transaction.available_on), interval 1 day) as effective_at,
  coalesce(charge.customer_id, refund_charge.customer_id) as customer_id,
  charge.receipt_email,
  customer.description as customer_description,
  charge.charge_id,
  charge.payment_intent_id,
  charge.created_at as charge_created_at,
  payment_method.type as payment_method_type,
  card.brand as card_brand,
  card.funding as card_funding,
  card.country as card_country,
  payout.payout_id,
  payout.arrival_date as payout_expeted_arrival_date,
  payout.status as payout_status,
  payout.type as payout_type,
  payout.description as payout_description,
  refund.reason as refund_reason
from balance_transaction
left join charge on charge.balance_transaction_id = balance_transaction.balance_transaction_id
left join customer on charge.customer_id = customer.customer_id
left join payment_intent on charge.payment_intent_id = payment_intent.payment_intent_id
left join payment_method on payment_intent.payment_method_id = payment_method.payment_method_id
left join card on charge.card_id = card.card_id
left join payout on payout.balance_transaction_id = balance_transaction.balance_transaction_id
left join refund on refund.balance_transaction_id = balance_transaction.balance_transaction_id
left join charge as refund_charge on refund.charge_id = refund_charge.charge_id
order by created_at desc
),balance_transaction_joined as (

    select *
    from __dbt__CTE__stripe_balance_transaction_joined  

)

select 
  balance_transaction_id,
  created_at,
  available_on,
  currency,
  amount,
  fee,
  net,
  type,
  reporting_category,
  source,
  description,
  customer_facing_amount,
  customer_facing_currency,
  effective_at,
  customer_id,
  receipt_email,
  customer_description,
  charge_id,
  payment_intent_id,
  charge_created_at,
  payment_method_type,
  card_brand,
  card_funding,
  card_country,
  payout_id,
  payout_expeted_arrival_date,
  payout_status,
  payout_type,
  payout_description,
  refund_reason
from balance_transaction_joined
  );
    
2020-07-14 22:09:50.430632 (Thread-2): Writing injected SQL for node "model.stripe.stripe_customer_overview"
2020-07-14 22:09:50.432856 (Thread-2): finished collecting timing info
2020-07-14 22:09:50.463033 (Thread-2): Writing runtime SQL for node "model.stripe.stripe_customer_overview"
2020-07-14 22:09:50.464328 (Thread-2): On model.stripe.stripe_customer_overview: /* {"app": "dbt", "dbt_version": "0.17.0rc1", "profile_name": "integration_test", "target_name": "dev_bigquery_dbt_testing", "node_id": "model.stripe.stripe_customer_overview"} */


  create or replace table `dbt-package-testing`.`dbt_kristin`.`stripe_customer_overview`
  
  
  OPTIONS()
  as (
    with  __dbt__CTE__stg_stripe_balance_transaction as (
with balance_transaction as (

    select *
    from `dbt-package-testing`.`stripe`.`balance_transaction`

), fields as (

    select 
      id as balance_transaction_id,
      amount,
      available_on,
      created as created_at,
      currency,
      description,
      exchange_rate,
      fee,
      net,
      source,
      status,
      type
    from balance_transaction
)

select *
from fields
),  __dbt__CTE__stg_stripe_charge as (
with charge as (

    select *
    from `dbt-package-testing`.`stripe`.`charge`

), fields as (

    select 
      id as charge_id, 
      amount,
      amount_refunded,
      application_fee_amount,
      balance_transaction_id,
      captured as is_captured,
      card_id,
      created as created_at,
      customer_id,
      currency,
      description,
      failure_code,
      failure_message,
      paid as is_paid,
      payment_intent_id,
      receipt_email,
      receipt_number,
      refunded as is_refunded,
      status,
      invoice_id
    from charge
    
)

select *
from fields
),  __dbt__CTE__stg_stripe_payment_intent as (
with payment_intent as (

    select *
    from `dbt-package-testing`.`stripe`.`payment_intent`

), fields as (

    select 
      id as payment_intent_id,
      amount,
      amount_capturable,
      amount_received,
      application,
      application_fee_amount,
      canceled_at,
      cancellation_reason,
      capture_method,
      confirmation_method,
      created as created_at,
      currency,
      customer_id,
      description,
      payment_method_id,
      receipt_email,
      statement_descriptor,
      status
    from payment_intent

)

select *
from fields
),  __dbt__CTE__stg_stripe_payment_method as (
with payment_method as (

    select *
    from `dbt-package-testing`.`stripe`.`payment_method`

), fields as (

    select 
      id as payment_method_id,
      created as created_at,
      customer_id,
      type
    from payment_method
    where not is_deleted

)

select *
from fields
),  __dbt__CTE__stg_stripe_card as (
with card as (

    select *
    from `dbt-package-testing`.`stripe`.`card`

), fields as (

    select 
      id as card_id,
      brand,
      country,
      created as created_at,
      customer_id,
      name,
      recipient,
      funding
    from card
    where not coalesce(is_deleted, false)

)

select *
from fields
),  __dbt__CTE__stg_stripe_payout as (
with payout as (

    select *
    from `dbt-package-testing`.`stripe`.`payout`

), fields as (

    select 
      id as payout_id,
      amount,
      arrival_date,
      automatic as is_automatic,
      balance_transaction_id,
      created as created_at,
      currency,
      description,
      method,
      source_type,
      status,
      type
    from payout

)

select *
from fields
),  __dbt__CTE__stg_stripe_refund as (
with refund as (

    select *
    from `dbt-package-testing`.`stripe`.`refund`

), fields as (

    select 
      id as refund_id,
      amount,
      balance_transaction_id,
      charge_id,
      created as created_at,
      currency,
      description,
      reason,
      receipt_number,
      status
    from refund

)

select *
from fields
),  __dbt__CTE__stg_stripe_customer as (
with customer as (

    select *
    from `dbt-package-testing`.`stripe`.`customer`

), fields as (

    select 
      id as customer_id,
      account_balance,
      created as created_at,
      currency,
      default_card_id,
      delinquent as is_deliguent,
      description,
      email,
      shipping_address_city,
      shipping_address_country,
      shipping_address_line_1,
      shipping_address_line_2,
      shipping_address_postal_code,
      shipping_address_state,
      shipping_name,
      shipping_phone
    from customer
    where not is_deleted

)

select *
from fields
),  __dbt__CTE__stripe_balance_transaction_joined as (
with balance_transaction as (

    select *
    from __dbt__CTE__stg_stripe_balance_transaction
  
), charge as (

    select *
    from __dbt__CTE__stg_stripe_charge

), payment_intent as (

    select *
    from __dbt__CTE__stg_stripe_payment_intent

), payment_method as (

    select *
    from __dbt__CTE__stg_stripe_payment_method

), card as (

    select *
    from __dbt__CTE__stg_stripe_card

), payout as (

    select *
    from __dbt__CTE__stg_stripe_payout

), refund as (

    select *
    from __dbt__CTE__stg_stripe_refund

), customer as (

    select *
    from __dbt__CTE__stg_stripe_customer


)

select 
  balance_transaction.balance_transaction_id,
  balance_transaction.created_at,
  balance_transaction.available_on,
  balance_transaction.currency,
  balance_transaction.amount,
  balance_transaction.fee,
  balance_transaction.net,
  balance_transaction.type,
  case
    when balance_transaction.type in ('charge', 'payment') then 'charge'
    when balance_transaction.type in ('refund', 'payment_refund') then 'refund'
    when balance_transaction.type in ('payout_cancel', 'payout_failure')	then 'payout_reversal'
    when balance_transaction.type in ('transfer', 'recipient_transfer') then	'transfer'
    when balance_transaction.type in ('transfer_cancel', 'transfer_failure', 'recipient_transfer_cancel', 'recipient_transfer_failure') then 'transfer_reversal'
    else balance_transaction.type
  end as reporting_category,
  balance_transaction.source,
  balance_transaction.description,
  case when balance_transaction.type = 'charge' then charge.amount end as customer_facing_amount, --think this might be the charge amount/currency
  case when balance_transaction.type = 'charge' then charge.currency end as customer_facing_currency,
  date_add(date(balance_transaction.available_on), interval 1 day) as effective_at,
  coalesce(charge.customer_id, refund_charge.customer_id) as customer_id,
  charge.receipt_email,
  customer.description as customer_description,
  charge.charge_id,
  charge.payment_intent_id,
  charge.created_at as charge_created_at,
  payment_method.type as payment_method_type,
  card.brand as card_brand,
  card.funding as card_funding,
  card.country as card_country,
  payout.payout_id,
  payout.arrival_date as payout_expeted_arrival_date,
  payout.status as payout_status,
  payout.type as payout_type,
  payout.description as payout_description,
  refund.reason as refund_reason
from balance_transaction
left join charge on charge.balance_transaction_id = balance_transaction.balance_transaction_id
left join customer on charge.customer_id = customer.customer_id
left join payment_intent on charge.payment_intent_id = payment_intent.payment_intent_id
left join payment_method on payment_intent.payment_method_id = payment_method.payment_method_id
left join card on charge.card_id = card.card_id
left join payout on payout.balance_transaction_id = balance_transaction.balance_transaction_id
left join refund on refund.balance_transaction_id = balance_transaction.balance_transaction_id
left join charge as refund_charge on refund.charge_id = refund_charge.charge_id
order by created_at desc
),  __dbt__CTE__stripe_incomplete_charges as (
with charge as (

    select *
    from __dbt__CTE__stg_stripe_charge

)

select 
  created_at,
  customer_id,
  amount
from charge
where not is_captured
),balance_transaction_joined as (

    select *
    from __dbt__CTE__stripe_balance_transaction_joined  

), incomplete_charges as (

    select *
    from __dbt__CTE__stripe_incomplete_charges  

), customer as (

    select *
    from __dbt__CTE__stg_stripe_customer  

), transactions_grouped as (
 
    select
      customer_id,
      sum(if(type in ('charge', 'payment'), amount, 0)) as total_sales,
      sum(if(type in ('payment_refund', 'refund'), amount, 0)) as total_refunds,
      sum(amount) as total_gross_transaction_amount,
      sum(fee) as total_fees,
      sum(net) as total_net_transaction_amount,
      sum(if(type in ('payment', 'charge'), 1, 0)) as total_sales_count,
      sum(if(type in ('payment_refund', 'refund'), 1, 0)) as total_refund_count,    
      sum(if(type in ('charge', 'payment') and date_trunc(date(created_at), month) = date_trunc(current_date(), month),amount, 0)) as sales_this_month,
      sum(if(type in ('payment_refund', 'refund') and date_trunc(date(created_at), month) = date_trunc(current_date(), month), amount, 0)) as refunds_this_month,
      sum(if(date_trunc(date(created_at), month) = date_trunc(current_date(), month), amount, 0)) as gross_transaction_amount_this_month,
      sum(if(date_trunc(date(created_at), month) = date_trunc(current_date(), month), fee, 0)) as fees_this_month,
      sum(if(date_trunc(date(created_at), month) = date_trunc(current_date(), month), net, 0)) as net_transaction_amount_this_month,
      sum(if(type in ('payment', 'charge') and date_trunc(date(created_at), month) = date_trunc(current_date(), month) , 1, 0)) as sales_count_this_month,
      sum(if(type in ('payment_refund', 'refund') and date_trunc(date(created_at), month) = date_trunc(current_date(), month) , 1, 0)) as refund_count_this_month,
      min(if(type in ('payment', 'charge'), date(created_at), null)) as first_sale_date,
      max(if(type in ('payment', 'charge'), date(created_at), null)) as most_recent_sale_date
    from balance_transaction_joined
      where type in ('payment', 'charge', 'payment_refund', 'refund')
    group by 1

), failed_charges_by_customer as (

    select
      customer_id,
      count(*) as total_failed_charge_count,
      sum(amount) as total_failed_charge_amount,
      sum(if(date_trunc(date(created_at), month) = date_trunc(current_date(), month), 1, 0)) as failed_charge_count_this_month,
      sum(if(date_trunc(date(created_at), month) = date_trunc(current_date(), month), amount, 0)) as failed_charge_amount_this_month
    from incomplete_charges
    group by 1

)

select
  coalesce(customer.description, customer.customer_id, 'No associated customer') as customer_description,
  customer.email,
  customer.created_at as customer_created_at,
  customer.is_deliguent,
  coalesce(transactions_grouped.total_sales/100.0, 0) as total_sales,
  coalesce(transactions_grouped.total_refunds/100.0, 0) as total_refunds,
  coalesce(transactions_grouped.total_gross_transaction_amount/100.0, 0) as total_gross_transcation_amount,
  coalesce(transactions_grouped.total_fees/100.0, 0) as total_fees,
  coalesce(transactions_grouped.total_net_transaction_amount/100.0, 0) as total_net_trasnaction_amount,
  coalesce(transactions_grouped.total_sales_count, 0) as total_sales_count,
  coalesce(transactions_grouped.total_refund_count, 0) as total_refund_count,    
  coalesce(transactions_grouped.sales_this_month/100.0, 0) as sales_this_month,
  coalesce(transactions_grouped.refunds_this_month/100.0, 0) as refunds_this_month,
  coalesce(transactions_grouped.gross_transaction_amount_this_month/100.0, 0) as gross_transaction_amount_this_month,
  coalesce(transactions_grouped.fees_this_month/100.0, 0) as fees_this_month,
  coalesce(transactions_grouped.net_transaction_amount_this_month/100.0, 0) as net_transaction_amount_this_month,
  coalesce(transactions_grouped.sales_count_this_month, 0) as sales_count_this_month,
  coalesce(transactions_grouped.refund_count_this_month, 0) as refund_count_this_month,
  transactions_grouped.first_sale_date,
  transactions_grouped.most_recent_sale_date,
  coalesce(total_failed_charge_count, 0) as total_failed_charge_count,
  coalesce(total_failed_charge_amount/100, 0) as total_failed_charge_amount,
  coalesce(failed_charge_count_this_month, 0) as failed_charge_count_this_month,
  coalesce(failed_charge_amount_this_month/100, 0) as failed_charge_amount_this_month,
  customer.currency as customer_currency,
  customer.default_card_id,
  customer.shipping_name,
  customer.shipping_address_line_1,
  customer.shipping_address_line_2,
  customer.shipping_address_city,
  customer.shipping_address_state,
  customer.shipping_address_country,
  customer.shipping_address_postal_code,
  customer.shipping_phone
from customer
left join transactions_grouped on transactions_grouped.customer_id = customer.customer_id
left join failed_charges_by_customer on customer.customer_id = failed_charges_by_customer.customer_id
  );
    
2020-07-14 22:09:52.877736 (Thread-3): finished collecting timing info
2020-07-14 22:09:52.878506 (Thread-3): Sending event: {'category': 'dbt', 'action': 'run_model', 'label': '8f5f9874-ebdf-4d4a-9444-dfc5e9d79a41', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x10ce0e880>]}
2020-07-14 22:09:52.878820 (Thread-3): 15:09:52 | 1 of 8 OK created table model dbt_kristin.stripe_invoice_details..... [CREATE TABLE (494) in 2.71s]
2020-07-14 22:09:52.878966 (Thread-3): Finished running node model.stripe.stripe_invoice_details
2020-07-14 22:09:52.879118 (Thread-3): Began running node model.stripe.stripe_daily_overview
2020-07-14 22:09:52.879372 (Thread-3): 15:09:52 | 5 of 8 START table model dbt_kristin.stripe_daily_overview........... [RUN]
2020-07-14 22:09:52.879672 (Thread-3): Acquiring new bigquery connection "model.stripe.stripe_daily_overview".
2020-07-14 22:09:52.879772 (Thread-3): Re-using an available connection from the pool (formerly model.stripe.stripe_invoice_details).
2020-07-14 22:09:52.879872 (Thread-3): Compiling model.stripe.stripe_daily_overview
2020-07-14 22:09:52.927091 (Thread-3): Writing injected SQL for node "model.stripe.stripe_daily_overview"
2020-07-14 22:09:52.927506 (Thread-3): finished collecting timing info
2020-07-14 22:09:52.932333 (Thread-3): Writing runtime SQL for node "model.stripe.stripe_daily_overview"
2020-07-14 22:09:52.932655 (Thread-3): On model.stripe.stripe_daily_overview: /* {"app": "dbt", "dbt_version": "0.17.0rc1", "profile_name": "integration_test", "target_name": "dev_bigquery_dbt_testing", "node_id": "model.stripe.stripe_daily_overview"} */


  create or replace table `dbt-package-testing`.`dbt_kristin`.`stripe_daily_overview`
  
  
  OPTIONS()
  as (
    with  __dbt__CTE__stg_stripe_balance_transaction as (
with balance_transaction as (

    select *
    from `dbt-package-testing`.`stripe`.`balance_transaction`

), fields as (

    select 
      id as balance_transaction_id,
      amount,
      available_on,
      created as created_at,
      currency,
      description,
      exchange_rate,
      fee,
      net,
      source,
      status,
      type
    from balance_transaction
)

select *
from fields
),  __dbt__CTE__stg_stripe_charge as (
with charge as (

    select *
    from `dbt-package-testing`.`stripe`.`charge`

), fields as (

    select 
      id as charge_id, 
      amount,
      amount_refunded,
      application_fee_amount,
      balance_transaction_id,
      captured as is_captured,
      card_id,
      created as created_at,
      customer_id,
      currency,
      description,
      failure_code,
      failure_message,
      paid as is_paid,
      payment_intent_id,
      receipt_email,
      receipt_number,
      refunded as is_refunded,
      status,
      invoice_id
    from charge
    
)

select *
from fields
),  __dbt__CTE__stg_stripe_payment_intent as (
with payment_intent as (

    select *
    from `dbt-package-testing`.`stripe`.`payment_intent`

), fields as (

    select 
      id as payment_intent_id,
      amount,
      amount_capturable,
      amount_received,
      application,
      application_fee_amount,
      canceled_at,
      cancellation_reason,
      capture_method,
      confirmation_method,
      created as created_at,
      currency,
      customer_id,
      description,
      payment_method_id,
      receipt_email,
      statement_descriptor,
      status
    from payment_intent

)

select *
from fields
),  __dbt__CTE__stg_stripe_payment_method as (
with payment_method as (

    select *
    from `dbt-package-testing`.`stripe`.`payment_method`

), fields as (

    select 
      id as payment_method_id,
      created as created_at,
      customer_id,
      type
    from payment_method
    where not is_deleted

)

select *
from fields
),  __dbt__CTE__stg_stripe_card as (
with card as (

    select *
    from `dbt-package-testing`.`stripe`.`card`

), fields as (

    select 
      id as card_id,
      brand,
      country,
      created as created_at,
      customer_id,
      name,
      recipient,
      funding
    from card
    where not coalesce(is_deleted, false)

)

select *
from fields
),  __dbt__CTE__stg_stripe_payout as (
with payout as (

    select *
    from `dbt-package-testing`.`stripe`.`payout`

), fields as (

    select 
      id as payout_id,
      amount,
      arrival_date,
      automatic as is_automatic,
      balance_transaction_id,
      created as created_at,
      currency,
      description,
      method,
      source_type,
      status,
      type
    from payout

)

select *
from fields
),  __dbt__CTE__stg_stripe_refund as (
with refund as (

    select *
    from `dbt-package-testing`.`stripe`.`refund`

), fields as (

    select 
      id as refund_id,
      amount,
      balance_transaction_id,
      charge_id,
      created as created_at,
      currency,
      description,
      reason,
      receipt_number,
      status
    from refund

)

select *
from fields
),  __dbt__CTE__stg_stripe_customer as (
with customer as (

    select *
    from `dbt-package-testing`.`stripe`.`customer`

), fields as (

    select 
      id as customer_id,
      account_balance,
      created as created_at,
      currency,
      default_card_id,
      delinquent as is_deliguent,
      description,
      email,
      shipping_address_city,
      shipping_address_country,
      shipping_address_line_1,
      shipping_address_line_2,
      shipping_address_postal_code,
      shipping_address_state,
      shipping_name,
      shipping_phone
    from customer
    where not is_deleted

)

select *
from fields
),  __dbt__CTE__stripe_balance_transaction_joined as (
with balance_transaction as (

    select *
    from __dbt__CTE__stg_stripe_balance_transaction
  
), charge as (

    select *
    from __dbt__CTE__stg_stripe_charge

), payment_intent as (

    select *
    from __dbt__CTE__stg_stripe_payment_intent

), payment_method as (

    select *
    from __dbt__CTE__stg_stripe_payment_method

), card as (

    select *
    from __dbt__CTE__stg_stripe_card

), payout as (

    select *
    from __dbt__CTE__stg_stripe_payout

), refund as (

    select *
    from __dbt__CTE__stg_stripe_refund

), customer as (

    select *
    from __dbt__CTE__stg_stripe_customer


)

select 
  balance_transaction.balance_transaction_id,
  balance_transaction.created_at,
  balance_transaction.available_on,
  balance_transaction.currency,
  balance_transaction.amount,
  balance_transaction.fee,
  balance_transaction.net,
  balance_transaction.type,
  case
    when balance_transaction.type in ('charge', 'payment') then 'charge'
    when balance_transaction.type in ('refund', 'payment_refund') then 'refund'
    when balance_transaction.type in ('payout_cancel', 'payout_failure')	then 'payout_reversal'
    when balance_transaction.type in ('transfer', 'recipient_transfer') then	'transfer'
    when balance_transaction.type in ('transfer_cancel', 'transfer_failure', 'recipient_transfer_cancel', 'recipient_transfer_failure') then 'transfer_reversal'
    else balance_transaction.type
  end as reporting_category,
  balance_transaction.source,
  balance_transaction.description,
  case when balance_transaction.type = 'charge' then charge.amount end as customer_facing_amount, --think this might be the charge amount/currency
  case when balance_transaction.type = 'charge' then charge.currency end as customer_facing_currency,
  date_add(date(balance_transaction.available_on), interval 1 day) as effective_at,
  coalesce(charge.customer_id, refund_charge.customer_id) as customer_id,
  charge.receipt_email,
  customer.description as customer_description,
  charge.charge_id,
  charge.payment_intent_id,
  charge.created_at as charge_created_at,
  payment_method.type as payment_method_type,
  card.brand as card_brand,
  card.funding as card_funding,
  card.country as card_country,
  payout.payout_id,
  payout.arrival_date as payout_expeted_arrival_date,
  payout.status as payout_status,
  payout.type as payout_type,
  payout.description as payout_description,
  refund.reason as refund_reason
from balance_transaction
left join charge on charge.balance_transaction_id = balance_transaction.balance_transaction_id
left join customer on charge.customer_id = customer.customer_id
left join payment_intent on charge.payment_intent_id = payment_intent.payment_intent_id
left join payment_method on payment_intent.payment_method_id = payment_method.payment_method_id
left join card on charge.card_id = card.card_id
left join payout on payout.balance_transaction_id = balance_transaction.balance_transaction_id
left join refund on refund.balance_transaction_id = balance_transaction.balance_transaction_id
left join charge as refund_charge on refund.charge_id = refund_charge.charge_id
order by created_at desc
),  __dbt__CTE__stripe_incomplete_charges as (
with charge as (

    select *
    from __dbt__CTE__stg_stripe_charge

)

select 
  created_at,
  customer_id,
  amount
from charge
where not is_captured
),balance_transaction_joined as (

    select *
    from __dbt__CTE__stripe_balance_transaction_joined  

), incomplete_charges as (

    select *
    from __dbt__CTE__stripe_incomplete_charges  

), daily_balance_transactions as (

  select
    date(case when type = 'payout' then available_on else created_at end) as date,
    sum(case when type in ('charge', 'payment') then amount else 0 end) as total_sales,
    sum(case when type in ('payment_refund', 'refund') then amount else 0 end) as total_refunds,
    sum(case when type = 'adjustment' then amount else 0 end) as total_adjustments,
    sum(case when type not in ('charge', 'payment', 'payment_refund', 'refund', 'adjustment', 'payout') and type not like '%transfer%' then amount else 0 end) as total_other_transactions,
    sum(case when type <> 'payout' and type not like '%transfer%' then amount else 0 end) as total_gross_transaction_amount,
    sum(case when type <> 'payout' and type not like '%transfer%' then net else 0 end) as total_net_tranactions,
    sum(case when type = 'payout' or type like '%transfer%' then fee * -1.0 else 0 end) as total_payout_fees,
    sum(case when type = 'payout' or type like '%transfer%' then amount else 0 end) as total_gross_payout_amount,
    sum(case when type = 'payout' or type like '%transfer%' then fee * -1.0 else net end) as daily_net_activity,
    sum(if(type in ('payment', 'charge'), 1, 0)) as total_sales_count,
    sum(if(type = 'payout', 1, 0)) as total_payouts_count,
    count(distinct case when type = 'adjustment' then coalesce(source, payout_id) end) as total_adjustments_count
  from balance_transaction_joined
  group by 1

), daily_failed_charges as (

    select
      date(created_at) as date,
      count(*) as total_failed_charge_count,
      sum(amount) as total_failed_charge_amount
    from incomplete_charges
    group by 1

)

select
  daily_balance_transactions.date,
  daily_balance_transactions.total_sales/100.0 as total_sales,
  daily_balance_transactions.total_refunds/100.0 as total_refunds,
  daily_balance_transactions.total_adjustments/100.0 as total_adjustments,
  daily_balance_transactions.total_other_transactions/100.0 as total_other_transactions,
  daily_balance_transactions.total_gross_transaction_amount/100.0 as total_gross_transaction_amount,
  daily_balance_transactions.total_net_tranactions/100.0 as total_net_tranactions,
  daily_balance_transactions.total_payout_fees/100.0 as total_payout_fees,
  daily_balance_transactions.total_gross_payout_amount/100.0 as total_gross_payout_amount,
  daily_balance_transactions.daily_net_activity/100.0 as daily_net_activity,
  (daily_balance_transactions.daily_net_activity + daily_balance_transactions.total_gross_payout_amount)/100.0 as daily_end_balance,
  daily_balance_transactions.total_sales_count,
  daily_balance_transactions.total_payouts_count,
  daily_balance_transactions.total_adjustments_count,
  coalesce(daily_failed_charges.total_failed_charge_count, 0) as total_failed_charge_count,
  coalesce(daily_failed_charges.total_failed_charge_amount/100, 0) as total_failed_charge_amount
from daily_balance_transactions
left join daily_failed_charges on daily_balance_transactions.date = daily_failed_charges.date
order by 1 desc
  );
    
2020-07-14 22:09:53.145226 (Thread-1): finished collecting timing info
2020-07-14 22:09:53.146025 (Thread-1): Sending event: {'category': 'dbt', 'action': 'run_model', 'label': '8f5f9874-ebdf-4d4a-9444-dfc5e9d79a41', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x10ce001c0>]}
2020-07-14 22:09:53.146329 (Thread-1): 15:09:53 | 3 of 8 OK created table model dbt_kristin.stripe_balance_transactions [CREATE TABLE (2124) in 2.83s]
2020-07-14 22:09:53.146488 (Thread-1): Finished running node model.stripe.stripe_balance_transactions
2020-07-14 22:09:53.146654 (Thread-1): Began running node model.stripe.stripe_monthly_overview
2020-07-14 22:09:53.146941 (Thread-1): 15:09:53 | 6 of 8 START table model dbt_kristin.stripe_monthly_overview......... [RUN]
2020-07-14 22:09:53.147197 (Thread-1): Acquiring new bigquery connection "model.stripe.stripe_monthly_overview".
2020-07-14 22:09:53.147289 (Thread-1): Re-using an available connection from the pool (formerly model.stripe.stripe_balance_transactions).
2020-07-14 22:09:53.147380 (Thread-1): Compiling model.stripe.stripe_monthly_overview
2020-07-14 22:09:53.195512 (Thread-1): Writing injected SQL for node "model.stripe.stripe_monthly_overview"
2020-07-14 22:09:53.195937 (Thread-1): finished collecting timing info
2020-07-14 22:09:53.200640 (Thread-1): Writing runtime SQL for node "model.stripe.stripe_monthly_overview"
2020-07-14 22:09:53.200968 (Thread-1): On model.stripe.stripe_monthly_overview: /* {"app": "dbt", "dbt_version": "0.17.0rc1", "profile_name": "integration_test", "target_name": "dev_bigquery_dbt_testing", "node_id": "model.stripe.stripe_monthly_overview"} */


  create or replace table `dbt-package-testing`.`dbt_kristin`.`stripe_monthly_overview`
  
  
  OPTIONS()
  as (
    with  __dbt__CTE__stg_stripe_balance_transaction as (
with balance_transaction as (

    select *
    from `dbt-package-testing`.`stripe`.`balance_transaction`

), fields as (

    select 
      id as balance_transaction_id,
      amount,
      available_on,
      created as created_at,
      currency,
      description,
      exchange_rate,
      fee,
      net,
      source,
      status,
      type
    from balance_transaction
)

select *
from fields
),  __dbt__CTE__stg_stripe_charge as (
with charge as (

    select *
    from `dbt-package-testing`.`stripe`.`charge`

), fields as (

    select 
      id as charge_id, 
      amount,
      amount_refunded,
      application_fee_amount,
      balance_transaction_id,
      captured as is_captured,
      card_id,
      created as created_at,
      customer_id,
      currency,
      description,
      failure_code,
      failure_message,
      paid as is_paid,
      payment_intent_id,
      receipt_email,
      receipt_number,
      refunded as is_refunded,
      status,
      invoice_id
    from charge
    
)

select *
from fields
),  __dbt__CTE__stg_stripe_payment_intent as (
with payment_intent as (

    select *
    from `dbt-package-testing`.`stripe`.`payment_intent`

), fields as (

    select 
      id as payment_intent_id,
      amount,
      amount_capturable,
      amount_received,
      application,
      application_fee_amount,
      canceled_at,
      cancellation_reason,
      capture_method,
      confirmation_method,
      created as created_at,
      currency,
      customer_id,
      description,
      payment_method_id,
      receipt_email,
      statement_descriptor,
      status
    from payment_intent

)

select *
from fields
),  __dbt__CTE__stg_stripe_payment_method as (
with payment_method as (

    select *
    from `dbt-package-testing`.`stripe`.`payment_method`

), fields as (

    select 
      id as payment_method_id,
      created as created_at,
      customer_id,
      type
    from payment_method
    where not is_deleted

)

select *
from fields
),  __dbt__CTE__stg_stripe_card as (
with card as (

    select *
    from `dbt-package-testing`.`stripe`.`card`

), fields as (

    select 
      id as card_id,
      brand,
      country,
      created as created_at,
      customer_id,
      name,
      recipient,
      funding
    from card
    where not coalesce(is_deleted, false)

)

select *
from fields
),  __dbt__CTE__stg_stripe_payout as (
with payout as (

    select *
    from `dbt-package-testing`.`stripe`.`payout`

), fields as (

    select 
      id as payout_id,
      amount,
      arrival_date,
      automatic as is_automatic,
      balance_transaction_id,
      created as created_at,
      currency,
      description,
      method,
      source_type,
      status,
      type
    from payout

)

select *
from fields
),  __dbt__CTE__stg_stripe_refund as (
with refund as (

    select *
    from `dbt-package-testing`.`stripe`.`refund`

), fields as (

    select 
      id as refund_id,
      amount,
      balance_transaction_id,
      charge_id,
      created as created_at,
      currency,
      description,
      reason,
      receipt_number,
      status
    from refund

)

select *
from fields
),  __dbt__CTE__stg_stripe_customer as (
with customer as (

    select *
    from `dbt-package-testing`.`stripe`.`customer`

), fields as (

    select 
      id as customer_id,
      account_balance,
      created as created_at,
      currency,
      default_card_id,
      delinquent as is_deliguent,
      description,
      email,
      shipping_address_city,
      shipping_address_country,
      shipping_address_line_1,
      shipping_address_line_2,
      shipping_address_postal_code,
      shipping_address_state,
      shipping_name,
      shipping_phone
    from customer
    where not is_deleted

)

select *
from fields
),  __dbt__CTE__stripe_balance_transaction_joined as (
with balance_transaction as (

    select *
    from __dbt__CTE__stg_stripe_balance_transaction
  
), charge as (

    select *
    from __dbt__CTE__stg_stripe_charge

), payment_intent as (

    select *
    from __dbt__CTE__stg_stripe_payment_intent

), payment_method as (

    select *
    from __dbt__CTE__stg_stripe_payment_method

), card as (

    select *
    from __dbt__CTE__stg_stripe_card

), payout as (

    select *
    from __dbt__CTE__stg_stripe_payout

), refund as (

    select *
    from __dbt__CTE__stg_stripe_refund

), customer as (

    select *
    from __dbt__CTE__stg_stripe_customer


)

select 
  balance_transaction.balance_transaction_id,
  balance_transaction.created_at,
  balance_transaction.available_on,
  balance_transaction.currency,
  balance_transaction.amount,
  balance_transaction.fee,
  balance_transaction.net,
  balance_transaction.type,
  case
    when balance_transaction.type in ('charge', 'payment') then 'charge'
    when balance_transaction.type in ('refund', 'payment_refund') then 'refund'
    when balance_transaction.type in ('payout_cancel', 'payout_failure')	then 'payout_reversal'
    when balance_transaction.type in ('transfer', 'recipient_transfer') then	'transfer'
    when balance_transaction.type in ('transfer_cancel', 'transfer_failure', 'recipient_transfer_cancel', 'recipient_transfer_failure') then 'transfer_reversal'
    else balance_transaction.type
  end as reporting_category,
  balance_transaction.source,
  balance_transaction.description,
  case when balance_transaction.type = 'charge' then charge.amount end as customer_facing_amount, --think this might be the charge amount/currency
  case when balance_transaction.type = 'charge' then charge.currency end as customer_facing_currency,
  date_add(date(balance_transaction.available_on), interval 1 day) as effective_at,
  coalesce(charge.customer_id, refund_charge.customer_id) as customer_id,
  charge.receipt_email,
  customer.description as customer_description,
  charge.charge_id,
  charge.payment_intent_id,
  charge.created_at as charge_created_at,
  payment_method.type as payment_method_type,
  card.brand as card_brand,
  card.funding as card_funding,
  card.country as card_country,
  payout.payout_id,
  payout.arrival_date as payout_expeted_arrival_date,
  payout.status as payout_status,
  payout.type as payout_type,
  payout.description as payout_description,
  refund.reason as refund_reason
from balance_transaction
left join charge on charge.balance_transaction_id = balance_transaction.balance_transaction_id
left join customer on charge.customer_id = customer.customer_id
left join payment_intent on charge.payment_intent_id = payment_intent.payment_intent_id
left join payment_method on payment_intent.payment_method_id = payment_method.payment_method_id
left join card on charge.card_id = card.card_id
left join payout on payout.balance_transaction_id = balance_transaction.balance_transaction_id
left join refund on refund.balance_transaction_id = balance_transaction.balance_transaction_id
left join charge as refund_charge on refund.charge_id = refund_charge.charge_id
order by created_at desc
),  __dbt__CTE__stripe_incomplete_charges as (
with charge as (

    select *
    from __dbt__CTE__stg_stripe_charge

)

select 
  created_at,
  customer_id,
  amount
from charge
where not is_captured
),balance_transaction_joined as (

    select *
    from __dbt__CTE__stripe_balance_transaction_joined  

), incomplete_charges as (

    select *
    from __dbt__CTE__stripe_incomplete_charges  

), monthly_balance_transactions as (

  select
    date_trunc(date(case when type = 'payout' then available_on else created_at end), month) as month,
    sum(case when type in ('charge', 'payment') then amount else 0 end) as total_sales,
    sum(case when type in ('payment_refund', 'refund') then amount else 0 end) as total_refunds,
    sum(case when type = 'adjustment' then amount else 0 end) as total_adjustments,
    sum(case when type not in ('charge', 'payment', 'payment_refund', 'refund', 'adjustment', 'payout') and type not like '%transfer%' then amount else 0 end) as total_other_transactions,
    sum(case when type <> 'payout' and type not like '%transfer%' then amount else 0 end) as total_gross_transaction_amount,
    sum(case when type <> 'payout' and type not like '%transfer%' then net else 0 end) as total_net_tranactions,
    sum(case when type = 'payout' or type like '%transfer%' then fee * -1.0 else 0 end) as total_payout_fees,
    sum(case when type = 'payout' or type like '%transfer%' then amount else 0 end) as total_gross_payout_amount,
    sum(case when type = 'payout' or type like '%transfer%' then fee * -1.0 else net end) as monthly_net_activity,
    sum(if(type in ('payment', 'charge'), 1, 0)) as total_sales_count,
    sum(if(type = 'payout', 1, 0)) as total_payout_count,
    count(distinct case when type = 'adjustment' then coalesce(source, payout_id) end) as total_adjustments_count
  from balance_transaction_joined
  group by 1

), monthly_failed_charges as (

    select
      date_trunc(date(created_at), month) as month,
      count(*) as total_failed_charge_count,
      sum(amount) as total_failed_charge_amount
    from incomplete_charges
    group by 1

)

select
  monthly_balance_transactions.month,
  monthly_balance_transactions.total_sales/100.0 as total_sales,
  monthly_balance_transactions.total_refunds/100.0 as total_refunds,
  monthly_balance_transactions.total_adjustments/100.0 as total_adjustments,
  monthly_balance_transactions.total_other_transactions/100.0 as total_other_transactions,
  monthly_balance_transactions.total_gross_transaction_amount/100.0 as total_gross_transaction_amount,
  monthly_balance_transactions.total_net_tranactions/100.0 as total_net_tranactions,
  monthly_balance_transactions.total_payout_fees/100.0 as total_payout_fees,
  monthly_balance_transactions.total_gross_payout_amount/100.0 as total_gross_payout_amount,
  monthly_balance_transactions.monthly_net_activity/100.0 as monthly_net_activity,
  (monthly_balance_transactions.monthly_net_activity + monthly_balance_transactions.total_gross_payout_amount)/100.0 as monthly_end_balance,
  monthly_balance_transactions.total_sales_count,
  monthly_balance_transactions.total_payout_count,
  monthly_balance_transactions.total_adjustments_count,
  coalesce(monthly_failed_charges.total_failed_charge_count, 0) as total_failed_charge_count,
  coalesce(monthly_failed_charges.total_failed_charge_amount/100, 0) as total_failed_charge_amount
from monthly_balance_transactions
left join monthly_failed_charges on monthly_balance_transactions.month = monthly_failed_charges.month
order by 1 desc
  );
    
2020-07-14 22:09:53.622421 (Thread-2): finished collecting timing info
2020-07-14 22:09:53.623328 (Thread-2): Sending event: {'category': 'dbt', 'action': 'run_model', 'label': '8f5f9874-ebdf-4d4a-9444-dfc5e9d79a41', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x10ce000a0>]}
2020-07-14 22:09:53.623658 (Thread-2): 15:09:53 | 4 of 8 OK created table model dbt_kristin.stripe_customer_overview... [CREATE TABLE (405) in 3.28s]
2020-07-14 22:09:53.623824 (Thread-2): Finished running node model.stripe.stripe_customer_overview
2020-07-14 22:09:53.623993 (Thread-2): Began running node model.stripe.stripe_quarterly_overview
2020-07-14 22:09:53.624273 (Thread-2): 15:09:53 | 7 of 8 START table model dbt_kristin.stripe_quarterly_overview....... [RUN]
2020-07-14 22:09:53.624626 (Thread-2): Acquiring new bigquery connection "model.stripe.stripe_quarterly_overview".
2020-07-14 22:09:53.624764 (Thread-2): Re-using an available connection from the pool (formerly model.stripe.stripe_customer_overview).
2020-07-14 22:09:53.624866 (Thread-2): Compiling model.stripe.stripe_quarterly_overview
2020-07-14 22:09:53.676329 (Thread-2): Writing injected SQL for node "model.stripe.stripe_quarterly_overview"
2020-07-14 22:09:53.677416 (Thread-2): finished collecting timing info
2020-07-14 22:09:53.683903 (Thread-2): Writing runtime SQL for node "model.stripe.stripe_quarterly_overview"
2020-07-14 22:09:53.684379 (Thread-2): On model.stripe.stripe_quarterly_overview: /* {"app": "dbt", "dbt_version": "0.17.0rc1", "profile_name": "integration_test", "target_name": "dev_bigquery_dbt_testing", "node_id": "model.stripe.stripe_quarterly_overview"} */


  create or replace table `dbt-package-testing`.`dbt_kristin`.`stripe_quarterly_overview`
  
  
  OPTIONS()
  as (
    with  __dbt__CTE__stg_stripe_balance_transaction as (
with balance_transaction as (

    select *
    from `dbt-package-testing`.`stripe`.`balance_transaction`

), fields as (

    select 
      id as balance_transaction_id,
      amount,
      available_on,
      created as created_at,
      currency,
      description,
      exchange_rate,
      fee,
      net,
      source,
      status,
      type
    from balance_transaction
)

select *
from fields
),  __dbt__CTE__stg_stripe_charge as (
with charge as (

    select *
    from `dbt-package-testing`.`stripe`.`charge`

), fields as (

    select 
      id as charge_id, 
      amount,
      amount_refunded,
      application_fee_amount,
      balance_transaction_id,
      captured as is_captured,
      card_id,
      created as created_at,
      customer_id,
      currency,
      description,
      failure_code,
      failure_message,
      paid as is_paid,
      payment_intent_id,
      receipt_email,
      receipt_number,
      refunded as is_refunded,
      status,
      invoice_id
    from charge
    
)

select *
from fields
),  __dbt__CTE__stg_stripe_payment_intent as (
with payment_intent as (

    select *
    from `dbt-package-testing`.`stripe`.`payment_intent`

), fields as (

    select 
      id as payment_intent_id,
      amount,
      amount_capturable,
      amount_received,
      application,
      application_fee_amount,
      canceled_at,
      cancellation_reason,
      capture_method,
      confirmation_method,
      created as created_at,
      currency,
      customer_id,
      description,
      payment_method_id,
      receipt_email,
      statement_descriptor,
      status
    from payment_intent

)

select *
from fields
),  __dbt__CTE__stg_stripe_payment_method as (
with payment_method as (

    select *
    from `dbt-package-testing`.`stripe`.`payment_method`

), fields as (

    select 
      id as payment_method_id,
      created as created_at,
      customer_id,
      type
    from payment_method
    where not is_deleted

)

select *
from fields
),  __dbt__CTE__stg_stripe_card as (
with card as (

    select *
    from `dbt-package-testing`.`stripe`.`card`

), fields as (

    select 
      id as card_id,
      brand,
      country,
      created as created_at,
      customer_id,
      name,
      recipient,
      funding
    from card
    where not coalesce(is_deleted, false)

)

select *
from fields
),  __dbt__CTE__stg_stripe_payout as (
with payout as (

    select *
    from `dbt-package-testing`.`stripe`.`payout`

), fields as (

    select 
      id as payout_id,
      amount,
      arrival_date,
      automatic as is_automatic,
      balance_transaction_id,
      created as created_at,
      currency,
      description,
      method,
      source_type,
      status,
      type
    from payout

)

select *
from fields
),  __dbt__CTE__stg_stripe_refund as (
with refund as (

    select *
    from `dbt-package-testing`.`stripe`.`refund`

), fields as (

    select 
      id as refund_id,
      amount,
      balance_transaction_id,
      charge_id,
      created as created_at,
      currency,
      description,
      reason,
      receipt_number,
      status
    from refund

)

select *
from fields
),  __dbt__CTE__stg_stripe_customer as (
with customer as (

    select *
    from `dbt-package-testing`.`stripe`.`customer`

), fields as (

    select 
      id as customer_id,
      account_balance,
      created as created_at,
      currency,
      default_card_id,
      delinquent as is_deliguent,
      description,
      email,
      shipping_address_city,
      shipping_address_country,
      shipping_address_line_1,
      shipping_address_line_2,
      shipping_address_postal_code,
      shipping_address_state,
      shipping_name,
      shipping_phone
    from customer
    where not is_deleted

)

select *
from fields
),  __dbt__CTE__stripe_balance_transaction_joined as (
with balance_transaction as (

    select *
    from __dbt__CTE__stg_stripe_balance_transaction
  
), charge as (

    select *
    from __dbt__CTE__stg_stripe_charge

), payment_intent as (

    select *
    from __dbt__CTE__stg_stripe_payment_intent

), payment_method as (

    select *
    from __dbt__CTE__stg_stripe_payment_method

), card as (

    select *
    from __dbt__CTE__stg_stripe_card

), payout as (

    select *
    from __dbt__CTE__stg_stripe_payout

), refund as (

    select *
    from __dbt__CTE__stg_stripe_refund

), customer as (

    select *
    from __dbt__CTE__stg_stripe_customer


)

select 
  balance_transaction.balance_transaction_id,
  balance_transaction.created_at,
  balance_transaction.available_on,
  balance_transaction.currency,
  balance_transaction.amount,
  balance_transaction.fee,
  balance_transaction.net,
  balance_transaction.type,
  case
    when balance_transaction.type in ('charge', 'payment') then 'charge'
    when balance_transaction.type in ('refund', 'payment_refund') then 'refund'
    when balance_transaction.type in ('payout_cancel', 'payout_failure')	then 'payout_reversal'
    when balance_transaction.type in ('transfer', 'recipient_transfer') then	'transfer'
    when balance_transaction.type in ('transfer_cancel', 'transfer_failure', 'recipient_transfer_cancel', 'recipient_transfer_failure') then 'transfer_reversal'
    else balance_transaction.type
  end as reporting_category,
  balance_transaction.source,
  balance_transaction.description,
  case when balance_transaction.type = 'charge' then charge.amount end as customer_facing_amount, --think this might be the charge amount/currency
  case when balance_transaction.type = 'charge' then charge.currency end as customer_facing_currency,
  date_add(date(balance_transaction.available_on), interval 1 day) as effective_at,
  coalesce(charge.customer_id, refund_charge.customer_id) as customer_id,
  charge.receipt_email,
  customer.description as customer_description,
  charge.charge_id,
  charge.payment_intent_id,
  charge.created_at as charge_created_at,
  payment_method.type as payment_method_type,
  card.brand as card_brand,
  card.funding as card_funding,
  card.country as card_country,
  payout.payout_id,
  payout.arrival_date as payout_expeted_arrival_date,
  payout.status as payout_status,
  payout.type as payout_type,
  payout.description as payout_description,
  refund.reason as refund_reason
from balance_transaction
left join charge on charge.balance_transaction_id = balance_transaction.balance_transaction_id
left join customer on charge.customer_id = customer.customer_id
left join payment_intent on charge.payment_intent_id = payment_intent.payment_intent_id
left join payment_method on payment_intent.payment_method_id = payment_method.payment_method_id
left join card on charge.card_id = card.card_id
left join payout on payout.balance_transaction_id = balance_transaction.balance_transaction_id
left join refund on refund.balance_transaction_id = balance_transaction.balance_transaction_id
left join charge as refund_charge on refund.charge_id = refund_charge.charge_id
order by created_at desc
),  __dbt__CTE__stripe_incomplete_charges as (
with charge as (

    select *
    from __dbt__CTE__stg_stripe_charge

)

select 
  created_at,
  customer_id,
  amount
from charge
where not is_captured
),balance_transaction_joined as (

    select *
    from __dbt__CTE__stripe_balance_transaction_joined  

), incomplete_charges as (

    select *
    from __dbt__CTE__stripe_incomplete_charges  

), quarterly_balance_transactions as (

  select
    date_trunc(date(case when type = 'payout' then available_on else created_at end), quarter) as quarter,
    sum(case when type in ('charge', 'payment') then amount else 0 end) as total_sales,
    sum(case when type in ('payment_refund', 'refund') then amount else 0 end) as total_refunds,
    sum(case when type = 'adjustment' then amount else 0 end) as total_adjustments,
    sum(case when type not in ('charge', 'payment', 'payment_refund', 'refund', 'adjustment', 'payout') and type not like '%transfer%' then amount else 0 end) as total_other_transactions,
    sum(case when type <> 'payout' and type not like '%transfer%' then amount else 0 end) as total_gross_transaction_amount,
    sum(case when type <> 'payout' and type not like '%transfer%' then net else 0 end) as total_net_tranactions,
    sum(case when type = 'payout' or type like '%transfer%' then fee * -1.0 else 0 end) as total_payout_fees,
    sum(case when type = 'payout' or type like '%transfer%' then amount else 0 end) as total_gross_payout_amount,
    sum(case when type = 'payout' or type like '%transfer%' then fee * -1.0 else net end) as quarterly_net_activity,
    sum(if(type in ('payment', 'charge'), 1, 0)) as total_sales_count,
    sum(if(type = 'payout', 1, 0)) as total_payout_count,
    count(distinct case when type = 'adjustment' then coalesce(source, payout_id) end) as total_adjustments_count
  from balance_transaction_joined
  group by 1

), quarterly_failed_charges as (

    select
      date_trunc(date(created_at), quarter) as quarter,
      count(*) as total_failed_charge_count,
      sum(amount) as total_failed_charge_amount
    from incomplete_charges
    group by 1

)

select
  quarterly_balance_transactions.quarter,
  quarterly_balance_transactions.total_sales/100.0 as total_sales,
  quarterly_balance_transactions.total_refunds/100.0 as total_refunds,
  quarterly_balance_transactions.total_adjustments/100.0 as total_adjustments,
  quarterly_balance_transactions.total_other_transactions/100.0 as total_other_transactions,
  quarterly_balance_transactions.total_gross_transaction_amount/100.0 as total_gross_transaction_amount,
  quarterly_balance_transactions.total_net_tranactions/100.0 as total_net_tranactions,
  quarterly_balance_transactions.total_payout_fees/100.0 as total_payout_fees,
  quarterly_balance_transactions.total_gross_payout_amount/100.0 as total_gross_payout_amount,
  quarterly_balance_transactions.quarterly_net_activity/100.0 as quarterly_net_activity,
  (quarterly_balance_transactions.quarterly_net_activity + quarterly_balance_transactions.total_gross_payout_amount)/100.0 as quarterly_end_balance,
  quarterly_balance_transactions.total_sales_count,
  quarterly_balance_transactions.total_payout_count,
  quarterly_balance_transactions.total_adjustments_count,
  coalesce(quarterly_failed_charges.total_failed_charge_count, 0) as total_failed_charge_count,
  coalesce(quarterly_failed_charges.total_failed_charge_amount/100, 0) as total_failed_charge_amount
from quarterly_balance_transactions
left join quarterly_failed_charges on quarterly_balance_transactions.quarter = quarterly_failed_charges.quarter
order by 1 desc
  );
    
2020-07-14 22:09:53.940011 (Thread-4): finished collecting timing info
2020-07-14 22:09:53.940829 (Thread-4): Sending event: {'category': 'dbt', 'action': 'run_model', 'label': '8f5f9874-ebdf-4d4a-9444-dfc5e9d79a41', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x10ced56d0>]}
2020-07-14 22:09:53.941138 (Thread-4): 15:09:53 | 2 of 8 OK created table model dbt_kristin.stripe_subscription_details [CREATE TABLE (49) in 3.70s]
2020-07-14 22:09:53.941302 (Thread-4): Finished running node model.stripe.stripe_subscription_details
2020-07-14 22:09:53.941472 (Thread-4): Began running node model.stripe.stripe_weekly_overview
2020-07-14 22:09:53.941748 (Thread-4): 15:09:53 | 8 of 8 START table model dbt_kristin.stripe_weekly_overview.......... [RUN]
2020-07-14 22:09:53.942095 (Thread-4): Acquiring new bigquery connection "model.stripe.stripe_weekly_overview".
2020-07-14 22:09:53.942215 (Thread-4): Re-using an available connection from the pool (formerly model.stripe.stripe_subscription_details).
2020-07-14 22:09:53.942331 (Thread-4): Compiling model.stripe.stripe_weekly_overview
2020-07-14 22:09:53.991393 (Thread-4): Writing injected SQL for node "model.stripe.stripe_weekly_overview"
2020-07-14 22:09:53.991793 (Thread-4): finished collecting timing info
2020-07-14 22:09:53.996243 (Thread-4): Writing runtime SQL for node "model.stripe.stripe_weekly_overview"
2020-07-14 22:09:53.996557 (Thread-4): On model.stripe.stripe_weekly_overview: /* {"app": "dbt", "dbt_version": "0.17.0rc1", "profile_name": "integration_test", "target_name": "dev_bigquery_dbt_testing", "node_id": "model.stripe.stripe_weekly_overview"} */


  create or replace table `dbt-package-testing`.`dbt_kristin`.`stripe_weekly_overview`
  
  
  OPTIONS()
  as (
    with  __dbt__CTE__stg_stripe_balance_transaction as (
with balance_transaction as (

    select *
    from `dbt-package-testing`.`stripe`.`balance_transaction`

), fields as (

    select 
      id as balance_transaction_id,
      amount,
      available_on,
      created as created_at,
      currency,
      description,
      exchange_rate,
      fee,
      net,
      source,
      status,
      type
    from balance_transaction
)

select *
from fields
),  __dbt__CTE__stg_stripe_charge as (
with charge as (

    select *
    from `dbt-package-testing`.`stripe`.`charge`

), fields as (

    select 
      id as charge_id, 
      amount,
      amount_refunded,
      application_fee_amount,
      balance_transaction_id,
      captured as is_captured,
      card_id,
      created as created_at,
      customer_id,
      currency,
      description,
      failure_code,
      failure_message,
      paid as is_paid,
      payment_intent_id,
      receipt_email,
      receipt_number,
      refunded as is_refunded,
      status,
      invoice_id
    from charge
    
)

select *
from fields
),  __dbt__CTE__stg_stripe_payment_intent as (
with payment_intent as (

    select *
    from `dbt-package-testing`.`stripe`.`payment_intent`

), fields as (

    select 
      id as payment_intent_id,
      amount,
      amount_capturable,
      amount_received,
      application,
      application_fee_amount,
      canceled_at,
      cancellation_reason,
      capture_method,
      confirmation_method,
      created as created_at,
      currency,
      customer_id,
      description,
      payment_method_id,
      receipt_email,
      statement_descriptor,
      status
    from payment_intent

)

select *
from fields
),  __dbt__CTE__stg_stripe_payment_method as (
with payment_method as (

    select *
    from `dbt-package-testing`.`stripe`.`payment_method`

), fields as (

    select 
      id as payment_method_id,
      created as created_at,
      customer_id,
      type
    from payment_method
    where not is_deleted

)

select *
from fields
),  __dbt__CTE__stg_stripe_card as (
with card as (

    select *
    from `dbt-package-testing`.`stripe`.`card`

), fields as (

    select 
      id as card_id,
      brand,
      country,
      created as created_at,
      customer_id,
      name,
      recipient,
      funding
    from card
    where not coalesce(is_deleted, false)

)

select *
from fields
),  __dbt__CTE__stg_stripe_payout as (
with payout as (

    select *
    from `dbt-package-testing`.`stripe`.`payout`

), fields as (

    select 
      id as payout_id,
      amount,
      arrival_date,
      automatic as is_automatic,
      balance_transaction_id,
      created as created_at,
      currency,
      description,
      method,
      source_type,
      status,
      type
    from payout

)

select *
from fields
),  __dbt__CTE__stg_stripe_refund as (
with refund as (

    select *
    from `dbt-package-testing`.`stripe`.`refund`

), fields as (

    select 
      id as refund_id,
      amount,
      balance_transaction_id,
      charge_id,
      created as created_at,
      currency,
      description,
      reason,
      receipt_number,
      status
    from refund

)

select *
from fields
),  __dbt__CTE__stg_stripe_customer as (
with customer as (

    select *
    from `dbt-package-testing`.`stripe`.`customer`

), fields as (

    select 
      id as customer_id,
      account_balance,
      created as created_at,
      currency,
      default_card_id,
      delinquent as is_deliguent,
      description,
      email,
      shipping_address_city,
      shipping_address_country,
      shipping_address_line_1,
      shipping_address_line_2,
      shipping_address_postal_code,
      shipping_address_state,
      shipping_name,
      shipping_phone
    from customer
    where not is_deleted

)

select *
from fields
),  __dbt__CTE__stripe_balance_transaction_joined as (
with balance_transaction as (

    select *
    from __dbt__CTE__stg_stripe_balance_transaction
  
), charge as (

    select *
    from __dbt__CTE__stg_stripe_charge

), payment_intent as (

    select *
    from __dbt__CTE__stg_stripe_payment_intent

), payment_method as (

    select *
    from __dbt__CTE__stg_stripe_payment_method

), card as (

    select *
    from __dbt__CTE__stg_stripe_card

), payout as (

    select *
    from __dbt__CTE__stg_stripe_payout

), refund as (

    select *
    from __dbt__CTE__stg_stripe_refund

), customer as (

    select *
    from __dbt__CTE__stg_stripe_customer


)

select 
  balance_transaction.balance_transaction_id,
  balance_transaction.created_at,
  balance_transaction.available_on,
  balance_transaction.currency,
  balance_transaction.amount,
  balance_transaction.fee,
  balance_transaction.net,
  balance_transaction.type,
  case
    when balance_transaction.type in ('charge', 'payment') then 'charge'
    when balance_transaction.type in ('refund', 'payment_refund') then 'refund'
    when balance_transaction.type in ('payout_cancel', 'payout_failure')	then 'payout_reversal'
    when balance_transaction.type in ('transfer', 'recipient_transfer') then	'transfer'
    when balance_transaction.type in ('transfer_cancel', 'transfer_failure', 'recipient_transfer_cancel', 'recipient_transfer_failure') then 'transfer_reversal'
    else balance_transaction.type
  end as reporting_category,
  balance_transaction.source,
  balance_transaction.description,
  case when balance_transaction.type = 'charge' then charge.amount end as customer_facing_amount, --think this might be the charge amount/currency
  case when balance_transaction.type = 'charge' then charge.currency end as customer_facing_currency,
  date_add(date(balance_transaction.available_on), interval 1 day) as effective_at,
  coalesce(charge.customer_id, refund_charge.customer_id) as customer_id,
  charge.receipt_email,
  customer.description as customer_description,
  charge.charge_id,
  charge.payment_intent_id,
  charge.created_at as charge_created_at,
  payment_method.type as payment_method_type,
  card.brand as card_brand,
  card.funding as card_funding,
  card.country as card_country,
  payout.payout_id,
  payout.arrival_date as payout_expeted_arrival_date,
  payout.status as payout_status,
  payout.type as payout_type,
  payout.description as payout_description,
  refund.reason as refund_reason
from balance_transaction
left join charge on charge.balance_transaction_id = balance_transaction.balance_transaction_id
left join customer on charge.customer_id = customer.customer_id
left join payment_intent on charge.payment_intent_id = payment_intent.payment_intent_id
left join payment_method on payment_intent.payment_method_id = payment_method.payment_method_id
left join card on charge.card_id = card.card_id
left join payout on payout.balance_transaction_id = balance_transaction.balance_transaction_id
left join refund on refund.balance_transaction_id = balance_transaction.balance_transaction_id
left join charge as refund_charge on refund.charge_id = refund_charge.charge_id
order by created_at desc
),  __dbt__CTE__stripe_incomplete_charges as (
with charge as (

    select *
    from __dbt__CTE__stg_stripe_charge

)

select 
  created_at,
  customer_id,
  amount
from charge
where not is_captured
),balance_transaction_joined as (

    select *
    from __dbt__CTE__stripe_balance_transaction_joined  

), incomplete_charges as (

    select *
    from __dbt__CTE__stripe_incomplete_charges  

), weekly_balance_transactions as (

  select
    date_trunc(date(case when type = 'payout' then available_on else created_at end), week) as week,
    sum(case when type in ('charge', 'payment') then amount else 0 end) as total_sales,
    sum(case when type in ('payment_refund', 'refund') then amount else 0 end) as total_refunds,
    sum(case when type = 'adjustment' then amount else 0 end) as total_adjustments,
    sum(case when type not in ('charge', 'payment', 'payment_refund', 'refund', 'adjustment', 'payout') and type not like '%transfer%' then amount else 0 end) as total_other_transactions,
    sum(case when type <> 'payout' and type not like '%transfer%' then amount else 0 end) as total_gross_transaction_amount,
    sum(case when type <> 'payout' and type not like '%transfer%' then net else 0 end) as total_net_tranactions,
    sum(case when type = 'payout' or type like '%transfer%' then fee * -1.0 else 0 end) as total_payout_fees,
    sum(case when type = 'payout' or type like '%transfer%' then amount else 0 end) as total_gross_payout_amount,
    sum(case when type = 'payout' or type like '%transfer%' then fee * -1.0 else net end) as weekly_net_activity,
    sum(if(type in ('payment', 'charge'), 1, 0)) as total_sales_count,
    sum(if(type = 'payout', 1, 0)) as total_payout_count,
    count(distinct case when type = 'adjustment' then coalesce(source, payout_id) end) as total_adjustments_count
  from balance_transaction_joined
  group by 1

), weekly_failed_charges as (

    select
      date_trunc(date(created_at), week) as week,
      count(*) as total_failed_charge_count,
      sum(amount) as total_failed_charge_amount
    from incomplete_charges
    group by 1

)

select
  weekly_balance_transactions.week,
  weekly_balance_transactions.total_sales/100.0 as total_sales,
  weekly_balance_transactions.total_refunds/100.0 as total_refunds,
  weekly_balance_transactions.total_adjustments/100.0 as total_adjustments,
  weekly_balance_transactions.total_other_transactions/100.0 as total_other_transactions,
  weekly_balance_transactions.total_gross_transaction_amount/100.0 as total_gross_transaction_amount,
  weekly_balance_transactions.total_net_tranactions/100.0 as total_net_tranactions,
  weekly_balance_transactions.total_payout_fees/100.0 as total_payout_fees,
  weekly_balance_transactions.total_gross_payout_amount/100.0 as total_gross_payout_amount,
  weekly_balance_transactions.weekly_net_activity/100.0 as weekly_net_activity,
  (weekly_balance_transactions.weekly_net_activity + weekly_balance_transactions.total_gross_payout_amount)/100.0 as weekly_end_balance,
  weekly_balance_transactions.total_sales_count,
  weekly_balance_transactions.total_payout_count,
  weekly_balance_transactions.total_adjustments_count,
  coalesce(weekly_failed_charges.total_failed_charge_count, 0) as total_failed_charge_count,
  coalesce(weekly_failed_charges.total_failed_charge_amount/100, 0) as total_failed_charge_amount
from weekly_balance_transactions
left join weekly_failed_charges on weekly_balance_transactions.week = weekly_failed_charges.week
order by 1 desc
  );
    
2020-07-14 22:09:55.611978 (Thread-3): finished collecting timing info
2020-07-14 22:09:55.612802 (Thread-3): Sending event: {'category': 'dbt', 'action': 'run_model', 'label': '8f5f9874-ebdf-4d4a-9444-dfc5e9d79a41', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x10cab6580>]}
2020-07-14 22:09:55.613108 (Thread-3): 15:09:55 | 5 of 8 OK created table model dbt_kristin.stripe_daily_overview...... [CREATE TABLE (1246) in 2.73s]
2020-07-14 22:09:55.613271 (Thread-3): Finished running node model.stripe.stripe_daily_overview
2020-07-14 22:09:56.395581 (Thread-2): finished collecting timing info
2020-07-14 22:09:56.396400 (Thread-2): Sending event: {'category': 'dbt', 'action': 'run_model', 'label': '8f5f9874-ebdf-4d4a-9444-dfc5e9d79a41', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x10ccd4310>]}
2020-07-14 22:09:56.396715 (Thread-2): 15:09:56 | 7 of 8 OK created table model dbt_kristin.stripe_quarterly_overview.. [CREATE TABLE (22) in 2.77s]
2020-07-14 22:09:56.396876 (Thread-2): Finished running node model.stripe.stripe_quarterly_overview
2020-07-14 22:09:56.692644 (Thread-1): finished collecting timing info
2020-07-14 22:09:56.693310 (Thread-1): Sending event: {'category': 'dbt', 'action': 'run_model', 'label': '8f5f9874-ebdf-4d4a-9444-dfc5e9d79a41', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x10cdd2ee0>]}
2020-07-14 22:09:56.693544 (Thread-1): 15:09:56 | 6 of 8 OK created table model dbt_kristin.stripe_monthly_overview.... [CREATE TABLE (63) in 3.55s]
2020-07-14 22:09:56.693667 (Thread-1): Finished running node model.stripe.stripe_monthly_overview
2020-07-14 22:09:56.777538 (Thread-4): finished collecting timing info
2020-07-14 22:09:56.778211 (Thread-4): Sending event: {'category': 'dbt', 'action': 'run_model', 'label': '8f5f9874-ebdf-4d4a-9444-dfc5e9d79a41', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x10cae19a0>]}
2020-07-14 22:09:56.778492 (Thread-4): 15:09:56 | 8 of 8 OK created table model dbt_kristin.stripe_weekly_overview..... [CREATE TABLE (269) in 2.84s]
2020-07-14 22:09:56.778635 (Thread-4): Finished running node model.stripe.stripe_weekly_overview
2020-07-14 22:09:56.779787 (MainThread): Acquiring new bigquery connection "master".
2020-07-14 22:09:56.779903 (MainThread): Opening a new connection, currently in state closed
2020-07-14 22:09:56.780209 (MainThread): 15:09:56 | 
2020-07-14 22:09:56.780344 (MainThread): 15:09:56 | Finished running 8 table models in 7.93s.
2020-07-14 22:09:56.780464 (MainThread): Connection 'master' was properly closed.
2020-07-14 22:09:56.780541 (MainThread): Connection 'model.stripe.stripe_monthly_overview' was left open.
2020-07-14 22:09:56.780613 (MainThread): Connection 'model.stripe.stripe_quarterly_overview' was left open.
2020-07-14 22:09:56.780683 (MainThread): Connection 'model.stripe.stripe_daily_overview' was left open.
2020-07-14 22:09:56.780751 (MainThread): Connection 'model.stripe.stripe_weekly_overview' was left open.
2020-07-14 22:09:56.814223 (MainThread): 
2020-07-14 22:09:56.814386 (MainThread): Completed successfully
2020-07-14 22:09:56.814493 (MainThread): 
Done. PASS=8 WARN=0 ERROR=0 SKIP=0 TOTAL=8
2020-07-14 22:09:56.814641 (MainThread): Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'end', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x10cd8f730>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x10ca9e790>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x10cad31f0>]}
2020-07-14 22:09:56.814814 (MainThread): Flushing usage events
2020-07-14 22:17:13.147931 (MainThread): Running with dbt=0.17.0-rc1
2020-07-14 22:17:13.494468 (MainThread): running dbt with arguments Namespace(cls=<class 'dbt.task.run.RunTask'>, debug=False, exclude=None, fail_fast=False, full_refresh=False, log_cache_events=False, log_format='default', models=None, partial_parse=None, profile=None, profiles_dir='/Users/kristin/.dbt', project_dir=None, record_timing_info=None, rpc_method='run', single_threaded=False, strict=False, target=None, test_new_parser=False, threads=None, use_cache=True, vars='{}', version_check=True, warn_error=False, which='run', write_json=True)
2020-07-14 22:17:13.495748 (MainThread): Tracking: tracking
2020-07-14 22:17:13.501979 (MainThread): Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'start', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x10c2e0b80>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x10c2f1fd0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x10c2f1fa0>]}
2020-07-14 22:17:13.523530 (MainThread): Partial parsing not enabled
2020-07-14 22:17:13.525478 (MainThread): Parsing macros/core.sql
2020-07-14 22:17:13.531018 (MainThread): Parsing macros/materializations/helpers.sql
2020-07-14 22:17:13.538770 (MainThread): Parsing macros/materializations/snapshot/snapshot_merge.sql
2020-07-14 22:17:13.540773 (MainThread): Parsing macros/materializations/snapshot/strategies.sql
2020-07-14 22:17:13.555885 (MainThread): Parsing macros/materializations/snapshot/snapshot.sql
2020-07-14 22:17:13.582234 (MainThread): Parsing macros/materializations/seed/seed.sql
2020-07-14 22:17:13.600962 (MainThread): Parsing macros/materializations/incremental/helpers.sql
2020-07-14 22:17:13.602778 (MainThread): Parsing macros/materializations/incremental/incremental.sql
2020-07-14 22:17:13.609075 (MainThread): Parsing macros/materializations/common/merge.sql
2020-07-14 22:17:13.624217 (MainThread): Parsing macros/materializations/table/table.sql
2020-07-14 22:17:13.631346 (MainThread): Parsing macros/materializations/view/view.sql
2020-07-14 22:17:13.637731 (MainThread): Parsing macros/materializations/view/create_or_replace_view.sql
2020-07-14 22:17:13.642675 (MainThread): Parsing macros/etc/get_custom_alias.sql
2020-07-14 22:17:13.643872 (MainThread): Parsing macros/etc/query.sql
2020-07-14 22:17:13.644989 (MainThread): Parsing macros/etc/is_incremental.sql
2020-07-14 22:17:13.646607 (MainThread): Parsing macros/etc/datetime.sql
2020-07-14 22:17:13.654862 (MainThread): Parsing macros/etc/get_custom_schema.sql
2020-07-14 22:17:13.656798 (MainThread): Parsing macros/etc/get_custom_database.sql
2020-07-14 22:17:13.658623 (MainThread): Parsing macros/adapters/common.sql
2020-07-14 22:17:13.704404 (MainThread): Parsing macros/schema_tests/relationships.sql
2020-07-14 22:17:13.705659 (MainThread): Parsing macros/schema_tests/not_null.sql
2020-07-14 22:17:13.706693 (MainThread): Parsing macros/schema_tests/unique.sql
2020-07-14 22:17:13.708283 (MainThread): Parsing macros/schema_tests/accepted_values.sql
2020-07-14 22:17:13.711030 (MainThread): Parsing macros/etc.sql
2020-07-14 22:17:13.711894 (MainThread): Parsing macros/catalog.sql
2020-07-14 22:17:13.717443 (MainThread): Parsing macros/adapters.sql
2020-07-14 22:17:13.736139 (MainThread): Parsing macros/materializations/seed.sql
2020-07-14 22:17:13.738285 (MainThread): Parsing macros/materializations/view.sql
2020-07-14 22:17:13.740849 (MainThread): Parsing macros/materializations/table.sql
2020-07-14 22:17:13.750007 (MainThread): Parsing macros/materializations/incremental.sql
2020-07-14 22:17:13.761563 (MainThread): Parsing macros/materializations/snapshot.sql
2020-07-14 22:17:13.812533 (MainThread): Partial parsing not enabled
2020-07-14 22:17:13.814959 (MainThread): Parsing macros/cross_db_utils/except.sql
2020-07-14 22:17:13.816356 (MainThread): Parsing macros/cross_db_utils/replace.sql
2020-07-14 22:17:13.818146 (MainThread): Parsing macros/cross_db_utils/concat.sql
2020-07-14 22:17:13.820486 (MainThread): Parsing macros/cross_db_utils/datatypes.sql
2020-07-14 22:17:13.826615 (MainThread): Parsing macros/cross_db_utils/_is_relation.sql
2020-07-14 22:17:13.828417 (MainThread): Parsing macros/cross_db_utils/length.sql
2020-07-14 22:17:13.830129 (MainThread): Parsing macros/cross_db_utils/dateadd.sql
2020-07-14 22:17:13.833365 (MainThread): Parsing macros/cross_db_utils/intersect.sql
2020-07-14 22:17:13.834887 (MainThread): Parsing macros/cross_db_utils/right.sql
2020-07-14 22:17:13.837538 (MainThread): Parsing macros/cross_db_utils/datediff.sql
2020-07-14 22:17:13.848902 (MainThread): Parsing macros/cross_db_utils/safe_cast.sql
2020-07-14 22:17:13.851225 (MainThread): Parsing macros/cross_db_utils/hash.sql
2020-07-14 22:17:13.852904 (MainThread): Parsing macros/cross_db_utils/identifier.sql
2020-07-14 22:17:13.854584 (MainThread): Parsing macros/cross_db_utils/position.sql
2020-07-14 22:17:13.856301 (MainThread): Parsing macros/cross_db_utils/literal.sql
2020-07-14 22:17:13.857537 (MainThread): Parsing macros/cross_db_utils/current_timestamp.sql
2020-07-14 22:17:13.889798 (MainThread): Parsing macros/cross_db_utils/width_bucket.sql
2020-07-14 22:17:13.897435 (MainThread): Parsing macros/cross_db_utils/last_day.sql
2020-07-14 22:17:13.901838 (MainThread): Parsing macros/cross_db_utils/split_part.sql
2020-07-14 22:17:13.904675 (MainThread): Parsing macros/cross_db_utils/date_trunc.sql
2020-07-14 22:17:13.906861 (MainThread): Parsing macros/cross_db_utils/_is_ephemeral.sql
2020-07-14 22:17:13.909372 (MainThread): Parsing macros/materializations/insert_by_period_materialization.sql
2020-07-14 22:17:13.938682 (MainThread): Parsing macros/logger/pretty_log_format.sql
2020-07-14 22:17:13.939684 (MainThread): Parsing macros/logger/pretty_time.sql
2020-07-14 22:17:13.940694 (MainThread): Parsing macros/logger/log_info.sql
2020-07-14 22:17:13.941618 (MainThread): Parsing macros/datetime/date_spine.sql
2020-07-14 22:17:13.945600 (MainThread): Parsing macros/web/get_url_host.sql
2020-07-14 22:17:13.947444 (MainThread): Parsing macros/web/get_url_path.sql
2020-07-14 22:17:13.950063 (MainThread): Parsing macros/web/get_url_parameter.sql
2020-07-14 22:17:13.951479 (MainThread): Parsing macros/geo/haversine_distance.sql
2020-07-14 22:17:13.952689 (MainThread): Parsing macros/schema_tests/equal_rowcount.sql
2020-07-14 22:17:13.954286 (MainThread): Parsing macros/schema_tests/relationships_where.sql
2020-07-14 22:17:13.956664 (MainThread): Parsing macros/schema_tests/recency.sql
2020-07-14 22:17:13.958108 (MainThread): Parsing macros/schema_tests/not_constant.sql
2020-07-14 22:17:13.959306 (MainThread): Parsing macros/schema_tests/test_unique_where.sql
2020-07-14 22:17:13.961092 (MainThread): Parsing macros/schema_tests/at_least_one.sql
2020-07-14 22:17:13.962346 (MainThread): Parsing macros/schema_tests/unique_combination_of_columns.sql
2020-07-14 22:17:13.963863 (MainThread): Parsing macros/schema_tests/cardinality_equality.sql
2020-07-14 22:17:13.965724 (MainThread): Parsing macros/schema_tests/expression_is_true.sql
2020-07-14 22:17:13.967031 (MainThread): Parsing macros/schema_tests/test_not_null_where.sql
2020-07-14 22:17:13.968631 (MainThread): Parsing macros/schema_tests/equality.sql
2020-07-14 22:17:13.972146 (MainThread): Parsing macros/schema_tests/mutually_exclusive_ranges.sql
2020-07-14 22:17:13.977849 (MainThread): Parsing macros/sql/nullcheck_table.sql
2020-07-14 22:17:13.979098 (MainThread): Parsing macros/sql/get_relations_by_pattern.sql
2020-07-14 22:17:13.982112 (MainThread): Parsing macros/sql/generate_series.sql
2020-07-14 22:17:13.985471 (MainThread): Parsing macros/sql/get_relations_by_prefix.sql
2020-07-14 22:17:13.989111 (MainThread): Parsing macros/sql/get_tables_by_prefix_sql.sql
2020-07-14 22:17:13.991903 (MainThread): Parsing macros/sql/star.sql
2020-07-14 22:17:13.994824 (MainThread): Parsing macros/sql/unpivot.sql
2020-07-14 22:17:14.001801 (MainThread): Parsing macros/sql/union.sql
2020-07-14 22:17:14.010918 (MainThread): Parsing macros/sql/groupby.sql
2020-07-14 22:17:14.011972 (MainThread): Parsing macros/sql/get_tables_by_pattern.sql
2020-07-14 22:17:14.013121 (MainThread): Parsing macros/sql/surrogate_key.sql
2020-07-14 22:17:14.015917 (MainThread): Parsing macros/sql/safe_add.sql
2020-07-14 22:17:14.017109 (MainThread): Parsing macros/sql/nullcheck.sql
2020-07-14 22:17:14.018449 (MainThread): Parsing macros/sql/get_column_values.sql
2020-07-14 22:17:14.022538 (MainThread): Parsing macros/sql/pivot.sql
2020-07-14 22:17:14.025276 (MainThread): Parsing macros/sql/get_query_results_as_dict.sql
2020-07-14 22:17:14.061348 (MainThread): Acquiring new bigquery connection "model.stripe.stripe_weekly_overview".
2020-07-14 22:17:14.061509 (MainThread): Opening a new connection, currently in state init
2020-07-14 22:17:14.081897 (MainThread): Acquiring new bigquery connection "model.stripe.stripe_daily_overview".
2020-07-14 22:17:14.082027 (MainThread): Opening a new connection, currently in state closed
2020-07-14 22:17:14.094428 (MainThread): Acquiring new bigquery connection "model.stripe.stripe_invoice_details".
2020-07-14 22:17:14.094534 (MainThread): Opening a new connection, currently in state closed
2020-07-14 22:17:14.109183 (MainThread): Acquiring new bigquery connection "model.stripe.stripe_customer_overview".
2020-07-14 22:17:14.109286 (MainThread): Opening a new connection, currently in state closed
2020-07-14 22:17:14.122870 (MainThread): Acquiring new bigquery connection "model.stripe.stripe_balance_transactions".
2020-07-14 22:17:14.123010 (MainThread): Opening a new connection, currently in state closed
2020-07-14 22:17:14.133057 (MainThread): Acquiring new bigquery connection "model.stripe.stripe_quarterly_overview".
2020-07-14 22:17:14.133160 (MainThread): Opening a new connection, currently in state closed
2020-07-14 22:17:14.143549 (MainThread): Acquiring new bigquery connection "model.stripe.stripe_monthly_overview".
2020-07-14 22:17:14.143636 (MainThread): Opening a new connection, currently in state closed
2020-07-14 22:17:14.157795 (MainThread): Acquiring new bigquery connection "model.stripe.stripe_subscription_details".
2020-07-14 22:17:14.157954 (MainThread): Opening a new connection, currently in state closed
2020-07-14 22:17:14.178140 (MainThread): Acquiring new bigquery connection "model.stripe.stripe_balance_transaction_joined".
2020-07-14 22:17:14.178361 (MainThread): Opening a new connection, currently in state closed
2020-07-14 22:17:14.197054 (MainThread): Acquiring new bigquery connection "model.stripe.stripe_incomplete_charges".
2020-07-14 22:17:14.197170 (MainThread): Opening a new connection, currently in state closed
2020-07-14 22:17:14.492858 (MainThread): Acquiring new bigquery connection "model.stripe_source.stg_stripe_card".
2020-07-14 22:17:14.492997 (MainThread): Opening a new connection, currently in state closed
2020-07-14 22:17:14.505258 (MainThread): Acquiring new bigquery connection "model.stripe_source.stg_stripe_invoice_line_item".
2020-07-14 22:17:14.505391 (MainThread): Opening a new connection, currently in state closed
2020-07-14 22:17:14.518705 (MainThread): Acquiring new bigquery connection "model.stripe_source.stg_stripe_payment_method_card".
2020-07-14 22:17:14.518834 (MainThread): Opening a new connection, currently in state closed
2020-07-14 22:17:14.530274 (MainThread): Acquiring new bigquery connection "model.stripe_source.stg_stripe_charge".
2020-07-14 22:17:14.530368 (MainThread): Opening a new connection, currently in state closed
2020-07-14 22:17:14.541082 (MainThread): Acquiring new bigquery connection "model.stripe_source.stg_stripe_payout".
2020-07-14 22:17:14.541199 (MainThread): Opening a new connection, currently in state closed
2020-07-14 22:17:14.551806 (MainThread): Acquiring new bigquery connection "model.stripe_source.stg_stripe_customer".
2020-07-14 22:17:14.551924 (MainThread): Opening a new connection, currently in state closed
2020-07-14 22:17:14.561149 (MainThread): Acquiring new bigquery connection "model.stripe_source.stg_stripe_refund".
2020-07-14 22:17:14.561220 (MainThread): Opening a new connection, currently in state closed
2020-07-14 22:17:14.571813 (MainThread): Acquiring new bigquery connection "model.stripe_source.stg_stripe_subscription".
2020-07-14 22:17:14.571895 (MainThread): Opening a new connection, currently in state closed
2020-07-14 22:17:14.585136 (MainThread): Acquiring new bigquery connection "model.stripe_source.stg_stripe_payment_method".
2020-07-14 22:17:14.585241 (MainThread): Opening a new connection, currently in state closed
2020-07-14 22:17:14.595113 (MainThread): Acquiring new bigquery connection "model.stripe_source.stg_stripe_payment_intent".
2020-07-14 22:17:14.595185 (MainThread): Opening a new connection, currently in state closed
2020-07-14 22:17:14.604099 (MainThread): Acquiring new bigquery connection "model.stripe_source.stg_stripe_invoice".
2020-07-14 22:17:14.604168 (MainThread): Opening a new connection, currently in state closed
2020-07-14 22:17:14.614506 (MainThread): Acquiring new bigquery connection "model.stripe_source.stg_stripe_fee".
2020-07-14 22:17:14.614631 (MainThread): Opening a new connection, currently in state closed
2020-07-14 22:17:14.623578 (MainThread): Acquiring new bigquery connection "model.stripe_source.stg_stripe_balance_transaction".
2020-07-14 22:17:14.623647 (MainThread): Opening a new connection, currently in state closed
2020-07-14 22:17:16.831889 (MainThread): Found 23 models, 16 tests, 0 snapshots, 0 analyses, 278 macros, 0 operations, 0 seed files, 13 sources
2020-07-14 22:17:16.867779 (MainThread): 
2020-07-14 22:17:16.868124 (MainThread): Acquiring new bigquery connection "master".
2020-07-14 22:17:16.868209 (MainThread): Opening a new connection, currently in state closed
2020-07-14 22:17:16.892501 (ThreadPoolExecutor-0_0): Acquiring new bigquery connection "list_dbt-package-testing".
2020-07-14 22:17:16.892621 (ThreadPoolExecutor-0_0): Opening a new connection, currently in state init
2020-07-14 22:17:17.430313 (ThreadPoolExecutor-1_0): Acquiring new bigquery connection "list_dbt-package-testing_dbt_kristin".
2020-07-14 22:17:17.430438 (ThreadPoolExecutor-1_0): Re-using an available connection from the pool (formerly list_dbt-package-testing).
2020-07-14 22:17:17.430552 (ThreadPoolExecutor-1_0): Client.dataset is deprecated and will be removed in a future version. Use a string like 'my_project.my_dataset' or a cloud.google.bigquery.DatasetReference object, instead.
2020-07-14 22:17:17.629803 (MainThread): Acquiring new bigquery connection "master".
2020-07-14 22:17:17.630026 (MainThread): Opening a new connection, currently in state closed
2020-07-14 22:17:17.630409 (MainThread): 15:17:17 | Concurrency: 4 threads (target='dev_bigquery_dbt_testing')
2020-07-14 22:17:17.630673 (MainThread): 15:17:17 | 
2020-07-14 22:17:17.638069 (Thread-1): Began running node model.stripe_source.stg_stripe_charge
2020-07-14 22:17:17.638294 (Thread-2): Began running node model.stripe_source.stg_stripe_customer
2020-07-14 22:17:17.638465 (Thread-1): 15:17:17 | 1 of 21 START table model dbt_kristin.stg_stripe_charge.............. [RUN]
2020-07-14 22:17:17.638594 (Thread-3): Began running node model.stripe_source.stg_stripe_balance_transaction
2020-07-14 22:17:17.638800 (Thread-4): Began running node model.stripe_source.stg_stripe_card
2020-07-14 22:17:17.639063 (Thread-2): 15:17:17 | 2 of 21 START table model dbt_kristin.stg_stripe_customer............ [RUN]
2020-07-14 22:17:17.639834 (Thread-1): Acquiring new bigquery connection "model.stripe_source.stg_stripe_charge".
2020-07-14 22:17:17.639999 (Thread-3): 15:17:17 | 3 of 21 START table model dbt_kristin.stg_stripe_balance_transaction. [RUN]
2020-07-14 22:17:17.640166 (Thread-4): 15:17:17 | 4 of 21 START table model dbt_kristin.stg_stripe_card................ [RUN]
2020-07-14 22:17:17.640569 (Thread-2): Acquiring new bigquery connection "model.stripe_source.stg_stripe_customer".
2020-07-14 22:17:17.640749 (Thread-1): Re-using an available connection from the pool (formerly list_dbt-package-testing_dbt_kristin).
2020-07-14 22:17:17.641186 (Thread-3): Acquiring new bigquery connection "model.stripe_source.stg_stripe_balance_transaction".
2020-07-14 22:17:17.641525 (Thread-4): Acquiring new bigquery connection "model.stripe_source.stg_stripe_card".
2020-07-14 22:17:17.641648 (Thread-2): Opening a new connection, currently in state init
2020-07-14 22:17:17.641797 (Thread-1): Compiling model.stripe_source.stg_stripe_charge
2020-07-14 22:17:17.641932 (Thread-3): Opening a new connection, currently in state init
2020-07-14 22:17:17.642074 (Thread-4): Opening a new connection, currently in state init
2020-07-14 22:17:17.642221 (Thread-2): Compiling model.stripe_source.stg_stripe_customer
2020-07-14 22:17:17.647490 (Thread-3): Compiling model.stripe_source.stg_stripe_balance_transaction
2020-07-14 22:17:17.659835 (Thread-1): Writing injected SQL for node "model.stripe_source.stg_stripe_charge"
2020-07-14 22:17:17.659980 (Thread-4): Compiling model.stripe_source.stg_stripe_card
2020-07-14 22:17:17.668382 (Thread-2): Writing injected SQL for node "model.stripe_source.stg_stripe_customer"
2020-07-14 22:17:17.676775 (Thread-3): Writing injected SQL for node "model.stripe_source.stg_stripe_balance_transaction"
2020-07-14 22:17:17.684470 (Thread-4): Writing injected SQL for node "model.stripe_source.stg_stripe_card"
2020-07-14 22:17:17.684781 (Thread-1): finished collecting timing info
2020-07-14 22:17:17.685303 (Thread-2): finished collecting timing info
2020-07-14 22:17:17.707362 (Thread-3): finished collecting timing info
2020-07-14 22:17:17.713007 (Thread-4): finished collecting timing info
2020-07-14 22:17:17.781945 (Thread-2): Writing runtime SQL for node "model.stripe_source.stg_stripe_customer"
2020-07-14 22:17:17.783125 (Thread-1): Writing runtime SQL for node "model.stripe_source.stg_stripe_charge"
2020-07-14 22:17:17.787363 (Thread-4): Writing runtime SQL for node "model.stripe_source.stg_stripe_card"
2020-07-14 22:17:17.780105 (Thread-3): Writing runtime SQL for node "model.stripe_source.stg_stripe_balance_transaction"
2020-07-14 22:17:17.788608 (Thread-1): On model.stripe_source.stg_stripe_charge: /* {"app": "dbt", "dbt_version": "0.17.0rc1", "profile_name": "integration_test", "target_name": "dev_bigquery_dbt_testing", "node_id": "model.stripe_source.stg_stripe_charge"} */


  create or replace table `dbt-package-testing`.`dbt_kristin`.`stg_stripe_charge`
  
  
  OPTIONS()
  as (
    with charge as (

    select *
    from `dbt-package-testing`.`stripe`.`charge`

), fields as (

    select 
      id as charge_id, 
      amount,
      amount_refunded,
      application_fee_amount,
      balance_transaction_id,
      captured as is_captured,
      card_id,
      created as created_at,
      customer_id,
      currency,
      description,
      failure_code,
      failure_message,
      paid as is_paid,
      payment_intent_id,
      receipt_email,
      receipt_number,
      refunded as is_refunded,
      status,
      invoice_id
    from charge
    
)

select *
from fields
  );
    
2020-07-14 22:17:17.790027 (Thread-3): On model.stripe_source.stg_stripe_balance_transaction: /* {"app": "dbt", "dbt_version": "0.17.0rc1", "profile_name": "integration_test", "target_name": "dev_bigquery_dbt_testing", "node_id": "model.stripe_source.stg_stripe_balance_transaction"} */


  create or replace table `dbt-package-testing`.`dbt_kristin`.`stg_stripe_balance_transaction`
  
  
  OPTIONS()
  as (
    with balance_transaction as (

    select *
    from `dbt-package-testing`.`stripe`.`balance_transaction`

), fields as (

    select 
      id as balance_transaction_id,
      amount,
      available_on,
      created as created_at,
      currency,
      description,
      exchange_rate,
      fee,
      net,
      source,
      status,
      type
    from balance_transaction
)

select *
from fields
  );
    
2020-07-14 22:17:17.790661 (Thread-2): On model.stripe_source.stg_stripe_customer: /* {"app": "dbt", "dbt_version": "0.17.0rc1", "profile_name": "integration_test", "target_name": "dev_bigquery_dbt_testing", "node_id": "model.stripe_source.stg_stripe_customer"} */


  create or replace table `dbt-package-testing`.`dbt_kristin`.`stg_stripe_customer`
  
  
  OPTIONS()
  as (
    with customer as (

    select *
    from `dbt-package-testing`.`stripe`.`customer`

), fields as (

    select 
      id as customer_id,
      account_balance,
      created as created_at,
      currency,
      default_card_id,
      delinquent as is_deliguent,
      description,
      email,
      shipping_address_city,
      shipping_address_country,
      shipping_address_line_1,
      shipping_address_line_2,
      shipping_address_postal_code,
      shipping_address_state,
      shipping_name,
      shipping_phone
    from customer
    where not is_deleted

)

select *
from fields
  );
    
2020-07-14 22:17:17.791818 (Thread-4): On model.stripe_source.stg_stripe_card: /* {"app": "dbt", "dbt_version": "0.17.0rc1", "profile_name": "integration_test", "target_name": "dev_bigquery_dbt_testing", "node_id": "model.stripe_source.stg_stripe_card"} */


  create or replace table `dbt-package-testing`.`dbt_kristin`.`stg_stripe_card`
  
  
  OPTIONS()
  as (
    with card as (

    select *
    from `dbt-package-testing`.`stripe`.`card`

), fields as (

    select 
      id as card_id,
      brand,
      country,
      created as created_at,
      customer_id,
      name,
      recipient,
      funding
    from card
    where not coalesce(is_deleted, false)

)

select *
from fields
  );
    
2020-07-14 22:17:19.944865 (Thread-1): finished collecting timing info
2020-07-14 22:17:19.946039 (Thread-1): Sending event: {'category': 'dbt', 'action': 'run_model', 'label': 'aa574d84-fb9e-43a3-9457-42a392666afb', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x10c593bb0>]}
2020-07-14 22:17:19.946314 (Thread-1): 15:17:19 | 1 of 21 OK created table model dbt_kristin.stg_stripe_charge......... [CREATE TABLE (1485) in 2.31s]
2020-07-14 22:17:19.946456 (Thread-1): Finished running node model.stripe_source.stg_stripe_charge
2020-07-14 22:17:19.946603 (Thread-1): Began running node model.stripe_source.stg_stripe_payment_intent
2020-07-14 22:17:19.946950 (Thread-1): 15:17:19 | 5 of 21 START table model dbt_kristin.stg_stripe_payment_intent...... [RUN]
2020-07-14 22:17:19.947279 (Thread-1): Acquiring new bigquery connection "model.stripe_source.stg_stripe_payment_intent".
2020-07-14 22:17:19.947407 (Thread-1): Re-using an available connection from the pool (formerly model.stripe_source.stg_stripe_charge).
2020-07-14 22:17:19.947509 (Thread-1): Compiling model.stripe_source.stg_stripe_payment_intent
2020-07-14 22:17:19.955703 (Thread-1): Writing injected SQL for node "model.stripe_source.stg_stripe_payment_intent"
2020-07-14 22:17:19.956576 (Thread-1): finished collecting timing info
2020-07-14 22:17:19.962970 (Thread-1): Writing runtime SQL for node "model.stripe_source.stg_stripe_payment_intent"
2020-07-14 22:17:19.966314 (Thread-2): finished collecting timing info
2020-07-14 22:17:19.966991 (Thread-2): Sending event: {'category': 'dbt', 'action': 'run_model', 'label': 'aa574d84-fb9e-43a3-9457-42a392666afb', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x10c54df40>]}
2020-07-14 22:17:19.967246 (Thread-2): 15:17:19 | 2 of 21 OK created table model dbt_kristin.stg_stripe_customer....... [CREATE TABLE (405) in 2.33s]
2020-07-14 22:17:19.967535 (Thread-2): Finished running node model.stripe_source.stg_stripe_customer
2020-07-14 22:17:19.967736 (Thread-1): On model.stripe_source.stg_stripe_payment_intent: /* {"app": "dbt", "dbt_version": "0.17.0rc1", "profile_name": "integration_test", "target_name": "dev_bigquery_dbt_testing", "node_id": "model.stripe_source.stg_stripe_payment_intent"} */


  create or replace table `dbt-package-testing`.`dbt_kristin`.`stg_stripe_payment_intent`
  
  
  OPTIONS()
  as (
    with payment_intent as (

    select *
    from `dbt-package-testing`.`stripe`.`payment_intent`

), fields as (

    select 
      id as payment_intent_id,
      amount,
      amount_capturable,
      amount_received,
      application,
      application_fee_amount,
      canceled_at,
      cancellation_reason,
      capture_method,
      confirmation_method,
      created as created_at,
      currency,
      customer_id,
      description,
      payment_method_id,
      receipt_email,
      statement_descriptor,
      status
    from payment_intent

)

select *
from fields
  );
    
2020-07-14 22:17:19.967875 (Thread-2): Began running node model.stripe_source.stg_stripe_payment_method
2020-07-14 22:17:19.969149 (Thread-2): 15:17:19 | 6 of 21 START table model dbt_kristin.stg_stripe_payment_method...... [RUN]
2020-07-14 22:17:19.969639 (Thread-2): Acquiring new bigquery connection "model.stripe_source.stg_stripe_payment_method".
2020-07-14 22:17:19.969794 (Thread-2): Re-using an available connection from the pool (formerly model.stripe_source.stg_stripe_customer).
2020-07-14 22:17:19.969902 (Thread-2): Compiling model.stripe_source.stg_stripe_payment_method
2020-07-14 22:17:19.979477 (Thread-2): Writing injected SQL for node "model.stripe_source.stg_stripe_payment_method"
2020-07-14 22:17:19.980196 (Thread-2): finished collecting timing info
2020-07-14 22:17:19.984855 (Thread-2): Writing runtime SQL for node "model.stripe_source.stg_stripe_payment_method"
2020-07-14 22:17:19.985277 (Thread-2): On model.stripe_source.stg_stripe_payment_method: /* {"app": "dbt", "dbt_version": "0.17.0rc1", "profile_name": "integration_test", "target_name": "dev_bigquery_dbt_testing", "node_id": "model.stripe_source.stg_stripe_payment_method"} */


  create or replace table `dbt-package-testing`.`dbt_kristin`.`stg_stripe_payment_method`
  
  
  OPTIONS()
  as (
    with payment_method as (

    select *
    from `dbt-package-testing`.`stripe`.`payment_method`

), fields as (

    select 
      id as payment_method_id,
      created as created_at,
      customer_id,
      type
    from payment_method
    where not is_deleted

)

select *
from fields
  );
    
2020-07-14 22:17:20.063164 (Thread-4): finished collecting timing info
2020-07-14 22:17:20.063862 (Thread-4): Sending event: {'category': 'dbt', 'action': 'run_model', 'label': 'aa574d84-fb9e-43a3-9457-42a392666afb', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x10c6ee4c0>]}
2020-07-14 22:17:20.064109 (Thread-4): 15:17:20 | 4 of 21 OK created table model dbt_kristin.stg_stripe_card........... [CREATE TABLE (560) in 2.42s]
2020-07-14 22:17:20.064238 (Thread-4): Finished running node model.stripe_source.stg_stripe_card
2020-07-14 22:17:20.064377 (Thread-4): Began running node model.stripe_source.stg_stripe_payout
2020-07-14 22:17:20.064624 (Thread-4): 15:17:20 | 7 of 21 START table model dbt_kristin.stg_stripe_payout.............. [RUN]
2020-07-14 22:17:20.064891 (Thread-4): Acquiring new bigquery connection "model.stripe_source.stg_stripe_payout".
2020-07-14 22:17:20.064979 (Thread-4): Re-using an available connection from the pool (formerly model.stripe_source.stg_stripe_card).
2020-07-14 22:17:20.065062 (Thread-4): Compiling model.stripe_source.stg_stripe_payout
2020-07-14 22:17:20.074397 (Thread-4): Writing injected SQL for node "model.stripe_source.stg_stripe_payout"
2020-07-14 22:17:20.074943 (Thread-4): finished collecting timing info
2020-07-14 22:17:20.079618 (Thread-4): Writing runtime SQL for node "model.stripe_source.stg_stripe_payout"
2020-07-14 22:17:20.080118 (Thread-4): On model.stripe_source.stg_stripe_payout: /* {"app": "dbt", "dbt_version": "0.17.0rc1", "profile_name": "integration_test", "target_name": "dev_bigquery_dbt_testing", "node_id": "model.stripe_source.stg_stripe_payout"} */


  create or replace table `dbt-package-testing`.`dbt_kristin`.`stg_stripe_payout`
  
  
  OPTIONS()
  as (
    with payout as (

    select *
    from `dbt-package-testing`.`stripe`.`payout`

), fields as (

    select 
      id as payout_id,
      amount,
      arrival_date,
      automatic as is_automatic,
      balance_transaction_id,
      created as created_at,
      currency,
      description,
      method,
      source_type,
      status,
      type
    from payout

)

select *
from fields
  );
    
2020-07-14 22:17:20.165086 (Thread-3): finished collecting timing info
2020-07-14 22:17:20.165949 (Thread-3): Sending event: {'category': 'dbt', 'action': 'run_model', 'label': 'aa574d84-fb9e-43a3-9457-42a392666afb', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x10c510940>]}
2020-07-14 22:17:20.166202 (Thread-3): 15:17:20 | 3 of 21 OK created table model dbt_kristin.stg_stripe_balance_transaction [CREATE TABLE (2124) in 2.52s]
2020-07-14 22:17:20.166347 (Thread-3): Finished running node model.stripe_source.stg_stripe_balance_transaction
2020-07-14 22:17:20.166493 (Thread-3): Began running node model.stripe_source.stg_stripe_refund
2020-07-14 22:17:20.166741 (Thread-3): 15:17:20 | 8 of 21 START table model dbt_kristin.stg_stripe_refund.............. [RUN]
2020-07-14 22:17:20.167029 (Thread-3): Acquiring new bigquery connection "model.stripe_source.stg_stripe_refund".
2020-07-14 22:17:20.167127 (Thread-3): Re-using an available connection from the pool (formerly model.stripe_source.stg_stripe_balance_transaction).
2020-07-14 22:17:20.167224 (Thread-3): Compiling model.stripe_source.stg_stripe_refund
2020-07-14 22:17:20.174751 (Thread-3): Writing injected SQL for node "model.stripe_source.stg_stripe_refund"
2020-07-14 22:17:20.175206 (Thread-3): finished collecting timing info
2020-07-14 22:17:20.179865 (Thread-3): Writing runtime SQL for node "model.stripe_source.stg_stripe_refund"
2020-07-14 22:17:20.180282 (Thread-3): On model.stripe_source.stg_stripe_refund: /* {"app": "dbt", "dbt_version": "0.17.0rc1", "profile_name": "integration_test", "target_name": "dev_bigquery_dbt_testing", "node_id": "model.stripe_source.stg_stripe_refund"} */


  create or replace table `dbt-package-testing`.`dbt_kristin`.`stg_stripe_refund`
  
  
  OPTIONS()
  as (
    with refund as (

    select *
    from `dbt-package-testing`.`stripe`.`refund`

), fields as (

    select 
      id as refund_id,
      amount,
      balance_transaction_id,
      charge_id,
      created as created_at,
      currency,
      description,
      reason,
      receipt_number,
      status
    from refund

)

select *
from fields
  );
    
2020-07-14 22:17:21.832785 (Thread-2): finished collecting timing info
2020-07-14 22:17:21.833606 (Thread-2): Sending event: {'category': 'dbt', 'action': 'run_model', 'label': 'aa574d84-fb9e-43a3-9457-42a392666afb', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x10c4e0d60>]}
2020-07-14 22:17:21.833944 (Thread-2): 15:17:21 | 6 of 21 OK created table model dbt_kristin.stg_stripe_payment_method. [CREATE TABLE (214) in 1.86s]
2020-07-14 22:17:21.834086 (Thread-2): Finished running node model.stripe_source.stg_stripe_payment_method
2020-07-14 22:17:21.834232 (Thread-2): Began running node model.stripe_source.stg_stripe_invoice
2020-07-14 22:17:21.834491 (Thread-2): 15:17:21 | 9 of 21 START table model dbt_kristin.stg_stripe_invoice............. [RUN]
2020-07-14 22:17:21.834767 (Thread-2): Acquiring new bigquery connection "model.stripe_source.stg_stripe_invoice".
2020-07-14 22:17:21.834864 (Thread-2): Re-using an available connection from the pool (formerly model.stripe_source.stg_stripe_payment_method).
2020-07-14 22:17:21.834960 (Thread-2): Compiling model.stripe_source.stg_stripe_invoice
2020-07-14 22:17:21.843382 (Thread-2): Writing injected SQL for node "model.stripe_source.stg_stripe_invoice"
2020-07-14 22:17:21.843882 (Thread-2): finished collecting timing info
2020-07-14 22:17:21.849299 (Thread-2): Writing runtime SQL for node "model.stripe_source.stg_stripe_invoice"
2020-07-14 22:17:21.849819 (Thread-2): On model.stripe_source.stg_stripe_invoice: /* {"app": "dbt", "dbt_version": "0.17.0rc1", "profile_name": "integration_test", "target_name": "dev_bigquery_dbt_testing", "node_id": "model.stripe_source.stg_stripe_invoice"} */


  create or replace table `dbt-package-testing`.`dbt_kristin`.`stg_stripe_invoice`
  
  
  OPTIONS()
  as (
    

with invoice as (

    select *
    from `dbt-package-testing`.`stripe`.`invoice`

), fields as (

    select
      id as invoice_id,
      amount_due,
      amount_paid,
      amount_remaining,
      attempt_count,
      auto_advance,
      billing_reason,
      charge_id,
      created as created_at,
      currency,
      customer_id,
      description,
      due_date,
      number,
      paid as is_paid,
      receipt_number,
      status,
      subtotal,
      tax,
      tax_percent,
      total
    from invoice
    where not coalesce(is_deleted, false)

)

select * from fields
  );
    
2020-07-14 22:17:22.083274 (Thread-3): finished collecting timing info
2020-07-14 22:17:22.084541 (Thread-3): Sending event: {'category': 'dbt', 'action': 'run_model', 'label': 'aa574d84-fb9e-43a3-9457-42a392666afb', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x10c7679a0>]}
2020-07-14 22:17:22.084821 (Thread-3): 15:17:22 | 8 of 21 OK created table model dbt_kristin.stg_stripe_refund......... [CREATE TABLE (31) in 1.92s]
2020-07-14 22:17:22.087299 (Thread-4): finished collecting timing info
2020-07-14 22:17:22.087598 (Thread-3): Finished running node model.stripe_source.stg_stripe_refund
2020-07-14 22:17:22.088156 (Thread-4): Sending event: {'category': 'dbt', 'action': 'run_model', 'label': 'aa574d84-fb9e-43a3-9457-42a392666afb', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x10c7edf70>]}
2020-07-14 22:17:22.088327 (Thread-3): Began running node model.stripe_source.stg_stripe_invoice_line_item
2020-07-14 22:17:22.088755 (Thread-4): 15:17:22 | 7 of 21 OK created table model dbt_kristin.stg_stripe_payout......... [CREATE TABLE (836) in 2.02s]
2020-07-14 22:17:22.088868 (Thread-3): 15:17:22 | 10 of 21 START table model dbt_kristin.stg_stripe_invoice_line_item.. [RUN]
2020-07-14 22:17:22.089019 (Thread-4): Finished running node model.stripe_source.stg_stripe_payout
2020-07-14 22:17:22.089307 (Thread-3): Acquiring new bigquery connection "model.stripe_source.stg_stripe_invoice_line_item".
2020-07-14 22:17:22.089448 (Thread-4): Began running node model.stripe_source.stg_stripe_subscription
2020-07-14 22:17:22.089568 (Thread-3): Re-using an available connection from the pool (formerly model.stripe_source.stg_stripe_refund).
2020-07-14 22:17:22.089759 (Thread-4): 15:17:22 | 11 of 21 START table model dbt_kristin.stg_stripe_subscription....... [RUN]
2020-07-14 22:17:22.089873 (Thread-3): Compiling model.stripe_source.stg_stripe_invoice_line_item
2020-07-14 22:17:22.090171 (Thread-4): Acquiring new bigquery connection "model.stripe_source.stg_stripe_subscription".
2020-07-14 22:17:22.096654 (Thread-4): Re-using an available connection from the pool (formerly model.stripe_source.stg_stripe_payout).
2020-07-14 22:17:22.096802 (Thread-4): Compiling model.stripe_source.stg_stripe_subscription
2020-07-14 22:17:22.135949 (Thread-3): Writing injected SQL for node "model.stripe_source.stg_stripe_invoice_line_item"
2020-07-14 22:17:22.138161 (Thread-4): Writing injected SQL for node "model.stripe_source.stg_stripe_subscription"
2020-07-14 22:17:22.138701 (Thread-3): finished collecting timing info
2020-07-14 22:17:22.143353 (Thread-3): Writing runtime SQL for node "model.stripe_source.stg_stripe_invoice_line_item"
2020-07-14 22:17:22.143523 (Thread-4): finished collecting timing info
2020-07-14 22:17:22.148323 (Thread-4): Writing runtime SQL for node "model.stripe_source.stg_stripe_subscription"
2020-07-14 22:17:22.148776 (Thread-4): On model.stripe_source.stg_stripe_subscription: /* {"app": "dbt", "dbt_version": "0.17.0rc1", "profile_name": "integration_test", "target_name": "dev_bigquery_dbt_testing", "node_id": "model.stripe_source.stg_stripe_subscription"} */


  create or replace table `dbt-package-testing`.`dbt_kristin`.`stg_stripe_subscription`
  
  
  OPTIONS()
  as (
    

with subscription as (

    select *
    from `dbt-package-testing`.`stripe`.`subscription`

), fields as (

    select
      id as subscription_id,
      status,
      billing,
      billing_cycle_anchor,
      cancel_at,
      cancel_at_period_end,
      canceled_at,
      created as created_at,
      current_period_start,
      current_period_end,
      customer_id,
      days_until_due,
      start_date,
      ended_at
    from subscription

)

select * from fields
  );
    
2020-07-14 22:17:22.148965 (Thread-3): On model.stripe_source.stg_stripe_invoice_line_item: /* {"app": "dbt", "dbt_version": "0.17.0rc1", "profile_name": "integration_test", "target_name": "dev_bigquery_dbt_testing", "node_id": "model.stripe_source.stg_stripe_invoice_line_item"} */


  create or replace table `dbt-package-testing`.`dbt_kristin`.`stg_stripe_invoice_line_item`
  
  
  OPTIONS()
  as (
    

with invoice_line_item as (

    select *
    from `dbt-package-testing`.`stripe`.`invoice_line_item`

), fields as (

    select
      id as invoice_line_item_id,
      invoice_id,
      amount,
      currency,
      description,
      discountable as is_discountable,
      plan_id,
      proration,
      quantity,
      subscription_id,
      subscription_item_id,
      type,
      unique_id
    from invoice_line_item
    where id not like 'sub%'

)

select * from fields
  );
    
2020-07-14 22:17:22.206109 (Thread-1): finished collecting timing info
2020-07-14 22:17:22.206787 (Thread-1): Sending event: {'category': 'dbt', 'action': 'run_model', 'label': 'aa574d84-fb9e-43a3-9457-42a392666afb', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x10c676490>]}
2020-07-14 22:17:22.207040 (Thread-1): 15:17:22 | 5 of 21 OK created table model dbt_kristin.stg_stripe_payment_intent. [CREATE TABLE (205) in 2.26s]
2020-07-14 22:17:22.207177 (Thread-1): Finished running node model.stripe_source.stg_stripe_payment_intent
2020-07-14 22:17:22.207319 (Thread-1): Began running node model.stripe_source.stg_stripe_fee
2020-07-14 22:17:22.207457 (Thread-1): 15:17:22 | 12 of 21 START table model dbt_kristin.stg_stripe_fee................ [RUN]
2020-07-14 22:17:22.207848 (Thread-1): Acquiring new bigquery connection "model.stripe_source.stg_stripe_fee".
2020-07-14 22:17:22.208087 (Thread-1): Re-using an available connection from the pool (formerly model.stripe_source.stg_stripe_payment_intent).
2020-07-14 22:17:22.208234 (Thread-1): Compiling model.stripe_source.stg_stripe_fee
2020-07-14 22:17:22.215824 (Thread-1): Writing injected SQL for node "model.stripe_source.stg_stripe_fee"
2020-07-14 22:17:22.216414 (Thread-1): finished collecting timing info
2020-07-14 22:17:22.221143 (Thread-1): Writing runtime SQL for node "model.stripe_source.stg_stripe_fee"
2020-07-14 22:17:22.221566 (Thread-1): On model.stripe_source.stg_stripe_fee: /* {"app": "dbt", "dbt_version": "0.17.0rc1", "profile_name": "integration_test", "target_name": "dev_bigquery_dbt_testing", "node_id": "model.stripe_source.stg_stripe_fee"} */


  create or replace table `dbt-package-testing`.`dbt_kristin`.`stg_stripe_fee`
  
  
  OPTIONS()
  as (
    with fee as (

    select *
    from `dbt-package-testing`.`stripe`.`fee`

), fields as (

    select 
      balance_transaction_id,
      amount,
      application,
      currency,
      description,
      type
    from fee

)

select *
from fields
  );
    
2020-07-14 22:17:23.775634 (Thread-2): finished collecting timing info
2020-07-14 22:17:23.776710 (Thread-2): Sending event: {'category': 'dbt', 'action': 'run_model', 'label': 'aa574d84-fb9e-43a3-9457-42a392666afb', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x10c77b3d0>]}
2020-07-14 22:17:23.777026 (Thread-2): 15:17:23 | 9 of 21 OK created table model dbt_kristin.stg_stripe_invoice........ [CREATE TABLE (492) in 1.94s]
2020-07-14 22:17:23.777169 (Thread-2): Finished running node model.stripe_source.stg_stripe_invoice
2020-07-14 22:17:23.777317 (Thread-2): Began running node model.stripe_source.stg_stripe_payment_method_card
2020-07-14 22:17:23.777457 (Thread-2): 15:17:23 | 13 of 21 START table model dbt_kristin.stg_stripe_payment_method_card [RUN]
2020-07-14 22:17:23.777862 (Thread-2): Acquiring new bigquery connection "model.stripe_source.stg_stripe_payment_method_card".
2020-07-14 22:17:23.778037 (Thread-2): Re-using an available connection from the pool (formerly model.stripe_source.stg_stripe_invoice).
2020-07-14 22:17:23.778147 (Thread-2): Compiling model.stripe_source.stg_stripe_payment_method_card
2020-07-14 22:17:23.786331 (Thread-2): Writing injected SQL for node "model.stripe_source.stg_stripe_payment_method_card"
2020-07-14 22:17:23.786988 (Thread-2): finished collecting timing info
2020-07-14 22:17:23.791970 (Thread-2): Writing runtime SQL for node "model.stripe_source.stg_stripe_payment_method_card"
2020-07-14 22:17:23.792444 (Thread-2): On model.stripe_source.stg_stripe_payment_method_card: /* {"app": "dbt", "dbt_version": "0.17.0rc1", "profile_name": "integration_test", "target_name": "dev_bigquery_dbt_testing", "node_id": "model.stripe_source.stg_stripe_payment_method_card"} */


  create or replace table `dbt-package-testing`.`dbt_kristin`.`stg_stripe_payment_method_card`
  
  
  OPTIONS()
  as (
    with payment_method_card as (

    select *
    from `dbt-package-testing`.`stripe`.`payment_method_card`

), fields as (

    select 
      payment_method_id,
      brand,
      funding
    from payment_method_card

)

select *
from fields
  );
    
2020-07-14 22:17:24.021402 (Thread-4): finished collecting timing info
2020-07-14 22:17:24.022316 (Thread-4): Sending event: {'category': 'dbt', 'action': 'run_model', 'label': 'aa574d84-fb9e-43a3-9457-42a392666afb', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x10c4e0760>]}
2020-07-14 22:17:24.022637 (Thread-4): 15:17:24 | 11 of 21 OK created table model dbt_kristin.stg_stripe_subscription.. [CREATE TABLE (49) in 1.93s]
2020-07-14 22:17:24.022818 (Thread-4): Finished running node model.stripe_source.stg_stripe_subscription
2020-07-14 22:17:24.022978 (Thread-4): Began running node model.stripe.stripe_incomplete_charges
2020-07-14 22:17:24.023389 (Thread-4): Acquiring new bigquery connection "model.stripe.stripe_incomplete_charges".
2020-07-14 22:17:24.023503 (Thread-4): Re-using an available connection from the pool (formerly model.stripe_source.stg_stripe_subscription).
2020-07-14 22:17:24.023607 (Thread-4): Compiling model.stripe.stripe_incomplete_charges
2020-07-14 22:17:24.031272 (Thread-4): Writing injected SQL for node "model.stripe.stripe_incomplete_charges"
2020-07-14 22:17:24.031744 (Thread-4): finished collecting timing info
2020-07-14 22:17:24.032218 (Thread-4): Finished running node model.stripe.stripe_incomplete_charges
2020-07-14 22:17:24.032397 (Thread-4): Began running node model.stripe.stripe_balance_transaction_joined
2020-07-14 22:17:24.032795 (Thread-4): Acquiring new bigquery connection "model.stripe.stripe_balance_transaction_joined".
2020-07-14 22:17:24.032931 (Thread-4): Re-using an available connection from the pool (formerly model.stripe.stripe_incomplete_charges).
2020-07-14 22:17:24.033035 (Thread-4): Compiling model.stripe.stripe_balance_transaction_joined
2020-07-14 22:17:24.049131 (Thread-4): Writing injected SQL for node "model.stripe.stripe_balance_transaction_joined"
2020-07-14 22:17:24.049943 (Thread-4): finished collecting timing info
2020-07-14 22:17:24.050409 (Thread-4): Finished running node model.stripe.stripe_balance_transaction_joined
2020-07-14 22:17:24.050846 (Thread-4): Began running node model.stripe.stripe_balance_transactions
2020-07-14 22:17:24.051002 (Thread-4): 15:17:24 | 14 of 21 START table model dbt_kristin.stripe_balance_transactions... [RUN]
2020-07-14 22:17:24.051262 (Thread-4): Acquiring new bigquery connection "model.stripe.stripe_balance_transactions".
2020-07-14 22:17:24.051352 (Thread-4): Re-using an available connection from the pool (formerly model.stripe.stripe_balance_transaction_joined).
2020-07-14 22:17:24.051442 (Thread-4): Compiling model.stripe.stripe_balance_transactions
2020-07-14 22:17:24.077723 (Thread-4): Writing injected SQL for node "model.stripe.stripe_balance_transactions"
2020-07-14 22:17:24.078140 (Thread-4): finished collecting timing info
2020-07-14 22:17:24.082894 (Thread-4): Client.dataset is deprecated and will be removed in a future version. Use a string like 'my_project.my_dataset' or a cloud.google.bigquery.DatasetReference object, instead.
2020-07-14 22:17:24.095474 (Thread-1): finished collecting timing info
2020-07-14 22:17:24.096146 (Thread-1): Sending event: {'category': 'dbt', 'action': 'run_model', 'label': 'aa574d84-fb9e-43a3-9457-42a392666afb', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x10c425580>]}
2020-07-14 22:17:24.096398 (Thread-1): 15:17:24 | 12 of 21 OK created table model dbt_kristin.stg_stripe_fee........... [CREATE TABLE (1227) in 1.89s]
2020-07-14 22:17:24.096535 (Thread-1): Finished running node model.stripe_source.stg_stripe_fee
2020-07-14 22:17:24.096676 (Thread-1): Began running node model.stripe.stripe_customer_overview
2020-07-14 22:17:24.096813 (Thread-1): 15:17:24 | 15 of 21 START table model dbt_kristin.stripe_customer_overview...... [RUN]
2020-07-14 22:17:24.097184 (Thread-1): Acquiring new bigquery connection "model.stripe.stripe_customer_overview".
2020-07-14 22:17:24.097290 (Thread-1): Re-using an available connection from the pool (formerly model.stripe_source.stg_stripe_fee).
2020-07-14 22:17:24.097386 (Thread-1): Compiling model.stripe.stripe_customer_overview
2020-07-14 22:17:24.113909 (Thread-3): finished collecting timing info
2020-07-14 22:17:24.120077 (Thread-3): Sending event: {'category': 'dbt', 'action': 'run_model', 'label': 'aa574d84-fb9e-43a3-9457-42a392666afb', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x10c5cf550>]}
2020-07-14 22:17:24.126625 (Thread-3): 15:17:24 | 10 of 21 OK created table model dbt_kristin.stg_stripe_invoice_line_item [CREATE TABLE (33) in 2.03s]
2020-07-14 22:17:24.133071 (Thread-3): Finished running node model.stripe_source.stg_stripe_invoice_line_item
2020-07-14 22:17:24.133239 (Thread-3): Began running node model.stripe.stripe_daily_overview
2020-07-14 22:17:24.133369 (Thread-3): 15:17:24 | 16 of 21 START table model dbt_kristin.stripe_daily_overview......... [RUN]
2020-07-14 22:17:24.133629 (Thread-3): Acquiring new bigquery connection "model.stripe.stripe_daily_overview".
2020-07-14 22:17:24.133708 (Thread-3): Re-using an available connection from the pool (formerly model.stripe_source.stg_stripe_invoice_line_item).
2020-07-14 22:17:24.133789 (Thread-3): Compiling model.stripe.stripe_daily_overview
2020-07-14 22:17:24.189822 (Thread-3): Writing injected SQL for node "model.stripe.stripe_daily_overview"
2020-07-14 22:17:24.202840 (Thread-3): finished collecting timing info
2020-07-14 22:17:24.207295 (Thread-3): Client.dataset is deprecated and will be removed in a future version. Use a string like 'my_project.my_dataset' or a cloud.google.bigquery.DatasetReference object, instead.
2020-07-14 22:17:24.220218 (Thread-1): Writing injected SQL for node "model.stripe.stripe_customer_overview"
2020-07-14 22:17:24.222028 (Thread-4): Writing runtime SQL for node "model.stripe.stripe_balance_transactions"
2020-07-14 22:17:24.222544 (Thread-4): On model.stripe.stripe_balance_transactions: /* {"app": "dbt", "dbt_version": "0.17.0rc1", "profile_name": "integration_test", "target_name": "dev_bigquery_dbt_testing", "node_id": "model.stripe.stripe_balance_transactions"} */


  create or replace table `dbt-package-testing`.`dbt_kristin`.`stripe_balance_transactions`
  
  
  OPTIONS()
  as (
    with  __dbt__CTE__stripe_balance_transaction_joined as (
with balance_transaction as (

    select *
    from `dbt-package-testing`.`dbt_kristin`.`stg_stripe_balance_transaction`
  
), charge as (

    select *
    from `dbt-package-testing`.`dbt_kristin`.`stg_stripe_charge`

), payment_intent as (

    select *
    from `dbt-package-testing`.`dbt_kristin`.`stg_stripe_payment_intent`

), payment_method as (

    select *
    from `dbt-package-testing`.`dbt_kristin`.`stg_stripe_payment_method`

), card as (

    select *
    from `dbt-package-testing`.`dbt_kristin`.`stg_stripe_card`

), payout as (

    select *
    from `dbt-package-testing`.`dbt_kristin`.`stg_stripe_payout`

), refund as (

    select *
    from `dbt-package-testing`.`dbt_kristin`.`stg_stripe_refund`

), customer as (

    select *
    from `dbt-package-testing`.`dbt_kristin`.`stg_stripe_customer`


)

select 
  balance_transaction.balance_transaction_id,
  balance_transaction.created_at,
  balance_transaction.available_on,
  balance_transaction.currency,
  balance_transaction.amount,
  balance_transaction.fee,
  balance_transaction.net,
  balance_transaction.type,
  case
    when balance_transaction.type in ('charge', 'payment') then 'charge'
    when balance_transaction.type in ('refund', 'payment_refund') then 'refund'
    when balance_transaction.type in ('payout_cancel', 'payout_failure')	then 'payout_reversal'
    when balance_transaction.type in ('transfer', 'recipient_transfer') then	'transfer'
    when balance_transaction.type in ('transfer_cancel', 'transfer_failure', 'recipient_transfer_cancel', 'recipient_transfer_failure') then 'transfer_reversal'
    else balance_transaction.type
  end as reporting_category,
  balance_transaction.source,
  balance_transaction.description,
  case when balance_transaction.type = 'charge' then charge.amount end as customer_facing_amount, --think this might be the charge amount/currency
  case when balance_transaction.type = 'charge' then charge.currency end as customer_facing_currency,
  date_add(date(balance_transaction.available_on), interval 1 day) as effective_at,
  coalesce(charge.customer_id, refund_charge.customer_id) as customer_id,
  charge.receipt_email,
  customer.description as customer_description,
  charge.charge_id,
  charge.payment_intent_id,
  charge.created_at as charge_created_at,
  payment_method.type as payment_method_type,
  card.brand as card_brand,
  card.funding as card_funding,
  card.country as card_country,
  payout.payout_id,
  payout.arrival_date as payout_expeted_arrival_date,
  payout.status as payout_status,
  payout.type as payout_type,
  payout.description as payout_description,
  refund.reason as refund_reason
from balance_transaction
left join charge on charge.balance_transaction_id = balance_transaction.balance_transaction_id
left join customer on charge.customer_id = customer.customer_id
left join payment_intent on charge.payment_intent_id = payment_intent.payment_intent_id
left join payment_method on payment_intent.payment_method_id = payment_method.payment_method_id
left join card on charge.card_id = card.card_id
left join payout on payout.balance_transaction_id = balance_transaction.balance_transaction_id
left join refund on refund.balance_transaction_id = balance_transaction.balance_transaction_id
left join charge as refund_charge on refund.charge_id = refund_charge.charge_id
order by created_at desc
),balance_transaction_joined as (

    select *
    from __dbt__CTE__stripe_balance_transaction_joined  

)

select 
  balance_transaction_id,
  created_at,
  available_on,
  currency,
  amount,
  fee,
  net,
  type,
  reporting_category,
  source,
  description,
  customer_facing_amount,
  customer_facing_currency,
  effective_at,
  customer_id,
  receipt_email,
  customer_description,
  charge_id,
  payment_intent_id,
  charge_created_at,
  payment_method_type,
  card_brand,
  card_funding,
  card_country,
  payout_id,
  payout_expeted_arrival_date,
  payout_status,
  payout_type,
  payout_description,
  refund_reason
from balance_transaction_joined
  );
    
2020-07-14 22:17:24.222660 (Thread-1): finished collecting timing info
2020-07-14 22:17:24.227032 (Thread-1): Client.dataset is deprecated and will be removed in a future version. Use a string like 'my_project.my_dataset' or a cloud.google.bigquery.DatasetReference object, instead.
2020-07-14 22:17:24.345700 (Thread-3): Writing runtime SQL for node "model.stripe.stripe_daily_overview"
2020-07-14 22:17:24.346574 (Thread-3): On model.stripe.stripe_daily_overview: /* {"app": "dbt", "dbt_version": "0.17.0rc1", "profile_name": "integration_test", "target_name": "dev_bigquery_dbt_testing", "node_id": "model.stripe.stripe_daily_overview"} */


  create or replace table `dbt-package-testing`.`dbt_kristin`.`stripe_daily_overview`
  
  
  OPTIONS()
  as (
    with  __dbt__CTE__stripe_balance_transaction_joined as (
with balance_transaction as (

    select *
    from `dbt-package-testing`.`dbt_kristin`.`stg_stripe_balance_transaction`
  
), charge as (

    select *
    from `dbt-package-testing`.`dbt_kristin`.`stg_stripe_charge`

), payment_intent as (

    select *
    from `dbt-package-testing`.`dbt_kristin`.`stg_stripe_payment_intent`

), payment_method as (

    select *
    from `dbt-package-testing`.`dbt_kristin`.`stg_stripe_payment_method`

), card as (

    select *
    from `dbt-package-testing`.`dbt_kristin`.`stg_stripe_card`

), payout as (

    select *
    from `dbt-package-testing`.`dbt_kristin`.`stg_stripe_payout`

), refund as (

    select *
    from `dbt-package-testing`.`dbt_kristin`.`stg_stripe_refund`

), customer as (

    select *
    from `dbt-package-testing`.`dbt_kristin`.`stg_stripe_customer`


)

select 
  balance_transaction.balance_transaction_id,
  balance_transaction.created_at,
  balance_transaction.available_on,
  balance_transaction.currency,
  balance_transaction.amount,
  balance_transaction.fee,
  balance_transaction.net,
  balance_transaction.type,
  case
    when balance_transaction.type in ('charge', 'payment') then 'charge'
    when balance_transaction.type in ('refund', 'payment_refund') then 'refund'
    when balance_transaction.type in ('payout_cancel', 'payout_failure')	then 'payout_reversal'
    when balance_transaction.type in ('transfer', 'recipient_transfer') then	'transfer'
    when balance_transaction.type in ('transfer_cancel', 'transfer_failure', 'recipient_transfer_cancel', 'recipient_transfer_failure') then 'transfer_reversal'
    else balance_transaction.type
  end as reporting_category,
  balance_transaction.source,
  balance_transaction.description,
  case when balance_transaction.type = 'charge' then charge.amount end as customer_facing_amount, --think this might be the charge amount/currency
  case when balance_transaction.type = 'charge' then charge.currency end as customer_facing_currency,
  date_add(date(balance_transaction.available_on), interval 1 day) as effective_at,
  coalesce(charge.customer_id, refund_charge.customer_id) as customer_id,
  charge.receipt_email,
  customer.description as customer_description,
  charge.charge_id,
  charge.payment_intent_id,
  charge.created_at as charge_created_at,
  payment_method.type as payment_method_type,
  card.brand as card_brand,
  card.funding as card_funding,
  card.country as card_country,
  payout.payout_id,
  payout.arrival_date as payout_expeted_arrival_date,
  payout.status as payout_status,
  payout.type as payout_type,
  payout.description as payout_description,
  refund.reason as refund_reason
from balance_transaction
left join charge on charge.balance_transaction_id = balance_transaction.balance_transaction_id
left join customer on charge.customer_id = customer.customer_id
left join payment_intent on charge.payment_intent_id = payment_intent.payment_intent_id
left join payment_method on payment_intent.payment_method_id = payment_method.payment_method_id
left join card on charge.card_id = card.card_id
left join payout on payout.balance_transaction_id = balance_transaction.balance_transaction_id
left join refund on refund.balance_transaction_id = balance_transaction.balance_transaction_id
left join charge as refund_charge on refund.charge_id = refund_charge.charge_id
order by created_at desc
),  __dbt__CTE__stripe_incomplete_charges as (
with charge as (

    select *
    from `dbt-package-testing`.`dbt_kristin`.`stg_stripe_charge`

)

select 
  created_at,
  customer_id,
  amount
from charge
where not is_captured
),balance_transaction_joined as (

    select *
    from __dbt__CTE__stripe_balance_transaction_joined  

), incomplete_charges as (

    select *
    from __dbt__CTE__stripe_incomplete_charges  

), daily_balance_transactions as (

  select
    date(case when type = 'payout' then available_on else created_at end) as date,
    sum(case when type in ('charge', 'payment') then amount else 0 end) as total_sales,
    sum(case when type in ('payment_refund', 'refund') then amount else 0 end) as total_refunds,
    sum(case when type = 'adjustment' then amount else 0 end) as total_adjustments,
    sum(case when type not in ('charge', 'payment', 'payment_refund', 'refund', 'adjustment', 'payout') and type not like '%transfer%' then amount else 0 end) as total_other_transactions,
    sum(case when type <> 'payout' and type not like '%transfer%' then amount else 0 end) as total_gross_transaction_amount,
    sum(case when type <> 'payout' and type not like '%transfer%' then net else 0 end) as total_net_tranactions,
    sum(case when type = 'payout' or type like '%transfer%' then fee * -1.0 else 0 end) as total_payout_fees,
    sum(case when type = 'payout' or type like '%transfer%' then amount else 0 end) as total_gross_payout_amount,
    sum(case when type = 'payout' or type like '%transfer%' then fee * -1.0 else net end) as daily_net_activity,
    sum(if(type in ('payment', 'charge'), 1, 0)) as total_sales_count,
    sum(if(type = 'payout', 1, 0)) as total_payouts_count,
    count(distinct case when type = 'adjustment' then coalesce(source, payout_id) end) as total_adjustments_count
  from balance_transaction_joined
  group by 1

), daily_failed_charges as (

    select
      date(created_at) as date,
      count(*) as total_failed_charge_count,
      sum(amount) as total_failed_charge_amount
    from incomplete_charges
    group by 1

)

select
  daily_balance_transactions.date,
  daily_balance_transactions.total_sales/100.0 as total_sales,
  daily_balance_transactions.total_refunds/100.0 as total_refunds,
  daily_balance_transactions.total_adjustments/100.0 as total_adjustments,
  daily_balance_transactions.total_other_transactions/100.0 as total_other_transactions,
  daily_balance_transactions.total_gross_transaction_amount/100.0 as total_gross_transaction_amount,
  daily_balance_transactions.total_net_tranactions/100.0 as total_net_tranactions,
  daily_balance_transactions.total_payout_fees/100.0 as total_payout_fees,
  daily_balance_transactions.total_gross_payout_amount/100.0 as total_gross_payout_amount,
  daily_balance_transactions.daily_net_activity/100.0 as daily_net_activity,
  (daily_balance_transactions.daily_net_activity + daily_balance_transactions.total_gross_payout_amount)/100.0 as daily_end_balance,
  daily_balance_transactions.total_sales_count,
  daily_balance_transactions.total_payouts_count,
  daily_balance_transactions.total_adjustments_count,
  coalesce(daily_failed_charges.total_failed_charge_count, 0) as total_failed_charge_count,
  coalesce(daily_failed_charges.total_failed_charge_amount/100, 0) as total_failed_charge_amount
from daily_balance_transactions
left join daily_failed_charges on daily_balance_transactions.date = daily_failed_charges.date
order by 1 desc
  );
    
2020-07-14 22:17:24.444256 (Thread-1): Writing runtime SQL for node "model.stripe.stripe_customer_overview"
2020-07-14 22:17:24.445038 (Thread-1): On model.stripe.stripe_customer_overview: /* {"app": "dbt", "dbt_version": "0.17.0rc1", "profile_name": "integration_test", "target_name": "dev_bigquery_dbt_testing", "node_id": "model.stripe.stripe_customer_overview"} */


  create or replace table `dbt-package-testing`.`dbt_kristin`.`stripe_customer_overview`
  
  
  OPTIONS()
  as (
    with  __dbt__CTE__stripe_balance_transaction_joined as (
with balance_transaction as (

    select *
    from `dbt-package-testing`.`dbt_kristin`.`stg_stripe_balance_transaction`
  
), charge as (

    select *
    from `dbt-package-testing`.`dbt_kristin`.`stg_stripe_charge`

), payment_intent as (

    select *
    from `dbt-package-testing`.`dbt_kristin`.`stg_stripe_payment_intent`

), payment_method as (

    select *
    from `dbt-package-testing`.`dbt_kristin`.`stg_stripe_payment_method`

), card as (

    select *
    from `dbt-package-testing`.`dbt_kristin`.`stg_stripe_card`

), payout as (

    select *
    from `dbt-package-testing`.`dbt_kristin`.`stg_stripe_payout`

), refund as (

    select *
    from `dbt-package-testing`.`dbt_kristin`.`stg_stripe_refund`

), customer as (

    select *
    from `dbt-package-testing`.`dbt_kristin`.`stg_stripe_customer`


)

select 
  balance_transaction.balance_transaction_id,
  balance_transaction.created_at,
  balance_transaction.available_on,
  balance_transaction.currency,
  balance_transaction.amount,
  balance_transaction.fee,
  balance_transaction.net,
  balance_transaction.type,
  case
    when balance_transaction.type in ('charge', 'payment') then 'charge'
    when balance_transaction.type in ('refund', 'payment_refund') then 'refund'
    when balance_transaction.type in ('payout_cancel', 'payout_failure')	then 'payout_reversal'
    when balance_transaction.type in ('transfer', 'recipient_transfer') then	'transfer'
    when balance_transaction.type in ('transfer_cancel', 'transfer_failure', 'recipient_transfer_cancel', 'recipient_transfer_failure') then 'transfer_reversal'
    else balance_transaction.type
  end as reporting_category,
  balance_transaction.source,
  balance_transaction.description,
  case when balance_transaction.type = 'charge' then charge.amount end as customer_facing_amount, --think this might be the charge amount/currency
  case when balance_transaction.type = 'charge' then charge.currency end as customer_facing_currency,
  date_add(date(balance_transaction.available_on), interval 1 day) as effective_at,
  coalesce(charge.customer_id, refund_charge.customer_id) as customer_id,
  charge.receipt_email,
  customer.description as customer_description,
  charge.charge_id,
  charge.payment_intent_id,
  charge.created_at as charge_created_at,
  payment_method.type as payment_method_type,
  card.brand as card_brand,
  card.funding as card_funding,
  card.country as card_country,
  payout.payout_id,
  payout.arrival_date as payout_expeted_arrival_date,
  payout.status as payout_status,
  payout.type as payout_type,
  payout.description as payout_description,
  refund.reason as refund_reason
from balance_transaction
left join charge on charge.balance_transaction_id = balance_transaction.balance_transaction_id
left join customer on charge.customer_id = customer.customer_id
left join payment_intent on charge.payment_intent_id = payment_intent.payment_intent_id
left join payment_method on payment_intent.payment_method_id = payment_method.payment_method_id
left join card on charge.card_id = card.card_id
left join payout on payout.balance_transaction_id = balance_transaction.balance_transaction_id
left join refund on refund.balance_transaction_id = balance_transaction.balance_transaction_id
left join charge as refund_charge on refund.charge_id = refund_charge.charge_id
order by created_at desc
),  __dbt__CTE__stripe_incomplete_charges as (
with charge as (

    select *
    from `dbt-package-testing`.`dbt_kristin`.`stg_stripe_charge`

)

select 
  created_at,
  customer_id,
  amount
from charge
where not is_captured
),balance_transaction_joined as (

    select *
    from __dbt__CTE__stripe_balance_transaction_joined  

), incomplete_charges as (

    select *
    from __dbt__CTE__stripe_incomplete_charges  

), customer as (

    select *
    from `dbt-package-testing`.`dbt_kristin`.`stg_stripe_customer`  

), transactions_grouped as (
 
    select
      customer_id,
      sum(if(type in ('charge', 'payment'), amount, 0)) as total_sales,
      sum(if(type in ('payment_refund', 'refund'), amount, 0)) as total_refunds,
      sum(amount) as total_gross_transaction_amount,
      sum(fee) as total_fees,
      sum(net) as total_net_transaction_amount,
      sum(if(type in ('payment', 'charge'), 1, 0)) as total_sales_count,
      sum(if(type in ('payment_refund', 'refund'), 1, 0)) as total_refund_count,    
      sum(if(type in ('charge', 'payment') and date_trunc(date(created_at), month) = date_trunc(current_date(), month),amount, 0)) as sales_this_month,
      sum(if(type in ('payment_refund', 'refund') and date_trunc(date(created_at), month) = date_trunc(current_date(), month), amount, 0)) as refunds_this_month,
      sum(if(date_trunc(date(created_at), month) = date_trunc(current_date(), month), amount, 0)) as gross_transaction_amount_this_month,
      sum(if(date_trunc(date(created_at), month) = date_trunc(current_date(), month), fee, 0)) as fees_this_month,
      sum(if(date_trunc(date(created_at), month) = date_trunc(current_date(), month), net, 0)) as net_transaction_amount_this_month,
      sum(if(type in ('payment', 'charge') and date_trunc(date(created_at), month) = date_trunc(current_date(), month) , 1, 0)) as sales_count_this_month,
      sum(if(type in ('payment_refund', 'refund') and date_trunc(date(created_at), month) = date_trunc(current_date(), month) , 1, 0)) as refund_count_this_month,
      min(if(type in ('payment', 'charge'), date(created_at), null)) as first_sale_date,
      max(if(type in ('payment', 'charge'), date(created_at), null)) as most_recent_sale_date
    from balance_transaction_joined
      where type in ('payment', 'charge', 'payment_refund', 'refund')
    group by 1

), failed_charges_by_customer as (

    select
      customer_id,
      count(*) as total_failed_charge_count,
      sum(amount) as total_failed_charge_amount,
      sum(if(date_trunc(date(created_at), month) = date_trunc(current_date(), month), 1, 0)) as failed_charge_count_this_month,
      sum(if(date_trunc(date(created_at), month) = date_trunc(current_date(), month), amount, 0)) as failed_charge_amount_this_month
    from incomplete_charges
    group by 1

)

select
  coalesce(customer.description, customer.customer_id, 'No associated customer') as customer_description,
  customer.email,
  customer.created_at as customer_created_at,
  customer.is_deliguent,
  coalesce(transactions_grouped.total_sales/100.0, 0) as total_sales,
  coalesce(transactions_grouped.total_refunds/100.0, 0) as total_refunds,
  coalesce(transactions_grouped.total_gross_transaction_amount/100.0, 0) as total_gross_transcation_amount,
  coalesce(transactions_grouped.total_fees/100.0, 0) as total_fees,
  coalesce(transactions_grouped.total_net_transaction_amount/100.0, 0) as total_net_trasnaction_amount,
  coalesce(transactions_grouped.total_sales_count, 0) as total_sales_count,
  coalesce(transactions_grouped.total_refund_count, 0) as total_refund_count,    
  coalesce(transactions_grouped.sales_this_month/100.0, 0) as sales_this_month,
  coalesce(transactions_grouped.refunds_this_month/100.0, 0) as refunds_this_month,
  coalesce(transactions_grouped.gross_transaction_amount_this_month/100.0, 0) as gross_transaction_amount_this_month,
  coalesce(transactions_grouped.fees_this_month/100.0, 0) as fees_this_month,
  coalesce(transactions_grouped.net_transaction_amount_this_month/100.0, 0) as net_transaction_amount_this_month,
  coalesce(transactions_grouped.sales_count_this_month, 0) as sales_count_this_month,
  coalesce(transactions_grouped.refund_count_this_month, 0) as refund_count_this_month,
  transactions_grouped.first_sale_date,
  transactions_grouped.most_recent_sale_date,
  coalesce(total_failed_charge_count, 0) as total_failed_charge_count,
  coalesce(total_failed_charge_amount/100, 0) as total_failed_charge_amount,
  coalesce(failed_charge_count_this_month, 0) as failed_charge_count_this_month,
  coalesce(failed_charge_amount_this_month/100, 0) as failed_charge_amount_this_month,
  customer.currency as customer_currency,
  customer.default_card_id,
  customer.shipping_name,
  customer.shipping_address_line_1,
  customer.shipping_address_line_2,
  customer.shipping_address_city,
  customer.shipping_address_state,
  customer.shipping_address_country,
  customer.shipping_address_postal_code,
  customer.shipping_phone
from customer
left join transactions_grouped on transactions_grouped.customer_id = customer.customer_id
left join failed_charges_by_customer on customer.customer_id = failed_charges_by_customer.customer_id
  );
    
2020-07-14 22:17:26.001734 (Thread-2): finished collecting timing info
2020-07-14 22:17:26.002555 (Thread-2): Sending event: {'category': 'dbt', 'action': 'run_model', 'label': 'aa574d84-fb9e-43a3-9457-42a392666afb', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x10c7a88e0>]}
2020-07-14 22:17:26.002853 (Thread-2): 15:17:26 | 13 of 21 OK created table model dbt_kristin.stg_stripe_payment_method_card [CREATE TABLE (214) in 2.22s]
2020-07-14 22:17:26.003018 (Thread-2): Finished running node model.stripe_source.stg_stripe_payment_method_card
2020-07-14 22:17:26.003189 (Thread-2): Began running node model.stripe.stripe_monthly_overview
2020-07-14 22:17:26.003352 (Thread-2): 15:17:26 | 17 of 21 START table model dbt_kristin.stripe_monthly_overview....... [RUN]
2020-07-14 22:17:26.003767 (Thread-2): Acquiring new bigquery connection "model.stripe.stripe_monthly_overview".
2020-07-14 22:17:26.003897 (Thread-2): Re-using an available connection from the pool (formerly model.stripe_source.stg_stripe_payment_method_card).
2020-07-14 22:17:26.004015 (Thread-2): Compiling model.stripe.stripe_monthly_overview
2020-07-14 22:17:26.052661 (Thread-2): Writing injected SQL for node "model.stripe.stripe_monthly_overview"
2020-07-14 22:17:26.053089 (Thread-2): finished collecting timing info
2020-07-14 22:17:26.057138 (Thread-2): Client.dataset is deprecated and will be removed in a future version. Use a string like 'my_project.my_dataset' or a cloud.google.bigquery.DatasetReference object, instead.
2020-07-14 22:17:26.193781 (Thread-2): Writing runtime SQL for node "model.stripe.stripe_monthly_overview"
2020-07-14 22:17:26.194507 (Thread-2): On model.stripe.stripe_monthly_overview: /* {"app": "dbt", "dbt_version": "0.17.0rc1", "profile_name": "integration_test", "target_name": "dev_bigquery_dbt_testing", "node_id": "model.stripe.stripe_monthly_overview"} */


  create or replace table `dbt-package-testing`.`dbt_kristin`.`stripe_monthly_overview`
  
  
  OPTIONS()
  as (
    with  __dbt__CTE__stripe_balance_transaction_joined as (
with balance_transaction as (

    select *
    from `dbt-package-testing`.`dbt_kristin`.`stg_stripe_balance_transaction`
  
), charge as (

    select *
    from `dbt-package-testing`.`dbt_kristin`.`stg_stripe_charge`

), payment_intent as (

    select *
    from `dbt-package-testing`.`dbt_kristin`.`stg_stripe_payment_intent`

), payment_method as (

    select *
    from `dbt-package-testing`.`dbt_kristin`.`stg_stripe_payment_method`

), card as (

    select *
    from `dbt-package-testing`.`dbt_kristin`.`stg_stripe_card`

), payout as (

    select *
    from `dbt-package-testing`.`dbt_kristin`.`stg_stripe_payout`

), refund as (

    select *
    from `dbt-package-testing`.`dbt_kristin`.`stg_stripe_refund`

), customer as (

    select *
    from `dbt-package-testing`.`dbt_kristin`.`stg_stripe_customer`


)

select 
  balance_transaction.balance_transaction_id,
  balance_transaction.created_at,
  balance_transaction.available_on,
  balance_transaction.currency,
  balance_transaction.amount,
  balance_transaction.fee,
  balance_transaction.net,
  balance_transaction.type,
  case
    when balance_transaction.type in ('charge', 'payment') then 'charge'
    when balance_transaction.type in ('refund', 'payment_refund') then 'refund'
    when balance_transaction.type in ('payout_cancel', 'payout_failure')	then 'payout_reversal'
    when balance_transaction.type in ('transfer', 'recipient_transfer') then	'transfer'
    when balance_transaction.type in ('transfer_cancel', 'transfer_failure', 'recipient_transfer_cancel', 'recipient_transfer_failure') then 'transfer_reversal'
    else balance_transaction.type
  end as reporting_category,
  balance_transaction.source,
  balance_transaction.description,
  case when balance_transaction.type = 'charge' then charge.amount end as customer_facing_amount, --think this might be the charge amount/currency
  case when balance_transaction.type = 'charge' then charge.currency end as customer_facing_currency,
  date_add(date(balance_transaction.available_on), interval 1 day) as effective_at,
  coalesce(charge.customer_id, refund_charge.customer_id) as customer_id,
  charge.receipt_email,
  customer.description as customer_description,
  charge.charge_id,
  charge.payment_intent_id,
  charge.created_at as charge_created_at,
  payment_method.type as payment_method_type,
  card.brand as card_brand,
  card.funding as card_funding,
  card.country as card_country,
  payout.payout_id,
  payout.arrival_date as payout_expeted_arrival_date,
  payout.status as payout_status,
  payout.type as payout_type,
  payout.description as payout_description,
  refund.reason as refund_reason
from balance_transaction
left join charge on charge.balance_transaction_id = balance_transaction.balance_transaction_id
left join customer on charge.customer_id = customer.customer_id
left join payment_intent on charge.payment_intent_id = payment_intent.payment_intent_id
left join payment_method on payment_intent.payment_method_id = payment_method.payment_method_id
left join card on charge.card_id = card.card_id
left join payout on payout.balance_transaction_id = balance_transaction.balance_transaction_id
left join refund on refund.balance_transaction_id = balance_transaction.balance_transaction_id
left join charge as refund_charge on refund.charge_id = refund_charge.charge_id
order by created_at desc
),  __dbt__CTE__stripe_incomplete_charges as (
with charge as (

    select *
    from `dbt-package-testing`.`dbt_kristin`.`stg_stripe_charge`

)

select 
  created_at,
  customer_id,
  amount
from charge
where not is_captured
),balance_transaction_joined as (

    select *
    from __dbt__CTE__stripe_balance_transaction_joined  

), incomplete_charges as (

    select *
    from __dbt__CTE__stripe_incomplete_charges  

), monthly_balance_transactions as (

  select
    date_trunc(date(case when type = 'payout' then available_on else created_at end), month) as month,
    sum(case when type in ('charge', 'payment') then amount else 0 end) as total_sales,
    sum(case when type in ('payment_refund', 'refund') then amount else 0 end) as total_refunds,
    sum(case when type = 'adjustment' then amount else 0 end) as total_adjustments,
    sum(case when type not in ('charge', 'payment', 'payment_refund', 'refund', 'adjustment', 'payout') and type not like '%transfer%' then amount else 0 end) as total_other_transactions,
    sum(case when type <> 'payout' and type not like '%transfer%' then amount else 0 end) as total_gross_transaction_amount,
    sum(case when type <> 'payout' and type not like '%transfer%' then net else 0 end) as total_net_tranactions,
    sum(case when type = 'payout' or type like '%transfer%' then fee * -1.0 else 0 end) as total_payout_fees,
    sum(case when type = 'payout' or type like '%transfer%' then amount else 0 end) as total_gross_payout_amount,
    sum(case when type = 'payout' or type like '%transfer%' then fee * -1.0 else net end) as monthly_net_activity,
    sum(if(type in ('payment', 'charge'), 1, 0)) as total_sales_count,
    sum(if(type = 'payout', 1, 0)) as total_payout_count,
    count(distinct case when type = 'adjustment' then coalesce(source, payout_id) end) as total_adjustments_count
  from balance_transaction_joined
  group by 1

), monthly_failed_charges as (

    select
      date_trunc(date(created_at), month) as month,
      count(*) as total_failed_charge_count,
      sum(amount) as total_failed_charge_amount
    from incomplete_charges
    group by 1

)

select
  monthly_balance_transactions.month,
  monthly_balance_transactions.total_sales/100.0 as total_sales,
  monthly_balance_transactions.total_refunds/100.0 as total_refunds,
  monthly_balance_transactions.total_adjustments/100.0 as total_adjustments,
  monthly_balance_transactions.total_other_transactions/100.0 as total_other_transactions,
  monthly_balance_transactions.total_gross_transaction_amount/100.0 as total_gross_transaction_amount,
  monthly_balance_transactions.total_net_tranactions/100.0 as total_net_tranactions,
  monthly_balance_transactions.total_payout_fees/100.0 as total_payout_fees,
  monthly_balance_transactions.total_gross_payout_amount/100.0 as total_gross_payout_amount,
  monthly_balance_transactions.monthly_net_activity/100.0 as monthly_net_activity,
  (monthly_balance_transactions.monthly_net_activity + monthly_balance_transactions.total_gross_payout_amount)/100.0 as monthly_end_balance,
  monthly_balance_transactions.total_sales_count,
  monthly_balance_transactions.total_payout_count,
  monthly_balance_transactions.total_adjustments_count,
  coalesce(monthly_failed_charges.total_failed_charge_count, 0) as total_failed_charge_count,
  coalesce(monthly_failed_charges.total_failed_charge_amount/100, 0) as total_failed_charge_amount
from monthly_balance_transactions
left join monthly_failed_charges on monthly_balance_transactions.month = monthly_failed_charges.month
order by 1 desc
  );
    
2020-07-14 22:17:27.234319 (Thread-4): finished collecting timing info
2020-07-14 22:17:27.235140 (Thread-4): Sending event: {'category': 'dbt', 'action': 'run_model', 'label': 'aa574d84-fb9e-43a3-9457-42a392666afb', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x10c727850>]}
2020-07-14 22:17:27.235439 (Thread-4): 15:17:27 | 14 of 21 OK created table model dbt_kristin.stripe_balance_transactions [CREATE TABLE (2124) in 3.18s]
2020-07-14 22:17:27.235600 (Thread-4): Finished running node model.stripe.stripe_balance_transactions
2020-07-14 22:17:27.235768 (Thread-4): Began running node model.stripe.stripe_quarterly_overview
2020-07-14 22:17:27.236041 (Thread-4): 15:17:27 | 18 of 21 START table model dbt_kristin.stripe_quarterly_overview..... [RUN]
2020-07-14 22:17:27.236402 (Thread-4): Acquiring new bigquery connection "model.stripe.stripe_quarterly_overview".
2020-07-14 22:17:27.236518 (Thread-4): Re-using an available connection from the pool (formerly model.stripe.stripe_balance_transactions).
2020-07-14 22:17:27.236633 (Thread-4): Compiling model.stripe.stripe_quarterly_overview
2020-07-14 22:17:27.287171 (Thread-4): Writing injected SQL for node "model.stripe.stripe_quarterly_overview"
2020-07-14 22:17:27.287581 (Thread-4): finished collecting timing info
2020-07-14 22:17:27.291635 (Thread-4): Client.dataset is deprecated and will be removed in a future version. Use a string like 'my_project.my_dataset' or a cloud.google.bigquery.DatasetReference object, instead.
2020-07-14 22:17:27.430437 (Thread-4): Writing runtime SQL for node "model.stripe.stripe_quarterly_overview"
2020-07-14 22:17:27.431194 (Thread-4): On model.stripe.stripe_quarterly_overview: /* {"app": "dbt", "dbt_version": "0.17.0rc1", "profile_name": "integration_test", "target_name": "dev_bigquery_dbt_testing", "node_id": "model.stripe.stripe_quarterly_overview"} */


  create or replace table `dbt-package-testing`.`dbt_kristin`.`stripe_quarterly_overview`
  
  
  OPTIONS()
  as (
    with  __dbt__CTE__stripe_balance_transaction_joined as (
with balance_transaction as (

    select *
    from `dbt-package-testing`.`dbt_kristin`.`stg_stripe_balance_transaction`
  
), charge as (

    select *
    from `dbt-package-testing`.`dbt_kristin`.`stg_stripe_charge`

), payment_intent as (

    select *
    from `dbt-package-testing`.`dbt_kristin`.`stg_stripe_payment_intent`

), payment_method as (

    select *
    from `dbt-package-testing`.`dbt_kristin`.`stg_stripe_payment_method`

), card as (

    select *
    from `dbt-package-testing`.`dbt_kristin`.`stg_stripe_card`

), payout as (

    select *
    from `dbt-package-testing`.`dbt_kristin`.`stg_stripe_payout`

), refund as (

    select *
    from `dbt-package-testing`.`dbt_kristin`.`stg_stripe_refund`

), customer as (

    select *
    from `dbt-package-testing`.`dbt_kristin`.`stg_stripe_customer`


)

select 
  balance_transaction.balance_transaction_id,
  balance_transaction.created_at,
  balance_transaction.available_on,
  balance_transaction.currency,
  balance_transaction.amount,
  balance_transaction.fee,
  balance_transaction.net,
  balance_transaction.type,
  case
    when balance_transaction.type in ('charge', 'payment') then 'charge'
    when balance_transaction.type in ('refund', 'payment_refund') then 'refund'
    when balance_transaction.type in ('payout_cancel', 'payout_failure')	then 'payout_reversal'
    when balance_transaction.type in ('transfer', 'recipient_transfer') then	'transfer'
    when balance_transaction.type in ('transfer_cancel', 'transfer_failure', 'recipient_transfer_cancel', 'recipient_transfer_failure') then 'transfer_reversal'
    else balance_transaction.type
  end as reporting_category,
  balance_transaction.source,
  balance_transaction.description,
  case when balance_transaction.type = 'charge' then charge.amount end as customer_facing_amount, --think this might be the charge amount/currency
  case when balance_transaction.type = 'charge' then charge.currency end as customer_facing_currency,
  date_add(date(balance_transaction.available_on), interval 1 day) as effective_at,
  coalesce(charge.customer_id, refund_charge.customer_id) as customer_id,
  charge.receipt_email,
  customer.description as customer_description,
  charge.charge_id,
  charge.payment_intent_id,
  charge.created_at as charge_created_at,
  payment_method.type as payment_method_type,
  card.brand as card_brand,
  card.funding as card_funding,
  card.country as card_country,
  payout.payout_id,
  payout.arrival_date as payout_expeted_arrival_date,
  payout.status as payout_status,
  payout.type as payout_type,
  payout.description as payout_description,
  refund.reason as refund_reason
from balance_transaction
left join charge on charge.balance_transaction_id = balance_transaction.balance_transaction_id
left join customer on charge.customer_id = customer.customer_id
left join payment_intent on charge.payment_intent_id = payment_intent.payment_intent_id
left join payment_method on payment_intent.payment_method_id = payment_method.payment_method_id
left join card on charge.card_id = card.card_id
left join payout on payout.balance_transaction_id = balance_transaction.balance_transaction_id
left join refund on refund.balance_transaction_id = balance_transaction.balance_transaction_id
left join charge as refund_charge on refund.charge_id = refund_charge.charge_id
order by created_at desc
),  __dbt__CTE__stripe_incomplete_charges as (
with charge as (

    select *
    from `dbt-package-testing`.`dbt_kristin`.`stg_stripe_charge`

)

select 
  created_at,
  customer_id,
  amount
from charge
where not is_captured
),balance_transaction_joined as (

    select *
    from __dbt__CTE__stripe_balance_transaction_joined  

), incomplete_charges as (

    select *
    from __dbt__CTE__stripe_incomplete_charges  

), quarterly_balance_transactions as (

  select
    date_trunc(date(case when type = 'payout' then available_on else created_at end), quarter) as quarter,
    sum(case when type in ('charge', 'payment') then amount else 0 end) as total_sales,
    sum(case when type in ('payment_refund', 'refund') then amount else 0 end) as total_refunds,
    sum(case when type = 'adjustment' then amount else 0 end) as total_adjustments,
    sum(case when type not in ('charge', 'payment', 'payment_refund', 'refund', 'adjustment', 'payout') and type not like '%transfer%' then amount else 0 end) as total_other_transactions,
    sum(case when type <> 'payout' and type not like '%transfer%' then amount else 0 end) as total_gross_transaction_amount,
    sum(case when type <> 'payout' and type not like '%transfer%' then net else 0 end) as total_net_tranactions,
    sum(case when type = 'payout' or type like '%transfer%' then fee * -1.0 else 0 end) as total_payout_fees,
    sum(case when type = 'payout' or type like '%transfer%' then amount else 0 end) as total_gross_payout_amount,
    sum(case when type = 'payout' or type like '%transfer%' then fee * -1.0 else net end) as quarterly_net_activity,
    sum(if(type in ('payment', 'charge'), 1, 0)) as total_sales_count,
    sum(if(type = 'payout', 1, 0)) as total_payout_count,
    count(distinct case when type = 'adjustment' then coalesce(source, payout_id) end) as total_adjustments_count
  from balance_transaction_joined
  group by 1

), quarterly_failed_charges as (

    select
      date_trunc(date(created_at), quarter) as quarter,
      count(*) as total_failed_charge_count,
      sum(amount) as total_failed_charge_amount
    from incomplete_charges
    group by 1

)

select
  quarterly_balance_transactions.quarter,
  quarterly_balance_transactions.total_sales/100.0 as total_sales,
  quarterly_balance_transactions.total_refunds/100.0 as total_refunds,
  quarterly_balance_transactions.total_adjustments/100.0 as total_adjustments,
  quarterly_balance_transactions.total_other_transactions/100.0 as total_other_transactions,
  quarterly_balance_transactions.total_gross_transaction_amount/100.0 as total_gross_transaction_amount,
  quarterly_balance_transactions.total_net_tranactions/100.0 as total_net_tranactions,
  quarterly_balance_transactions.total_payout_fees/100.0 as total_payout_fees,
  quarterly_balance_transactions.total_gross_payout_amount/100.0 as total_gross_payout_amount,
  quarterly_balance_transactions.quarterly_net_activity/100.0 as quarterly_net_activity,
  (quarterly_balance_transactions.quarterly_net_activity + quarterly_balance_transactions.total_gross_payout_amount)/100.0 as quarterly_end_balance,
  quarterly_balance_transactions.total_sales_count,
  quarterly_balance_transactions.total_payout_count,
  quarterly_balance_transactions.total_adjustments_count,
  coalesce(quarterly_failed_charges.total_failed_charge_count, 0) as total_failed_charge_count,
  coalesce(quarterly_failed_charges.total_failed_charge_amount/100, 0) as total_failed_charge_amount
from quarterly_balance_transactions
left join quarterly_failed_charges on quarterly_balance_transactions.quarter = quarterly_failed_charges.quarter
order by 1 desc
  );
    
2020-07-14 22:17:27.437015 (Thread-3): finished collecting timing info
2020-07-14 22:17:27.437698 (Thread-3): Sending event: {'category': 'dbt', 'action': 'run_model', 'label': 'aa574d84-fb9e-43a3-9457-42a392666afb', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x10c7679a0>]}
2020-07-14 22:17:27.437956 (Thread-3): 15:17:27 | 16 of 21 OK created table model dbt_kristin.stripe_daily_overview.... [CREATE TABLE (1246) in 3.30s]
2020-07-14 22:17:27.438096 (Thread-3): Finished running node model.stripe.stripe_daily_overview
2020-07-14 22:17:27.438242 (Thread-3): Began running node model.stripe.stripe_weekly_overview
2020-07-14 22:17:27.438384 (Thread-3): 15:17:27 | 19 of 21 START table model dbt_kristin.stripe_weekly_overview........ [RUN]
2020-07-14 22:17:27.438649 (Thread-3): Acquiring new bigquery connection "model.stripe.stripe_weekly_overview".
2020-07-14 22:17:27.438837 (Thread-3): Re-using an available connection from the pool (formerly model.stripe.stripe_daily_overview).
2020-07-14 22:17:27.438961 (Thread-3): Compiling model.stripe.stripe_weekly_overview
2020-07-14 22:17:27.487176 (Thread-3): Writing injected SQL for node "model.stripe.stripe_weekly_overview"
2020-07-14 22:17:27.487575 (Thread-3): finished collecting timing info
2020-07-14 22:17:27.491626 (Thread-3): Client.dataset is deprecated and will be removed in a future version. Use a string like 'my_project.my_dataset' or a cloud.google.bigquery.DatasetReference object, instead.
2020-07-14 22:17:27.618263 (Thread-3): Writing runtime SQL for node "model.stripe.stripe_weekly_overview"
2020-07-14 22:17:27.618988 (Thread-3): On model.stripe.stripe_weekly_overview: /* {"app": "dbt", "dbt_version": "0.17.0rc1", "profile_name": "integration_test", "target_name": "dev_bigquery_dbt_testing", "node_id": "model.stripe.stripe_weekly_overview"} */


  create or replace table `dbt-package-testing`.`dbt_kristin`.`stripe_weekly_overview`
  
  
  OPTIONS()
  as (
    with  __dbt__CTE__stripe_balance_transaction_joined as (
with balance_transaction as (

    select *
    from `dbt-package-testing`.`dbt_kristin`.`stg_stripe_balance_transaction`
  
), charge as (

    select *
    from `dbt-package-testing`.`dbt_kristin`.`stg_stripe_charge`

), payment_intent as (

    select *
    from `dbt-package-testing`.`dbt_kristin`.`stg_stripe_payment_intent`

), payment_method as (

    select *
    from `dbt-package-testing`.`dbt_kristin`.`stg_stripe_payment_method`

), card as (

    select *
    from `dbt-package-testing`.`dbt_kristin`.`stg_stripe_card`

), payout as (

    select *
    from `dbt-package-testing`.`dbt_kristin`.`stg_stripe_payout`

), refund as (

    select *
    from `dbt-package-testing`.`dbt_kristin`.`stg_stripe_refund`

), customer as (

    select *
    from `dbt-package-testing`.`dbt_kristin`.`stg_stripe_customer`


)

select 
  balance_transaction.balance_transaction_id,
  balance_transaction.created_at,
  balance_transaction.available_on,
  balance_transaction.currency,
  balance_transaction.amount,
  balance_transaction.fee,
  balance_transaction.net,
  balance_transaction.type,
  case
    when balance_transaction.type in ('charge', 'payment') then 'charge'
    when balance_transaction.type in ('refund', 'payment_refund') then 'refund'
    when balance_transaction.type in ('payout_cancel', 'payout_failure')	then 'payout_reversal'
    when balance_transaction.type in ('transfer', 'recipient_transfer') then	'transfer'
    when balance_transaction.type in ('transfer_cancel', 'transfer_failure', 'recipient_transfer_cancel', 'recipient_transfer_failure') then 'transfer_reversal'
    else balance_transaction.type
  end as reporting_category,
  balance_transaction.source,
  balance_transaction.description,
  case when balance_transaction.type = 'charge' then charge.amount end as customer_facing_amount, --think this might be the charge amount/currency
  case when balance_transaction.type = 'charge' then charge.currency end as customer_facing_currency,
  date_add(date(balance_transaction.available_on), interval 1 day) as effective_at,
  coalesce(charge.customer_id, refund_charge.customer_id) as customer_id,
  charge.receipt_email,
  customer.description as customer_description,
  charge.charge_id,
  charge.payment_intent_id,
  charge.created_at as charge_created_at,
  payment_method.type as payment_method_type,
  card.brand as card_brand,
  card.funding as card_funding,
  card.country as card_country,
  payout.payout_id,
  payout.arrival_date as payout_expeted_arrival_date,
  payout.status as payout_status,
  payout.type as payout_type,
  payout.description as payout_description,
  refund.reason as refund_reason
from balance_transaction
left join charge on charge.balance_transaction_id = balance_transaction.balance_transaction_id
left join customer on charge.customer_id = customer.customer_id
left join payment_intent on charge.payment_intent_id = payment_intent.payment_intent_id
left join payment_method on payment_intent.payment_method_id = payment_method.payment_method_id
left join card on charge.card_id = card.card_id
left join payout on payout.balance_transaction_id = balance_transaction.balance_transaction_id
left join refund on refund.balance_transaction_id = balance_transaction.balance_transaction_id
left join charge as refund_charge on refund.charge_id = refund_charge.charge_id
order by created_at desc
),  __dbt__CTE__stripe_incomplete_charges as (
with charge as (

    select *
    from `dbt-package-testing`.`dbt_kristin`.`stg_stripe_charge`

)

select 
  created_at,
  customer_id,
  amount
from charge
where not is_captured
),balance_transaction_joined as (

    select *
    from __dbt__CTE__stripe_balance_transaction_joined  

), incomplete_charges as (

    select *
    from __dbt__CTE__stripe_incomplete_charges  

), weekly_balance_transactions as (

  select
    date_trunc(date(case when type = 'payout' then available_on else created_at end), week) as week,
    sum(case when type in ('charge', 'payment') then amount else 0 end) as total_sales,
    sum(case when type in ('payment_refund', 'refund') then amount else 0 end) as total_refunds,
    sum(case when type = 'adjustment' then amount else 0 end) as total_adjustments,
    sum(case when type not in ('charge', 'payment', 'payment_refund', 'refund', 'adjustment', 'payout') and type not like '%transfer%' then amount else 0 end) as total_other_transactions,
    sum(case when type <> 'payout' and type not like '%transfer%' then amount else 0 end) as total_gross_transaction_amount,
    sum(case when type <> 'payout' and type not like '%transfer%' then net else 0 end) as total_net_tranactions,
    sum(case when type = 'payout' or type like '%transfer%' then fee * -1.0 else 0 end) as total_payout_fees,
    sum(case when type = 'payout' or type like '%transfer%' then amount else 0 end) as total_gross_payout_amount,
    sum(case when type = 'payout' or type like '%transfer%' then fee * -1.0 else net end) as weekly_net_activity,
    sum(if(type in ('payment', 'charge'), 1, 0)) as total_sales_count,
    sum(if(type = 'payout', 1, 0)) as total_payout_count,
    count(distinct case when type = 'adjustment' then coalesce(source, payout_id) end) as total_adjustments_count
  from balance_transaction_joined
  group by 1

), weekly_failed_charges as (

    select
      date_trunc(date(created_at), week) as week,
      count(*) as total_failed_charge_count,
      sum(amount) as total_failed_charge_amount
    from incomplete_charges
    group by 1

)

select
  weekly_balance_transactions.week,
  weekly_balance_transactions.total_sales/100.0 as total_sales,
  weekly_balance_transactions.total_refunds/100.0 as total_refunds,
  weekly_balance_transactions.total_adjustments/100.0 as total_adjustments,
  weekly_balance_transactions.total_other_transactions/100.0 as total_other_transactions,
  weekly_balance_transactions.total_gross_transaction_amount/100.0 as total_gross_transaction_amount,
  weekly_balance_transactions.total_net_tranactions/100.0 as total_net_tranactions,
  weekly_balance_transactions.total_payout_fees/100.0 as total_payout_fees,
  weekly_balance_transactions.total_gross_payout_amount/100.0 as total_gross_payout_amount,
  weekly_balance_transactions.weekly_net_activity/100.0 as weekly_net_activity,
  (weekly_balance_transactions.weekly_net_activity + weekly_balance_transactions.total_gross_payout_amount)/100.0 as weekly_end_balance,
  weekly_balance_transactions.total_sales_count,
  weekly_balance_transactions.total_payout_count,
  weekly_balance_transactions.total_adjustments_count,
  coalesce(weekly_failed_charges.total_failed_charge_count, 0) as total_failed_charge_count,
  coalesce(weekly_failed_charges.total_failed_charge_amount/100, 0) as total_failed_charge_amount
from weekly_balance_transactions
left join weekly_failed_charges on weekly_balance_transactions.week = weekly_failed_charges.week
order by 1 desc
  );
    
2020-07-14 22:17:27.931486 (Thread-1): finished collecting timing info
2020-07-14 22:17:27.932328 (Thread-1): Sending event: {'category': 'dbt', 'action': 'run_model', 'label': 'aa574d84-fb9e-43a3-9457-42a392666afb', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x10c681b20>]}
2020-07-14 22:17:27.932607 (Thread-1): 15:17:27 | 15 of 21 OK created table model dbt_kristin.stripe_customer_overview. [CREATE TABLE (405) in 3.84s]
2020-07-14 22:17:27.932951 (Thread-1): Finished running node model.stripe.stripe_customer_overview
2020-07-14 22:17:27.933126 (Thread-1): Began running node model.stripe.stripe_invoice_details
2020-07-14 22:17:27.933272 (Thread-1): 15:17:27 | 20 of 21 START table model dbt_kristin.stripe_invoice_details........ [RUN]
2020-07-14 22:17:27.933821 (Thread-1): Acquiring new bigquery connection "model.stripe.stripe_invoice_details".
2020-07-14 22:17:27.933937 (Thread-1): Re-using an available connection from the pool (formerly model.stripe.stripe_customer_overview).
2020-07-14 22:17:27.934042 (Thread-1): Compiling model.stripe.stripe_invoice_details
2020-07-14 22:17:27.958388 (Thread-1): Writing injected SQL for node "model.stripe.stripe_invoice_details"
2020-07-14 22:17:27.959083 (Thread-1): finished collecting timing info
2020-07-14 22:17:27.964471 (Thread-1): Client.dataset is deprecated and will be removed in a future version. Use a string like 'my_project.my_dataset' or a cloud.google.bigquery.DatasetReference object, instead.
2020-07-14 22:17:28.111633 (Thread-1): Writing runtime SQL for node "model.stripe.stripe_invoice_details"
2020-07-14 22:17:28.112372 (Thread-1): On model.stripe.stripe_invoice_details: /* {"app": "dbt", "dbt_version": "0.17.0rc1", "profile_name": "integration_test", "target_name": "dev_bigquery_dbt_testing", "node_id": "model.stripe.stripe_invoice_details"} */


  create or replace table `dbt-package-testing`.`dbt_kristin`.`stripe_invoice_details`
  
  
  OPTIONS()
  as (
    

with invoice as (

    select *
    from `dbt-package-testing`.`dbt_kristin`.`stg_stripe_invoice`  

), charge as (

    select *
    from `dbt-package-testing`.`dbt_kristin`.`stg_stripe_charge`  

), invoice_line_item as (

    select *
    from `dbt-package-testing`.`dbt_kristin`.`stg_stripe_invoice_line_item`  

), subscription as (

    select *
    from `dbt-package-testing`.`dbt_kristin`.`stg_stripe_subscription`  

), customer as (

    select *
    from `dbt-package-testing`.`dbt_kristin`.`stg_stripe_customer`  

)

select 
  invoice.invoice_id,
  invoice.number,
  invoice.created_at as invoice_created_at,
  invoice.status,
  invoice.due_date,
  invoice.amount_due,
  invoice.subtotal,
  invoice.tax,
  invoice.total,
  invoice.amount_paid,
  invoice.amount_remaining,
  invoice.attempt_count,
  invoice.description as invoice_memo,
  invoice_line_item.description as line_item_desc,
  invoice_line_item.amount as line_item_amount,
  invoice_line_item.quantity,
  charge.balance_transaction_id,
  charge.amount as charge_amount, 
  charge.status as charge_status,
  charge.created_at as charge_created_at,
  customer.description as customer_description,
  customer.email as customer_email,
  subscription.subscription_id,
  subscription.billing as subcription_billing,
  subscription.start_date as subscription_start_date,
  subscription.ended_at as subscription_ended_at
from invoice
left join charge on charge.charge_id = invoice.charge_id
left join invoice_line_item on invoice.invoice_id = invoice_line_item.invoice_id
left join subscription on invoice_line_item.subscription_id = subscription.subscription_id
left join customer on invoice.customer_id = customer.customer_id
order by invoice.created_at desc
  );
    
2020-07-14 22:17:28.881432 (Thread-2): finished collecting timing info
2020-07-14 22:17:28.882250 (Thread-2): Sending event: {'category': 'dbt', 'action': 'run_model', 'label': 'aa574d84-fb9e-43a3-9457-42a392666afb', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x10c77b3d0>]}
2020-07-14 22:17:28.882545 (Thread-2): 15:17:28 | 17 of 21 OK created table model dbt_kristin.stripe_monthly_overview.. [CREATE TABLE (63) in 2.88s]
2020-07-14 22:17:28.882705 (Thread-2): Finished running node model.stripe.stripe_monthly_overview
2020-07-14 22:17:28.882874 (Thread-2): Began running node model.stripe.stripe_subscription_details
2020-07-14 22:17:28.883149 (Thread-2): 15:17:28 | 21 of 21 START table model dbt_kristin.stripe_subscription_details... [RUN]
2020-07-14 22:17:28.883496 (Thread-2): Acquiring new bigquery connection "model.stripe.stripe_subscription_details".
2020-07-14 22:17:28.883611 (Thread-2): Re-using an available connection from the pool (formerly model.stripe.stripe_monthly_overview).
2020-07-14 22:17:28.883724 (Thread-2): Compiling model.stripe.stripe_subscription_details
2020-07-14 22:17:28.906165 (Thread-2): Writing injected SQL for node "model.stripe.stripe_subscription_details"
2020-07-14 22:17:28.906667 (Thread-2): finished collecting timing info
2020-07-14 22:17:28.912206 (Thread-2): Client.dataset is deprecated and will be removed in a future version. Use a string like 'my_project.my_dataset' or a cloud.google.bigquery.DatasetReference object, instead.
2020-07-14 22:17:29.029108 (Thread-2): Writing runtime SQL for node "model.stripe.stripe_subscription_details"
2020-07-14 22:17:29.029843 (Thread-2): On model.stripe.stripe_subscription_details: /* {"app": "dbt", "dbt_version": "0.17.0rc1", "profile_name": "integration_test", "target_name": "dev_bigquery_dbt_testing", "node_id": "model.stripe.stripe_subscription_details"} */


  create or replace table `dbt-package-testing`.`dbt_kristin`.`stripe_subscription_details`
  
  
  OPTIONS()
  as (
    

with invoice as (

    select *
    from `dbt-package-testing`.`dbt_kristin`.`stg_stripe_invoice`  

), charge as (

    select *
    from `dbt-package-testing`.`dbt_kristin`.`stg_stripe_charge`  

), invoice_line_item as (

    select *
    from `dbt-package-testing`.`dbt_kristin`.`stg_stripe_invoice_line_item`  

), subscription as (

    select *
    from `dbt-package-testing`.`dbt_kristin`.`stg_stripe_subscription`  

), customer as (

    select *
    from `dbt-package-testing`.`dbt_kristin`.`stg_stripe_customer`  

), line_items_groups as (

  select
    invoice.invoice_id,
    invoice.amount_due,
    invoice.amount_paid,
    invoice.amount_remaining,
    invoice.created_at,
    max(invoice_line_item.subscription_id) as subscription_id,
    sum(invoice_line_item.amount) as total_item_amount,
    count(distinct invoice_line_item.unique_id) as number_line_items
  from invoice_line_item
  join invoice on invoice.invoice_id = invoice_line_item.invoice_id
  group by 1, 2, 3, 4, 5

), grouped_by_subcription as (

  select
    subscription_id,
    count(distinct invoice_id) as number_invoices_generated,
    sum(amount_due) as total_amount_billed,
    sum(amount_paid) as total_amount_paid,
    sum(amount_remaining) total_amount_remaining,
    max(created_at) as most_recent_invoice_created_at,
    avg(amount_due) as average_invoice_amount,
    avg(total_item_amount) as average_line_item_amount,
    avg(number_line_items) as avg_num_invoice_items
  from line_items_groups
  group by 1

)


select
  subscription.subscription_id,
  subscription.customer_id,
  customer.description as customer_description,
  customer.email as customer_email,
  subscription.status,
  subscription.start_date,
  subscription.ended_at,
  subscription.billing,
  subscription.billing_cycle_anchor,
  subscription.canceled_at,
  subscription.created_at,
  subscription.current_period_start,
  subscription.current_period_end,
  subscription.days_until_due,
  subscription.cancel_at_period_end,
  subscription.cancel_at,
  number_invoices_generated,
  total_amount_billed,
  total_amount_paid,
  total_amount_remaining,
  most_recent_invoice_created_at,
  average_invoice_amount,
  average_line_item_amount,
  avg_num_invoice_items
from subscription
left join grouped_by_subcription on subscription.subscription_id = grouped_by_subcription.subscription_id
left join customer on subscription.customer_id = customer.customer_id
order by subscription.created_at desc
  );
    
2020-07-14 22:17:30.060310 (Thread-4): finished collecting timing info
2020-07-14 22:17:30.061026 (Thread-4): Sending event: {'category': 'dbt', 'action': 'run_model', 'label': 'aa574d84-fb9e-43a3-9457-42a392666afb', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x10c7ab400>]}
2020-07-14 22:17:30.061294 (Thread-4): 15:17:30 | 18 of 21 OK created table model dbt_kristin.stripe_quarterly_overview [CREATE TABLE (22) in 2.82s]
2020-07-14 22:17:30.061436 (Thread-4): Finished running node model.stripe.stripe_quarterly_overview
2020-07-14 22:17:30.282760 (Thread-3): finished collecting timing info
2020-07-14 22:17:30.283577 (Thread-3): Sending event: {'category': 'dbt', 'action': 'run_model', 'label': 'aa574d84-fb9e-43a3-9457-42a392666afb', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x10c657c10>]}
2020-07-14 22:17:30.283868 (Thread-3): 15:17:30 | 19 of 21 OK created table model dbt_kristin.stripe_weekly_overview... [CREATE TABLE (269) in 2.84s]
2020-07-14 22:17:30.284028 (Thread-3): Finished running node model.stripe.stripe_weekly_overview
2020-07-14 22:17:30.505348 (Thread-1): finished collecting timing info
2020-07-14 22:17:30.506168 (Thread-1): Sending event: {'category': 'dbt', 'action': 'run_model', 'label': 'aa574d84-fb9e-43a3-9457-42a392666afb', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x10c5cfdf0>]}
2020-07-14 22:17:30.506469 (Thread-1): 15:17:30 | 20 of 21 OK created table model dbt_kristin.stripe_invoice_details... [CREATE TABLE (494) in 2.57s]
2020-07-14 22:17:30.506631 (Thread-1): Finished running node model.stripe.stripe_invoice_details
2020-07-14 22:17:32.066035 (Thread-2): finished collecting timing info
2020-07-14 22:17:32.066741 (Thread-2): Sending event: {'category': 'dbt', 'action': 'run_model', 'label': 'aa574d84-fb9e-43a3-9457-42a392666afb', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x10c7baee0>]}
2020-07-14 22:17:32.066996 (Thread-2): 15:17:32 | 21 of 21 OK created table model dbt_kristin.stripe_subscription_details [CREATE TABLE (49) in 3.18s]
2020-07-14 22:17:32.067135 (Thread-2): Finished running node model.stripe.stripe_subscription_details
2020-07-14 22:17:32.068999 (MainThread): Acquiring new bigquery connection "master".
2020-07-14 22:17:32.069165 (MainThread): Opening a new connection, currently in state closed
2020-07-14 22:17:32.069515 (MainThread): 15:17:32 | 
2020-07-14 22:17:32.069673 (MainThread): 15:17:32 | Finished running 21 table models in 15.20s.
2020-07-14 22:17:32.069783 (MainThread): Connection 'master' was properly closed.
2020-07-14 22:17:32.069866 (MainThread): Connection 'model.stripe.stripe_invoice_details' was left open.
2020-07-14 22:17:32.069954 (MainThread): Connection 'model.stripe.stripe_subscription_details' was left open.
2020-07-14 22:17:32.070033 (MainThread): Connection 'model.stripe.stripe_weekly_overview' was left open.
2020-07-14 22:17:32.070109 (MainThread): Connection 'model.stripe.stripe_quarterly_overview' was left open.
2020-07-14 22:17:32.129289 (MainThread): 
2020-07-14 22:17:32.129424 (MainThread): Completed successfully
2020-07-14 22:17:32.129523 (MainThread): 
Done. PASS=21 WARN=0 ERROR=0 SKIP=0 TOTAL=21
2020-07-14 22:17:32.129724 (MainThread): Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'end', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x10c6ba280>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x10c6bae50>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x10c6ba460>]}
2020-07-14 22:17:32.129945 (MainThread): Flushing usage events
2020-07-14 22:23:42.549082 (MainThread): Running with dbt=0.17.0-rc1
2020-07-14 22:23:42.962890 (MainThread): running dbt with arguments Namespace(cls=<class 'dbt.task.run.RunTask'>, debug=False, exclude=None, fail_fast=False, full_refresh=False, log_cache_events=False, log_format='default', models=None, partial_parse=None, profile=None, profiles_dir='/Users/kristin/.dbt', project_dir=None, record_timing_info=None, rpc_method='run', single_threaded=False, strict=False, target=None, test_new_parser=False, threads=None, use_cache=True, vars='{}', version_check=True, warn_error=False, which='run', write_json=True)
2020-07-14 22:23:42.963954 (MainThread): Tracking: tracking
2020-07-14 22:23:42.970950 (MainThread): Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'start', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x10af04c40>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x10af17fd0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x10af17d60>]}
2020-07-14 22:23:42.992746 (MainThread): Partial parsing not enabled
2020-07-14 22:23:42.995487 (MainThread): Parsing macros/core.sql
2020-07-14 22:23:43.000614 (MainThread): Parsing macros/materializations/helpers.sql
2020-07-14 22:23:43.007878 (MainThread): Parsing macros/materializations/snapshot/snapshot_merge.sql
2020-07-14 22:23:43.009990 (MainThread): Parsing macros/materializations/snapshot/strategies.sql
2020-07-14 22:23:43.025591 (MainThread): Parsing macros/materializations/snapshot/snapshot.sql
2020-07-14 22:23:43.052160 (MainThread): Parsing macros/materializations/seed/seed.sql
2020-07-14 22:23:43.076999 (MainThread): Parsing macros/materializations/incremental/helpers.sql
2020-07-14 22:23:43.078834 (MainThread): Parsing macros/materializations/incremental/incremental.sql
2020-07-14 22:23:43.085484 (MainThread): Parsing macros/materializations/common/merge.sql
2020-07-14 22:23:43.100237 (MainThread): Parsing macros/materializations/table/table.sql
2020-07-14 22:23:43.107830 (MainThread): Parsing macros/materializations/view/view.sql
2020-07-14 22:23:43.114629 (MainThread): Parsing macros/materializations/view/create_or_replace_view.sql
2020-07-14 22:23:43.121127 (MainThread): Parsing macros/etc/get_custom_alias.sql
2020-07-14 22:23:43.122154 (MainThread): Parsing macros/etc/query.sql
2020-07-14 22:23:43.123239 (MainThread): Parsing macros/etc/is_incremental.sql
2020-07-14 22:23:43.124808 (MainThread): Parsing macros/etc/datetime.sql
2020-07-14 22:23:43.133042 (MainThread): Parsing macros/etc/get_custom_schema.sql
2020-07-14 22:23:43.135358 (MainThread): Parsing macros/etc/get_custom_database.sql
2020-07-14 22:23:43.136935 (MainThread): Parsing macros/adapters/common.sql
2020-07-14 22:23:43.182446 (MainThread): Parsing macros/schema_tests/relationships.sql
2020-07-14 22:23:43.183725 (MainThread): Parsing macros/schema_tests/not_null.sql
2020-07-14 22:23:43.184749 (MainThread): Parsing macros/schema_tests/unique.sql
2020-07-14 22:23:43.185931 (MainThread): Parsing macros/schema_tests/accepted_values.sql
2020-07-14 22:23:43.188226 (MainThread): Parsing macros/etc.sql
2020-07-14 22:23:43.189338 (MainThread): Parsing macros/catalog.sql
2020-07-14 22:23:43.195452 (MainThread): Parsing macros/adapters.sql
2020-07-14 22:23:43.210021 (MainThread): Parsing macros/materializations/seed.sql
2020-07-14 22:23:43.212448 (MainThread): Parsing macros/materializations/view.sql
2020-07-14 22:23:43.214808 (MainThread): Parsing macros/materializations/table.sql
2020-07-14 22:23:43.224113 (MainThread): Parsing macros/materializations/incremental.sql
2020-07-14 22:23:43.237714 (MainThread): Parsing macros/materializations/snapshot.sql
2020-07-14 22:23:43.288001 (MainThread): Partial parsing not enabled
2020-07-14 22:23:43.293247 (MainThread): Parsing macros/cross_db_utils/except.sql
2020-07-14 22:23:43.294951 (MainThread): Parsing macros/cross_db_utils/replace.sql
2020-07-14 22:23:43.296745 (MainThread): Parsing macros/cross_db_utils/concat.sql
2020-07-14 22:23:43.299243 (MainThread): Parsing macros/cross_db_utils/datatypes.sql
2020-07-14 22:23:43.305092 (MainThread): Parsing macros/cross_db_utils/_is_relation.sql
2020-07-14 22:23:43.306579 (MainThread): Parsing macros/cross_db_utils/length.sql
2020-07-14 22:23:43.308153 (MainThread): Parsing macros/cross_db_utils/dateadd.sql
2020-07-14 22:23:43.310986 (MainThread): Parsing macros/cross_db_utils/intersect.sql
2020-07-14 22:23:43.312499 (MainThread): Parsing macros/cross_db_utils/right.sql
2020-07-14 22:23:43.315169 (MainThread): Parsing macros/cross_db_utils/datediff.sql
2020-07-14 22:23:43.324787 (MainThread): Parsing macros/cross_db_utils/safe_cast.sql
2020-07-14 22:23:43.326838 (MainThread): Parsing macros/cross_db_utils/hash.sql
2020-07-14 22:23:43.328310 (MainThread): Parsing macros/cross_db_utils/identifier.sql
2020-07-14 22:23:43.329758 (MainThread): Parsing macros/cross_db_utils/position.sql
2020-07-14 22:23:43.331330 (MainThread): Parsing macros/cross_db_utils/literal.sql
2020-07-14 22:23:43.332410 (MainThread): Parsing macros/cross_db_utils/current_timestamp.sql
2020-07-14 22:23:43.359951 (MainThread): Parsing macros/cross_db_utils/width_bucket.sql
2020-07-14 22:23:43.367524 (MainThread): Parsing macros/cross_db_utils/last_day.sql
2020-07-14 22:23:43.371342 (MainThread): Parsing macros/cross_db_utils/split_part.sql
2020-07-14 22:23:43.373946 (MainThread): Parsing macros/cross_db_utils/date_trunc.sql
2020-07-14 22:23:43.376139 (MainThread): Parsing macros/cross_db_utils/_is_ephemeral.sql
2020-07-14 22:23:43.378663 (MainThread): Parsing macros/materializations/insert_by_period_materialization.sql
2020-07-14 22:23:43.406295 (MainThread): Parsing macros/logger/pretty_log_format.sql
2020-07-14 22:23:43.407247 (MainThread): Parsing macros/logger/pretty_time.sql
2020-07-14 22:23:43.408278 (MainThread): Parsing macros/logger/log_info.sql
2020-07-14 22:23:43.409268 (MainThread): Parsing macros/datetime/date_spine.sql
2020-07-14 22:23:43.413375 (MainThread): Parsing macros/web/get_url_host.sql
2020-07-14 22:23:43.415612 (MainThread): Parsing macros/web/get_url_path.sql
2020-07-14 22:23:43.418270 (MainThread): Parsing macros/web/get_url_parameter.sql
2020-07-14 22:23:43.419639 (MainThread): Parsing macros/geo/haversine_distance.sql
2020-07-14 22:23:43.420823 (MainThread): Parsing macros/schema_tests/equal_rowcount.sql
2020-07-14 22:23:43.422378 (MainThread): Parsing macros/schema_tests/relationships_where.sql
2020-07-14 22:23:43.424709 (MainThread): Parsing macros/schema_tests/recency.sql
2020-07-14 22:23:43.426207 (MainThread): Parsing macros/schema_tests/not_constant.sql
2020-07-14 22:23:43.427448 (MainThread): Parsing macros/schema_tests/test_unique_where.sql
2020-07-14 22:23:43.429336 (MainThread): Parsing macros/schema_tests/at_least_one.sql
2020-07-14 22:23:43.430533 (MainThread): Parsing macros/schema_tests/unique_combination_of_columns.sql
2020-07-14 22:23:43.431907 (MainThread): Parsing macros/schema_tests/cardinality_equality.sql
2020-07-14 22:23:43.433600 (MainThread): Parsing macros/schema_tests/expression_is_true.sql
2020-07-14 22:23:43.434788 (MainThread): Parsing macros/schema_tests/test_not_null_where.sql
2020-07-14 22:23:43.436239 (MainThread): Parsing macros/schema_tests/equality.sql
2020-07-14 22:23:43.439244 (MainThread): Parsing macros/schema_tests/mutually_exclusive_ranges.sql
2020-07-14 22:23:43.444248 (MainThread): Parsing macros/sql/nullcheck_table.sql
2020-07-14 22:23:43.445444 (MainThread): Parsing macros/sql/get_relations_by_pattern.sql
2020-07-14 22:23:43.448217 (MainThread): Parsing macros/sql/generate_series.sql
2020-07-14 22:23:43.451208 (MainThread): Parsing macros/sql/get_relations_by_prefix.sql
2020-07-14 22:23:43.454474 (MainThread): Parsing macros/sql/get_tables_by_prefix_sql.sql
2020-07-14 22:23:43.456880 (MainThread): Parsing macros/sql/star.sql
2020-07-14 22:23:43.460158 (MainThread): Parsing macros/sql/unpivot.sql
2020-07-14 22:23:43.466303 (MainThread): Parsing macros/sql/union.sql
2020-07-14 22:23:43.474876 (MainThread): Parsing macros/sql/groupby.sql
2020-07-14 22:23:43.475881 (MainThread): Parsing macros/sql/get_tables_by_pattern.sql
2020-07-14 22:23:43.476882 (MainThread): Parsing macros/sql/surrogate_key.sql
2020-07-14 22:23:43.479376 (MainThread): Parsing macros/sql/safe_add.sql
2020-07-14 22:23:43.480464 (MainThread): Parsing macros/sql/nullcheck.sql
2020-07-14 22:23:43.481729 (MainThread): Parsing macros/sql/get_column_values.sql
2020-07-14 22:23:43.485393 (MainThread): Parsing macros/sql/pivot.sql
2020-07-14 22:23:43.487956 (MainThread): Parsing macros/sql/get_query_results_as_dict.sql
2020-07-14 22:23:43.522972 (MainThread): Acquiring new bigquery connection "model.stripe.stripe_weekly_overview".
2020-07-14 22:23:43.523091 (MainThread): Opening a new connection, currently in state init
2020-07-14 22:23:43.540229 (MainThread): Acquiring new bigquery connection "model.stripe.stripe_daily_overview".
2020-07-14 22:23:43.540345 (MainThread): Opening a new connection, currently in state closed
2020-07-14 22:23:43.549900 (MainThread): Acquiring new bigquery connection "model.stripe.stripe_invoice_details".
2020-07-14 22:23:43.549977 (MainThread): Opening a new connection, currently in state closed
2020-07-14 22:23:43.563119 (MainThread): Acquiring new bigquery connection "model.stripe.stripe_customer_overview".
2020-07-14 22:23:43.563204 (MainThread): Opening a new connection, currently in state closed
2020-07-14 22:23:43.574088 (MainThread): Acquiring new bigquery connection "model.stripe.stripe_balance_transactions".
2020-07-14 22:23:43.574209 (MainThread): Opening a new connection, currently in state closed
2020-07-14 22:23:43.582691 (MainThread): Acquiring new bigquery connection "model.stripe.stripe_quarterly_overview".
2020-07-14 22:23:43.582767 (MainThread): Opening a new connection, currently in state closed
2020-07-14 22:23:43.592280 (MainThread): Acquiring new bigquery connection "model.stripe.stripe_monthly_overview".
2020-07-14 22:23:43.592354 (MainThread): Opening a new connection, currently in state closed
2020-07-14 22:23:43.601962 (MainThread): Acquiring new bigquery connection "model.stripe.stripe_subscription_details".
2020-07-14 22:23:43.602037 (MainThread): Opening a new connection, currently in state closed
2020-07-14 22:23:43.615112 (MainThread): Acquiring new bigquery connection "model.stripe.stripe_balance_transaction_joined".
2020-07-14 22:23:43.615225 (MainThread): Opening a new connection, currently in state closed
2020-07-14 22:23:43.630698 (MainThread): Acquiring new bigquery connection "model.stripe.stripe_incomplete_charges".
2020-07-14 22:23:43.630777 (MainThread): Opening a new connection, currently in state closed
2020-07-14 22:23:43.906618 (MainThread): Acquiring new bigquery connection "model.stripe_source.stg_stripe_card".
2020-07-14 22:23:43.906754 (MainThread): Opening a new connection, currently in state closed
2020-07-14 22:23:43.919084 (MainThread): Acquiring new bigquery connection "model.stripe_source.stg_stripe_invoice_line_item".
2020-07-14 22:23:43.919226 (MainThread): Opening a new connection, currently in state closed
2020-07-14 22:23:43.933411 (MainThread): Acquiring new bigquery connection "model.stripe_source.stg_stripe_payment_method_card".
2020-07-14 22:23:43.933547 (MainThread): Opening a new connection, currently in state closed
2020-07-14 22:23:43.945031 (MainThread): Acquiring new bigquery connection "model.stripe_source.stg_stripe_charge".
2020-07-14 22:23:43.945124 (MainThread): Opening a new connection, currently in state closed
2020-07-14 22:23:43.955412 (MainThread): Acquiring new bigquery connection "model.stripe_source.stg_stripe_payout".
2020-07-14 22:23:43.955488 (MainThread): Opening a new connection, currently in state closed
2020-07-14 22:23:43.965752 (MainThread): Acquiring new bigquery connection "model.stripe_source.stg_stripe_customer".
2020-07-14 22:23:43.965867 (MainThread): Opening a new connection, currently in state closed
2020-07-14 22:23:43.975198 (MainThread): Acquiring new bigquery connection "model.stripe_source.stg_stripe_refund".
2020-07-14 22:23:43.975272 (MainThread): Opening a new connection, currently in state closed
2020-07-14 22:23:43.984498 (MainThread): Acquiring new bigquery connection "model.stripe_source.stg_stripe_subscription".
2020-07-14 22:23:43.984573 (MainThread): Opening a new connection, currently in state closed
2020-07-14 22:23:43.994405 (MainThread): Acquiring new bigquery connection "model.stripe_source.stg_stripe_payment_method".
2020-07-14 22:23:43.994480 (MainThread): Opening a new connection, currently in state closed
2020-07-14 22:23:44.003910 (MainThread): Acquiring new bigquery connection "model.stripe_source.stg_stripe_payment_intent".
2020-07-14 22:23:44.003987 (MainThread): Opening a new connection, currently in state closed
2020-07-14 22:23:44.012790 (MainThread): Acquiring new bigquery connection "model.stripe_source.stg_stripe_invoice".
2020-07-14 22:23:44.012862 (MainThread): Opening a new connection, currently in state closed
2020-07-14 22:23:44.023492 (MainThread): Acquiring new bigquery connection "model.stripe_source.stg_stripe_fee".
2020-07-14 22:23:44.023598 (MainThread): Opening a new connection, currently in state closed
2020-07-14 22:23:44.033287 (MainThread): Acquiring new bigquery connection "model.stripe_source.stg_stripe_balance_transaction".
2020-07-14 22:23:44.033370 (MainThread): Opening a new connection, currently in state closed
2020-07-14 22:23:46.143294 (MainThread): Found 23 models, 16 tests, 0 snapshots, 0 analyses, 278 macros, 0 operations, 0 seed files, 13 sources
2020-07-14 22:23:46.176072 (MainThread): 
2020-07-14 22:23:46.176679 (MainThread): Acquiring new bigquery connection "master".
2020-07-14 22:23:46.176841 (MainThread): Opening a new connection, currently in state closed
2020-07-14 22:23:46.202934 (ThreadPoolExecutor-0_0): Acquiring new bigquery connection "list_dbt-package-testing".
2020-07-14 22:23:46.203118 (ThreadPoolExecutor-0_0): Opening a new connection, currently in state init
2020-07-14 22:23:46.661866 (ThreadPoolExecutor-1_0): Acquiring new bigquery connection "list_dbt-package-testing_dbt_kristin".
2020-07-14 22:23:46.661998 (ThreadPoolExecutor-1_0): Re-using an available connection from the pool (formerly list_dbt-package-testing).
2020-07-14 22:23:46.662118 (ThreadPoolExecutor-1_0): Client.dataset is deprecated and will be removed in a future version. Use a string like 'my_project.my_dataset' or a cloud.google.bigquery.DatasetReference object, instead.
2020-07-14 22:23:46.853638 (MainThread): Acquiring new bigquery connection "master".
2020-07-14 22:23:46.853788 (MainThread): Opening a new connection, currently in state closed
2020-07-14 22:23:46.854064 (MainThread): 15:23:46 | Concurrency: 4 threads (target='dev_bigquery_dbt_testing')
2020-07-14 22:23:46.854206 (MainThread): 15:23:46 | 
2020-07-14 22:23:46.859288 (Thread-1): Began running node model.stripe_source.stg_stripe_charge
2020-07-14 22:23:46.859490 (Thread-2): Began running node model.stripe_source.stg_stripe_customer
2020-07-14 22:23:46.859653 (Thread-1): 15:23:46 | 1 of 23 START table model dbt_kristin.stg_stripe_charge.............. [RUN]
2020-07-14 22:23:46.859755 (Thread-3): Began running node model.stripe_source.stg_stripe_balance_transaction
2020-07-14 22:23:46.859923 (Thread-4): Began running node model.stripe_source.stg_stripe_card
2020-07-14 22:23:46.860065 (Thread-2): 15:23:46 | 2 of 23 START table model dbt_kristin.stg_stripe_customer............ [RUN]
2020-07-14 22:23:46.860532 (Thread-1): Acquiring new bigquery connection "model.stripe_source.stg_stripe_charge".
2020-07-14 22:23:46.860673 (Thread-3): 15:23:46 | 3 of 23 START table model dbt_kristin.stg_stripe_balance_transaction. [RUN]
2020-07-14 22:23:46.860808 (Thread-4): 15:23:46 | 4 of 23 START table model dbt_kristin.stg_stripe_card................ [RUN]
2020-07-14 22:23:46.861077 (Thread-2): Acquiring new bigquery connection "model.stripe_source.stg_stripe_customer".
2020-07-14 22:23:46.861181 (Thread-1): Re-using an available connection from the pool (formerly list_dbt-package-testing_dbt_kristin).
2020-07-14 22:23:46.861481 (Thread-3): Acquiring new bigquery connection "model.stripe_source.stg_stripe_balance_transaction".
2020-07-14 22:23:46.861755 (Thread-4): Acquiring new bigquery connection "model.stripe_source.stg_stripe_card".
2020-07-14 22:23:46.861883 (Thread-2): Opening a new connection, currently in state init
2020-07-14 22:23:46.861996 (Thread-1): Compiling model.stripe_source.stg_stripe_charge
2020-07-14 22:23:46.862127 (Thread-3): Opening a new connection, currently in state init
2020-07-14 22:23:46.862248 (Thread-4): Opening a new connection, currently in state init
2020-07-14 22:23:46.862410 (Thread-2): Compiling model.stripe_source.stg_stripe_customer
2020-07-14 22:23:46.874253 (Thread-3): Compiling model.stripe_source.stg_stripe_balance_transaction
2020-07-14 22:23:46.877356 (Thread-1): Writing injected SQL for node "model.stripe_source.stg_stripe_charge"
2020-07-14 22:23:46.877501 (Thread-4): Compiling model.stripe_source.stg_stripe_card
2020-07-14 22:23:46.884634 (Thread-2): Writing injected SQL for node "model.stripe_source.stg_stripe_customer"
2020-07-14 22:23:46.890938 (Thread-3): Writing injected SQL for node "model.stripe_source.stg_stripe_balance_transaction"
2020-07-14 22:23:46.897787 (Thread-4): Writing injected SQL for node "model.stripe_source.stg_stripe_card"
2020-07-14 22:23:46.898426 (Thread-1): finished collecting timing info
2020-07-14 22:23:46.904985 (Thread-3): finished collecting timing info
2020-07-14 22:23:46.911240 (Thread-4): finished collecting timing info
2020-07-14 22:23:46.945006 (Thread-1): Client.dataset is deprecated and will be removed in a future version. Use a string like 'my_project.my_dataset' or a cloud.google.bigquery.DatasetReference object, instead.
2020-07-14 22:23:46.946918 (Thread-2): finished collecting timing info
2020-07-14 22:23:46.950479 (Thread-2): Client.dataset is deprecated and will be removed in a future version. Use a string like 'my_project.my_dataset' or a cloud.google.bigquery.DatasetReference object, instead.
2020-07-14 22:23:46.951314 (Thread-3): Client.dataset is deprecated and will be removed in a future version. Use a string like 'my_project.my_dataset' or a cloud.google.bigquery.DatasetReference object, instead.
2020-07-14 22:23:46.951839 (Thread-4): Client.dataset is deprecated and will be removed in a future version. Use a string like 'my_project.my_dataset' or a cloud.google.bigquery.DatasetReference object, instead.
2020-07-14 22:23:47.177872 (Thread-1): Writing runtime SQL for node "model.stripe_source.stg_stripe_charge"
2020-07-14 22:23:47.178338 (Thread-1): On model.stripe_source.stg_stripe_charge: /* {"app": "dbt", "dbt_version": "0.17.0rc1", "profile_name": "integration_test", "target_name": "dev_bigquery_dbt_testing", "node_id": "model.stripe_source.stg_stripe_charge"} */


  create or replace table `dbt-package-testing`.`dbt_kristin`.`stg_stripe_charge`
  
  
  OPTIONS()
  as (
    with charge as (

    select *
    from `dbt-package-testing`.`stripe`.`charge`

), fields as (

    select 
      id as charge_id, 
      amount,
      amount_refunded,
      application_fee_amount,
      balance_transaction_id,
      captured as is_captured,
      card_id,
      created as created_at,
      customer_id,
      currency,
      description,
      failure_code,
      failure_message,
      paid as is_paid,
      payment_intent_id,
      receipt_email,
      receipt_number,
      refunded as is_refunded,
      status,
      invoice_id
    from charge
    
)

select *
from fields
  );
    
2020-07-14 22:23:47.211409 (Thread-4): Writing runtime SQL for node "model.stripe_source.stg_stripe_card"
2020-07-14 22:23:47.212121 (Thread-4): On model.stripe_source.stg_stripe_card: /* {"app": "dbt", "dbt_version": "0.17.0rc1", "profile_name": "integration_test", "target_name": "dev_bigquery_dbt_testing", "node_id": "model.stripe_source.stg_stripe_card"} */


  create or replace table `dbt-package-testing`.`dbt_kristin`.`stg_stripe_card`
  
  
  OPTIONS()
  as (
    with card as (

    select *
    from `dbt-package-testing`.`stripe`.`card`

), fields as (

    select 
      id as card_id,
      brand,
      country,
      created as created_at,
      customer_id,
      name,
      recipient,
      funding
    from card
    where not coalesce(is_deleted, false)

)

select *
from fields
  );
    
2020-07-14 22:23:47.216419 (Thread-3): Writing runtime SQL for node "model.stripe_source.stg_stripe_balance_transaction"
2020-07-14 22:23:47.216898 (Thread-3): On model.stripe_source.stg_stripe_balance_transaction: /* {"app": "dbt", "dbt_version": "0.17.0rc1", "profile_name": "integration_test", "target_name": "dev_bigquery_dbt_testing", "node_id": "model.stripe_source.stg_stripe_balance_transaction"} */


  create or replace table `dbt-package-testing`.`dbt_kristin`.`stg_stripe_balance_transaction`
  
  
  OPTIONS()
  as (
    with balance_transaction as (

    select *
    from `dbt-package-testing`.`stripe`.`balance_transaction`

), fields as (

    select 
      id as balance_transaction_id,
      amount,
      available_on,
      created as created_at,
      currency,
      description,
      exchange_rate,
      fee,
      net,
      source,
      status,
      type
    from balance_transaction
)

select *
from fields
  );
    
2020-07-14 22:23:47.229832 (Thread-2): Writing runtime SQL for node "model.stripe_source.stg_stripe_customer"
2020-07-14 22:23:47.230336 (Thread-2): On model.stripe_source.stg_stripe_customer: /* {"app": "dbt", "dbt_version": "0.17.0rc1", "profile_name": "integration_test", "target_name": "dev_bigquery_dbt_testing", "node_id": "model.stripe_source.stg_stripe_customer"} */


  create or replace table `dbt-package-testing`.`dbt_kristin`.`stg_stripe_customer`
  
  
  OPTIONS()
  as (
    with customer as (

    select *
    from `dbt-package-testing`.`stripe`.`customer`

), fields as (

    select 
      id as customer_id,
      account_balance,
      created as created_at,
      currency,
      default_card_id,
      delinquent as is_deliguent,
      description,
      email,
      shipping_address_city,
      shipping_address_country,
      shipping_address_line_1,
      shipping_address_line_2,
      shipping_address_postal_code,
      shipping_address_state,
      shipping_name,
      shipping_phone
    from customer
    where not is_deleted

)

select *
from fields
  );
    
2020-07-14 22:23:49.368057 (Thread-1): finished collecting timing info
2020-07-14 22:23:49.368922 (Thread-1): Sending event: {'category': 'dbt', 'action': 'run_model', 'label': 'ef9e9107-51f0-46f4-9bee-df58f1887354', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x10b181310>]}
2020-07-14 22:23:49.369176 (Thread-1): 15:23:49 | 1 of 23 OK created table model dbt_kristin.stg_stripe_charge......... [CREATE TABLE (1485) in 2.51s]
2020-07-14 22:23:49.369313 (Thread-1): Finished running node model.stripe_source.stg_stripe_charge
2020-07-14 22:23:49.369452 (Thread-1): Began running node model.stripe_source.stg_stripe_payment_intent
2020-07-14 22:23:49.369589 (Thread-1): 15:23:49 | 5 of 23 START table model dbt_kristin.stg_stripe_payment_intent...... [RUN]
2020-07-14 22:23:49.369975 (Thread-1): Acquiring new bigquery connection "model.stripe_source.stg_stripe_payment_intent".
2020-07-14 22:23:49.370083 (Thread-1): Re-using an available connection from the pool (formerly model.stripe_source.stg_stripe_charge).
2020-07-14 22:23:49.370181 (Thread-1): Compiling model.stripe_source.stg_stripe_payment_intent
2020-07-14 22:23:49.378276 (Thread-1): Writing injected SQL for node "model.stripe_source.stg_stripe_payment_intent"
2020-07-14 22:23:49.378845 (Thread-1): finished collecting timing info
2020-07-14 22:23:49.383376 (Thread-1): Client.dataset is deprecated and will be removed in a future version. Use a string like 'my_project.my_dataset' or a cloud.google.bigquery.DatasetReference object, instead.
2020-07-14 22:23:49.548664 (Thread-1): Writing runtime SQL for node "model.stripe_source.stg_stripe_payment_intent"
2020-07-14 22:23:49.549133 (Thread-1): On model.stripe_source.stg_stripe_payment_intent: /* {"app": "dbt", "dbt_version": "0.17.0rc1", "profile_name": "integration_test", "target_name": "dev_bigquery_dbt_testing", "node_id": "model.stripe_source.stg_stripe_payment_intent"} */


  create or replace table `dbt-package-testing`.`dbt_kristin`.`stg_stripe_payment_intent`
  
  
  OPTIONS()
  as (
    with payment_intent as (

    select *
    from `dbt-package-testing`.`stripe`.`payment_intent`

), fields as (

    select 
      id as payment_intent_id,
      amount,
      amount_capturable,
      amount_received,
      application,
      application_fee_amount,
      canceled_at,
      cancellation_reason,
      capture_method,
      confirmation_method,
      created as created_at,
      currency,
      customer_id,
      description,
      payment_method_id,
      receipt_email,
      statement_descriptor,
      status
    from payment_intent

)

select *
from fields
  );
    
2020-07-14 22:23:49.572154 (Thread-4): finished collecting timing info
2020-07-14 22:23:49.572865 (Thread-4): Sending event: {'category': 'dbt', 'action': 'run_model', 'label': 'ef9e9107-51f0-46f4-9bee-df58f1887354', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x10aff5bb0>]}
2020-07-14 22:23:49.573110 (Thread-4): 15:23:49 | 4 of 23 OK created table model dbt_kristin.stg_stripe_card........... [CREATE TABLE (560) in 2.71s]
2020-07-14 22:23:49.573241 (Thread-4): Finished running node model.stripe_source.stg_stripe_card
2020-07-14 22:23:49.573374 (Thread-4): Began running node model.stripe_source.stg_stripe_payment_method
2020-07-14 22:23:49.573615 (Thread-4): 15:23:49 | 6 of 23 START table model dbt_kristin.stg_stripe_payment_method...... [RUN]
2020-07-14 22:23:49.573897 (Thread-4): Acquiring new bigquery connection "model.stripe_source.stg_stripe_payment_method".
2020-07-14 22:23:49.573988 (Thread-4): Re-using an available connection from the pool (formerly model.stripe_source.stg_stripe_card).
2020-07-14 22:23:49.574105 (Thread-4): Compiling model.stripe_source.stg_stripe_payment_method
2020-07-14 22:23:49.581942 (Thread-4): Writing injected SQL for node "model.stripe_source.stg_stripe_payment_method"
2020-07-14 22:23:49.582417 (Thread-4): finished collecting timing info
2020-07-14 22:23:49.586610 (Thread-4): Client.dataset is deprecated and will be removed in a future version. Use a string like 'my_project.my_dataset' or a cloud.google.bigquery.DatasetReference object, instead.
2020-07-14 22:23:49.657237 (Thread-2): finished collecting timing info
2020-07-14 22:23:49.657962 (Thread-2): Sending event: {'category': 'dbt', 'action': 'run_model', 'label': 'ef9e9107-51f0-46f4-9bee-df58f1887354', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x10b1df1c0>]}
2020-07-14 22:23:49.658229 (Thread-2): 15:23:49 | 2 of 23 OK created table model dbt_kristin.stg_stripe_customer....... [CREATE TABLE (405) in 2.80s]
2020-07-14 22:23:49.658377 (Thread-2): Finished running node model.stripe_source.stg_stripe_customer
2020-07-14 22:23:49.658532 (Thread-2): Began running node model.stripe_source.stg_stripe_payout
2020-07-14 22:23:49.658805 (Thread-2): 15:23:49 | 7 of 23 START table model dbt_kristin.stg_stripe_payout.............. [RUN]
2020-07-14 22:23:49.659092 (Thread-2): Acquiring new bigquery connection "model.stripe_source.stg_stripe_payout".
2020-07-14 22:23:49.659196 (Thread-2): Re-using an available connection from the pool (formerly model.stripe_source.stg_stripe_customer).
2020-07-14 22:23:49.659295 (Thread-2): Compiling model.stripe_source.stg_stripe_payout
2020-07-14 22:23:49.667096 (Thread-2): Writing injected SQL for node "model.stripe_source.stg_stripe_payout"
2020-07-14 22:23:49.669914 (Thread-3): finished collecting timing info
2020-07-14 22:23:49.670631 (Thread-3): Sending event: {'category': 'dbt', 'action': 'run_model', 'label': 'ef9e9107-51f0-46f4-9bee-df58f1887354', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x10afaee50>]}
2020-07-14 22:23:49.671011 (Thread-3): 15:23:49 | 3 of 23 OK created table model dbt_kristin.stg_stripe_balance_transaction [CREATE TABLE (2124) in 2.81s]
2020-07-14 22:23:49.671178 (Thread-2): finished collecting timing info
2020-07-14 22:23:49.675592 (Thread-2): Client.dataset is deprecated and will be removed in a future version. Use a string like 'my_project.my_dataset' or a cloud.google.bigquery.DatasetReference object, instead.
2020-07-14 22:23:49.676410 (Thread-3): Finished running node model.stripe_source.stg_stripe_balance_transaction
2020-07-14 22:23:49.676593 (Thread-3): Began running node model.stripe_source.stg_stripe_refund
2020-07-14 22:23:49.676745 (Thread-3): 15:23:49 | 8 of 23 START table model dbt_kristin.stg_stripe_refund.............. [RUN]
2020-07-14 22:23:49.677152 (Thread-3): Acquiring new bigquery connection "model.stripe_source.stg_stripe_refund".
2020-07-14 22:23:49.677269 (Thread-3): Re-using an available connection from the pool (formerly model.stripe_source.stg_stripe_balance_transaction).
2020-07-14 22:23:49.677375 (Thread-3): Compiling model.stripe_source.stg_stripe_refund
2020-07-14 22:23:49.685313 (Thread-3): Writing injected SQL for node "model.stripe_source.stg_stripe_refund"
2020-07-14 22:23:49.686501 (Thread-3): finished collecting timing info
2020-07-14 22:23:49.690747 (Thread-3): Client.dataset is deprecated and will be removed in a future version. Use a string like 'my_project.my_dataset' or a cloud.google.bigquery.DatasetReference object, instead.
2020-07-14 22:23:49.747140 (Thread-4): Writing runtime SQL for node "model.stripe_source.stg_stripe_payment_method"
2020-07-14 22:23:49.747864 (Thread-4): On model.stripe_source.stg_stripe_payment_method: /* {"app": "dbt", "dbt_version": "0.17.0rc1", "profile_name": "integration_test", "target_name": "dev_bigquery_dbt_testing", "node_id": "model.stripe_source.stg_stripe_payment_method"} */


  create or replace table `dbt-package-testing`.`dbt_kristin`.`stg_stripe_payment_method`
  
  
  OPTIONS()
  as (
    with payment_method as (

    select *
    from `dbt-package-testing`.`stripe`.`payment_method`

), fields as (

    select 
      id as payment_method_id,
      created as created_at,
      customer_id,
      type
    from payment_method
    where not is_deleted

)

select *
from fields
  );
    
2020-07-14 22:23:49.825047 (Thread-2): Writing runtime SQL for node "model.stripe_source.stg_stripe_payout"
2020-07-14 22:23:49.825565 (Thread-2): On model.stripe_source.stg_stripe_payout: /* {"app": "dbt", "dbt_version": "0.17.0rc1", "profile_name": "integration_test", "target_name": "dev_bigquery_dbt_testing", "node_id": "model.stripe_source.stg_stripe_payout"} */


  create or replace table `dbt-package-testing`.`dbt_kristin`.`stg_stripe_payout`
  
  
  OPTIONS()
  as (
    with payout as (

    select *
    from `dbt-package-testing`.`stripe`.`payout`

), fields as (

    select 
      id as payout_id,
      amount,
      arrival_date,
      automatic as is_automatic,
      balance_transaction_id,
      created as created_at,
      currency,
      description,
      method,
      source_type,
      status,
      type
    from payout

)

select *
from fields
  );
    
2020-07-14 22:23:49.831553 (Thread-3): Writing runtime SQL for node "model.stripe_source.stg_stripe_refund"
2020-07-14 22:23:49.832061 (Thread-3): On model.stripe_source.stg_stripe_refund: /* {"app": "dbt", "dbt_version": "0.17.0rc1", "profile_name": "integration_test", "target_name": "dev_bigquery_dbt_testing", "node_id": "model.stripe_source.stg_stripe_refund"} */


  create or replace table `dbt-package-testing`.`dbt_kristin`.`stg_stripe_refund`
  
  
  OPTIONS()
  as (
    with refund as (

    select *
    from `dbt-package-testing`.`stripe`.`refund`

), fields as (

    select 
      id as refund_id,
      amount,
      balance_transaction_id,
      charge_id,
      created as created_at,
      currency,
      description,
      reason,
      receipt_number,
      status
    from refund

)

select *
from fields
  );
    
2020-07-14 22:23:51.368684 (Thread-1): finished collecting timing info
2020-07-14 22:23:51.369449 (Thread-1): Sending event: {'category': 'dbt', 'action': 'run_model', 'label': 'ef9e9107-51f0-46f4-9bee-df58f1887354', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x10b2b8940>]}
2020-07-14 22:23:51.369715 (Thread-1): 15:23:51 | 5 of 23 OK created table model dbt_kristin.stg_stripe_payment_intent. [CREATE TABLE (205) in 2.00s]
2020-07-14 22:23:51.369861 (Thread-1): Finished running node model.stripe_source.stg_stripe_payment_intent
2020-07-14 22:23:51.370012 (Thread-1): Began running node model.stripe_source.stg_stripe_invoice
2020-07-14 22:23:51.370267 (Thread-1): 15:23:51 | 9 of 23 START table model dbt_kristin.stg_stripe_invoice............. [RUN]
2020-07-14 22:23:51.370560 (Thread-1): Acquiring new bigquery connection "model.stripe_source.stg_stripe_invoice".
2020-07-14 22:23:51.370664 (Thread-1): Re-using an available connection from the pool (formerly model.stripe_source.stg_stripe_payment_intent).
2020-07-14 22:23:51.370766 (Thread-1): Compiling model.stripe_source.stg_stripe_invoice
2020-07-14 22:23:51.380162 (Thread-1): Writing injected SQL for node "model.stripe_source.stg_stripe_invoice"
2020-07-14 22:23:51.380653 (Thread-1): finished collecting timing info
2020-07-14 22:23:51.412822 (Thread-1): Client.dataset is deprecated and will be removed in a future version. Use a string like 'my_project.my_dataset' or a cloud.google.bigquery.DatasetReference object, instead.
2020-07-14 22:23:51.563024 (Thread-1): Writing runtime SQL for node "model.stripe_source.stg_stripe_invoice"
2020-07-14 22:23:51.563756 (Thread-1): On model.stripe_source.stg_stripe_invoice: /* {"app": "dbt", "dbt_version": "0.17.0rc1", "profile_name": "integration_test", "target_name": "dev_bigquery_dbt_testing", "node_id": "model.stripe_source.stg_stripe_invoice"} */


  create or replace table `dbt-package-testing`.`dbt_kristin`.`stg_stripe_invoice`
  
  
  OPTIONS()
  as (
    

with invoice as (

    select *
    from `dbt-package-testing`.`stripe`.`invoice`

), fields as (

    select
      id as invoice_id,
      amount_due,
      amount_paid,
      amount_remaining,
      attempt_count,
      auto_advance,
      billing_reason,
      charge_id,
      created as created_at,
      currency,
      customer_id,
      description,
      due_date,
      number,
      paid as is_paid,
      receipt_number,
      status,
      subtotal,
      tax,
      tax_percent,
      total
    from invoice
    where not coalesce(is_deleted, false)

)

select * from fields
  );
    
2020-07-14 22:23:51.622436 (Thread-3): finished collecting timing info
2020-07-14 22:23:51.623141 (Thread-3): Sending event: {'category': 'dbt', 'action': 'run_model', 'label': 'ef9e9107-51f0-46f4-9bee-df58f1887354', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x10b3386d0>]}
2020-07-14 22:23:51.623401 (Thread-3): 15:23:51 | 8 of 23 OK created table model dbt_kristin.stg_stripe_refund......... [CREATE TABLE (31) in 1.95s]
2020-07-14 22:23:51.623544 (Thread-3): Finished running node model.stripe_source.stg_stripe_refund
2020-07-14 22:23:51.623724 (Thread-3): Began running node model.stripe_source.stg_stripe_invoice_line_item
2020-07-14 22:23:51.623873 (Thread-3): 15:23:51 | 10 of 23 START table model dbt_kristin.stg_stripe_invoice_line_item.. [RUN]
2020-07-14 22:23:51.624796 (Thread-3): Acquiring new bigquery connection "model.stripe_source.stg_stripe_invoice_line_item".
2020-07-14 22:23:51.625014 (Thread-3): Re-using an available connection from the pool (formerly model.stripe_source.stg_stripe_refund).
2020-07-14 22:23:51.627140 (Thread-2): finished collecting timing info
2020-07-14 22:23:51.627360 (Thread-3): Compiling model.stripe_source.stg_stripe_invoice_line_item
2020-07-14 22:23:51.627892 (Thread-2): Sending event: {'category': 'dbt', 'action': 'run_model', 'label': 'ef9e9107-51f0-46f4-9bee-df58f1887354', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x10b31bf10>]}
2020-07-14 22:23:51.636363 (Thread-3): Writing injected SQL for node "model.stripe_source.stg_stripe_invoice_line_item"
2020-07-14 22:23:51.636633 (Thread-2): 15:23:51 | 7 of 23 OK created table model dbt_kristin.stg_stripe_payout......... [CREATE TABLE (836) in 1.97s]
2020-07-14 22:23:51.636904 (Thread-2): Finished running node model.stripe_source.stg_stripe_payout
2020-07-14 22:23:51.637068 (Thread-2): Began running node model.stripe_source.stg_stripe_subscription
2020-07-14 22:23:51.637314 (Thread-2): 15:23:51 | 11 of 23 START table model dbt_kristin.stg_stripe_subscription....... [RUN]
2020-07-14 22:23:51.637798 (Thread-2): Acquiring new bigquery connection "model.stripe_source.stg_stripe_subscription".
2020-07-14 22:23:51.638019 (Thread-2): Re-using an available connection from the pool (formerly model.stripe_source.stg_stripe_payout).
2020-07-14 22:23:51.638183 (Thread-3): finished collecting timing info
2020-07-14 22:23:51.638420 (Thread-2): Compiling model.stripe_source.stg_stripe_subscription
2020-07-14 22:23:51.642700 (Thread-3): Client.dataset is deprecated and will be removed in a future version. Use a string like 'my_project.my_dataset' or a cloud.google.bigquery.DatasetReference object, instead.
2020-07-14 22:23:51.651095 (Thread-2): Writing injected SQL for node "model.stripe_source.stg_stripe_subscription"
2020-07-14 22:23:51.652399 (Thread-2): finished collecting timing info
2020-07-14 22:23:51.656946 (Thread-2): Client.dataset is deprecated and will be removed in a future version. Use a string like 'my_project.my_dataset' or a cloud.google.bigquery.DatasetReference object, instead.
2020-07-14 22:23:51.796320 (Thread-3): Writing runtime SQL for node "model.stripe_source.stg_stripe_invoice_line_item"
2020-07-14 22:23:51.796854 (Thread-3): On model.stripe_source.stg_stripe_invoice_line_item: /* {"app": "dbt", "dbt_version": "0.17.0rc1", "profile_name": "integration_test", "target_name": "dev_bigquery_dbt_testing", "node_id": "model.stripe_source.stg_stripe_invoice_line_item"} */


  create or replace table `dbt-package-testing`.`dbt_kristin`.`stg_stripe_invoice_line_item`
  
  
  OPTIONS()
  as (
    

with invoice_line_item as (

    select *
    from `dbt-package-testing`.`stripe`.`invoice_line_item`

), fields as (

    select
      id as invoice_line_item_id,
      invoice_id,
      amount,
      currency,
      description,
      discountable as is_discountable,
      plan_id,
      proration,
      quantity,
      subscription_id,
      subscription_item_id,
      type,
      unique_id
    from invoice_line_item
    where id not like 'sub%'

)

select * from fields
  );
    
2020-07-14 22:23:51.816938 (Thread-2): Writing runtime SQL for node "model.stripe_source.stg_stripe_subscription"
2020-07-14 22:23:51.817436 (Thread-2): On model.stripe_source.stg_stripe_subscription: /* {"app": "dbt", "dbt_version": "0.17.0rc1", "profile_name": "integration_test", "target_name": "dev_bigquery_dbt_testing", "node_id": "model.stripe_source.stg_stripe_subscription"} */


  create or replace table `dbt-package-testing`.`dbt_kristin`.`stg_stripe_subscription`
  
  
  OPTIONS()
  as (
    

with subscription as (

    select *
    from `dbt-package-testing`.`stripe`.`subscription`

), fields as (

    select
      id as subscription_id,
      status,
      billing,
      billing_cycle_anchor,
      cancel_at,
      cancel_at_period_end,
      canceled_at,
      created as created_at,
      current_period_start,
      current_period_end,
      customer_id,
      days_until_due,
      start_date,
      ended_at
    from subscription

)

select * from fields
  );
    
2020-07-14 22:23:52.408735 (Thread-4): finished collecting timing info
2020-07-14 22:23:52.409445 (Thread-4): Sending event: {'category': 'dbt', 'action': 'run_model', 'label': 'ef9e9107-51f0-46f4-9bee-df58f1887354', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x10b441ee0>]}
2020-07-14 22:23:52.409702 (Thread-4): 15:23:52 | 6 of 23 OK created table model dbt_kristin.stg_stripe_payment_method. [CREATE TABLE (214) in 2.84s]
2020-07-14 22:23:52.409842 (Thread-4): Finished running node model.stripe_source.stg_stripe_payment_method
2020-07-14 22:23:52.409989 (Thread-4): Began running node model.stripe_source.stg_stripe_fee
2020-07-14 22:23:52.410245 (Thread-4): 15:23:52 | 12 of 23 START table model dbt_kristin.stg_stripe_fee................ [RUN]
2020-07-14 22:23:52.410665 (Thread-4): Acquiring new bigquery connection "model.stripe_source.stg_stripe_fee".
2020-07-14 22:23:52.410773 (Thread-4): Re-using an available connection from the pool (formerly model.stripe_source.stg_stripe_payment_method).
2020-07-14 22:23:52.410871 (Thread-4): Compiling model.stripe_source.stg_stripe_fee
2020-07-14 22:23:52.418858 (Thread-4): Writing injected SQL for node "model.stripe_source.stg_stripe_fee"
2020-07-14 22:23:52.419375 (Thread-4): finished collecting timing info
2020-07-14 22:23:52.424657 (Thread-4): Client.dataset is deprecated and will be removed in a future version. Use a string like 'my_project.my_dataset' or a cloud.google.bigquery.DatasetReference object, instead.
2020-07-14 22:23:52.572247 (Thread-4): Writing runtime SQL for node "model.stripe_source.stg_stripe_fee"
2020-07-14 22:23:52.572981 (Thread-4): On model.stripe_source.stg_stripe_fee: /* {"app": "dbt", "dbt_version": "0.17.0rc1", "profile_name": "integration_test", "target_name": "dev_bigquery_dbt_testing", "node_id": "model.stripe_source.stg_stripe_fee"} */


  create or replace table `dbt-package-testing`.`dbt_kristin`.`stg_stripe_fee`
  
  
  OPTIONS()
  as (
    with fee as (

    select *
    from `dbt-package-testing`.`stripe`.`fee`

), fields as (

    select 
      balance_transaction_id,
      amount,
      application,
      currency,
      description,
      type
    from fee

)

select *
from fields
  );
    
2020-07-14 22:23:53.379005 (Thread-1): finished collecting timing info
2020-07-14 22:23:53.379704 (Thread-1): Sending event: {'category': 'dbt', 'action': 'run_model', 'label': 'ef9e9107-51f0-46f4-9bee-df58f1887354', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x10b32b3a0>]}
2020-07-14 22:23:53.379956 (Thread-1): 15:23:53 | 9 of 23 OK created table model dbt_kristin.stg_stripe_invoice........ [CREATE TABLE (492) in 2.01s]
2020-07-14 22:23:53.380095 (Thread-1): Finished running node model.stripe_source.stg_stripe_invoice
2020-07-14 22:23:53.380235 (Thread-1): Began running node model.stripe_source.stg_stripe_payment_method_card
2020-07-14 22:23:53.380465 (Thread-1): 15:23:53 | 13 of 23 START table model dbt_kristin.stg_stripe_payment_method_card [RUN]
2020-07-14 22:23:53.380723 (Thread-1): Acquiring new bigquery connection "model.stripe_source.stg_stripe_payment_method_card".
2020-07-14 22:23:53.380824 (Thread-1): Re-using an available connection from the pool (formerly model.stripe_source.stg_stripe_invoice).
2020-07-14 22:23:53.380915 (Thread-1): Compiling model.stripe_source.stg_stripe_payment_method_card
2020-07-14 22:23:53.388839 (Thread-1): Writing injected SQL for node "model.stripe_source.stg_stripe_payment_method_card"
2020-07-14 22:23:53.389392 (Thread-1): finished collecting timing info
2020-07-14 22:23:53.393700 (Thread-1): Client.dataset is deprecated and will be removed in a future version. Use a string like 'my_project.my_dataset' or a cloud.google.bigquery.DatasetReference object, instead.
2020-07-14 22:23:53.528828 (Thread-1): Writing runtime SQL for node "model.stripe_source.stg_stripe_payment_method_card"
2020-07-14 22:23:53.529363 (Thread-1): On model.stripe_source.stg_stripe_payment_method_card: /* {"app": "dbt", "dbt_version": "0.17.0rc1", "profile_name": "integration_test", "target_name": "dev_bigquery_dbt_testing", "node_id": "model.stripe_source.stg_stripe_payment_method_card"} */


  create or replace table `dbt-package-testing`.`dbt_kristin`.`stg_stripe_payment_method_card`
  
  
  OPTIONS()
  as (
    with payment_method_card as (

    select *
    from `dbt-package-testing`.`stripe`.`payment_method_card`

), fields as (

    select 
      payment_method_id,
      brand,
      funding
    from payment_method_card

)

select *
from fields
  );
    
2020-07-14 22:23:53.605143 (Thread-3): finished collecting timing info
2020-07-14 22:23:53.605859 (Thread-3): Sending event: {'category': 'dbt', 'action': 'run_model', 'label': 'ef9e9107-51f0-46f4-9bee-df58f1887354', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x10b3b2a60>]}
2020-07-14 22:23:53.606118 (Thread-3): 15:23:53 | 10 of 23 OK created table model dbt_kristin.stg_stripe_invoice_line_item [CREATE TABLE (33) in 1.98s]
2020-07-14 22:23:53.606258 (Thread-3): Finished running node model.stripe_source.stg_stripe_invoice_line_item
2020-07-14 22:23:53.606403 (Thread-3): Began running node model.stripe.stripe_incomplete_charges
2020-07-14 22:23:53.606652 (Thread-3): 15:23:53 | 14 of 23 START table model dbt_kristin.stripe_incomplete_charges..... [RUN]
2020-07-14 22:23:53.606943 (Thread-3): Acquiring new bigquery connection "model.stripe.stripe_incomplete_charges".
2020-07-14 22:23:53.607043 (Thread-3): Re-using an available connection from the pool (formerly model.stripe_source.stg_stripe_invoice_line_item).
2020-07-14 22:23:53.607141 (Thread-3): Compiling model.stripe.stripe_incomplete_charges
2020-07-14 22:23:53.614523 (Thread-3): Writing injected SQL for node "model.stripe.stripe_incomplete_charges"
2020-07-14 22:23:53.614983 (Thread-3): finished collecting timing info
2020-07-14 22:23:53.619939 (Thread-3): Writing runtime SQL for node "model.stripe.stripe_incomplete_charges"
2020-07-14 22:23:53.620520 (Thread-3): On model.stripe.stripe_incomplete_charges: /* {"app": "dbt", "dbt_version": "0.17.0rc1", "profile_name": "integration_test", "target_name": "dev_bigquery_dbt_testing", "node_id": "model.stripe.stripe_incomplete_charges"} */


  create or replace table `dbt-package-testing`.`dbt_kristin`.`stripe_incomplete_charges`
  
  
  OPTIONS()
  as (
    with charge as (

    select *
    from `dbt-package-testing`.`dbt_kristin`.`stg_stripe_charge`

)

select 
  created_at,
  customer_id,
  amount
from charge
where not is_captured
  );
    
2020-07-14 22:23:53.624833 (Thread-2): finished collecting timing info
2020-07-14 22:23:53.625809 (Thread-2): Sending event: {'category': 'dbt', 'action': 'run_model', 'label': 'ef9e9107-51f0-46f4-9bee-df58f1887354', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x10b27c6d0>]}
2020-07-14 22:23:53.626072 (Thread-2): 15:23:53 | 11 of 23 OK created table model dbt_kristin.stg_stripe_subscription.. [CREATE TABLE (49) in 1.99s]
2020-07-14 22:23:53.626483 (Thread-2): Finished running node model.stripe_source.stg_stripe_subscription
2020-07-14 22:23:53.626678 (Thread-2): Began running node model.stripe.stripe_balance_transaction_joined
2020-07-14 22:23:53.626827 (Thread-2): 15:23:53 | 15 of 23 START table model dbt_kristin.stripe_balance_transaction_joined [RUN]
2020-07-14 22:23:53.627262 (Thread-2): Acquiring new bigquery connection "model.stripe.stripe_balance_transaction_joined".
2020-07-14 22:23:53.627375 (Thread-2): Re-using an available connection from the pool (formerly model.stripe_source.stg_stripe_subscription).
2020-07-14 22:23:53.627479 (Thread-2): Compiling model.stripe.stripe_balance_transaction_joined
2020-07-14 22:23:53.643495 (Thread-2): Writing injected SQL for node "model.stripe.stripe_balance_transaction_joined"
2020-07-14 22:23:53.644094 (Thread-2): finished collecting timing info
2020-07-14 22:23:53.648372 (Thread-2): Writing runtime SQL for node "model.stripe.stripe_balance_transaction_joined"
2020-07-14 22:23:53.648796 (Thread-2): On model.stripe.stripe_balance_transaction_joined: /* {"app": "dbt", "dbt_version": "0.17.0rc1", "profile_name": "integration_test", "target_name": "dev_bigquery_dbt_testing", "node_id": "model.stripe.stripe_balance_transaction_joined"} */


  create or replace table `dbt-package-testing`.`dbt_kristin`.`stripe_balance_transaction_joined`
  
  
  OPTIONS()
  as (
    with balance_transaction as (

    select *
    from `dbt-package-testing`.`dbt_kristin`.`stg_stripe_balance_transaction`
  
), charge as (

    select *
    from `dbt-package-testing`.`dbt_kristin`.`stg_stripe_charge`

), payment_intent as (

    select *
    from `dbt-package-testing`.`dbt_kristin`.`stg_stripe_payment_intent`

), payment_method as (

    select *
    from `dbt-package-testing`.`dbt_kristin`.`stg_stripe_payment_method`

), card as (

    select *
    from `dbt-package-testing`.`dbt_kristin`.`stg_stripe_card`

), payout as (

    select *
    from `dbt-package-testing`.`dbt_kristin`.`stg_stripe_payout`

), refund as (

    select *
    from `dbt-package-testing`.`dbt_kristin`.`stg_stripe_refund`

), customer as (

    select *
    from `dbt-package-testing`.`dbt_kristin`.`stg_stripe_customer`


)

select 
  balance_transaction.balance_transaction_id,
  balance_transaction.created_at,
  balance_transaction.available_on,
  balance_transaction.currency,
  balance_transaction.amount,
  balance_transaction.fee,
  balance_transaction.net,
  balance_transaction.type,
  case
    when balance_transaction.type in ('charge', 'payment') then 'charge'
    when balance_transaction.type in ('refund', 'payment_refund') then 'refund'
    when balance_transaction.type in ('payout_cancel', 'payout_failure')	then 'payout_reversal'
    when balance_transaction.type in ('transfer', 'recipient_transfer') then	'transfer'
    when balance_transaction.type in ('transfer_cancel', 'transfer_failure', 'recipient_transfer_cancel', 'recipient_transfer_failure') then 'transfer_reversal'
    else balance_transaction.type
  end as reporting_category,
  balance_transaction.source,
  balance_transaction.description,
  case when balance_transaction.type = 'charge' then charge.amount end as customer_facing_amount, --think this might be the charge amount/currency
  case when balance_transaction.type = 'charge' then charge.currency end as customer_facing_currency,
  date_add(date(balance_transaction.available_on), interval 1 day) as effective_at,
  coalesce(charge.customer_id, refund_charge.customer_id) as customer_id,
  charge.receipt_email,
  customer.description as customer_description,
  charge.charge_id,
  charge.payment_intent_id,
  charge.created_at as charge_created_at,
  payment_method.type as payment_method_type,
  card.brand as card_brand,
  card.funding as card_funding,
  card.country as card_country,
  payout.payout_id,
  payout.arrival_date as payout_expeted_arrival_date,
  payout.status as payout_status,
  payout.type as payout_type,
  payout.description as payout_description,
  refund.reason as refund_reason
from balance_transaction
left join charge on charge.balance_transaction_id = balance_transaction.balance_transaction_id
left join customer on charge.customer_id = customer.customer_id
left join payment_intent on charge.payment_intent_id = payment_intent.payment_intent_id
left join payment_method on payment_intent.payment_method_id = payment_method.payment_method_id
left join card on charge.card_id = card.card_id
left join payout on payout.balance_transaction_id = balance_transaction.balance_transaction_id
left join refund on refund.balance_transaction_id = balance_transaction.balance_transaction_id
left join charge as refund_charge on refund.charge_id = refund_charge.charge_id
order by created_at desc
  );
    
2020-07-14 22:23:54.452061 (Thread-4): finished collecting timing info
2020-07-14 22:23:54.452874 (Thread-4): Sending event: {'category': 'dbt', 'action': 'run_model', 'label': 'ef9e9107-51f0-46f4-9bee-df58f1887354', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x10b13f310>]}
2020-07-14 22:23:54.453170 (Thread-4): 15:23:54 | 12 of 23 OK created table model dbt_kristin.stg_stripe_fee........... [CREATE TABLE (1227) in 2.04s]
2020-07-14 22:23:54.453332 (Thread-4): Finished running node model.stripe_source.stg_stripe_fee
2020-07-14 22:23:54.453664 (Thread-4): Began running node model.stripe.stripe_invoice_details
2020-07-14 22:23:54.453834 (Thread-4): 15:23:54 | 16 of 23 START table model dbt_kristin.stripe_invoice_details........ [RUN]
2020-07-14 22:23:54.454216 (Thread-4): Acquiring new bigquery connection "model.stripe.stripe_invoice_details".
2020-07-14 22:23:54.454325 (Thread-4): Re-using an available connection from the pool (formerly model.stripe_source.stg_stripe_fee).
2020-07-14 22:23:54.454425 (Thread-4): Compiling model.stripe.stripe_invoice_details
2020-07-14 22:23:54.480677 (Thread-4): Writing injected SQL for node "model.stripe.stripe_invoice_details"
2020-07-14 22:23:54.481120 (Thread-4): finished collecting timing info
2020-07-14 22:23:54.486276 (Thread-4): Client.dataset is deprecated and will be removed in a future version. Use a string like 'my_project.my_dataset' or a cloud.google.bigquery.DatasetReference object, instead.
2020-07-14 22:23:54.648048 (Thread-4): Writing runtime SQL for node "model.stripe.stripe_invoice_details"
2020-07-14 22:23:54.648550 (Thread-4): On model.stripe.stripe_invoice_details: /* {"app": "dbt", "dbt_version": "0.17.0rc1", "profile_name": "integration_test", "target_name": "dev_bigquery_dbt_testing", "node_id": "model.stripe.stripe_invoice_details"} */


  create or replace table `dbt-package-testing`.`dbt_kristin`.`stripe_invoice_details`
  
  
  OPTIONS()
  as (
    

with invoice as (

    select *
    from `dbt-package-testing`.`dbt_kristin`.`stg_stripe_invoice`  

), charge as (

    select *
    from `dbt-package-testing`.`dbt_kristin`.`stg_stripe_charge`  

), invoice_line_item as (

    select *
    from `dbt-package-testing`.`dbt_kristin`.`stg_stripe_invoice_line_item`  

), subscription as (

    select *
    from `dbt-package-testing`.`dbt_kristin`.`stg_stripe_subscription`  

), customer as (

    select *
    from `dbt-package-testing`.`dbt_kristin`.`stg_stripe_customer`  

)

select 
  invoice.invoice_id,
  invoice.number,
  invoice.created_at as invoice_created_at,
  invoice.status,
  invoice.due_date,
  invoice.amount_due,
  invoice.subtotal,
  invoice.tax,
  invoice.total,
  invoice.amount_paid,
  invoice.amount_remaining,
  invoice.attempt_count,
  invoice.description as invoice_memo,
  invoice_line_item.description as line_item_desc,
  invoice_line_item.amount as line_item_amount,
  invoice_line_item.quantity,
  charge.balance_transaction_id,
  charge.amount as charge_amount, 
  charge.status as charge_status,
  charge.created_at as charge_created_at,
  customer.description as customer_description,
  customer.email as customer_email,
  subscription.subscription_id,
  subscription.billing as subcription_billing,
  subscription.start_date as subscription_start_date,
  subscription.ended_at as subscription_ended_at
from invoice
left join charge on charge.charge_id = invoice.charge_id
left join invoice_line_item on invoice.invoice_id = invoice_line_item.invoice_id
left join subscription on invoice_line_item.subscription_id = subscription.subscription_id
left join customer on invoice.customer_id = customer.customer_id
order by invoice.created_at desc
  );
    
2020-07-14 22:23:55.255760 (Thread-1): finished collecting timing info
2020-07-14 22:23:55.256578 (Thread-1): Sending event: {'category': 'dbt', 'action': 'run_model', 'label': 'ef9e9107-51f0-46f4-9bee-df58f1887354', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x10b3b8ca0>]}
2020-07-14 22:23:55.256879 (Thread-1): 15:23:55 | 13 of 23 OK created table model dbt_kristin.stg_stripe_payment_method_card [CREATE TABLE (214) in 1.88s]
2020-07-14 22:23:55.257039 (Thread-1): Finished running node model.stripe_source.stg_stripe_payment_method_card
2020-07-14 22:23:55.257228 (Thread-1): Began running node model.stripe.stripe_subscription_details
2020-07-14 22:23:55.257510 (Thread-1): 15:23:55 | 17 of 23 START table model dbt_kristin.stripe_subscription_details... [RUN]
2020-07-14 22:23:55.257842 (Thread-1): Acquiring new bigquery connection "model.stripe.stripe_subscription_details".
2020-07-14 22:23:55.257958 (Thread-1): Re-using an available connection from the pool (formerly model.stripe_source.stg_stripe_payment_method_card).
2020-07-14 22:23:55.258072 (Thread-1): Compiling model.stripe.stripe_subscription_details
2020-07-14 22:23:55.280701 (Thread-1): Writing injected SQL for node "model.stripe.stripe_subscription_details"
2020-07-14 22:23:55.281146 (Thread-1): finished collecting timing info
2020-07-14 22:23:55.286441 (Thread-1): Client.dataset is deprecated and will be removed in a future version. Use a string like 'my_project.my_dataset' or a cloud.google.bigquery.DatasetReference object, instead.
2020-07-14 22:23:55.402050 (Thread-1): Writing runtime SQL for node "model.stripe.stripe_subscription_details"
2020-07-14 22:23:55.402597 (Thread-1): On model.stripe.stripe_subscription_details: /* {"app": "dbt", "dbt_version": "0.17.0rc1", "profile_name": "integration_test", "target_name": "dev_bigquery_dbt_testing", "node_id": "model.stripe.stripe_subscription_details"} */


  create or replace table `dbt-package-testing`.`dbt_kristin`.`stripe_subscription_details`
  
  
  OPTIONS()
  as (
    

with invoice as (

    select *
    from `dbt-package-testing`.`dbt_kristin`.`stg_stripe_invoice`  

), charge as (

    select *
    from `dbt-package-testing`.`dbt_kristin`.`stg_stripe_charge`  

), invoice_line_item as (

    select *
    from `dbt-package-testing`.`dbt_kristin`.`stg_stripe_invoice_line_item`  

), subscription as (

    select *
    from `dbt-package-testing`.`dbt_kristin`.`stg_stripe_subscription`  

), customer as (

    select *
    from `dbt-package-testing`.`dbt_kristin`.`stg_stripe_customer`  

), line_items_groups as (

  select
    invoice.invoice_id,
    invoice.amount_due,
    invoice.amount_paid,
    invoice.amount_remaining,
    invoice.created_at,
    max(invoice_line_item.subscription_id) as subscription_id,
    sum(invoice_line_item.amount) as total_item_amount,
    count(distinct invoice_line_item.unique_id) as number_line_items
  from invoice_line_item
  join invoice on invoice.invoice_id = invoice_line_item.invoice_id
  group by 1, 2, 3, 4, 5

), grouped_by_subcription as (

  select
    subscription_id,
    count(distinct invoice_id) as number_invoices_generated,
    sum(amount_due) as total_amount_billed,
    sum(amount_paid) as total_amount_paid,
    sum(amount_remaining) total_amount_remaining,
    max(created_at) as most_recent_invoice_created_at,
    avg(amount_due) as average_invoice_amount,
    avg(total_item_amount) as average_line_item_amount,
    avg(number_line_items) as avg_num_invoice_items
  from line_items_groups
  group by 1

)


select
  subscription.subscription_id,
  subscription.customer_id,
  customer.description as customer_description,
  customer.email as customer_email,
  subscription.status,
  subscription.start_date,
  subscription.ended_at,
  subscription.billing,
  subscription.billing_cycle_anchor,
  subscription.canceled_at,
  subscription.created_at,
  subscription.current_period_start,
  subscription.current_period_end,
  subscription.days_until_due,
  subscription.cancel_at_period_end,
  subscription.cancel_at,
  number_invoices_generated,
  total_amount_billed,
  total_amount_paid,
  total_amount_remaining,
  most_recent_invoice_created_at,
  average_invoice_amount,
  average_line_item_amount,
  avg_num_invoice_items
from subscription
left join grouped_by_subcription on subscription.subscription_id = grouped_by_subcription.subscription_id
left join customer on subscription.customer_id = customer.customer_id
order by subscription.created_at desc
  );
    
2020-07-14 22:23:55.426391 (Thread-3): finished collecting timing info
2020-07-14 22:23:55.427218 (Thread-3): Sending event: {'category': 'dbt', 'action': 'run_model', 'label': 'ef9e9107-51f0-46f4-9bee-df58f1887354', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x10b2a83a0>]}
2020-07-14 22:23:55.427517 (Thread-3): 15:23:55 | 14 of 23 OK created table model dbt_kristin.stripe_incomplete_charges [CREATE TABLE (286) in 1.82s]
2020-07-14 22:23:55.427696 (Thread-3): Finished running node model.stripe.stripe_incomplete_charges
2020-07-14 22:23:55.971472 (Thread-2): finished collecting timing info
2020-07-14 22:23:55.972298 (Thread-2): Sending event: {'category': 'dbt', 'action': 'run_model', 'label': 'ef9e9107-51f0-46f4-9bee-df58f1887354', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x10b31bf10>]}
2020-07-14 22:23:55.972604 (Thread-2): 15:23:55 | 15 of 23 OK created table model dbt_kristin.stripe_balance_transaction_joined [CREATE TABLE (2124) in 2.34s]
2020-07-14 22:23:55.972764 (Thread-2): Finished running node model.stripe.stripe_balance_transaction_joined
2020-07-14 22:23:55.973278 (Thread-3): Began running node model.stripe.stripe_balance_transactions
2020-07-14 22:23:55.973455 (Thread-3): 15:23:55 | 18 of 23 START table model dbt_kristin.stripe_balance_transactions... [RUN]
2020-07-14 22:23:55.973783 (Thread-3): Acquiring new bigquery connection "model.stripe.stripe_balance_transactions".
2020-07-14 22:23:55.973918 (Thread-2): Began running node model.stripe.stripe_customer_overview
2020-07-14 22:23:55.974077 (Thread-3): Re-using an available connection from the pool (formerly model.stripe.stripe_incomplete_charges).
2020-07-14 22:23:55.974296 (Thread-2): 15:23:55 | 19 of 23 START table model dbt_kristin.stripe_customer_overview...... [RUN]
2020-07-14 22:23:55.974454 (Thread-3): Compiling model.stripe.stripe_balance_transactions
2020-07-14 22:23:55.974770 (Thread-2): Acquiring new bigquery connection "model.stripe.stripe_customer_overview".
2020-07-14 22:23:55.985856 (Thread-2): Re-using an available connection from the pool (formerly model.stripe.stripe_balance_transaction_joined).
2020-07-14 22:23:55.991972 (Thread-2): Compiling model.stripe.stripe_customer_overview
2020-07-14 22:23:56.001734 (Thread-3): Writing injected SQL for node "model.stripe.stripe_balance_transactions"
2020-07-14 22:23:56.017385 (Thread-2): Writing injected SQL for node "model.stripe.stripe_customer_overview"
2020-07-14 22:23:56.017854 (Thread-3): finished collecting timing info
2020-07-14 22:23:56.023103 (Thread-3): Client.dataset is deprecated and will be removed in a future version. Use a string like 'my_project.my_dataset' or a cloud.google.bigquery.DatasetReference object, instead.
2020-07-14 22:23:56.024007 (Thread-2): finished collecting timing info
2020-07-14 22:23:56.029144 (Thread-2): Client.dataset is deprecated and will be removed in a future version. Use a string like 'my_project.my_dataset' or a cloud.google.bigquery.DatasetReference object, instead.
2020-07-14 22:23:56.163872 (Thread-2): Writing runtime SQL for node "model.stripe.stripe_customer_overview"
2020-07-14 22:23:56.164416 (Thread-2): On model.stripe.stripe_customer_overview: /* {"app": "dbt", "dbt_version": "0.17.0rc1", "profile_name": "integration_test", "target_name": "dev_bigquery_dbt_testing", "node_id": "model.stripe.stripe_customer_overview"} */


  create or replace table `dbt-package-testing`.`dbt_kristin`.`stripe_customer_overview`
  
  
  OPTIONS()
  as (
    with balance_transaction_joined as (

    select *
    from `dbt-package-testing`.`dbt_kristin`.`stripe_balance_transaction_joined`  

), incomplete_charges as (

    select *
    from `dbt-package-testing`.`dbt_kristin`.`stripe_incomplete_charges`  

), customer as (

    select *
    from `dbt-package-testing`.`dbt_kristin`.`stg_stripe_customer`  

), transactions_grouped as (
 
    select
      customer_id,
      sum(if(type in ('charge', 'payment'), amount, 0)) as total_sales,
      sum(if(type in ('payment_refund', 'refund'), amount, 0)) as total_refunds,
      sum(amount) as total_gross_transaction_amount,
      sum(fee) as total_fees,
      sum(net) as total_net_transaction_amount,
      sum(if(type in ('payment', 'charge'), 1, 0)) as total_sales_count,
      sum(if(type in ('payment_refund', 'refund'), 1, 0)) as total_refund_count,    
      sum(if(type in ('charge', 'payment') and date_trunc(date(created_at), month) = date_trunc(current_date(), month),amount, 0)) as sales_this_month,
      sum(if(type in ('payment_refund', 'refund') and date_trunc(date(created_at), month) = date_trunc(current_date(), month), amount, 0)) as refunds_this_month,
      sum(if(date_trunc(date(created_at), month) = date_trunc(current_date(), month), amount, 0)) as gross_transaction_amount_this_month,
      sum(if(date_trunc(date(created_at), month) = date_trunc(current_date(), month), fee, 0)) as fees_this_month,
      sum(if(date_trunc(date(created_at), month) = date_trunc(current_date(), month), net, 0)) as net_transaction_amount_this_month,
      sum(if(type in ('payment', 'charge') and date_trunc(date(created_at), month) = date_trunc(current_date(), month) , 1, 0)) as sales_count_this_month,
      sum(if(type in ('payment_refund', 'refund') and date_trunc(date(created_at), month) = date_trunc(current_date(), month) , 1, 0)) as refund_count_this_month,
      min(if(type in ('payment', 'charge'), date(created_at), null)) as first_sale_date,
      max(if(type in ('payment', 'charge'), date(created_at), null)) as most_recent_sale_date
    from balance_transaction_joined
      where type in ('payment', 'charge', 'payment_refund', 'refund')
    group by 1

), failed_charges_by_customer as (

    select
      customer_id,
      count(*) as total_failed_charge_count,
      sum(amount) as total_failed_charge_amount,
      sum(if(date_trunc(date(created_at), month) = date_trunc(current_date(), month), 1, 0)) as failed_charge_count_this_month,
      sum(if(date_trunc(date(created_at), month) = date_trunc(current_date(), month), amount, 0)) as failed_charge_amount_this_month
    from incomplete_charges
    group by 1

)

select
  coalesce(customer.description, customer.customer_id, 'No associated customer') as customer_description,
  customer.email,
  customer.created_at as customer_created_at,
  customer.is_deliguent,
  coalesce(transactions_grouped.total_sales/100.0, 0) as total_sales,
  coalesce(transactions_grouped.total_refunds/100.0, 0) as total_refunds,
  coalesce(transactions_grouped.total_gross_transaction_amount/100.0, 0) as total_gross_transcation_amount,
  coalesce(transactions_grouped.total_fees/100.0, 0) as total_fees,
  coalesce(transactions_grouped.total_net_transaction_amount/100.0, 0) as total_net_trasnaction_amount,
  coalesce(transactions_grouped.total_sales_count, 0) as total_sales_count,
  coalesce(transactions_grouped.total_refund_count, 0) as total_refund_count,    
  coalesce(transactions_grouped.sales_this_month/100.0, 0) as sales_this_month,
  coalesce(transactions_grouped.refunds_this_month/100.0, 0) as refunds_this_month,
  coalesce(transactions_grouped.gross_transaction_amount_this_month/100.0, 0) as gross_transaction_amount_this_month,
  coalesce(transactions_grouped.fees_this_month/100.0, 0) as fees_this_month,
  coalesce(transactions_grouped.net_transaction_amount_this_month/100.0, 0) as net_transaction_amount_this_month,
  coalesce(transactions_grouped.sales_count_this_month, 0) as sales_count_this_month,
  coalesce(transactions_grouped.refund_count_this_month, 0) as refund_count_this_month,
  transactions_grouped.first_sale_date,
  transactions_grouped.most_recent_sale_date,
  coalesce(total_failed_charge_count, 0) as total_failed_charge_count,
  coalesce(total_failed_charge_amount/100, 0) as total_failed_charge_amount,
  coalesce(failed_charge_count_this_month, 0) as failed_charge_count_this_month,
  coalesce(failed_charge_amount_this_month/100, 0) as failed_charge_amount_this_month,
  customer.currency as customer_currency,
  customer.default_card_id,
  customer.shipping_name,
  customer.shipping_address_line_1,
  customer.shipping_address_line_2,
  customer.shipping_address_city,
  customer.shipping_address_state,
  customer.shipping_address_country,
  customer.shipping_address_postal_code,
  customer.shipping_phone
from customer
left join transactions_grouped on transactions_grouped.customer_id = customer.customer_id
left join failed_charges_by_customer on customer.customer_id = failed_charges_by_customer.customer_id
  );
    
2020-07-14 22:23:56.198461 (Thread-3): Writing runtime SQL for node "model.stripe.stripe_balance_transactions"
2020-07-14 22:23:56.199093 (Thread-3): On model.stripe.stripe_balance_transactions: /* {"app": "dbt", "dbt_version": "0.17.0rc1", "profile_name": "integration_test", "target_name": "dev_bigquery_dbt_testing", "node_id": "model.stripe.stripe_balance_transactions"} */


  create or replace table `dbt-package-testing`.`dbt_kristin`.`stripe_balance_transactions`
  
  
  OPTIONS()
  as (
    with balance_transaction_joined as (

    select *
    from `dbt-package-testing`.`dbt_kristin`.`stripe_balance_transaction_joined`  

)

select 
  balance_transaction_id,
  created_at,
  available_on,
  currency,
  amount,
  fee,
  net,
  type,
  reporting_category,
  source,
  description,
  customer_facing_amount,
  customer_facing_currency,
  effective_at,
  customer_id,
  receipt_email,
  customer_description,
  charge_id,
  payment_intent_id,
  charge_created_at,
  payment_method_type,
  card_brand,
  card_funding,
  card_country,
  payout_id,
  payout_expeted_arrival_date,
  payout_status,
  payout_type,
  payout_description,
  refund_reason
from balance_transaction_joined
  );
    
2020-07-14 22:23:57.263499 (Thread-4): finished collecting timing info
2020-07-14 22:23:57.264316 (Thread-4): Sending event: {'category': 'dbt', 'action': 'run_model', 'label': 'ef9e9107-51f0-46f4-9bee-df58f1887354', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x10b3ba700>]}
2020-07-14 22:23:57.264619 (Thread-4): 15:23:57 | 16 of 23 OK created table model dbt_kristin.stripe_invoice_details... [CREATE TABLE (494) in 2.81s]
2020-07-14 22:23:57.264780 (Thread-4): Finished running node model.stripe.stripe_invoice_details
2020-07-14 22:23:57.264945 (Thread-4): Began running node model.stripe.stripe_daily_overview
2020-07-14 22:23:57.265237 (Thread-4): 15:23:57 | 20 of 23 START table model dbt_kristin.stripe_daily_overview......... [RUN]
2020-07-14 22:23:57.265563 (Thread-4): Acquiring new bigquery connection "model.stripe.stripe_daily_overview".
2020-07-14 22:23:57.265678 (Thread-4): Re-using an available connection from the pool (formerly model.stripe.stripe_invoice_details).
2020-07-14 22:23:57.265789 (Thread-4): Compiling model.stripe.stripe_daily_overview
2020-07-14 22:23:57.281691 (Thread-4): Writing injected SQL for node "model.stripe.stripe_daily_overview"
2020-07-14 22:23:57.282245 (Thread-4): finished collecting timing info
2020-07-14 22:23:57.287684 (Thread-4): Client.dataset is deprecated and will be removed in a future version. Use a string like 'my_project.my_dataset' or a cloud.google.bigquery.DatasetReference object, instead.
2020-07-14 22:23:57.411315 (Thread-4): Writing runtime SQL for node "model.stripe.stripe_daily_overview"
2020-07-14 22:23:57.412051 (Thread-4): On model.stripe.stripe_daily_overview: /* {"app": "dbt", "dbt_version": "0.17.0rc1", "profile_name": "integration_test", "target_name": "dev_bigquery_dbt_testing", "node_id": "model.stripe.stripe_daily_overview"} */


  create or replace table `dbt-package-testing`.`dbt_kristin`.`stripe_daily_overview`
  
  
  OPTIONS()
  as (
    with balance_transaction_joined as (

    select *
    from `dbt-package-testing`.`dbt_kristin`.`stripe_balance_transaction_joined`  

), incomplete_charges as (

    select *
    from `dbt-package-testing`.`dbt_kristin`.`stripe_incomplete_charges`  

), daily_balance_transactions as (

  select
    date(case when type = 'payout' then available_on else created_at end) as date,
    sum(case when type in ('charge', 'payment') then amount else 0 end) as total_sales,
    sum(case when type in ('payment_refund', 'refund') then amount else 0 end) as total_refunds,
    sum(case when type = 'adjustment' then amount else 0 end) as total_adjustments,
    sum(case when type not in ('charge', 'payment', 'payment_refund', 'refund', 'adjustment', 'payout') and type not like '%transfer%' then amount else 0 end) as total_other_transactions,
    sum(case when type <> 'payout' and type not like '%transfer%' then amount else 0 end) as total_gross_transaction_amount,
    sum(case when type <> 'payout' and type not like '%transfer%' then net else 0 end) as total_net_tranactions,
    sum(case when type = 'payout' or type like '%transfer%' then fee * -1.0 else 0 end) as total_payout_fees,
    sum(case when type = 'payout' or type like '%transfer%' then amount else 0 end) as total_gross_payout_amount,
    sum(case when type = 'payout' or type like '%transfer%' then fee * -1.0 else net end) as daily_net_activity,
    sum(if(type in ('payment', 'charge'), 1, 0)) as total_sales_count,
    sum(if(type = 'payout', 1, 0)) as total_payouts_count,
    count(distinct case when type = 'adjustment' then coalesce(source, payout_id) end) as total_adjustments_count
  from balance_transaction_joined
  group by 1

), daily_failed_charges as (

    select
      date(created_at) as date,
      count(*) as total_failed_charge_count,
      sum(amount) as total_failed_charge_amount
    from incomplete_charges
    group by 1

)

select
  daily_balance_transactions.date,
  daily_balance_transactions.total_sales/100.0 as total_sales,
  daily_balance_transactions.total_refunds/100.0 as total_refunds,
  daily_balance_transactions.total_adjustments/100.0 as total_adjustments,
  daily_balance_transactions.total_other_transactions/100.0 as total_other_transactions,
  daily_balance_transactions.total_gross_transaction_amount/100.0 as total_gross_transaction_amount,
  daily_balance_transactions.total_net_tranactions/100.0 as total_net_tranactions,
  daily_balance_transactions.total_payout_fees/100.0 as total_payout_fees,
  daily_balance_transactions.total_gross_payout_amount/100.0 as total_gross_payout_amount,
  daily_balance_transactions.daily_net_activity/100.0 as daily_net_activity,
  (daily_balance_transactions.daily_net_activity + daily_balance_transactions.total_gross_payout_amount)/100.0 as daily_end_balance,
  daily_balance_transactions.total_sales_count,
  daily_balance_transactions.total_payouts_count,
  daily_balance_transactions.total_adjustments_count,
  coalesce(daily_failed_charges.total_failed_charge_count, 0) as total_failed_charge_count,
  coalesce(daily_failed_charges.total_failed_charge_amount/100, 0) as total_failed_charge_amount
from daily_balance_transactions
left join daily_failed_charges on daily_balance_transactions.date = daily_failed_charges.date
order by 1 desc
  );
    
2020-07-14 22:23:58.001651 (Thread-1): finished collecting timing info
2020-07-14 22:23:58.002372 (Thread-1): Sending event: {'category': 'dbt', 'action': 'run_model', 'label': 'ef9e9107-51f0-46f4-9bee-df58f1887354', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x10b231c40>]}
2020-07-14 22:23:58.002629 (Thread-1): 15:23:58 | 17 of 23 OK created table model dbt_kristin.stripe_subscription_details [CREATE TABLE (49) in 2.74s]
2020-07-14 22:23:58.002767 (Thread-1): Finished running node model.stripe.stripe_subscription_details
2020-07-14 22:23:58.002911 (Thread-1): Began running node model.stripe.stripe_monthly_overview
2020-07-14 22:23:58.003052 (Thread-1): 15:23:58 | 21 of 23 START table model dbt_kristin.stripe_monthly_overview....... [RUN]
2020-07-14 22:23:58.003430 (Thread-1): Acquiring new bigquery connection "model.stripe.stripe_monthly_overview".
2020-07-14 22:23:58.003542 (Thread-1): Re-using an available connection from the pool (formerly model.stripe.stripe_subscription_details).
2020-07-14 22:23:58.003644 (Thread-1): Compiling model.stripe.stripe_monthly_overview
2020-07-14 22:23:58.020993 (Thread-1): Writing injected SQL for node "model.stripe.stripe_monthly_overview"
2020-07-14 22:23:58.023249 (Thread-1): finished collecting timing info
2020-07-14 22:23:58.028201 (Thread-1): Client.dataset is deprecated and will be removed in a future version. Use a string like 'my_project.my_dataset' or a cloud.google.bigquery.DatasetReference object, instead.
2020-07-14 22:23:58.156529 (Thread-3): finished collecting timing info
2020-07-14 22:23:58.157355 (Thread-3): Sending event: {'category': 'dbt', 'action': 'run_model', 'label': 'ef9e9107-51f0-46f4-9bee-df58f1887354', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x10b203610>]}
2020-07-14 22:23:58.157662 (Thread-3): 15:23:58 | 18 of 23 OK created table model dbt_kristin.stripe_balance_transactions [CREATE TABLE (2124) in 2.18s]
2020-07-14 22:23:58.157829 (Thread-3): Finished running node model.stripe.stripe_balance_transactions
2020-07-14 22:23:58.157997 (Thread-3): Began running node model.stripe.stripe_quarterly_overview
2020-07-14 22:23:58.158300 (Thread-3): 15:23:58 | 22 of 23 START table model dbt_kristin.stripe_quarterly_overview..... [RUN]
2020-07-14 22:23:58.158624 (Thread-3): Acquiring new bigquery connection "model.stripe.stripe_quarterly_overview".
2020-07-14 22:23:58.158737 (Thread-3): Re-using an available connection from the pool (formerly model.stripe.stripe_balance_transactions).
2020-07-14 22:23:58.158847 (Thread-3): Compiling model.stripe.stripe_quarterly_overview
2020-07-14 22:23:58.174349 (Thread-1): Writing runtime SQL for node "model.stripe.stripe_monthly_overview"
2020-07-14 22:23:58.177991 (Thread-3): Writing injected SQL for node "model.stripe.stripe_quarterly_overview"
2020-07-14 22:23:58.178442 (Thread-3): finished collecting timing info
2020-07-14 22:23:58.183452 (Thread-3): Client.dataset is deprecated and will be removed in a future version. Use a string like 'my_project.my_dataset' or a cloud.google.bigquery.DatasetReference object, instead.
2020-07-14 22:23:58.183822 (Thread-1): On model.stripe.stripe_monthly_overview: /* {"app": "dbt", "dbt_version": "0.17.0rc1", "profile_name": "integration_test", "target_name": "dev_bigquery_dbt_testing", "node_id": "model.stripe.stripe_monthly_overview"} */


  create or replace table `dbt-package-testing`.`dbt_kristin`.`stripe_monthly_overview`
  
  
  OPTIONS()
  as (
    with balance_transaction_joined as (

    select *
    from `dbt-package-testing`.`dbt_kristin`.`stripe_balance_transaction_joined`  

), incomplete_charges as (

    select *
    from `dbt-package-testing`.`dbt_kristin`.`stripe_incomplete_charges`  

), monthly_balance_transactions as (

  select
    date_trunc(date(case when type = 'payout' then available_on else created_at end), month) as month,
    sum(case when type in ('charge', 'payment') then amount else 0 end) as total_sales,
    sum(case when type in ('payment_refund', 'refund') then amount else 0 end) as total_refunds,
    sum(case when type = 'adjustment' then amount else 0 end) as total_adjustments,
    sum(case when type not in ('charge', 'payment', 'payment_refund', 'refund', 'adjustment', 'payout') and type not like '%transfer%' then amount else 0 end) as total_other_transactions,
    sum(case when type <> 'payout' and type not like '%transfer%' then amount else 0 end) as total_gross_transaction_amount,
    sum(case when type <> 'payout' and type not like '%transfer%' then net else 0 end) as total_net_tranactions,
    sum(case when type = 'payout' or type like '%transfer%' then fee * -1.0 else 0 end) as total_payout_fees,
    sum(case when type = 'payout' or type like '%transfer%' then amount else 0 end) as total_gross_payout_amount,
    sum(case when type = 'payout' or type like '%transfer%' then fee * -1.0 else net end) as monthly_net_activity,
    sum(if(type in ('payment', 'charge'), 1, 0)) as total_sales_count,
    sum(if(type = 'payout', 1, 0)) as total_payout_count,
    count(distinct case when type = 'adjustment' then coalesce(source, payout_id) end) as total_adjustments_count
  from balance_transaction_joined
  group by 1

), monthly_failed_charges as (

    select
      date_trunc(date(created_at), month) as month,
      count(*) as total_failed_charge_count,
      sum(amount) as total_failed_charge_amount
    from incomplete_charges
    group by 1

)

select
  monthly_balance_transactions.month,
  monthly_balance_transactions.total_sales/100.0 as total_sales,
  monthly_balance_transactions.total_refunds/100.0 as total_refunds,
  monthly_balance_transactions.total_adjustments/100.0 as total_adjustments,
  monthly_balance_transactions.total_other_transactions/100.0 as total_other_transactions,
  monthly_balance_transactions.total_gross_transaction_amount/100.0 as total_gross_transaction_amount,
  monthly_balance_transactions.total_net_tranactions/100.0 as total_net_tranactions,
  monthly_balance_transactions.total_payout_fees/100.0 as total_payout_fees,
  monthly_balance_transactions.total_gross_payout_amount/100.0 as total_gross_payout_amount,
  monthly_balance_transactions.monthly_net_activity/100.0 as monthly_net_activity,
  (monthly_balance_transactions.monthly_net_activity + monthly_balance_transactions.total_gross_payout_amount)/100.0 as monthly_end_balance,
  monthly_balance_transactions.total_sales_count,
  monthly_balance_transactions.total_payout_count,
  monthly_balance_transactions.total_adjustments_count,
  coalesce(monthly_failed_charges.total_failed_charge_count, 0) as total_failed_charge_count,
  coalesce(monthly_failed_charges.total_failed_charge_amount/100, 0) as total_failed_charge_amount
from monthly_balance_transactions
left join monthly_failed_charges on monthly_balance_transactions.month = monthly_failed_charges.month
order by 1 desc
  );
    
2020-07-14 22:23:58.326491 (Thread-3): Writing runtime SQL for node "model.stripe.stripe_quarterly_overview"
2020-07-14 22:23:58.327199 (Thread-3): On model.stripe.stripe_quarterly_overview: /* {"app": "dbt", "dbt_version": "0.17.0rc1", "profile_name": "integration_test", "target_name": "dev_bigquery_dbt_testing", "node_id": "model.stripe.stripe_quarterly_overview"} */


  create or replace table `dbt-package-testing`.`dbt_kristin`.`stripe_quarterly_overview`
  
  
  OPTIONS()
  as (
    with balance_transaction_joined as (

    select *
    from `dbt-package-testing`.`dbt_kristin`.`stripe_balance_transaction_joined`  

), incomplete_charges as (

    select *
    from `dbt-package-testing`.`dbt_kristin`.`stripe_incomplete_charges`  

), quarterly_balance_transactions as (

  select
    date_trunc(date(case when type = 'payout' then available_on else created_at end), quarter) as quarter,
    sum(case when type in ('charge', 'payment') then amount else 0 end) as total_sales,
    sum(case when type in ('payment_refund', 'refund') then amount else 0 end) as total_refunds,
    sum(case when type = 'adjustment' then amount else 0 end) as total_adjustments,
    sum(case when type not in ('charge', 'payment', 'payment_refund', 'refund', 'adjustment', 'payout') and type not like '%transfer%' then amount else 0 end) as total_other_transactions,
    sum(case when type <> 'payout' and type not like '%transfer%' then amount else 0 end) as total_gross_transaction_amount,
    sum(case when type <> 'payout' and type not like '%transfer%' then net else 0 end) as total_net_tranactions,
    sum(case when type = 'payout' or type like '%transfer%' then fee * -1.0 else 0 end) as total_payout_fees,
    sum(case when type = 'payout' or type like '%transfer%' then amount else 0 end) as total_gross_payout_amount,
    sum(case when type = 'payout' or type like '%transfer%' then fee * -1.0 else net end) as quarterly_net_activity,
    sum(if(type in ('payment', 'charge'), 1, 0)) as total_sales_count,
    sum(if(type = 'payout', 1, 0)) as total_payout_count,
    count(distinct case when type = 'adjustment' then coalesce(source, payout_id) end) as total_adjustments_count
  from balance_transaction_joined
  group by 1

), quarterly_failed_charges as (

    select
      date_trunc(date(created_at), quarter) as quarter,
      count(*) as total_failed_charge_count,
      sum(amount) as total_failed_charge_amount
    from incomplete_charges
    group by 1

)

select
  quarterly_balance_transactions.quarter,
  quarterly_balance_transactions.total_sales/100.0 as total_sales,
  quarterly_balance_transactions.total_refunds/100.0 as total_refunds,
  quarterly_balance_transactions.total_adjustments/100.0 as total_adjustments,
  quarterly_balance_transactions.total_other_transactions/100.0 as total_other_transactions,
  quarterly_balance_transactions.total_gross_transaction_amount/100.0 as total_gross_transaction_amount,
  quarterly_balance_transactions.total_net_tranactions/100.0 as total_net_tranactions,
  quarterly_balance_transactions.total_payout_fees/100.0 as total_payout_fees,
  quarterly_balance_transactions.total_gross_payout_amount/100.0 as total_gross_payout_amount,
  quarterly_balance_transactions.quarterly_net_activity/100.0 as quarterly_net_activity,
  (quarterly_balance_transactions.quarterly_net_activity + quarterly_balance_transactions.total_gross_payout_amount)/100.0 as quarterly_end_balance,
  quarterly_balance_transactions.total_sales_count,
  quarterly_balance_transactions.total_payout_count,
  quarterly_balance_transactions.total_adjustments_count,
  coalesce(quarterly_failed_charges.total_failed_charge_count, 0) as total_failed_charge_count,
  coalesce(quarterly_failed_charges.total_failed_charge_amount/100, 0) as total_failed_charge_amount
from quarterly_balance_transactions
left join quarterly_failed_charges on quarterly_balance_transactions.quarter = quarterly_failed_charges.quarter
order by 1 desc
  );
    
2020-07-14 22:23:58.816697 (Thread-2): finished collecting timing info
2020-07-14 22:23:58.817531 (Thread-2): Sending event: {'category': 'dbt', 'action': 'run_model', 'label': 'ef9e9107-51f0-46f4-9bee-df58f1887354', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x10b28a670>]}
2020-07-14 22:23:58.817830 (Thread-2): 15:23:58 | 19 of 23 OK created table model dbt_kristin.stripe_customer_overview. [CREATE TABLE (405) in 2.84s]
2020-07-14 22:23:58.817993 (Thread-2): Finished running node model.stripe.stripe_customer_overview
2020-07-14 22:23:58.818161 (Thread-2): Began running node model.stripe.stripe_weekly_overview
2020-07-14 22:23:58.818466 (Thread-2): 15:23:58 | 23 of 23 START table model dbt_kristin.stripe_weekly_overview........ [RUN]
2020-07-14 22:23:58.818794 (Thread-2): Acquiring new bigquery connection "model.stripe.stripe_weekly_overview".
2020-07-14 22:23:58.818908 (Thread-2): Re-using an available connection from the pool (formerly model.stripe.stripe_customer_overview).
2020-07-14 22:23:58.819020 (Thread-2): Compiling model.stripe.stripe_weekly_overview
2020-07-14 22:23:58.834863 (Thread-2): Writing injected SQL for node "model.stripe.stripe_weekly_overview"
2020-07-14 22:23:58.835340 (Thread-2): finished collecting timing info
2020-07-14 22:23:58.840205 (Thread-2): Client.dataset is deprecated and will be removed in a future version. Use a string like 'my_project.my_dataset' or a cloud.google.bigquery.DatasetReference object, instead.
2020-07-14 22:23:58.972763 (Thread-2): Writing runtime SQL for node "model.stripe.stripe_weekly_overview"
2020-07-14 22:23:58.973485 (Thread-2): On model.stripe.stripe_weekly_overview: /* {"app": "dbt", "dbt_version": "0.17.0rc1", "profile_name": "integration_test", "target_name": "dev_bigquery_dbt_testing", "node_id": "model.stripe.stripe_weekly_overview"} */


  create or replace table `dbt-package-testing`.`dbt_kristin`.`stripe_weekly_overview`
  
  
  OPTIONS()
  as (
    with balance_transaction_joined as (

    select *
    from `dbt-package-testing`.`dbt_kristin`.`stripe_balance_transaction_joined`  

), incomplete_charges as (

    select *
    from `dbt-package-testing`.`dbt_kristin`.`stripe_incomplete_charges`  

), weekly_balance_transactions as (

  select
    date_trunc(date(case when type = 'payout' then available_on else created_at end), week) as week,
    sum(case when type in ('charge', 'payment') then amount else 0 end) as total_sales,
    sum(case when type in ('payment_refund', 'refund') then amount else 0 end) as total_refunds,
    sum(case when type = 'adjustment' then amount else 0 end) as total_adjustments,
    sum(case when type not in ('charge', 'payment', 'payment_refund', 'refund', 'adjustment', 'payout') and type not like '%transfer%' then amount else 0 end) as total_other_transactions,
    sum(case when type <> 'payout' and type not like '%transfer%' then amount else 0 end) as total_gross_transaction_amount,
    sum(case when type <> 'payout' and type not like '%transfer%' then net else 0 end) as total_net_tranactions,
    sum(case when type = 'payout' or type like '%transfer%' then fee * -1.0 else 0 end) as total_payout_fees,
    sum(case when type = 'payout' or type like '%transfer%' then amount else 0 end) as total_gross_payout_amount,
    sum(case when type = 'payout' or type like '%transfer%' then fee * -1.0 else net end) as weekly_net_activity,
    sum(if(type in ('payment', 'charge'), 1, 0)) as total_sales_count,
    sum(if(type = 'payout', 1, 0)) as total_payout_count,
    count(distinct case when type = 'adjustment' then coalesce(source, payout_id) end) as total_adjustments_count
  from balance_transaction_joined
  group by 1

), weekly_failed_charges as (

    select
      date_trunc(date(created_at), week) as week,
      count(*) as total_failed_charge_count,
      sum(amount) as total_failed_charge_amount
    from incomplete_charges
    group by 1

)

select
  weekly_balance_transactions.week,
  weekly_balance_transactions.total_sales/100.0 as total_sales,
  weekly_balance_transactions.total_refunds/100.0 as total_refunds,
  weekly_balance_transactions.total_adjustments/100.0 as total_adjustments,
  weekly_balance_transactions.total_other_transactions/100.0 as total_other_transactions,
  weekly_balance_transactions.total_gross_transaction_amount/100.0 as total_gross_transaction_amount,
  weekly_balance_transactions.total_net_tranactions/100.0 as total_net_tranactions,
  weekly_balance_transactions.total_payout_fees/100.0 as total_payout_fees,
  weekly_balance_transactions.total_gross_payout_amount/100.0 as total_gross_payout_amount,
  weekly_balance_transactions.weekly_net_activity/100.0 as weekly_net_activity,
  (weekly_balance_transactions.weekly_net_activity + weekly_balance_transactions.total_gross_payout_amount)/100.0 as weekly_end_balance,
  weekly_balance_transactions.total_sales_count,
  weekly_balance_transactions.total_payout_count,
  weekly_balance_transactions.total_adjustments_count,
  coalesce(weekly_failed_charges.total_failed_charge_count, 0) as total_failed_charge_count,
  coalesce(weekly_failed_charges.total_failed_charge_amount/100, 0) as total_failed_charge_amount
from weekly_balance_transactions
left join weekly_failed_charges on weekly_balance_transactions.week = weekly_failed_charges.week
order by 1 desc
  );
    
2020-07-14 22:23:59.737334 (Thread-4): finished collecting timing info
2020-07-14 22:23:59.738159 (Thread-4): Sending event: {'category': 'dbt', 'action': 'run_model', 'label': 'ef9e9107-51f0-46f4-9bee-df58f1887354', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x10b2a8460>]}
2020-07-14 22:23:59.738462 (Thread-4): 15:23:59 | 20 of 23 OK created table model dbt_kristin.stripe_daily_overview.... [CREATE TABLE (1246) in 2.47s]
2020-07-14 22:23:59.738625 (Thread-4): Finished running node model.stripe.stripe_daily_overview
2020-07-14 22:24:00.186170 (Thread-1): finished collecting timing info
2020-07-14 22:24:00.187000 (Thread-1): Sending event: {'category': 'dbt', 'action': 'run_model', 'label': 'ef9e9107-51f0-46f4-9bee-df58f1887354', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x10b2babb0>]}
2020-07-14 22:24:00.187312 (Thread-1): 15:24:00 | 21 of 23 OK created table model dbt_kristin.stripe_monthly_overview.. [CREATE TABLE (63) in 2.18s]
2020-07-14 22:24:00.187468 (Thread-1): Finished running node model.stripe.stripe_monthly_overview
2020-07-14 22:24:00.711537 (Thread-3): finished collecting timing info
2020-07-14 22:24:00.712291 (Thread-3): Sending event: {'category': 'dbt', 'action': 'run_model', 'label': 'ef9e9107-51f0-46f4-9bee-df58f1887354', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x10b43b2b0>]}
2020-07-14 22:24:00.712554 (Thread-3): 15:24:00 | 22 of 23 OK created table model dbt_kristin.stripe_quarterly_overview [CREATE TABLE (22) in 2.55s]
2020-07-14 22:24:00.712693 (Thread-3): Finished running node model.stripe.stripe_quarterly_overview
2020-07-14 22:24:00.980714 (Thread-2): finished collecting timing info
2020-07-14 22:24:00.981540 (Thread-2): Sending event: {'category': 'dbt', 'action': 'run_model', 'label': 'ef9e9107-51f0-46f4-9bee-df58f1887354', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x10b3bf9a0>]}
2020-07-14 22:24:00.981813 (Thread-2): 15:24:00 | 23 of 23 OK created table model dbt_kristin.stripe_weekly_overview... [CREATE TABLE (269) in 2.16s]
2020-07-14 22:24:00.981944 (Thread-2): Finished running node model.stripe.stripe_weekly_overview
2020-07-14 22:24:00.984317 (MainThread): Acquiring new bigquery connection "master".
2020-07-14 22:24:00.984481 (MainThread): Opening a new connection, currently in state closed
2020-07-14 22:24:00.984819 (MainThread): 15:24:00 | 
2020-07-14 22:24:00.984956 (MainThread): 15:24:00 | Finished running 23 table models in 14.81s.
2020-07-14 22:24:00.985062 (MainThread): Connection 'master' was properly closed.
2020-07-14 22:24:00.985143 (MainThread): Connection 'model.stripe.stripe_monthly_overview' was left open.
2020-07-14 22:24:00.985218 (MainThread): Connection 'model.stripe.stripe_weekly_overview' was left open.
2020-07-14 22:24:00.985292 (MainThread): Connection 'model.stripe.stripe_quarterly_overview' was left open.
2020-07-14 22:24:00.985365 (MainThread): Connection 'model.stripe.stripe_daily_overview' was left open.
2020-07-14 22:24:01.054306 (MainThread): 
2020-07-14 22:24:01.054458 (MainThread): Completed successfully
2020-07-14 22:24:01.054565 (MainThread): 
Done. PASS=23 WARN=0 ERROR=0 SKIP=0 TOTAL=23
2020-07-14 22:24:01.054706 (MainThread): Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'end', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x10b239bb0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x10b338fa0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x10b2900d0>]}
2020-07-14 22:24:01.054870 (MainThread): Flushing usage events
2020-07-14 22:29:34.895500 (MainThread): Running with dbt=0.17.0-rc1
2020-07-14 22:29:35.312162 (MainThread): running dbt with arguments Namespace(cls=<class 'dbt.task.run.RunTask'>, debug=False, exclude=None, fail_fast=False, full_refresh=False, log_cache_events=False, log_format='default', models=None, partial_parse=None, profile=None, profiles_dir='/Users/kristin/.dbt', project_dir=None, record_timing_info=None, rpc_method='run', single_threaded=False, strict=False, target=None, test_new_parser=False, threads=None, use_cache=True, vars='{}', version_check=True, warn_error=False, which='run', write_json=True)
2020-07-14 22:29:35.313391 (MainThread): Tracking: tracking
2020-07-14 22:29:35.321699 (MainThread): Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'start', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x10f507b50>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x10f514fd0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x10f514f40>]}
2020-07-14 22:29:35.343987 (MainThread): Partial parsing not enabled
2020-07-14 22:29:35.346801 (MainThread): Parsing macros/core.sql
2020-07-14 22:29:35.352109 (MainThread): Parsing macros/materializations/helpers.sql
2020-07-14 22:29:35.359615 (MainThread): Parsing macros/materializations/snapshot/snapshot_merge.sql
2020-07-14 22:29:35.362037 (MainThread): Parsing macros/materializations/snapshot/strategies.sql
2020-07-14 22:29:35.377772 (MainThread): Parsing macros/materializations/snapshot/snapshot.sql
2020-07-14 22:29:35.405281 (MainThread): Parsing macros/materializations/seed/seed.sql
2020-07-14 22:29:35.426399 (MainThread): Parsing macros/materializations/incremental/helpers.sql
2020-07-14 22:29:35.428472 (MainThread): Parsing macros/materializations/incremental/incremental.sql
2020-07-14 22:29:35.435059 (MainThread): Parsing macros/materializations/common/merge.sql
2020-07-14 22:29:35.448467 (MainThread): Parsing macros/materializations/table/table.sql
2020-07-14 22:29:35.457008 (MainThread): Parsing macros/materializations/view/view.sql
2020-07-14 22:29:35.463533 (MainThread): Parsing macros/materializations/view/create_or_replace_view.sql
2020-07-14 22:29:35.469080 (MainThread): Parsing macros/etc/get_custom_alias.sql
2020-07-14 22:29:35.470396 (MainThread): Parsing macros/etc/query.sql
2020-07-14 22:29:35.471633 (MainThread): Parsing macros/etc/is_incremental.sql
2020-07-14 22:29:35.473370 (MainThread): Parsing macros/etc/datetime.sql
2020-07-14 22:29:35.481870 (MainThread): Parsing macros/etc/get_custom_schema.sql
2020-07-14 22:29:35.483839 (MainThread): Parsing macros/etc/get_custom_database.sql
2020-07-14 22:29:35.485511 (MainThread): Parsing macros/adapters/common.sql
2020-07-14 22:29:35.530651 (MainThread): Parsing macros/schema_tests/relationships.sql
2020-07-14 22:29:35.532725 (MainThread): Parsing macros/schema_tests/not_null.sql
2020-07-14 22:29:35.534653 (MainThread): Parsing macros/schema_tests/unique.sql
2020-07-14 22:29:35.536573 (MainThread): Parsing macros/schema_tests/accepted_values.sql
2020-07-14 22:29:35.539873 (MainThread): Parsing macros/etc.sql
2020-07-14 22:29:35.541354 (MainThread): Parsing macros/catalog.sql
2020-07-14 22:29:35.549339 (MainThread): Parsing macros/adapters.sql
2020-07-14 22:29:35.565499 (MainThread): Parsing macros/materializations/seed.sql
2020-07-14 22:29:35.567866 (MainThread): Parsing macros/materializations/view.sql
2020-07-14 22:29:35.570366 (MainThread): Parsing macros/materializations/table.sql
2020-07-14 22:29:35.580103 (MainThread): Parsing macros/materializations/incremental.sql
2020-07-14 22:29:35.592154 (MainThread): Parsing macros/materializations/snapshot.sql
2020-07-14 22:29:35.642322 (MainThread): Partial parsing not enabled
2020-07-14 22:29:35.647998 (MainThread): Parsing macros/cross_db_utils/except.sql
2020-07-14 22:29:35.649914 (MainThread): Parsing macros/cross_db_utils/replace.sql
2020-07-14 22:29:35.651891 (MainThread): Parsing macros/cross_db_utils/concat.sql
2020-07-14 22:29:35.654846 (MainThread): Parsing macros/cross_db_utils/datatypes.sql
2020-07-14 22:29:35.661131 (MainThread): Parsing macros/cross_db_utils/_is_relation.sql
2020-07-14 22:29:35.662742 (MainThread): Parsing macros/cross_db_utils/length.sql
2020-07-14 22:29:35.664410 (MainThread): Parsing macros/cross_db_utils/dateadd.sql
2020-07-14 22:29:35.667390 (MainThread): Parsing macros/cross_db_utils/intersect.sql
2020-07-14 22:29:35.669068 (MainThread): Parsing macros/cross_db_utils/right.sql
2020-07-14 22:29:35.672319 (MainThread): Parsing macros/cross_db_utils/datediff.sql
2020-07-14 22:29:35.683744 (MainThread): Parsing macros/cross_db_utils/safe_cast.sql
2020-07-14 22:29:35.686172 (MainThread): Parsing macros/cross_db_utils/hash.sql
2020-07-14 22:29:35.687879 (MainThread): Parsing macros/cross_db_utils/identifier.sql
2020-07-14 22:29:35.689572 (MainThread): Parsing macros/cross_db_utils/position.sql
2020-07-14 22:29:35.691425 (MainThread): Parsing macros/cross_db_utils/literal.sql
2020-07-14 22:29:35.692620 (MainThread): Parsing macros/cross_db_utils/current_timestamp.sql
2020-07-14 22:29:35.721913 (MainThread): Parsing macros/cross_db_utils/width_bucket.sql
2020-07-14 22:29:35.729551 (MainThread): Parsing macros/cross_db_utils/last_day.sql
2020-07-14 22:29:35.733325 (MainThread): Parsing macros/cross_db_utils/split_part.sql
2020-07-14 22:29:35.736031 (MainThread): Parsing macros/cross_db_utils/date_trunc.sql
2020-07-14 22:29:35.738254 (MainThread): Parsing macros/cross_db_utils/_is_ephemeral.sql
2020-07-14 22:29:35.740793 (MainThread): Parsing macros/materializations/insert_by_period_materialization.sql
2020-07-14 22:29:35.768464 (MainThread): Parsing macros/logger/pretty_log_format.sql
2020-07-14 22:29:35.769471 (MainThread): Parsing macros/logger/pretty_time.sql
2020-07-14 22:29:35.770540 (MainThread): Parsing macros/logger/log_info.sql
2020-07-14 22:29:35.771539 (MainThread): Parsing macros/datetime/date_spine.sql
2020-07-14 22:29:35.775719 (MainThread): Parsing macros/web/get_url_host.sql
2020-07-14 22:29:35.777880 (MainThread): Parsing macros/web/get_url_path.sql
2020-07-14 22:29:35.780435 (MainThread): Parsing macros/web/get_url_parameter.sql
2020-07-14 22:29:35.781846 (MainThread): Parsing macros/geo/haversine_distance.sql
2020-07-14 22:29:35.783000 (MainThread): Parsing macros/schema_tests/equal_rowcount.sql
2020-07-14 22:29:35.784588 (MainThread): Parsing macros/schema_tests/relationships_where.sql
2020-07-14 22:29:35.786961 (MainThread): Parsing macros/schema_tests/recency.sql
2020-07-14 22:29:35.788448 (MainThread): Parsing macros/schema_tests/not_constant.sql
2020-07-14 22:29:35.789696 (MainThread): Parsing macros/schema_tests/test_unique_where.sql
2020-07-14 22:29:35.791593 (MainThread): Parsing macros/schema_tests/at_least_one.sql
2020-07-14 22:29:35.792789 (MainThread): Parsing macros/schema_tests/unique_combination_of_columns.sql
2020-07-14 22:29:35.794123 (MainThread): Parsing macros/schema_tests/cardinality_equality.sql
2020-07-14 22:29:35.795834 (MainThread): Parsing macros/schema_tests/expression_is_true.sql
2020-07-14 22:29:35.796995 (MainThread): Parsing macros/schema_tests/test_not_null_where.sql
2020-07-14 22:29:35.798557 (MainThread): Parsing macros/schema_tests/equality.sql
2020-07-14 22:29:35.801711 (MainThread): Parsing macros/schema_tests/mutually_exclusive_ranges.sql
2020-07-14 22:29:35.806882 (MainThread): Parsing macros/sql/nullcheck_table.sql
2020-07-14 22:29:35.808225 (MainThread): Parsing macros/sql/get_relations_by_pattern.sql
2020-07-14 22:29:35.810652 (MainThread): Parsing macros/sql/generate_series.sql
2020-07-14 22:29:35.813652 (MainThread): Parsing macros/sql/get_relations_by_prefix.sql
2020-07-14 22:29:35.816918 (MainThread): Parsing macros/sql/get_tables_by_prefix_sql.sql
2020-07-14 22:29:35.819495 (MainThread): Parsing macros/sql/star.sql
2020-07-14 22:29:35.822326 (MainThread): Parsing macros/sql/unpivot.sql
2020-07-14 22:29:35.828105 (MainThread): Parsing macros/sql/union.sql
2020-07-14 22:29:35.836524 (MainThread): Parsing macros/sql/groupby.sql
2020-07-14 22:29:35.837793 (MainThread): Parsing macros/sql/get_tables_by_pattern.sql
2020-07-14 22:29:35.838794 (MainThread): Parsing macros/sql/surrogate_key.sql
2020-07-14 22:29:35.841605 (MainThread): Parsing macros/sql/safe_add.sql
2020-07-14 22:29:35.842762 (MainThread): Parsing macros/sql/nullcheck.sql
2020-07-14 22:29:35.844391 (MainThread): Parsing macros/sql/get_column_values.sql
2020-07-14 22:29:35.848897 (MainThread): Parsing macros/sql/pivot.sql
2020-07-14 22:29:35.851857 (MainThread): Parsing macros/sql/get_query_results_as_dict.sql
2020-07-14 22:29:35.887437 (MainThread): Acquiring new bigquery connection "model.stripe.stripe_weekly_overview".
2020-07-14 22:29:35.887544 (MainThread): Opening a new connection, currently in state init
2020-07-14 22:29:35.905261 (MainThread): Acquiring new bigquery connection "model.stripe.stripe_daily_overview".
2020-07-14 22:29:35.905397 (MainThread): Opening a new connection, currently in state closed
2020-07-14 22:29:35.916035 (MainThread): Acquiring new bigquery connection "model.stripe.stripe_invoice_details".
2020-07-14 22:29:35.916124 (MainThread): Opening a new connection, currently in state closed
2020-07-14 22:29:35.929784 (MainThread): Acquiring new bigquery connection "model.stripe.stripe_customer_overview".
2020-07-14 22:29:35.929865 (MainThread): Opening a new connection, currently in state closed
2020-07-14 22:29:35.941232 (MainThread): Acquiring new bigquery connection "model.stripe.stripe_balance_transactions".
2020-07-14 22:29:35.941352 (MainThread): Opening a new connection, currently in state closed
2020-07-14 22:29:35.950437 (MainThread): Acquiring new bigquery connection "model.stripe.stripe_quarterly_overview".
2020-07-14 22:29:35.950513 (MainThread): Opening a new connection, currently in state closed
2020-07-14 22:29:35.960164 (MainThread): Acquiring new bigquery connection "model.stripe.stripe_monthly_overview".
2020-07-14 22:29:35.960245 (MainThread): Opening a new connection, currently in state closed
2020-07-14 22:29:35.970536 (MainThread): Acquiring new bigquery connection "model.stripe.stripe_subscription_details".
2020-07-14 22:29:35.970615 (MainThread): Opening a new connection, currently in state closed
2020-07-14 22:29:35.983785 (MainThread): Acquiring new bigquery connection "model.stripe.stripe_balance_transaction_joined".
2020-07-14 22:29:35.983867 (MainThread): Opening a new connection, currently in state closed
2020-07-14 22:29:35.999824 (MainThread): Acquiring new bigquery connection "model.stripe.stripe_incomplete_charges".
2020-07-14 22:29:35.999925 (MainThread): Opening a new connection, currently in state closed
2020-07-14 22:29:36.289087 (MainThread): Acquiring new bigquery connection "model.stripe_source.stg_stripe_card".
2020-07-14 22:29:36.289223 (MainThread): Opening a new connection, currently in state closed
2020-07-14 22:29:36.302784 (MainThread): Acquiring new bigquery connection "model.stripe_source.stg_stripe_invoice_line_item".
2020-07-14 22:29:36.302917 (MainThread): Opening a new connection, currently in state closed
2020-07-14 22:29:36.317629 (MainThread): Acquiring new bigquery connection "model.stripe_source.stg_stripe_payment_method_card".
2020-07-14 22:29:36.317758 (MainThread): Opening a new connection, currently in state closed
2020-07-14 22:29:36.330230 (MainThread): Acquiring new bigquery connection "model.stripe_source.stg_stripe_charge".
2020-07-14 22:29:36.330308 (MainThread): Opening a new connection, currently in state closed
2020-07-14 22:29:36.341727 (MainThread): Acquiring new bigquery connection "model.stripe_source.stg_stripe_payout".
2020-07-14 22:29:36.341838 (MainThread): Opening a new connection, currently in state closed
2020-07-14 22:29:36.353720 (MainThread): Acquiring new bigquery connection "model.stripe_source.stg_stripe_customer".
2020-07-14 22:29:36.353834 (MainThread): Opening a new connection, currently in state closed
2020-07-14 22:29:36.365604 (MainThread): Acquiring new bigquery connection "model.stripe_source.stg_stripe_refund".
2020-07-14 22:29:36.365697 (MainThread): Opening a new connection, currently in state closed
2020-07-14 22:29:36.377326 (MainThread): Acquiring new bigquery connection "model.stripe_source.stg_stripe_subscription".
2020-07-14 22:29:36.377411 (MainThread): Opening a new connection, currently in state closed
2020-07-14 22:29:36.388726 (MainThread): Acquiring new bigquery connection "model.stripe_source.stg_stripe_payment_method".
2020-07-14 22:29:36.388801 (MainThread): Opening a new connection, currently in state closed
2020-07-14 22:29:36.402161 (MainThread): Acquiring new bigquery connection "model.stripe_source.stg_stripe_payment_intent".
2020-07-14 22:29:36.402269 (MainThread): Opening a new connection, currently in state closed
2020-07-14 22:29:36.415570 (MainThread): Acquiring new bigquery connection "model.stripe_source.stg_stripe_invoice".
2020-07-14 22:29:36.415676 (MainThread): Opening a new connection, currently in state closed
2020-07-14 22:29:36.428406 (MainThread): Acquiring new bigquery connection "model.stripe_source.stg_stripe_fee".
2020-07-14 22:29:36.428499 (MainThread): Opening a new connection, currently in state closed
2020-07-14 22:29:36.440898 (MainThread): Acquiring new bigquery connection "model.stripe_source.stg_stripe_balance_transaction".
2020-07-14 22:29:36.440989 (MainThread): Opening a new connection, currently in state closed
2020-07-14 22:29:38.594431 (MainThread): Found 23 models, 16 tests, 0 snapshots, 0 analyses, 278 macros, 0 operations, 0 seed files, 13 sources
2020-07-14 22:29:38.627756 (MainThread): 
2020-07-14 22:29:38.628114 (MainThread): Acquiring new bigquery connection "master".
2020-07-14 22:29:38.628188 (MainThread): Opening a new connection, currently in state closed
2020-07-14 22:29:38.651684 (ThreadPoolExecutor-0_0): Acquiring new bigquery connection "list_culdesac-labs".
2020-07-14 22:29:38.651804 (ThreadPoolExecutor-0_0): Opening a new connection, currently in state init
2020-07-14 22:29:38.652378 (ThreadPoolExecutor-0_1): Acquiring new bigquery connection "list_dbt-package-testing".
2020-07-14 22:29:38.652504 (ThreadPoolExecutor-0_1): Opening a new connection, currently in state init
2020-07-14 22:29:39.051721 (ThreadPoolExecutor-0_1): Acquiring new bigquery connection "create_culdesac-labs_dbt_kristin_2".
2020-07-14 22:29:39.052146 (ThreadPoolExecutor-0_0): Acquiring new bigquery connection "create_dbt-package-testing_dbt_kristin_2".
2020-07-14 22:29:39.052280 (ThreadPoolExecutor-0_1): Re-using an available connection from the pool (formerly list_dbt-package-testing).
2020-07-14 22:29:39.052429 (ThreadPoolExecutor-0_0): Re-using an available connection from the pool (formerly list_culdesac-labs).
2020-07-14 22:29:39.052574 (ThreadPoolExecutor-0_1): Creating schema "culdesac-labs.dbt_kristin_2".
2020-07-14 22:29:39.052709 (ThreadPoolExecutor-0_0): Creating schema "dbt-package-testing.dbt_kristin_2".
2020-07-14 22:29:39.052912 (ThreadPoolExecutor-0_1): Client.dataset is deprecated and will be removed in a future version. Use a string like 'my_project.my_dataset' or a cloud.google.bigquery.DatasetReference object, instead.
2020-07-14 22:29:39.053073 (ThreadPoolExecutor-0_0): Client.dataset is deprecated and will be removed in a future version. Use a string like 'my_project.my_dataset' or a cloud.google.bigquery.DatasetReference object, instead.
2020-07-14 22:29:39.581139 (MainThread): Connection 'master' was properly closed.
2020-07-14 22:29:39.581291 (MainThread): Connection 'create_dbt-package-testing_dbt_kristin_2' was left open.
2020-07-14 22:29:39.581378 (MainThread): Connection 'create_culdesac-labs_dbt_kristin_2' was left open.
2020-07-14 22:29:39.581535 (MainThread): Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'end', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x10f929ac0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x10f7835e0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x10f6621f0>]}
2020-07-14 22:29:39.581750 (MainThread): Flushing usage events
2020-07-14 22:29:39.966748 (MainThread): Encountered an error:
2020-07-14 22:29:39.966942 (MainThread): Database Error
  Access Denied: Project culdesac-labs: User does not have bigquery.datasets.create permission in project culdesac-labs.
2020-07-14 22:29:39.978956 (MainThread): Traceback (most recent call last):
  File "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/adapters/bigquery/connections.py", line 83, in exception_handler
    yield
  File "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/adapters/bigquery/connections.py", line 354, in _retry_and_handle
    return retry.retry_target(
  File "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/google/api_core/retry.py", line 184, in retry_target
    return target()
  File "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/adapters/bigquery/connections.py", line 339, in fn
    return client.create_dataset(dataset, exists_ok=True)
  File "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/google/cloud/bigquery/client.py", line 460, in create_dataset
    api_response = self._call_api(
  File "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/google/cloud/bigquery/client.py", line 556, in _call_api
    return call()
  File "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/google/api_core/retry.py", line 281, in retry_wrapped_func
    return retry_target(
  File "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/google/api_core/retry.py", line 184, in retry_target
    return target()
  File "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/google/cloud/_http.py", line 423, in api_request
    raise exceptions.from_http_response(response)
google.api_core.exceptions.Forbidden: 403 POST https://bigquery.googleapis.com/bigquery/v2/projects/culdesac-labs/datasets: Access Denied: Project culdesac-labs: User does not have bigquery.datasets.create permission in project culdesac-labs.

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/main.py", line 81, in main
    results, succeeded = handle_and_check(args)
  File "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/main.py", line 159, in handle_and_check
    task, res = run_from_args(parsed)
  File "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/main.py", line 212, in run_from_args
    results = task.run()
  File "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/task/runnable.py", line 416, in run
    result = self.execute_with_hooks(selected_uids)
  File "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/task/runnable.py", line 376, in execute_with_hooks
    self.before_run(adapter, selected_uids)
  File "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/task/run.py", line 202, in before_run
    super().before_run(adapter, selected_uids)
  File "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/task/runnable.py", line 362, in before_run
    self.create_schemas(adapter, selected_uids)
  File "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/task/runnable.py", line 515, in create_schemas
    create_future.result()
  File "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/concurrent/futures/_base.py", line 432, in result
    return self.__get_result()
  File "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/concurrent/futures/_base.py", line 388, in __get_result
    raise self._exception
  File "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/concurrent/futures/thread.py", line 57, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/task/runnable.py", line 481, in create_schema
    adapter.create_schema(relation)
  File "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/adapters/bigquery/impl.py", line 266, in create_schema
    self.connections.create_dataset(database, schema)
  File "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/adapters/bigquery/connections.py", line 340, in create_dataset
    self._retry_and_handle(msg='create dataset', conn=conn, fn=fn)
  File "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/adapters/bigquery/connections.py", line 354, in _retry_and_handle
    return retry.retry_target(
  File "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/contextlib.py", line 131, in __exit__
    self.gen.throw(type, value, traceback)
  File "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/adapters/bigquery/connections.py", line 91, in exception_handler
    self.handle_error(e, message)
  File "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/adapters/bigquery/connections.py", line 75, in handle_error
    raise DatabaseException(error_msg)
dbt.exceptions.DatabaseException: Database Error
  Access Denied: Project culdesac-labs: User does not have bigquery.datasets.create permission in project culdesac-labs.

2020-07-14 22:31:13.649403 (MainThread): Running with dbt=0.17.0-rc1
2020-07-14 22:31:13.839172 (MainThread): running dbt with arguments Namespace(cls=<class 'dbt.task.run.RunTask'>, debug=False, exclude=None, fail_fast=False, full_refresh=False, log_cache_events=False, log_format='default', models=None, partial_parse=None, profile=None, profiles_dir='/Users/kristin/.dbt', project_dir=None, record_timing_info=None, rpc_method='run', single_threaded=False, strict=False, target=None, test_new_parser=False, threads=None, use_cache=True, vars='{}', version_check=True, warn_error=False, which='run', write_json=True)
2020-07-14 22:31:13.840093 (MainThread): Tracking: tracking
2020-07-14 22:31:13.846447 (MainThread): Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'start', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x106070b50>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x106080fd0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x106080d60>]}
2020-07-14 22:31:13.865194 (MainThread): Partial parsing not enabled
2020-07-14 22:31:13.866757 (MainThread): Parsing macros/core.sql
2020-07-14 22:31:13.870772 (MainThread): Parsing macros/materializations/helpers.sql
2020-07-14 22:31:13.877930 (MainThread): Parsing macros/materializations/snapshot/snapshot_merge.sql
2020-07-14 22:31:13.879621 (MainThread): Parsing macros/materializations/snapshot/strategies.sql
2020-07-14 22:31:13.894461 (MainThread): Parsing macros/materializations/snapshot/snapshot.sql
2020-07-14 22:31:13.921267 (MainThread): Parsing macros/materializations/seed/seed.sql
2020-07-14 22:31:13.939746 (MainThread): Parsing macros/materializations/incremental/helpers.sql
2020-07-14 22:31:13.941459 (MainThread): Parsing macros/materializations/incremental/incremental.sql
2020-07-14 22:31:13.947559 (MainThread): Parsing macros/materializations/common/merge.sql
2020-07-14 22:31:13.959874 (MainThread): Parsing macros/materializations/table/table.sql
2020-07-14 22:31:13.966038 (MainThread): Parsing macros/materializations/view/view.sql
2020-07-14 22:31:13.971498 (MainThread): Parsing macros/materializations/view/create_or_replace_view.sql
2020-07-14 22:31:13.975673 (MainThread): Parsing macros/etc/get_custom_alias.sql
2020-07-14 22:31:13.976493 (MainThread): Parsing macros/etc/query.sql
2020-07-14 22:31:13.977403 (MainThread): Parsing macros/etc/is_incremental.sql
2020-07-14 22:31:13.978798 (MainThread): Parsing macros/etc/datetime.sql
2020-07-14 22:31:13.987092 (MainThread): Parsing macros/etc/get_custom_schema.sql
2020-07-14 22:31:13.988839 (MainThread): Parsing macros/etc/get_custom_database.sql
2020-07-14 22:31:13.989755 (MainThread): Parsing macros/adapters/common.sql
2020-07-14 22:31:14.033791 (MainThread): Parsing macros/schema_tests/relationships.sql
2020-07-14 22:31:14.034822 (MainThread): Parsing macros/schema_tests/not_null.sql
2020-07-14 22:31:14.035619 (MainThread): Parsing macros/schema_tests/unique.sql
2020-07-14 22:31:14.036562 (MainThread): Parsing macros/schema_tests/accepted_values.sql
2020-07-14 22:31:14.038718 (MainThread): Parsing macros/etc.sql
2020-07-14 22:31:14.039290 (MainThread): Parsing macros/catalog.sql
2020-07-14 22:31:14.044692 (MainThread): Parsing macros/adapters.sql
2020-07-14 22:31:14.059667 (MainThread): Parsing macros/materializations/seed.sql
2020-07-14 22:31:14.061376 (MainThread): Parsing macros/materializations/view.sql
2020-07-14 22:31:14.063097 (MainThread): Parsing macros/materializations/table.sql
2020-07-14 22:31:14.072012 (MainThread): Parsing macros/materializations/incremental.sql
2020-07-14 22:31:14.082782 (MainThread): Parsing macros/materializations/snapshot.sql
2020-07-14 22:31:14.128871 (MainThread): Partial parsing not enabled
2020-07-14 22:31:14.130328 (MainThread): Parsing macros/cross_db_utils/except.sql
2020-07-14 22:31:14.131232 (MainThread): Parsing macros/cross_db_utils/replace.sql
2020-07-14 22:31:14.132283 (MainThread): Parsing macros/cross_db_utils/concat.sql
2020-07-14 22:31:14.134642 (MainThread): Parsing macros/cross_db_utils/datatypes.sql
2020-07-14 22:31:14.139315 (MainThread): Parsing macros/cross_db_utils/_is_relation.sql
2020-07-14 22:31:14.140509 (MainThread): Parsing macros/cross_db_utils/length.sql
2020-07-14 22:31:14.141742 (MainThread): Parsing macros/cross_db_utils/dateadd.sql
2020-07-14 22:31:14.143875 (MainThread): Parsing macros/cross_db_utils/intersect.sql
2020-07-14 22:31:14.144746 (MainThread): Parsing macros/cross_db_utils/right.sql
2020-07-14 22:31:14.146699 (MainThread): Parsing macros/cross_db_utils/datediff.sql
2020-07-14 22:31:14.155749 (MainThread): Parsing macros/cross_db_utils/safe_cast.sql
2020-07-14 22:31:14.157542 (MainThread): Parsing macros/cross_db_utils/hash.sql
2020-07-14 22:31:14.158771 (MainThread): Parsing macros/cross_db_utils/identifier.sql
2020-07-14 22:31:14.159979 (MainThread): Parsing macros/cross_db_utils/position.sql
2020-07-14 22:31:14.161337 (MainThread): Parsing macros/cross_db_utils/literal.sql
2020-07-14 22:31:14.162117 (MainThread): Parsing macros/cross_db_utils/current_timestamp.sql
2020-07-14 22:31:14.188191 (MainThread): Parsing macros/cross_db_utils/width_bucket.sql
2020-07-14 22:31:14.195563 (MainThread): Parsing macros/cross_db_utils/last_day.sql
2020-07-14 22:31:14.199271 (MainThread): Parsing macros/cross_db_utils/split_part.sql
2020-07-14 22:31:14.201716 (MainThread): Parsing macros/cross_db_utils/date_trunc.sql
2020-07-14 22:31:14.203673 (MainThread): Parsing macros/cross_db_utils/_is_ephemeral.sql
2020-07-14 22:31:14.206026 (MainThread): Parsing macros/materializations/insert_by_period_materialization.sql
2020-07-14 22:31:14.233772 (MainThread): Parsing macros/logger/pretty_log_format.sql
2020-07-14 22:31:14.234550 (MainThread): Parsing macros/logger/pretty_time.sql
2020-07-14 22:31:14.235353 (MainThread): Parsing macros/logger/log_info.sql
2020-07-14 22:31:14.236103 (MainThread): Parsing macros/datetime/date_spine.sql
2020-07-14 22:31:14.239608 (MainThread): Parsing macros/web/get_url_host.sql
2020-07-14 22:31:14.241089 (MainThread): Parsing macros/web/get_url_path.sql
2020-07-14 22:31:14.243259 (MainThread): Parsing macros/web/get_url_parameter.sql
2020-07-14 22:31:14.244363 (MainThread): Parsing macros/geo/haversine_distance.sql
2020-07-14 22:31:14.245307 (MainThread): Parsing macros/schema_tests/equal_rowcount.sql
2020-07-14 22:31:14.246613 (MainThread): Parsing macros/schema_tests/relationships_where.sql
2020-07-14 22:31:14.248618 (MainThread): Parsing macros/schema_tests/recency.sql
2020-07-14 22:31:14.249803 (MainThread): Parsing macros/schema_tests/not_constant.sql
2020-07-14 22:31:14.250728 (MainThread): Parsing macros/schema_tests/test_unique_where.sql
2020-07-14 22:31:14.252173 (MainThread): Parsing macros/schema_tests/at_least_one.sql
2020-07-14 22:31:14.253039 (MainThread): Parsing macros/schema_tests/unique_combination_of_columns.sql
2020-07-14 22:31:14.254038 (MainThread): Parsing macros/schema_tests/cardinality_equality.sql
2020-07-14 22:31:14.255389 (MainThread): Parsing macros/schema_tests/expression_is_true.sql
2020-07-14 22:31:14.256308 (MainThread): Parsing macros/schema_tests/test_not_null_where.sql
2020-07-14 22:31:14.257507 (MainThread): Parsing macros/schema_tests/equality.sql
2020-07-14 22:31:14.260454 (MainThread): Parsing macros/schema_tests/mutually_exclusive_ranges.sql
2020-07-14 22:31:14.265715 (MainThread): Parsing macros/sql/nullcheck_table.sql
2020-07-14 22:31:14.266758 (MainThread): Parsing macros/sql/get_relations_by_pattern.sql
2020-07-14 22:31:14.269078 (MainThread): Parsing macros/sql/generate_series.sql
2020-07-14 22:31:14.271917 (MainThread): Parsing macros/sql/get_relations_by_prefix.sql
2020-07-14 22:31:14.275054 (MainThread): Parsing macros/sql/get_tables_by_prefix_sql.sql
2020-07-14 22:31:14.277329 (MainThread): Parsing macros/sql/star.sql
2020-07-14 22:31:14.279809 (MainThread): Parsing macros/sql/unpivot.sql
2020-07-14 22:31:14.285432 (MainThread): Parsing macros/sql/union.sql
2020-07-14 22:31:14.293691 (MainThread): Parsing macros/sql/groupby.sql
2020-07-14 22:31:14.294497 (MainThread): Parsing macros/sql/get_tables_by_pattern.sql
2020-07-14 22:31:14.295404 (MainThread): Parsing macros/sql/surrogate_key.sql
2020-07-14 22:31:14.297680 (MainThread): Parsing macros/sql/safe_add.sql
2020-07-14 22:31:14.298597 (MainThread): Parsing macros/sql/nullcheck.sql
2020-07-14 22:31:14.299667 (MainThread): Parsing macros/sql/get_column_values.sql
2020-07-14 22:31:14.303209 (MainThread): Parsing macros/sql/pivot.sql
2020-07-14 22:31:14.305983 (MainThread): Parsing macros/sql/get_query_results_as_dict.sql
2020-07-14 22:31:14.339779 (MainThread): Acquiring new bigquery connection "model.stripe.stripe_weekly_overview".
2020-07-14 22:31:14.339875 (MainThread): Opening a new connection, currently in state init
2020-07-14 22:31:14.356288 (MainThread): Acquiring new bigquery connection "model.stripe.stripe_daily_overview".
2020-07-14 22:31:14.356382 (MainThread): Opening a new connection, currently in state closed
2020-07-14 22:31:14.365704 (MainThread): Acquiring new bigquery connection "model.stripe.stripe_invoice_details".
2020-07-14 22:31:14.365778 (MainThread): Opening a new connection, currently in state closed
2020-07-14 22:31:14.378279 (MainThread): Acquiring new bigquery connection "model.stripe.stripe_customer_overview".
2020-07-14 22:31:14.378358 (MainThread): Opening a new connection, currently in state closed
2020-07-14 22:31:14.387953 (MainThread): Acquiring new bigquery connection "model.stripe.stripe_balance_transactions".
2020-07-14 22:31:14.388025 (MainThread): Opening a new connection, currently in state closed
2020-07-14 22:31:14.396549 (MainThread): Acquiring new bigquery connection "model.stripe.stripe_quarterly_overview".
2020-07-14 22:31:14.396629 (MainThread): Opening a new connection, currently in state closed
2020-07-14 22:31:14.406080 (MainThread): Acquiring new bigquery connection "model.stripe.stripe_monthly_overview".
2020-07-14 22:31:14.406154 (MainThread): Opening a new connection, currently in state closed
2020-07-14 22:31:14.415858 (MainThread): Acquiring new bigquery connection "model.stripe.stripe_subscription_details".
2020-07-14 22:31:14.415938 (MainThread): Opening a new connection, currently in state closed
2020-07-14 22:31:14.428551 (MainThread): Acquiring new bigquery connection "model.stripe.stripe_balance_transaction_joined".
2020-07-14 22:31:14.428626 (MainThread): Opening a new connection, currently in state closed
2020-07-14 22:31:14.443190 (MainThread): Acquiring new bigquery connection "model.stripe.stripe_incomplete_charges".
2020-07-14 22:31:14.443266 (MainThread): Opening a new connection, currently in state closed
2020-07-14 22:31:14.721213 (MainThread): Acquiring new bigquery connection "model.stripe_source.stg_stripe_card".
2020-07-14 22:31:14.721339 (MainThread): Opening a new connection, currently in state closed
2020-07-14 22:31:14.733058 (MainThread): Acquiring new bigquery connection "model.stripe_source.stg_stripe_invoice_line_item".
2020-07-14 22:31:14.733148 (MainThread): Opening a new connection, currently in state closed
2020-07-14 22:31:14.744598 (MainThread): Acquiring new bigquery connection "model.stripe_source.stg_stripe_payment_method_card".
2020-07-14 22:31:14.744674 (MainThread): Opening a new connection, currently in state closed
2020-07-14 22:31:14.754466 (MainThread): Acquiring new bigquery connection "model.stripe_source.stg_stripe_charge".
2020-07-14 22:31:14.754542 (MainThread): Opening a new connection, currently in state closed
2020-07-14 22:31:14.764305 (MainThread): Acquiring new bigquery connection "model.stripe_source.stg_stripe_payout".
2020-07-14 22:31:14.764380 (MainThread): Opening a new connection, currently in state closed
2020-07-14 22:31:14.775102 (MainThread): Acquiring new bigquery connection "model.stripe_source.stg_stripe_customer".
2020-07-14 22:31:14.775185 (MainThread): Opening a new connection, currently in state closed
2020-07-14 22:31:14.784838 (MainThread): Acquiring new bigquery connection "model.stripe_source.stg_stripe_refund".
2020-07-14 22:31:14.784911 (MainThread): Opening a new connection, currently in state closed
2020-07-14 22:31:14.794433 (MainThread): Acquiring new bigquery connection "model.stripe_source.stg_stripe_subscription".
2020-07-14 22:31:14.794506 (MainThread): Opening a new connection, currently in state closed
2020-07-14 22:31:14.805306 (MainThread): Acquiring new bigquery connection "model.stripe_source.stg_stripe_payment_method".
2020-07-14 22:31:14.805380 (MainThread): Opening a new connection, currently in state closed
2020-07-14 22:31:14.814816 (MainThread): Acquiring new bigquery connection "model.stripe_source.stg_stripe_payment_intent".
2020-07-14 22:31:14.814889 (MainThread): Opening a new connection, currently in state closed
2020-07-14 22:31:14.824956 (MainThread): Acquiring new bigquery connection "model.stripe_source.stg_stripe_invoice".
2020-07-14 22:31:14.825035 (MainThread): Opening a new connection, currently in state closed
2020-07-14 22:31:14.835257 (MainThread): Acquiring new bigquery connection "model.stripe_source.stg_stripe_fee".
2020-07-14 22:31:14.835330 (MainThread): Opening a new connection, currently in state closed
2020-07-14 22:31:14.846473 (MainThread): Acquiring new bigquery connection "model.stripe_source.stg_stripe_balance_transaction".
2020-07-14 22:31:14.846564 (MainThread): Opening a new connection, currently in state closed
2020-07-14 22:31:16.936650 (MainThread): Found 23 models, 16 tests, 0 snapshots, 0 analyses, 278 macros, 0 operations, 0 seed files, 13 sources
2020-07-14 22:31:16.969998 (MainThread): 
2020-07-14 22:31:16.970298 (MainThread): Acquiring new bigquery connection "master".
2020-07-14 22:31:16.970375 (MainThread): Opening a new connection, currently in state closed
2020-07-14 22:31:16.993372 (ThreadPoolExecutor-0_0): Acquiring new bigquery connection "list_dbt-package-testing".
2020-07-14 22:31:16.993499 (ThreadPoolExecutor-0_0): Opening a new connection, currently in state init
2020-07-14 22:31:17.418107 (ThreadPoolExecutor-1_0): Acquiring new bigquery connection "list_dbt-package-testing_dbt_kristin_2".
2020-07-14 22:31:17.418237 (ThreadPoolExecutor-1_0): Re-using an available connection from the pool (formerly list_dbt-package-testing).
2020-07-14 22:31:17.418358 (ThreadPoolExecutor-1_0): Client.dataset is deprecated and will be removed in a future version. Use a string like 'my_project.my_dataset' or a cloud.google.bigquery.DatasetReference object, instead.
2020-07-14 22:31:17.584225 (MainThread): Acquiring new bigquery connection "master".
2020-07-14 22:31:17.584447 (MainThread): Opening a new connection, currently in state closed
2020-07-14 22:31:17.584858 (MainThread): 15:31:17 | Concurrency: 4 threads (target='dev_bigquery_dbt_testing')
2020-07-14 22:31:17.585073 (MainThread): 15:31:17 | 
2020-07-14 22:31:17.590969 (Thread-1): Began running node model.stripe_source.stg_stripe_charge
2020-07-14 22:31:17.591192 (Thread-2): Began running node model.stripe_source.stg_stripe_customer
2020-07-14 22:31:17.591359 (Thread-1): 15:31:17 | 1 of 23 START table model dbt_kristin_2.stg_stripe_charge............ [RUN]
2020-07-14 22:31:17.591461 (Thread-3): Began running node model.stripe_source.stg_stripe_balance_transaction
2020-07-14 22:31:17.591639 (Thread-4): Began running node model.stripe_source.stg_stripe_card
2020-07-14 22:31:17.591787 (Thread-2): 15:31:17 | 2 of 23 START table model dbt_kristin_2.stg_stripe_customer.......... [RUN]
2020-07-14 22:31:17.592133 (Thread-1): Acquiring new bigquery connection "model.stripe_source.stg_stripe_charge".
2020-07-14 22:31:17.592279 (Thread-3): 15:31:17 | 3 of 23 START table model dbt_kristin_2.stg_stripe_balance_transaction [RUN]
2020-07-14 22:31:17.592423 (Thread-4): 15:31:17 | 4 of 23 START table model dbt_kristin_2.stg_stripe_card.............. [RUN]
2020-07-14 22:31:17.592724 (Thread-2): Acquiring new bigquery connection "model.stripe_source.stg_stripe_customer".
2020-07-14 22:31:17.592870 (Thread-1): Re-using an available connection from the pool (formerly list_dbt-package-testing_dbt_kristin_2).
2020-07-14 22:31:17.593188 (Thread-3): Acquiring new bigquery connection "model.stripe_source.stg_stripe_balance_transaction".
2020-07-14 22:31:17.593450 (Thread-2): Opening a new connection, currently in state init
2020-07-14 22:31:17.593726 (Thread-4): Acquiring new bigquery connection "model.stripe_source.stg_stripe_card".
2020-07-14 22:31:17.593876 (Thread-1): Compiling model.stripe_source.stg_stripe_charge
2020-07-14 22:31:17.593986 (Thread-3): Opening a new connection, currently in state init
2020-07-14 22:31:17.594096 (Thread-2): Compiling model.stripe_source.stg_stripe_customer
2020-07-14 22:31:17.594195 (Thread-4): Opening a new connection, currently in state init
2020-07-14 22:31:17.609376 (Thread-1): Writing injected SQL for node "model.stripe_source.stg_stripe_charge"
2020-07-14 22:31:17.609493 (Thread-3): Compiling model.stripe_source.stg_stripe_balance_transaction
2020-07-14 22:31:17.617554 (Thread-2): Writing injected SQL for node "model.stripe_source.stg_stripe_customer"
2020-07-14 22:31:17.617676 (Thread-4): Compiling model.stripe_source.stg_stripe_card
2020-07-14 22:31:17.624701 (Thread-3): Writing injected SQL for node "model.stripe_source.stg_stripe_balance_transaction"
2020-07-14 22:31:17.631230 (Thread-1): finished collecting timing info
2020-07-14 22:31:17.632635 (Thread-4): Writing injected SQL for node "model.stripe_source.stg_stripe_card"
2020-07-14 22:31:17.663085 (Thread-4): finished collecting timing info
2020-07-14 22:31:17.669061 (Thread-2): finished collecting timing info
2020-07-14 22:31:17.693275 (Thread-3): finished collecting timing info
2020-07-14 22:31:17.699222 (Thread-3): Writing runtime SQL for node "model.stripe_source.stg_stripe_balance_transaction"
2020-07-14 22:31:17.701913 (Thread-1): Writing runtime SQL for node "model.stripe_source.stg_stripe_charge"
2020-07-14 22:31:17.703595 (Thread-4): Writing runtime SQL for node "model.stripe_source.stg_stripe_card"
2020-07-14 22:31:17.705888 (Thread-2): Writing runtime SQL for node "model.stripe_source.stg_stripe_customer"
2020-07-14 22:31:17.706454 (Thread-1): On model.stripe_source.stg_stripe_charge: /* {"app": "dbt", "dbt_version": "0.17.0rc1", "profile_name": "integration_test", "target_name": "dev_bigquery_dbt_testing", "node_id": "model.stripe_source.stg_stripe_charge"} */


  create or replace table `dbt-package-testing`.`dbt_kristin_2`.`stg_stripe_charge`
  
  
  OPTIONS()
  as (
    with charge as (

    select *
    from `dbt-package-testing`.`stripe`.`charge`

), fields as (

    select 
      id as charge_id, 
      amount,
      amount_refunded,
      application_fee_amount,
      balance_transaction_id,
      captured as is_captured,
      card_id,
      created as created_at,
      customer_id,
      currency,
      description,
      failure_code,
      failure_message,
      paid as is_paid,
      payment_intent_id,
      receipt_email,
      receipt_number,
      refunded as is_refunded,
      status,
      invoice_id
    from charge
    
)

select *
from fields
  );
    
2020-07-14 22:31:17.707376 (Thread-3): On model.stripe_source.stg_stripe_balance_transaction: /* {"app": "dbt", "dbt_version": "0.17.0rc1", "profile_name": "integration_test", "target_name": "dev_bigquery_dbt_testing", "node_id": "model.stripe_source.stg_stripe_balance_transaction"} */


  create or replace table `dbt-package-testing`.`dbt_kristin_2`.`stg_stripe_balance_transaction`
  
  
  OPTIONS()
  as (
    with balance_transaction as (

    select *
    from `dbt-package-testing`.`stripe`.`balance_transaction`

), fields as (

    select 
      id as balance_transaction_id,
      amount,
      available_on,
      created as created_at,
      currency,
      description,
      exchange_rate,
      fee,
      net,
      source,
      status,
      type
    from balance_transaction
)

select *
from fields
  );
    
2020-07-14 22:31:17.708908 (Thread-4): On model.stripe_source.stg_stripe_card: /* {"app": "dbt", "dbt_version": "0.17.0rc1", "profile_name": "integration_test", "target_name": "dev_bigquery_dbt_testing", "node_id": "model.stripe_source.stg_stripe_card"} */


  create or replace table `dbt-package-testing`.`dbt_kristin_2`.`stg_stripe_card`
  
  
  OPTIONS()
  as (
    with card as (

    select *
    from `dbt-package-testing`.`stripe`.`card`

), fields as (

    select 
      id as card_id,
      brand,
      country,
      created as created_at,
      customer_id,
      name,
      recipient,
      funding
    from card
    where not coalesce(is_deleted, false)

)

select *
from fields
  );
    
2020-07-14 22:31:17.710058 (Thread-2): On model.stripe_source.stg_stripe_customer: /* {"app": "dbt", "dbt_version": "0.17.0rc1", "profile_name": "integration_test", "target_name": "dev_bigquery_dbt_testing", "node_id": "model.stripe_source.stg_stripe_customer"} */


  create or replace table `dbt-package-testing`.`dbt_kristin_2`.`stg_stripe_customer`
  
  
  OPTIONS()
  as (
    with customer as (

    select *
    from `dbt-package-testing`.`stripe`.`customer`

), fields as (

    select 
      id as customer_id,
      account_balance,
      created as created_at,
      currency,
      default_card_id,
      delinquent as is_deliguent,
      description,
      email,
      shipping_address_city,
      shipping_address_country,
      shipping_address_line_1,
      shipping_address_line_2,
      shipping_address_postal_code,
      shipping_address_state,
      shipping_name,
      shipping_phone
    from customer
    where not is_deleted

)

select *
from fields
  );
    
2020-07-14 22:31:19.752383 (Thread-1): finished collecting timing info
2020-07-14 22:31:19.753135 (Thread-1): Sending event: {'category': 'dbt', 'action': 'run_model', 'label': 'af2adbe3-49a5-46d7-928f-93fc4ae76db3', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x106399880>]}
2020-07-14 22:31:19.753403 (Thread-1): 15:31:19 | 1 of 23 OK created table model dbt_kristin_2.stg_stripe_charge....... [CREATE TABLE (1485) in 2.16s]
2020-07-14 22:31:19.753553 (Thread-1): Finished running node model.stripe_source.stg_stripe_charge
2020-07-14 22:31:19.753702 (Thread-1): Began running node model.stripe_source.stg_stripe_payment_intent
2020-07-14 22:31:19.753983 (Thread-1): 15:31:19 | 5 of 23 START table model dbt_kristin_2.stg_stripe_payment_intent.... [RUN]
2020-07-14 22:31:19.754376 (Thread-1): Acquiring new bigquery connection "model.stripe_source.stg_stripe_payment_intent".
2020-07-14 22:31:19.754490 (Thread-1): Re-using an available connection from the pool (formerly model.stripe_source.stg_stripe_charge).
2020-07-14 22:31:19.754592 (Thread-1): Compiling model.stripe_source.stg_stripe_payment_intent
2020-07-14 22:31:19.762035 (Thread-1): Writing injected SQL for node "model.stripe_source.stg_stripe_payment_intent"
2020-07-14 22:31:19.762508 (Thread-1): finished collecting timing info
2020-07-14 22:31:19.768275 (Thread-1): Writing runtime SQL for node "model.stripe_source.stg_stripe_payment_intent"
2020-07-14 22:31:19.768715 (Thread-1): On model.stripe_source.stg_stripe_payment_intent: /* {"app": "dbt", "dbt_version": "0.17.0rc1", "profile_name": "integration_test", "target_name": "dev_bigquery_dbt_testing", "node_id": "model.stripe_source.stg_stripe_payment_intent"} */


  create or replace table `dbt-package-testing`.`dbt_kristin_2`.`stg_stripe_payment_intent`
  
  
  OPTIONS()
  as (
    with payment_intent as (

    select *
    from `dbt-package-testing`.`stripe`.`payment_intent`

), fields as (

    select 
      id as payment_intent_id,
      amount,
      amount_capturable,
      amount_received,
      application,
      application_fee_amount,
      canceled_at,
      cancellation_reason,
      capture_method,
      confirmation_method,
      created as created_at,
      currency,
      customer_id,
      description,
      payment_method_id,
      receipt_email,
      statement_descriptor,
      status
    from payment_intent

)

select *
from fields
  );
    
2020-07-14 22:31:19.809287 (Thread-4): finished collecting timing info
2020-07-14 22:31:19.810001 (Thread-4): Sending event: {'category': 'dbt', 'action': 'run_model', 'label': 'af2adbe3-49a5-46d7-928f-93fc4ae76db3', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x1064305b0>]}
2020-07-14 22:31:19.810279 (Thread-4): 15:31:19 | 4 of 23 OK created table model dbt_kristin_2.stg_stripe_card......... [CREATE TABLE (560) in 2.22s]
2020-07-14 22:31:19.810423 (Thread-4): Finished running node model.stripe_source.stg_stripe_card
2020-07-14 22:31:19.810570 (Thread-4): Began running node model.stripe_source.stg_stripe_payment_method
2020-07-14 22:31:19.810715 (Thread-4): 15:31:19 | 6 of 23 START table model dbt_kristin_2.stg_stripe_payment_method.... [RUN]
2020-07-14 22:31:19.811106 (Thread-4): Acquiring new bigquery connection "model.stripe_source.stg_stripe_payment_method".
2020-07-14 22:31:19.811227 (Thread-4): Re-using an available connection from the pool (formerly model.stripe_source.stg_stripe_card).
2020-07-14 22:31:19.811334 (Thread-4): Compiling model.stripe_source.stg_stripe_payment_method
2020-07-14 22:31:19.819166 (Thread-4): Writing injected SQL for node "model.stripe_source.stg_stripe_payment_method"
2020-07-14 22:31:19.819645 (Thread-4): finished collecting timing info
2020-07-14 22:31:19.824351 (Thread-4): Writing runtime SQL for node "model.stripe_source.stg_stripe_payment_method"
2020-07-14 22:31:19.825179 (Thread-4): On model.stripe_source.stg_stripe_payment_method: /* {"app": "dbt", "dbt_version": "0.17.0rc1", "profile_name": "integration_test", "target_name": "dev_bigquery_dbt_testing", "node_id": "model.stripe_source.stg_stripe_payment_method"} */


  create or replace table `dbt-package-testing`.`dbt_kristin_2`.`stg_stripe_payment_method`
  
  
  OPTIONS()
  as (
    with payment_method as (

    select *
    from `dbt-package-testing`.`stripe`.`payment_method`

), fields as (

    select 
      id as payment_method_id,
      created as created_at,
      customer_id,
      type
    from payment_method
    where not is_deleted

)

select *
from fields
  );
    
2020-07-14 22:31:19.831073 (Thread-2): finished collecting timing info
2020-07-14 22:31:19.833260 (Thread-3): finished collecting timing info
2020-07-14 22:31:19.833945 (Thread-2): Sending event: {'category': 'dbt', 'action': 'run_model', 'label': 'af2adbe3-49a5-46d7-928f-93fc4ae76db3', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x1061be850>]}
2020-07-14 22:31:19.834458 (Thread-3): Sending event: {'category': 'dbt', 'action': 'run_model', 'label': 'af2adbe3-49a5-46d7-928f-93fc4ae76db3', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x106231ac0>]}
2020-07-14 22:31:19.834724 (Thread-2): 15:31:19 | 2 of 23 OK created table model dbt_kristin_2.stg_stripe_customer..... [CREATE TABLE (405) in 2.24s]
2020-07-14 22:31:19.834950 (Thread-3): 15:31:19 | 3 of 23 OK created table model dbt_kristin_2.stg_stripe_balance_transaction [CREATE TABLE (2124) in 2.24s]
2020-07-14 22:31:19.835163 (Thread-2): Finished running node model.stripe_source.stg_stripe_customer
2020-07-14 22:31:19.835409 (Thread-2): Began running node model.stripe_source.stg_stripe_payout
2020-07-14 22:31:19.835576 (Thread-2): 15:31:19 | 7 of 23 START table model dbt_kristin_2.stg_stripe_payout............ [RUN]
2020-07-14 22:31:19.835726 (Thread-3): Finished running node model.stripe_source.stg_stripe_balance_transaction
2020-07-14 22:31:19.835884 (Thread-3): Began running node model.stripe_source.stg_stripe_refund
2020-07-14 22:31:19.836029 (Thread-3): 15:31:19 | 8 of 23 START table model dbt_kristin_2.stg_stripe_refund............ [RUN]
2020-07-14 22:31:19.836448 (Thread-2): Acquiring new bigquery connection "model.stripe_source.stg_stripe_payout".
2020-07-14 22:31:19.836570 (Thread-2): Re-using an available connection from the pool (formerly model.stripe_source.stg_stripe_customer).
2020-07-14 22:31:19.836676 (Thread-2): Compiling model.stripe_source.stg_stripe_payout
2020-07-14 22:31:19.836955 (Thread-3): Acquiring new bigquery connection "model.stripe_source.stg_stripe_refund".
2020-07-14 22:31:19.844651 (Thread-2): Writing injected SQL for node "model.stripe_source.stg_stripe_payout"
2020-07-14 22:31:19.844759 (Thread-3): Re-using an available connection from the pool (formerly model.stripe_source.stg_stripe_balance_transaction).
2020-07-14 22:31:19.845041 (Thread-3): Compiling model.stripe_source.stg_stripe_refund
2020-07-14 22:31:19.852040 (Thread-3): Writing injected SQL for node "model.stripe_source.stg_stripe_refund"
2020-07-14 22:31:19.852414 (Thread-2): finished collecting timing info
2020-07-14 22:31:19.856510 (Thread-2): Writing runtime SQL for node "model.stripe_source.stg_stripe_payout"
2020-07-14 22:31:19.856691 (Thread-3): finished collecting timing info
2020-07-14 22:31:19.861584 (Thread-3): Writing runtime SQL for node "model.stripe_source.stg_stripe_refund"
2020-07-14 22:31:19.862009 (Thread-2): On model.stripe_source.stg_stripe_payout: /* {"app": "dbt", "dbt_version": "0.17.0rc1", "profile_name": "integration_test", "target_name": "dev_bigquery_dbt_testing", "node_id": "model.stripe_source.stg_stripe_payout"} */


  create or replace table `dbt-package-testing`.`dbt_kristin_2`.`stg_stripe_payout`
  
  
  OPTIONS()
  as (
    with payout as (

    select *
    from `dbt-package-testing`.`stripe`.`payout`

), fields as (

    select 
      id as payout_id,
      amount,
      arrival_date,
      automatic as is_automatic,
      balance_transaction_id,
      created as created_at,
      currency,
      description,
      method,
      source_type,
      status,
      type
    from payout

)

select *
from fields
  );
    
2020-07-14 22:31:19.862892 (Thread-3): On model.stripe_source.stg_stripe_refund: /* {"app": "dbt", "dbt_version": "0.17.0rc1", "profile_name": "integration_test", "target_name": "dev_bigquery_dbt_testing", "node_id": "model.stripe_source.stg_stripe_refund"} */


  create or replace table `dbt-package-testing`.`dbt_kristin_2`.`stg_stripe_refund`
  
  
  OPTIONS()
  as (
    with refund as (

    select *
    from `dbt-package-testing`.`stripe`.`refund`

), fields as (

    select 
      id as refund_id,
      amount,
      balance_transaction_id,
      charge_id,
      created as created_at,
      currency,
      description,
      reason,
      receipt_number,
      status
    from refund

)

select *
from fields
  );
    
2020-07-14 22:31:21.634679 (Thread-1): finished collecting timing info
2020-07-14 22:31:21.635438 (Thread-1): Sending event: {'category': 'dbt', 'action': 'run_model', 'label': 'af2adbe3-49a5-46d7-928f-93fc4ae76db3', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x1065a8d30>]}
2020-07-14 22:31:21.635712 (Thread-1): 15:31:21 | 5 of 23 OK created table model dbt_kristin_2.stg_stripe_payment_intent [CREATE TABLE (205) in 1.88s]
2020-07-14 22:31:21.635858 (Thread-1): Finished running node model.stripe_source.stg_stripe_payment_intent
2020-07-14 22:31:21.636024 (Thread-1): Began running node model.stripe_source.stg_stripe_invoice
2020-07-14 22:31:21.636294 (Thread-1): 15:31:21 | 9 of 23 START table model dbt_kristin_2.stg_stripe_invoice........... [RUN]
2020-07-14 22:31:21.636597 (Thread-1): Acquiring new bigquery connection "model.stripe_source.stg_stripe_invoice".
2020-07-14 22:31:21.636699 (Thread-1): Re-using an available connection from the pool (formerly model.stripe_source.stg_stripe_payment_intent).
2020-07-14 22:31:21.636798 (Thread-1): Compiling model.stripe_source.stg_stripe_invoice
2020-07-14 22:31:21.645486 (Thread-1): Writing injected SQL for node "model.stripe_source.stg_stripe_invoice"
2020-07-14 22:31:21.648466 (Thread-4): finished collecting timing info
2020-07-14 22:31:21.649165 (Thread-4): Sending event: {'category': 'dbt', 'action': 'run_model', 'label': 'af2adbe3-49a5-46d7-928f-93fc4ae76db3', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x106485130>]}
2020-07-14 22:31:21.649434 (Thread-4): 15:31:21 | 6 of 23 OK created table model dbt_kristin_2.stg_stripe_payment_method [CREATE TABLE (214) in 1.84s]
2020-07-14 22:31:21.649652 (Thread-4): Finished running node model.stripe_source.stg_stripe_payment_method
2020-07-14 22:31:21.649821 (Thread-4): Began running node model.stripe_source.stg_stripe_invoice_line_item
2020-07-14 22:31:21.649970 (Thread-4): 15:31:21 | 10 of 23 START table model dbt_kristin_2.stg_stripe_invoice_line_item [RUN]
2020-07-14 22:31:21.650334 (Thread-4): Acquiring new bigquery connection "model.stripe_source.stg_stripe_invoice_line_item".
2020-07-14 22:31:21.650452 (Thread-4): Re-using an available connection from the pool (formerly model.stripe_source.stg_stripe_payment_method).
2020-07-14 22:31:21.650558 (Thread-4): Compiling model.stripe_source.stg_stripe_invoice_line_item
2020-07-14 22:31:21.659265 (Thread-4): Writing injected SQL for node "model.stripe_source.stg_stripe_invoice_line_item"
2020-07-14 22:31:21.659450 (Thread-1): finished collecting timing info
2020-07-14 22:31:21.664926 (Thread-1): Writing runtime SQL for node "model.stripe_source.stg_stripe_invoice"
2020-07-14 22:31:21.665398 (Thread-4): finished collecting timing info
2020-07-14 22:31:21.670375 (Thread-4): Writing runtime SQL for node "model.stripe_source.stg_stripe_invoice_line_item"
2020-07-14 22:31:21.670662 (Thread-1): On model.stripe_source.stg_stripe_invoice: /* {"app": "dbt", "dbt_version": "0.17.0rc1", "profile_name": "integration_test", "target_name": "dev_bigquery_dbt_testing", "node_id": "model.stripe_source.stg_stripe_invoice"} */


  create or replace table `dbt-package-testing`.`dbt_kristin_2`.`stg_stripe_invoice`
  
  
  OPTIONS()
  as (
    

with invoice as (

    select *
    from `dbt-package-testing`.`stripe`.`invoice`

), fields as (

    select
      id as invoice_id,
      amount_due,
      amount_paid,
      amount_remaining,
      attempt_count,
      auto_advance,
      billing_reason,
      charge_id,
      created as created_at,
      currency,
      customer_id,
      description,
      due_date,
      number,
      paid as is_paid,
      receipt_number,
      status,
      subtotal,
      tax,
      tax_percent,
      total
    from invoice
    where not coalesce(is_deleted, false)

)

select * from fields
  );
    
2020-07-14 22:31:21.671780 (Thread-4): On model.stripe_source.stg_stripe_invoice_line_item: /* {"app": "dbt", "dbt_version": "0.17.0rc1", "profile_name": "integration_test", "target_name": "dev_bigquery_dbt_testing", "node_id": "model.stripe_source.stg_stripe_invoice_line_item"} */


  create or replace table `dbt-package-testing`.`dbt_kristin_2`.`stg_stripe_invoice_line_item`
  
  
  OPTIONS()
  as (
    

with invoice_line_item as (

    select *
    from `dbt-package-testing`.`stripe`.`invoice_line_item`

), fields as (

    select
      id as invoice_line_item_id,
      invoice_id,
      amount,
      currency,
      description,
      discountable as is_discountable,
      plan_id,
      proration,
      quantity,
      subscription_id,
      subscription_item_id,
      type,
      unique_id
    from invoice_line_item
    where id not like 'sub%'

)

select * from fields
  );
    
2020-07-14 22:31:21.695561 (Thread-3): finished collecting timing info
2020-07-14 22:31:21.696390 (Thread-3): Sending event: {'category': 'dbt', 'action': 'run_model', 'label': 'af2adbe3-49a5-46d7-928f-93fc4ae76db3', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x1063156a0>]}
2020-07-14 22:31:21.696699 (Thread-3): 15:31:21 | 8 of 23 OK created table model dbt_kristin_2.stg_stripe_refund....... [CREATE TABLE (31) in 1.86s]
2020-07-14 22:31:21.696867 (Thread-3): Finished running node model.stripe_source.stg_stripe_refund
2020-07-14 22:31:21.697039 (Thread-3): Began running node model.stripe_source.stg_stripe_subscription
2020-07-14 22:31:21.697332 (Thread-3): 15:31:21 | 11 of 23 START table model dbt_kristin_2.stg_stripe_subscription..... [RUN]
2020-07-14 22:31:21.697671 (Thread-3): Acquiring new bigquery connection "model.stripe_source.stg_stripe_subscription".
2020-07-14 22:31:21.697792 (Thread-3): Re-using an available connection from the pool (formerly model.stripe_source.stg_stripe_refund).
2020-07-14 22:31:21.697918 (Thread-3): Compiling model.stripe_source.stg_stripe_subscription
2020-07-14 22:31:21.705412 (Thread-3): Writing injected SQL for node "model.stripe_source.stg_stripe_subscription"
2020-07-14 22:31:21.706306 (Thread-3): finished collecting timing info
2020-07-14 22:31:21.710840 (Thread-3): Writing runtime SQL for node "model.stripe_source.stg_stripe_subscription"
2020-07-14 22:31:21.712723 (Thread-2): finished collecting timing info
2020-07-14 22:31:21.713419 (Thread-2): Sending event: {'category': 'dbt', 'action': 'run_model', 'label': 'af2adbe3-49a5-46d7-928f-93fc4ae76db3', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x1062844c0>]}
2020-07-14 22:31:21.713660 (Thread-2): 15:31:21 | 7 of 23 OK created table model dbt_kristin_2.stg_stripe_payout....... [CREATE TABLE (836) in 1.88s]
2020-07-14 22:31:21.713827 (Thread-2): Finished running node model.stripe_source.stg_stripe_payout
2020-07-14 22:31:21.713955 (Thread-2): Began running node model.stripe_source.stg_stripe_fee
2020-07-14 22:31:21.714078 (Thread-2): 15:31:21 | 12 of 23 START table model dbt_kristin_2.stg_stripe_fee.............. [RUN]
2020-07-14 22:31:21.714299 (Thread-2): Acquiring new bigquery connection "model.stripe_source.stg_stripe_fee".
2020-07-14 22:31:21.714383 (Thread-2): Re-using an available connection from the pool (formerly model.stripe_source.stg_stripe_payout).
2020-07-14 22:31:21.714467 (Thread-2): Compiling model.stripe_source.stg_stripe_fee
2020-07-14 22:31:21.721268 (Thread-2): Writing injected SQL for node "model.stripe_source.stg_stripe_fee"
2020-07-14 22:31:21.721751 (Thread-3): On model.stripe_source.stg_stripe_subscription: /* {"app": "dbt", "dbt_version": "0.17.0rc1", "profile_name": "integration_test", "target_name": "dev_bigquery_dbt_testing", "node_id": "model.stripe_source.stg_stripe_subscription"} */


  create or replace table `dbt-package-testing`.`dbt_kristin_2`.`stg_stripe_subscription`
  
  
  OPTIONS()
  as (
    

with subscription as (

    select *
    from `dbt-package-testing`.`stripe`.`subscription`

), fields as (

    select
      id as subscription_id,
      status,
      billing,
      billing_cycle_anchor,
      cancel_at,
      cancel_at_period_end,
      canceled_at,
      created as created_at,
      current_period_start,
      current_period_end,
      customer_id,
      days_until_due,
      start_date,
      ended_at
    from subscription

)

select * from fields
  );
    
2020-07-14 22:31:21.722652 (Thread-2): finished collecting timing info
2020-07-14 22:31:21.728424 (Thread-2): Writing runtime SQL for node "model.stripe_source.stg_stripe_fee"
2020-07-14 22:31:21.729346 (Thread-2): On model.stripe_source.stg_stripe_fee: /* {"app": "dbt", "dbt_version": "0.17.0rc1", "profile_name": "integration_test", "target_name": "dev_bigquery_dbt_testing", "node_id": "model.stripe_source.stg_stripe_fee"} */


  create or replace table `dbt-package-testing`.`dbt_kristin_2`.`stg_stripe_fee`
  
  
  OPTIONS()
  as (
    with fee as (

    select *
    from `dbt-package-testing`.`stripe`.`fee`

), fields as (

    select 
      balance_transaction_id,
      amount,
      application,
      currency,
      description,
      type
    from fee

)

select *
from fields
  );
    
2020-07-14 22:31:23.429767 (Thread-3): finished collecting timing info
2020-07-14 22:31:23.430604 (Thread-3): Sending event: {'category': 'dbt', 'action': 'run_model', 'label': 'af2adbe3-49a5-46d7-928f-93fc4ae76db3', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x1063fd610>]}
2020-07-14 22:31:23.430925 (Thread-3): 15:31:23 | 11 of 23 OK created table model dbt_kristin_2.stg_stripe_subscription [CREATE TABLE (49) in 1.73s]
2020-07-14 22:31:23.431099 (Thread-3): Finished running node model.stripe_source.stg_stripe_subscription
2020-07-14 22:31:23.431340 (Thread-3): Began running node model.stripe_source.stg_stripe_payment_method_card
2020-07-14 22:31:23.431633 (Thread-3): 15:31:23 | 13 of 23 START table model dbt_kristin_2.stg_stripe_payment_method_card [RUN]
2020-07-14 22:31:23.431932 (Thread-3): Acquiring new bigquery connection "model.stripe_source.stg_stripe_payment_method_card".
2020-07-14 22:31:23.432036 (Thread-3): Re-using an available connection from the pool (formerly model.stripe_source.stg_stripe_subscription).
2020-07-14 22:31:23.432135 (Thread-3): Compiling model.stripe_source.stg_stripe_payment_method_card
2020-07-14 22:31:23.439920 (Thread-3): Writing injected SQL for node "model.stripe_source.stg_stripe_payment_method_card"
2020-07-14 22:31:23.441813 (Thread-3): finished collecting timing info
2020-07-14 22:31:23.446518 (Thread-3): Writing runtime SQL for node "model.stripe_source.stg_stripe_payment_method_card"
2020-07-14 22:31:23.446993 (Thread-3): On model.stripe_source.stg_stripe_payment_method_card: /* {"app": "dbt", "dbt_version": "0.17.0rc1", "profile_name": "integration_test", "target_name": "dev_bigquery_dbt_testing", "node_id": "model.stripe_source.stg_stripe_payment_method_card"} */


  create or replace table `dbt-package-testing`.`dbt_kristin_2`.`stg_stripe_payment_method_card`
  
  
  OPTIONS()
  as (
    with payment_method_card as (

    select *
    from `dbt-package-testing`.`stripe`.`payment_method_card`

), fields as (

    select 
      payment_method_id,
      brand,
      funding
    from payment_method_card

)

select *
from fields
  );
    
2020-07-14 22:31:23.469157 (Thread-4): finished collecting timing info
2020-07-14 22:31:23.469828 (Thread-4): Sending event: {'category': 'dbt', 'action': 'run_model', 'label': 'af2adbe3-49a5-46d7-928f-93fc4ae76db3', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x10645c250>]}
2020-07-14 22:31:23.470082 (Thread-4): 15:31:23 | 10 of 23 OK created table model dbt_kristin_2.stg_stripe_invoice_line_item [CREATE TABLE (33) in 1.82s]
2020-07-14 22:31:23.470204 (Thread-4): Finished running node model.stripe_source.stg_stripe_invoice_line_item
2020-07-14 22:31:23.470331 (Thread-4): Began running node model.stripe.stripe_incomplete_charges
2020-07-14 22:31:23.470456 (Thread-4): 15:31:23 | 14 of 23 START table model dbt_kristin_2.stripe_incomplete_charges... [RUN]
2020-07-14 22:31:23.470683 (Thread-4): Acquiring new bigquery connection "model.stripe.stripe_incomplete_charges".
2020-07-14 22:31:23.470854 (Thread-4): Re-using an available connection from the pool (formerly model.stripe_source.stg_stripe_invoice_line_item).
2020-07-14 22:31:23.470965 (Thread-4): Compiling model.stripe.stripe_incomplete_charges
2020-07-14 22:31:23.477678 (Thread-4): Writing injected SQL for node "model.stripe.stripe_incomplete_charges"
2020-07-14 22:31:23.478187 (Thread-4): finished collecting timing info
2020-07-14 22:31:23.482261 (Thread-4): Writing runtime SQL for node "model.stripe.stripe_incomplete_charges"
2020-07-14 22:31:23.482742 (Thread-4): On model.stripe.stripe_incomplete_charges: /* {"app": "dbt", "dbt_version": "0.17.0rc1", "profile_name": "integration_test", "target_name": "dev_bigquery_dbt_testing", "node_id": "model.stripe.stripe_incomplete_charges"} */


  create or replace table `dbt-package-testing`.`dbt_kristin_2`.`stripe_incomplete_charges`
  
  
  OPTIONS()
  as (
    with charge as (

    select *
    from `dbt-package-testing`.`dbt_kristin_2`.`stg_stripe_charge`

)

select 
  created_at,
  customer_id,
  amount
from charge
where not is_captured
  );
    
2020-07-14 22:31:23.487532 (Thread-2): finished collecting timing info
2020-07-14 22:31:23.488119 (Thread-2): Sending event: {'category': 'dbt', 'action': 'run_model', 'label': 'af2adbe3-49a5-46d7-928f-93fc4ae76db3', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x1061be850>]}
2020-07-14 22:31:23.488340 (Thread-2): 15:31:23 | 12 of 23 OK created table model dbt_kristin_2.stg_stripe_fee......... [CREATE TABLE (1227) in 1.77s]
2020-07-14 22:31:23.488461 (Thread-2): Finished running node model.stripe_source.stg_stripe_fee
2020-07-14 22:31:23.488585 (Thread-2): Began running node model.stripe.stripe_balance_transaction_joined
2020-07-14 22:31:23.488707 (Thread-2): 15:31:23 | 15 of 23 START table model dbt_kristin_2.stripe_balance_transaction_joined [RUN]
2020-07-14 22:31:23.489040 (Thread-2): Acquiring new bigquery connection "model.stripe.stripe_balance_transaction_joined".
2020-07-14 22:31:23.489143 (Thread-2): Re-using an available connection from the pool (formerly model.stripe_source.stg_stripe_fee).
2020-07-14 22:31:23.489232 (Thread-2): Compiling model.stripe.stripe_balance_transaction_joined
2020-07-14 22:31:23.503205 (Thread-2): Writing injected SQL for node "model.stripe.stripe_balance_transaction_joined"
2020-07-14 22:31:23.503641 (Thread-2): finished collecting timing info
2020-07-14 22:31:23.507575 (Thread-2): Writing runtime SQL for node "model.stripe.stripe_balance_transaction_joined"
2020-07-14 22:31:23.507906 (Thread-2): On model.stripe.stripe_balance_transaction_joined: /* {"app": "dbt", "dbt_version": "0.17.0rc1", "profile_name": "integration_test", "target_name": "dev_bigquery_dbt_testing", "node_id": "model.stripe.stripe_balance_transaction_joined"} */


  create or replace table `dbt-package-testing`.`dbt_kristin_2`.`stripe_balance_transaction_joined`
  
  
  OPTIONS()
  as (
    with balance_transaction as (

    select *
    from `dbt-package-testing`.`dbt_kristin_2`.`stg_stripe_balance_transaction`
  
), charge as (

    select *
    from `dbt-package-testing`.`dbt_kristin_2`.`stg_stripe_charge`

), payment_intent as (

    select *
    from `dbt-package-testing`.`dbt_kristin_2`.`stg_stripe_payment_intent`

), payment_method as (

    select *
    from `dbt-package-testing`.`dbt_kristin_2`.`stg_stripe_payment_method`

), card as (

    select *
    from `dbt-package-testing`.`dbt_kristin_2`.`stg_stripe_card`

), payout as (

    select *
    from `dbt-package-testing`.`dbt_kristin_2`.`stg_stripe_payout`

), refund as (

    select *
    from `dbt-package-testing`.`dbt_kristin_2`.`stg_stripe_refund`

), customer as (

    select *
    from `dbt-package-testing`.`dbt_kristin_2`.`stg_stripe_customer`


)

select 
  balance_transaction.balance_transaction_id,
  balance_transaction.created_at,
  balance_transaction.available_on,
  balance_transaction.currency,
  balance_transaction.amount,
  balance_transaction.fee,
  balance_transaction.net,
  balance_transaction.type,
  case
    when balance_transaction.type in ('charge', 'payment') then 'charge'
    when balance_transaction.type in ('refund', 'payment_refund') then 'refund'
    when balance_transaction.type in ('payout_cancel', 'payout_failure')	then 'payout_reversal'
    when balance_transaction.type in ('transfer', 'recipient_transfer') then	'transfer'
    when balance_transaction.type in ('transfer_cancel', 'transfer_failure', 'recipient_transfer_cancel', 'recipient_transfer_failure') then 'transfer_reversal'
    else balance_transaction.type
  end as reporting_category,
  balance_transaction.source,
  balance_transaction.description,
  case when balance_transaction.type = 'charge' then charge.amount end as customer_facing_amount, --think this might be the charge amount/currency
  case when balance_transaction.type = 'charge' then charge.currency end as customer_facing_currency,
  date_add(date(balance_transaction.available_on), interval 1 day) as effective_at,
  coalesce(charge.customer_id, refund_charge.customer_id) as customer_id,
  charge.receipt_email,
  customer.description as customer_description,
  charge.charge_id,
  charge.payment_intent_id,
  charge.created_at as charge_created_at,
  payment_method.type as payment_method_type,
  card.brand as card_brand,
  card.funding as card_funding,
  card.country as card_country,
  payout.payout_id,
  payout.arrival_date as payout_expeted_arrival_date,
  payout.status as payout_status,
  payout.type as payout_type,
  payout.description as payout_description,
  refund.reason as refund_reason
from balance_transaction
left join charge on charge.balance_transaction_id = balance_transaction.balance_transaction_id
left join customer on charge.customer_id = customer.customer_id
left join payment_intent on charge.payment_intent_id = payment_intent.payment_intent_id
left join payment_method on payment_intent.payment_method_id = payment_method.payment_method_id
left join card on charge.card_id = card.card_id
left join payout on payout.balance_transaction_id = balance_transaction.balance_transaction_id
left join refund on refund.balance_transaction_id = balance_transaction.balance_transaction_id
left join charge as refund_charge on refund.charge_id = refund_charge.charge_id
order by created_at desc
  );
    
2020-07-14 22:31:23.721627 (Thread-1): finished collecting timing info
2020-07-14 22:31:23.722348 (Thread-1): Sending event: {'category': 'dbt', 'action': 'run_model', 'label': 'af2adbe3-49a5-46d7-928f-93fc4ae76db3', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x1064858b0>]}
2020-07-14 22:31:23.722642 (Thread-1): 15:31:23 | 9 of 23 OK created table model dbt_kristin_2.stg_stripe_invoice...... [CREATE TABLE (492) in 2.09s]
2020-07-14 22:31:23.722779 (Thread-1): Finished running node model.stripe_source.stg_stripe_invoice
2020-07-14 22:31:23.723187 (Thread-1): Began running node model.stripe.stripe_invoice_details
2020-07-14 22:31:23.723352 (Thread-1): 15:31:23 | 16 of 23 START table model dbt_kristin_2.stripe_invoice_details...... [RUN]
2020-07-14 22:31:23.723611 (Thread-1): Acquiring new bigquery connection "model.stripe.stripe_invoice_details".
2020-07-14 22:31:23.723704 (Thread-1): Re-using an available connection from the pool (formerly model.stripe_source.stg_stripe_invoice).
2020-07-14 22:31:23.723799 (Thread-1): Compiling model.stripe.stripe_invoice_details
2020-07-14 22:31:23.751528 (Thread-1): Writing injected SQL for node "model.stripe.stripe_invoice_details"
2020-07-14 22:31:23.751984 (Thread-1): finished collecting timing info
2020-07-14 22:31:23.758094 (Thread-1): Writing runtime SQL for node "model.stripe.stripe_invoice_details"
2020-07-14 22:31:23.759011 (Thread-1): On model.stripe.stripe_invoice_details: /* {"app": "dbt", "dbt_version": "0.17.0rc1", "profile_name": "integration_test", "target_name": "dev_bigquery_dbt_testing", "node_id": "model.stripe.stripe_invoice_details"} */


  create or replace table `dbt-package-testing`.`dbt_kristin_2`.`stripe_invoice_details`
  
  
  OPTIONS()
  as (
    

with invoice as (

    select *
    from `dbt-package-testing`.`dbt_kristin_2`.`stg_stripe_invoice`  

), charge as (

    select *
    from `dbt-package-testing`.`dbt_kristin_2`.`stg_stripe_charge`  

), invoice_line_item as (

    select *
    from `dbt-package-testing`.`dbt_kristin_2`.`stg_stripe_invoice_line_item`  

), subscription as (

    select *
    from `dbt-package-testing`.`dbt_kristin_2`.`stg_stripe_subscription`  

), customer as (

    select *
    from `dbt-package-testing`.`dbt_kristin_2`.`stg_stripe_customer`  

)

select 
  invoice.invoice_id,
  invoice.number,
  invoice.created_at as invoice_created_at,
  invoice.status,
  invoice.due_date,
  invoice.amount_due,
  invoice.subtotal,
  invoice.tax,
  invoice.total,
  invoice.amount_paid,
  invoice.amount_remaining,
  invoice.attempt_count,
  invoice.description as invoice_memo,
  invoice_line_item.description as line_item_desc,
  invoice_line_item.amount as line_item_amount,
  invoice_line_item.quantity,
  charge.balance_transaction_id,
  charge.amount as charge_amount, 
  charge.status as charge_status,
  charge.created_at as charge_created_at,
  customer.description as customer_description,
  customer.email as customer_email,
  subscription.subscription_id,
  subscription.billing as subcription_billing,
  subscription.start_date as subscription_start_date,
  subscription.ended_at as subscription_ended_at
from invoice
left join charge on charge.charge_id = invoice.charge_id
left join invoice_line_item on invoice.invoice_id = invoice_line_item.invoice_id
left join subscription on invoice_line_item.subscription_id = subscription.subscription_id
left join customer on invoice.customer_id = customer.customer_id
order by invoice.created_at desc
  );
    
2020-07-14 22:31:25.160341 (Thread-4): finished collecting timing info
2020-07-14 22:31:25.161166 (Thread-4): Sending event: {'category': 'dbt', 'action': 'run_model', 'label': 'af2adbe3-49a5-46d7-928f-93fc4ae76db3', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x10644f850>]}
2020-07-14 22:31:25.161473 (Thread-4): 15:31:25 | 14 of 23 OK created table model dbt_kristin_2.stripe_incomplete_charges [CREATE TABLE (286) in 1.69s]
2020-07-14 22:31:25.161637 (Thread-4): Finished running node model.stripe.stripe_incomplete_charges
2020-07-14 22:31:25.161806 (Thread-4): Began running node model.stripe.stripe_subscription_details
2020-07-14 22:31:25.162084 (Thread-4): 15:31:25 | 17 of 23 START table model dbt_kristin_2.stripe_subscription_details. [RUN]
2020-07-14 22:31:25.162419 (Thread-4): Acquiring new bigquery connection "model.stripe.stripe_subscription_details".
2020-07-14 22:31:25.162541 (Thread-4): Re-using an available connection from the pool (formerly model.stripe.stripe_incomplete_charges).
2020-07-14 22:31:25.162659 (Thread-4): Compiling model.stripe.stripe_subscription_details
2020-07-14 22:31:25.185976 (Thread-3): finished collecting timing info
2020-07-14 22:31:25.188251 (Thread-4): Writing injected SQL for node "model.stripe.stripe_subscription_details"
2020-07-14 22:31:25.188730 (Thread-3): Sending event: {'category': 'dbt', 'action': 'run_model', 'label': 'af2adbe3-49a5-46d7-928f-93fc4ae76db3', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x1062d65b0>]}
2020-07-14 22:31:25.189095 (Thread-3): 15:31:25 | 13 of 23 OK created table model dbt_kristin_2.stg_stripe_payment_method_card [CREATE TABLE (214) in 1.76s]
2020-07-14 22:31:25.189230 (Thread-3): Finished running node model.stripe_source.stg_stripe_payment_method_card
2020-07-14 22:31:25.189575 (Thread-4): finished collecting timing info
2020-07-14 22:31:25.195453 (Thread-4): Writing runtime SQL for node "model.stripe.stripe_subscription_details"
2020-07-14 22:31:25.195926 (Thread-4): On model.stripe.stripe_subscription_details: /* {"app": "dbt", "dbt_version": "0.17.0rc1", "profile_name": "integration_test", "target_name": "dev_bigquery_dbt_testing", "node_id": "model.stripe.stripe_subscription_details"} */


  create or replace table `dbt-package-testing`.`dbt_kristin_2`.`stripe_subscription_details`
  
  
  OPTIONS()
  as (
    

with invoice as (

    select *
    from `dbt-package-testing`.`dbt_kristin_2`.`stg_stripe_invoice`  

), charge as (

    select *
    from `dbt-package-testing`.`dbt_kristin_2`.`stg_stripe_charge`  

), invoice_line_item as (

    select *
    from `dbt-package-testing`.`dbt_kristin_2`.`stg_stripe_invoice_line_item`  

), subscription as (

    select *
    from `dbt-package-testing`.`dbt_kristin_2`.`stg_stripe_subscription`  

), customer as (

    select *
    from `dbt-package-testing`.`dbt_kristin_2`.`stg_stripe_customer`  

), line_items_groups as (

  select
    invoice.invoice_id,
    invoice.amount_due,
    invoice.amount_paid,
    invoice.amount_remaining,
    invoice.created_at,
    max(invoice_line_item.subscription_id) as subscription_id,
    sum(invoice_line_item.amount) as total_item_amount,
    count(distinct invoice_line_item.unique_id) as number_line_items
  from invoice_line_item
  join invoice on invoice.invoice_id = invoice_line_item.invoice_id
  group by 1, 2, 3, 4, 5

), grouped_by_subcription as (

  select
    subscription_id,
    count(distinct invoice_id) as number_invoices_generated,
    sum(amount_due) as total_amount_billed,
    sum(amount_paid) as total_amount_paid,
    sum(amount_remaining) total_amount_remaining,
    max(created_at) as most_recent_invoice_created_at,
    avg(amount_due) as average_invoice_amount,
    avg(total_item_amount) as average_line_item_amount,
    avg(number_line_items) as avg_num_invoice_items
  from line_items_groups
  group by 1

)


select
  subscription.subscription_id,
  subscription.customer_id,
  customer.description as customer_description,
  customer.email as customer_email,
  subscription.status,
  subscription.start_date,
  subscription.ended_at,
  subscription.billing,
  subscription.billing_cycle_anchor,
  subscription.canceled_at,
  subscription.created_at,
  subscription.current_period_start,
  subscription.current_period_end,
  subscription.days_until_due,
  subscription.cancel_at_period_end,
  subscription.cancel_at,
  number_invoices_generated,
  total_amount_billed,
  total_amount_paid,
  total_amount_remaining,
  most_recent_invoice_created_at,
  average_invoice_amount,
  average_line_item_amount,
  avg_num_invoice_items
from subscription
left join grouped_by_subcription on subscription.subscription_id = grouped_by_subcription.subscription_id
left join customer on subscription.customer_id = customer.customer_id
order by subscription.created_at desc
  );
    
2020-07-14 22:31:25.587176 (Thread-2): finished collecting timing info
2020-07-14 22:31:25.588022 (Thread-2): Sending event: {'category': 'dbt', 'action': 'run_model', 'label': 'af2adbe3-49a5-46d7-928f-93fc4ae76db3', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x1062e36a0>]}
2020-07-14 22:31:25.588341 (Thread-2): 15:31:25 | 15 of 23 OK created table model dbt_kristin_2.stripe_balance_transaction_joined [CREATE TABLE (2124) in 2.10s]
2020-07-14 22:31:25.588508 (Thread-2): Finished running node model.stripe.stripe_balance_transaction_joined
2020-07-14 22:31:25.589008 (Thread-3): Began running node model.stripe.stripe_balance_transactions
2020-07-14 22:31:25.589157 (Thread-3): 15:31:25 | 18 of 23 START table model dbt_kristin_2.stripe_balance_transactions. [RUN]
2020-07-14 22:31:25.589419 (Thread-3): Acquiring new bigquery connection "model.stripe.stripe_balance_transactions".
2020-07-14 22:31:25.589568 (Thread-2): Began running node model.stripe.stripe_customer_overview
2020-07-14 22:31:25.589684 (Thread-3): Re-using an available connection from the pool (formerly model.stripe_source.stg_stripe_payment_method_card).
2020-07-14 22:31:25.589848 (Thread-2): 15:31:25 | 19 of 23 START table model dbt_kristin_2.stripe_customer_overview.... [RUN]
2020-07-14 22:31:25.589978 (Thread-3): Compiling model.stripe.stripe_balance_transactions
2020-07-14 22:31:25.590251 (Thread-2): Acquiring new bigquery connection "model.stripe.stripe_customer_overview".
2020-07-14 22:31:25.601952 (Thread-2): Re-using an available connection from the pool (formerly model.stripe.stripe_balance_transaction_joined).
2020-07-14 22:31:25.602111 (Thread-2): Compiling model.stripe.stripe_customer_overview
2020-07-14 22:31:25.622251 (Thread-3): Writing injected SQL for node "model.stripe.stripe_balance_transactions"
2020-07-14 22:31:25.632323 (Thread-2): Writing injected SQL for node "model.stripe.stripe_customer_overview"
2020-07-14 22:31:25.632683 (Thread-3): finished collecting timing info
2020-07-14 22:31:25.637964 (Thread-3): Writing runtime SQL for node "model.stripe.stripe_balance_transactions"
2020-07-14 22:31:25.639590 (Thread-2): finished collecting timing info
2020-07-14 22:31:25.639844 (Thread-3): On model.stripe.stripe_balance_transactions: /* {"app": "dbt", "dbt_version": "0.17.0rc1", "profile_name": "integration_test", "target_name": "dev_bigquery_dbt_testing", "node_id": "model.stripe.stripe_balance_transactions"} */


  create or replace table `dbt-package-testing`.`dbt_kristin_2`.`stripe_balance_transactions`
  
  
  OPTIONS()
  as (
    with balance_transaction_joined as (

    select *
    from `dbt-package-testing`.`dbt_kristin_2`.`stripe_balance_transaction_joined`  

)

select 
  balance_transaction_id,
  created_at,
  available_on,
  currency,
  amount,
  fee,
  net,
  type,
  reporting_category,
  source,
  description,
  customer_facing_amount,
  customer_facing_currency,
  effective_at,
  customer_id,
  receipt_email,
  customer_description,
  charge_id,
  payment_intent_id,
  charge_created_at,
  payment_method_type,
  card_brand,
  card_funding,
  card_country,
  payout_id,
  payout_expeted_arrival_date,
  payout_status,
  payout_type,
  payout_description,
  refund_reason
from balance_transaction_joined
  );
    
2020-07-14 22:31:25.644948 (Thread-2): Writing runtime SQL for node "model.stripe.stripe_customer_overview"
2020-07-14 22:31:25.646706 (Thread-2): On model.stripe.stripe_customer_overview: /* {"app": "dbt", "dbt_version": "0.17.0rc1", "profile_name": "integration_test", "target_name": "dev_bigquery_dbt_testing", "node_id": "model.stripe.stripe_customer_overview"} */


  create or replace table `dbt-package-testing`.`dbt_kristin_2`.`stripe_customer_overview`
  
  
  OPTIONS()
  as (
    with balance_transaction_joined as (

    select *
    from `dbt-package-testing`.`dbt_kristin_2`.`stripe_balance_transaction_joined`  

), incomplete_charges as (

    select *
    from `dbt-package-testing`.`dbt_kristin_2`.`stripe_incomplete_charges`  

), customer as (

    select *
    from `dbt-package-testing`.`dbt_kristin_2`.`stg_stripe_customer`  

), transactions_grouped as (
 
    select
      customer_id,
      sum(if(type in ('charge', 'payment'), amount, 0)) as total_sales,
      sum(if(type in ('payment_refund', 'refund'), amount, 0)) as total_refunds,
      sum(amount) as total_gross_transaction_amount,
      sum(fee) as total_fees,
      sum(net) as total_net_transaction_amount,
      sum(if(type in ('payment', 'charge'), 1, 0)) as total_sales_count,
      sum(if(type in ('payment_refund', 'refund'), 1, 0)) as total_refund_count,    
      sum(if(type in ('charge', 'payment') and date_trunc(date(created_at), month) = date_trunc(current_date(), month),amount, 0)) as sales_this_month,
      sum(if(type in ('payment_refund', 'refund') and date_trunc(date(created_at), month) = date_trunc(current_date(), month), amount, 0)) as refunds_this_month,
      sum(if(date_trunc(date(created_at), month) = date_trunc(current_date(), month), amount, 0)) as gross_transaction_amount_this_month,
      sum(if(date_trunc(date(created_at), month) = date_trunc(current_date(), month), fee, 0)) as fees_this_month,
      sum(if(date_trunc(date(created_at), month) = date_trunc(current_date(), month), net, 0)) as net_transaction_amount_this_month,
      sum(if(type in ('payment', 'charge') and date_trunc(date(created_at), month) = date_trunc(current_date(), month) , 1, 0)) as sales_count_this_month,
      sum(if(type in ('payment_refund', 'refund') and date_trunc(date(created_at), month) = date_trunc(current_date(), month) , 1, 0)) as refund_count_this_month,
      min(if(type in ('payment', 'charge'), date(created_at), null)) as first_sale_date,
      max(if(type in ('payment', 'charge'), date(created_at), null)) as most_recent_sale_date
    from balance_transaction_joined
      where type in ('payment', 'charge', 'payment_refund', 'refund')
    group by 1

), failed_charges_by_customer as (

    select
      customer_id,
      count(*) as total_failed_charge_count,
      sum(amount) as total_failed_charge_amount,
      sum(if(date_trunc(date(created_at), month) = date_trunc(current_date(), month), 1, 0)) as failed_charge_count_this_month,
      sum(if(date_trunc(date(created_at), month) = date_trunc(current_date(), month), amount, 0)) as failed_charge_amount_this_month
    from incomplete_charges
    group by 1

)

select
  coalesce(customer.description, customer.customer_id, 'No associated customer') as customer_description,
  customer.email,
  customer.created_at as customer_created_at,
  customer.is_deliguent,
  coalesce(transactions_grouped.total_sales/100.0, 0) as total_sales,
  coalesce(transactions_grouped.total_refunds/100.0, 0) as total_refunds,
  coalesce(transactions_grouped.total_gross_transaction_amount/100.0, 0) as total_gross_transcation_amount,
  coalesce(transactions_grouped.total_fees/100.0, 0) as total_fees,
  coalesce(transactions_grouped.total_net_transaction_amount/100.0, 0) as total_net_trasnaction_amount,
  coalesce(transactions_grouped.total_sales_count, 0) as total_sales_count,
  coalesce(transactions_grouped.total_refund_count, 0) as total_refund_count,    
  coalesce(transactions_grouped.sales_this_month/100.0, 0) as sales_this_month,
  coalesce(transactions_grouped.refunds_this_month/100.0, 0) as refunds_this_month,
  coalesce(transactions_grouped.gross_transaction_amount_this_month/100.0, 0) as gross_transaction_amount_this_month,
  coalesce(transactions_grouped.fees_this_month/100.0, 0) as fees_this_month,
  coalesce(transactions_grouped.net_transaction_amount_this_month/100.0, 0) as net_transaction_amount_this_month,
  coalesce(transactions_grouped.sales_count_this_month, 0) as sales_count_this_month,
  coalesce(transactions_grouped.refund_count_this_month, 0) as refund_count_this_month,
  transactions_grouped.first_sale_date,
  transactions_grouped.most_recent_sale_date,
  coalesce(total_failed_charge_count, 0) as total_failed_charge_count,
  coalesce(total_failed_charge_amount/100, 0) as total_failed_charge_amount,
  coalesce(failed_charge_count_this_month, 0) as failed_charge_count_this_month,
  coalesce(failed_charge_amount_this_month/100, 0) as failed_charge_amount_this_month,
  customer.currency as customer_currency,
  customer.default_card_id,
  customer.shipping_name,
  customer.shipping_address_line_1,
  customer.shipping_address_line_2,
  customer.shipping_address_city,
  customer.shipping_address_state,
  customer.shipping_address_country,
  customer.shipping_address_postal_code,
  customer.shipping_phone
from customer
left join transactions_grouped on transactions_grouped.customer_id = customer.customer_id
left join failed_charges_by_customer on customer.customer_id = failed_charges_by_customer.customer_id
  );
    
2020-07-14 22:31:25.805928 (Thread-1): finished collecting timing info
2020-07-14 22:31:25.806642 (Thread-1): Sending event: {'category': 'dbt', 'action': 'run_model', 'label': 'af2adbe3-49a5-46d7-928f-93fc4ae76db3', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x1062e6d00>]}
2020-07-14 22:31:25.806899 (Thread-1): 15:31:25 | 16 of 23 OK created table model dbt_kristin_2.stripe_invoice_details. [CREATE TABLE (494) in 2.08s]
2020-07-14 22:31:25.807038 (Thread-1): Finished running node model.stripe.stripe_invoice_details
2020-07-14 22:31:25.807184 (Thread-1): Began running node model.stripe.stripe_daily_overview
2020-07-14 22:31:25.807427 (Thread-1): 15:31:25 | 20 of 23 START table model dbt_kristin_2.stripe_daily_overview....... [RUN]
2020-07-14 22:31:25.807728 (Thread-1): Acquiring new bigquery connection "model.stripe.stripe_daily_overview".
2020-07-14 22:31:25.807830 (Thread-1): Re-using an available connection from the pool (formerly model.stripe.stripe_invoice_details).
2020-07-14 22:31:25.807928 (Thread-1): Compiling model.stripe.stripe_daily_overview
2020-07-14 22:31:25.823264 (Thread-1): Writing injected SQL for node "model.stripe.stripe_daily_overview"
2020-07-14 22:31:25.823740 (Thread-1): finished collecting timing info
2020-07-14 22:31:25.829626 (Thread-1): Writing runtime SQL for node "model.stripe.stripe_daily_overview"
2020-07-14 22:31:25.830086 (Thread-1): On model.stripe.stripe_daily_overview: /* {"app": "dbt", "dbt_version": "0.17.0rc1", "profile_name": "integration_test", "target_name": "dev_bigquery_dbt_testing", "node_id": "model.stripe.stripe_daily_overview"} */


  create or replace table `dbt-package-testing`.`dbt_kristin_2`.`stripe_daily_overview`
  
  
  OPTIONS()
  as (
    with balance_transaction_joined as (

    select *
    from `dbt-package-testing`.`dbt_kristin_2`.`stripe_balance_transaction_joined`  

), incomplete_charges as (

    select *
    from `dbt-package-testing`.`dbt_kristin_2`.`stripe_incomplete_charges`  

), daily_balance_transactions as (

  select
    date(case when type = 'payout' then available_on else created_at end) as date,
    sum(case when type in ('charge', 'payment') then amount else 0 end) as total_sales,
    sum(case when type in ('payment_refund', 'refund') then amount else 0 end) as total_refunds,
    sum(case when type = 'adjustment' then amount else 0 end) as total_adjustments,
    sum(case when type not in ('charge', 'payment', 'payment_refund', 'refund', 'adjustment', 'payout') and type not like '%transfer%' then amount else 0 end) as total_other_transactions,
    sum(case when type <> 'payout' and type not like '%transfer%' then amount else 0 end) as total_gross_transaction_amount,
    sum(case when type <> 'payout' and type not like '%transfer%' then net else 0 end) as total_net_tranactions,
    sum(case when type = 'payout' or type like '%transfer%' then fee * -1.0 else 0 end) as total_payout_fees,
    sum(case when type = 'payout' or type like '%transfer%' then amount else 0 end) as total_gross_payout_amount,
    sum(case when type = 'payout' or type like '%transfer%' then fee * -1.0 else net end) as daily_net_activity,
    sum(if(type in ('payment', 'charge'), 1, 0)) as total_sales_count,
    sum(if(type = 'payout', 1, 0)) as total_payouts_count,
    count(distinct case when type = 'adjustment' then coalesce(source, payout_id) end) as total_adjustments_count
  from balance_transaction_joined
  group by 1

), daily_failed_charges as (

    select
      date(created_at) as date,
      count(*) as total_failed_charge_count,
      sum(amount) as total_failed_charge_amount
    from incomplete_charges
    group by 1

)

select
  daily_balance_transactions.date,
  daily_balance_transactions.total_sales/100.0 as total_sales,
  daily_balance_transactions.total_refunds/100.0 as total_refunds,
  daily_balance_transactions.total_adjustments/100.0 as total_adjustments,
  daily_balance_transactions.total_other_transactions/100.0 as total_other_transactions,
  daily_balance_transactions.total_gross_transaction_amount/100.0 as total_gross_transaction_amount,
  daily_balance_transactions.total_net_tranactions/100.0 as total_net_tranactions,
  daily_balance_transactions.total_payout_fees/100.0 as total_payout_fees,
  daily_balance_transactions.total_gross_payout_amount/100.0 as total_gross_payout_amount,
  daily_balance_transactions.daily_net_activity/100.0 as daily_net_activity,
  (daily_balance_transactions.daily_net_activity + daily_balance_transactions.total_gross_payout_amount)/100.0 as daily_end_balance,
  daily_balance_transactions.total_sales_count,
  daily_balance_transactions.total_payouts_count,
  daily_balance_transactions.total_adjustments_count,
  coalesce(daily_failed_charges.total_failed_charge_count, 0) as total_failed_charge_count,
  coalesce(daily_failed_charges.total_failed_charge_amount/100, 0) as total_failed_charge_amount
from daily_balance_transactions
left join daily_failed_charges on daily_balance_transactions.date = daily_failed_charges.date
order by 1 desc
  );
    
2020-07-14 22:31:27.481370 (Thread-3): finished collecting timing info
2020-07-14 22:31:27.482195 (Thread-3): Sending event: {'category': 'dbt', 'action': 'run_model', 'label': 'af2adbe3-49a5-46d7-928f-93fc4ae76db3', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x1063a2040>]}
2020-07-14 22:31:27.482496 (Thread-3): 15:31:27 | 18 of 23 OK created table model dbt_kristin_2.stripe_balance_transactions [CREATE TABLE (2124) in 1.89s]
2020-07-14 22:31:27.482658 (Thread-3): Finished running node model.stripe.stripe_balance_transactions
2020-07-14 22:31:27.482824 (Thread-3): Began running node model.stripe.stripe_monthly_overview
2020-07-14 22:31:27.482991 (Thread-3): 15:31:27 | 21 of 23 START table model dbt_kristin_2.stripe_monthly_overview..... [RUN]
2020-07-14 22:31:27.483308 (Thread-3): Acquiring new bigquery connection "model.stripe.stripe_monthly_overview".
2020-07-14 22:31:27.483534 (Thread-3): Re-using an available connection from the pool (formerly model.stripe.stripe_balance_transactions).
2020-07-14 22:31:27.483661 (Thread-3): Compiling model.stripe.stripe_monthly_overview
2020-07-14 22:31:27.499237 (Thread-3): Writing injected SQL for node "model.stripe.stripe_monthly_overview"
2020-07-14 22:31:27.499710 (Thread-3): finished collecting timing info
2020-07-14 22:31:27.506747 (Thread-3): Writing runtime SQL for node "model.stripe.stripe_monthly_overview"
2020-07-14 22:31:27.507222 (Thread-3): On model.stripe.stripe_monthly_overview: /* {"app": "dbt", "dbt_version": "0.17.0rc1", "profile_name": "integration_test", "target_name": "dev_bigquery_dbt_testing", "node_id": "model.stripe.stripe_monthly_overview"} */


  create or replace table `dbt-package-testing`.`dbt_kristin_2`.`stripe_monthly_overview`
  
  
  OPTIONS()
  as (
    with balance_transaction_joined as (

    select *
    from `dbt-package-testing`.`dbt_kristin_2`.`stripe_balance_transaction_joined`  

), incomplete_charges as (

    select *
    from `dbt-package-testing`.`dbt_kristin_2`.`stripe_incomplete_charges`  

), monthly_balance_transactions as (

  select
    date_trunc(date(case when type = 'payout' then available_on else created_at end), month) as month,
    sum(case when type in ('charge', 'payment') then amount else 0 end) as total_sales,
    sum(case when type in ('payment_refund', 'refund') then amount else 0 end) as total_refunds,
    sum(case when type = 'adjustment' then amount else 0 end) as total_adjustments,
    sum(case when type not in ('charge', 'payment', 'payment_refund', 'refund', 'adjustment', 'payout') and type not like '%transfer%' then amount else 0 end) as total_other_transactions,
    sum(case when type <> 'payout' and type not like '%transfer%' then amount else 0 end) as total_gross_transaction_amount,
    sum(case when type <> 'payout' and type not like '%transfer%' then net else 0 end) as total_net_tranactions,
    sum(case when type = 'payout' or type like '%transfer%' then fee * -1.0 else 0 end) as total_payout_fees,
    sum(case when type = 'payout' or type like '%transfer%' then amount else 0 end) as total_gross_payout_amount,
    sum(case when type = 'payout' or type like '%transfer%' then fee * -1.0 else net end) as monthly_net_activity,
    sum(if(type in ('payment', 'charge'), 1, 0)) as total_sales_count,
    sum(if(type = 'payout', 1, 0)) as total_payout_count,
    count(distinct case when type = 'adjustment' then coalesce(source, payout_id) end) as total_adjustments_count
  from balance_transaction_joined
  group by 1

), monthly_failed_charges as (

    select
      date_trunc(date(created_at), month) as month,
      count(*) as total_failed_charge_count,
      sum(amount) as total_failed_charge_amount
    from incomplete_charges
    group by 1

)

select
  monthly_balance_transactions.month,
  monthly_balance_transactions.total_sales/100.0 as total_sales,
  monthly_balance_transactions.total_refunds/100.0 as total_refunds,
  monthly_balance_transactions.total_adjustments/100.0 as total_adjustments,
  monthly_balance_transactions.total_other_transactions/100.0 as total_other_transactions,
  monthly_balance_transactions.total_gross_transaction_amount/100.0 as total_gross_transaction_amount,
  monthly_balance_transactions.total_net_tranactions/100.0 as total_net_tranactions,
  monthly_balance_transactions.total_payout_fees/100.0 as total_payout_fees,
  monthly_balance_transactions.total_gross_payout_amount/100.0 as total_gross_payout_amount,
  monthly_balance_transactions.monthly_net_activity/100.0 as monthly_net_activity,
  (monthly_balance_transactions.monthly_net_activity + monthly_balance_transactions.total_gross_payout_amount)/100.0 as monthly_end_balance,
  monthly_balance_transactions.total_sales_count,
  monthly_balance_transactions.total_payout_count,
  monthly_balance_transactions.total_adjustments_count,
  coalesce(monthly_failed_charges.total_failed_charge_count, 0) as total_failed_charge_count,
  coalesce(monthly_failed_charges.total_failed_charge_amount/100, 0) as total_failed_charge_amount
from monthly_balance_transactions
left join monthly_failed_charges on monthly_balance_transactions.month = monthly_failed_charges.month
order by 1 desc
  );
    
2020-07-14 22:31:27.801310 (Thread-2): finished collecting timing info
2020-07-14 22:31:27.802130 (Thread-2): Sending event: {'category': 'dbt', 'action': 'run_model', 'label': 'af2adbe3-49a5-46d7-928f-93fc4ae76db3', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x1065d0e50>]}
2020-07-14 22:31:27.802431 (Thread-2): 15:31:27 | 19 of 23 OK created table model dbt_kristin_2.stripe_customer_overview [CREATE TABLE (405) in 2.21s]
2020-07-14 22:31:27.802593 (Thread-2): Finished running node model.stripe.stripe_customer_overview
2020-07-14 22:31:27.802759 (Thread-2): Began running node model.stripe.stripe_quarterly_overview
2020-07-14 22:31:27.803033 (Thread-2): 15:31:27 | 22 of 23 START table model dbt_kristin_2.stripe_quarterly_overview... [RUN]
2020-07-14 22:31:27.803373 (Thread-2): Acquiring new bigquery connection "model.stripe.stripe_quarterly_overview".
2020-07-14 22:31:27.803489 (Thread-2): Re-using an available connection from the pool (formerly model.stripe.stripe_customer_overview).
2020-07-14 22:31:27.803601 (Thread-2): Compiling model.stripe.stripe_quarterly_overview
2020-07-14 22:31:27.821065 (Thread-2): Writing injected SQL for node "model.stripe.stripe_quarterly_overview"
2020-07-14 22:31:27.824612 (Thread-2): finished collecting timing info
2020-07-14 22:31:27.830686 (Thread-2): Writing runtime SQL for node "model.stripe.stripe_quarterly_overview"
2020-07-14 22:31:27.832575 (Thread-2): On model.stripe.stripe_quarterly_overview: /* {"app": "dbt", "dbt_version": "0.17.0rc1", "profile_name": "integration_test", "target_name": "dev_bigquery_dbt_testing", "node_id": "model.stripe.stripe_quarterly_overview"} */


  create or replace table `dbt-package-testing`.`dbt_kristin_2`.`stripe_quarterly_overview`
  
  
  OPTIONS()
  as (
    with balance_transaction_joined as (

    select *
    from `dbt-package-testing`.`dbt_kristin_2`.`stripe_balance_transaction_joined`  

), incomplete_charges as (

    select *
    from `dbt-package-testing`.`dbt_kristin_2`.`stripe_incomplete_charges`  

), quarterly_balance_transactions as (

  select
    date_trunc(date(case when type = 'payout' then available_on else created_at end), quarter) as quarter,
    sum(case when type in ('charge', 'payment') then amount else 0 end) as total_sales,
    sum(case when type in ('payment_refund', 'refund') then amount else 0 end) as total_refunds,
    sum(case when type = 'adjustment' then amount else 0 end) as total_adjustments,
    sum(case when type not in ('charge', 'payment', 'payment_refund', 'refund', 'adjustment', 'payout') and type not like '%transfer%' then amount else 0 end) as total_other_transactions,
    sum(case when type <> 'payout' and type not like '%transfer%' then amount else 0 end) as total_gross_transaction_amount,
    sum(case when type <> 'payout' and type not like '%transfer%' then net else 0 end) as total_net_tranactions,
    sum(case when type = 'payout' or type like '%transfer%' then fee * -1.0 else 0 end) as total_payout_fees,
    sum(case when type = 'payout' or type like '%transfer%' then amount else 0 end) as total_gross_payout_amount,
    sum(case when type = 'payout' or type like '%transfer%' then fee * -1.0 else net end) as quarterly_net_activity,
    sum(if(type in ('payment', 'charge'), 1, 0)) as total_sales_count,
    sum(if(type = 'payout', 1, 0)) as total_payout_count,
    count(distinct case when type = 'adjustment' then coalesce(source, payout_id) end) as total_adjustments_count
  from balance_transaction_joined
  group by 1

), quarterly_failed_charges as (

    select
      date_trunc(date(created_at), quarter) as quarter,
      count(*) as total_failed_charge_count,
      sum(amount) as total_failed_charge_amount
    from incomplete_charges
    group by 1

)

select
  quarterly_balance_transactions.quarter,
  quarterly_balance_transactions.total_sales/100.0 as total_sales,
  quarterly_balance_transactions.total_refunds/100.0 as total_refunds,
  quarterly_balance_transactions.total_adjustments/100.0 as total_adjustments,
  quarterly_balance_transactions.total_other_transactions/100.0 as total_other_transactions,
  quarterly_balance_transactions.total_gross_transaction_amount/100.0 as total_gross_transaction_amount,
  quarterly_balance_transactions.total_net_tranactions/100.0 as total_net_tranactions,
  quarterly_balance_transactions.total_payout_fees/100.0 as total_payout_fees,
  quarterly_balance_transactions.total_gross_payout_amount/100.0 as total_gross_payout_amount,
  quarterly_balance_transactions.quarterly_net_activity/100.0 as quarterly_net_activity,
  (quarterly_balance_transactions.quarterly_net_activity + quarterly_balance_transactions.total_gross_payout_amount)/100.0 as quarterly_end_balance,
  quarterly_balance_transactions.total_sales_count,
  quarterly_balance_transactions.total_payout_count,
  quarterly_balance_transactions.total_adjustments_count,
  coalesce(quarterly_failed_charges.total_failed_charge_count, 0) as total_failed_charge_count,
  coalesce(quarterly_failed_charges.total_failed_charge_amount/100, 0) as total_failed_charge_amount
from quarterly_balance_transactions
left join quarterly_failed_charges on quarterly_balance_transactions.quarter = quarterly_failed_charges.quarter
order by 1 desc
  );
    
2020-07-14 22:31:27.957826 (Thread-4): finished collecting timing info
2020-07-14 22:31:27.958569 (Thread-4): Sending event: {'category': 'dbt', 'action': 'run_model', 'label': 'af2adbe3-49a5-46d7-928f-93fc4ae76db3', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x1062d19d0>]}
2020-07-14 22:31:27.958836 (Thread-4): 15:31:27 | 17 of 23 OK created table model dbt_kristin_2.stripe_subscription_details [CREATE TABLE (49) in 2.80s]
2020-07-14 22:31:27.958975 (Thread-4): Finished running node model.stripe.stripe_subscription_details
2020-07-14 22:31:27.959117 (Thread-4): Began running node model.stripe.stripe_weekly_overview
2020-07-14 22:31:27.959343 (Thread-4): 15:31:27 | 23 of 23 START table model dbt_kristin_2.stripe_weekly_overview...... [RUN]
2020-07-14 22:31:27.959622 (Thread-4): Acquiring new bigquery connection "model.stripe.stripe_weekly_overview".
2020-07-14 22:31:27.959719 (Thread-4): Re-using an available connection from the pool (formerly model.stripe.stripe_subscription_details).
2020-07-14 22:31:27.959811 (Thread-4): Compiling model.stripe.stripe_weekly_overview
2020-07-14 22:31:27.974649 (Thread-4): Writing injected SQL for node "model.stripe.stripe_weekly_overview"
2020-07-14 22:31:27.975057 (Thread-4): finished collecting timing info
2020-07-14 22:31:27.980283 (Thread-4): Writing runtime SQL for node "model.stripe.stripe_weekly_overview"
2020-07-14 22:31:27.980743 (Thread-4): On model.stripe.stripe_weekly_overview: /* {"app": "dbt", "dbt_version": "0.17.0rc1", "profile_name": "integration_test", "target_name": "dev_bigquery_dbt_testing", "node_id": "model.stripe.stripe_weekly_overview"} */


  create or replace table `dbt-package-testing`.`dbt_kristin_2`.`stripe_weekly_overview`
  
  
  OPTIONS()
  as (
    with balance_transaction_joined as (

    select *
    from `dbt-package-testing`.`dbt_kristin_2`.`stripe_balance_transaction_joined`  

), incomplete_charges as (

    select *
    from `dbt-package-testing`.`dbt_kristin_2`.`stripe_incomplete_charges`  

), weekly_balance_transactions as (

  select
    date_trunc(date(case when type = 'payout' then available_on else created_at end), week) as week,
    sum(case when type in ('charge', 'payment') then amount else 0 end) as total_sales,
    sum(case when type in ('payment_refund', 'refund') then amount else 0 end) as total_refunds,
    sum(case when type = 'adjustment' then amount else 0 end) as total_adjustments,
    sum(case when type not in ('charge', 'payment', 'payment_refund', 'refund', 'adjustment', 'payout') and type not like '%transfer%' then amount else 0 end) as total_other_transactions,
    sum(case when type <> 'payout' and type not like '%transfer%' then amount else 0 end) as total_gross_transaction_amount,
    sum(case when type <> 'payout' and type not like '%transfer%' then net else 0 end) as total_net_tranactions,
    sum(case when type = 'payout' or type like '%transfer%' then fee * -1.0 else 0 end) as total_payout_fees,
    sum(case when type = 'payout' or type like '%transfer%' then amount else 0 end) as total_gross_payout_amount,
    sum(case when type = 'payout' or type like '%transfer%' then fee * -1.0 else net end) as weekly_net_activity,
    sum(if(type in ('payment', 'charge'), 1, 0)) as total_sales_count,
    sum(if(type = 'payout', 1, 0)) as total_payout_count,
    count(distinct case when type = 'adjustment' then coalesce(source, payout_id) end) as total_adjustments_count
  from balance_transaction_joined
  group by 1

), weekly_failed_charges as (

    select
      date_trunc(date(created_at), week) as week,
      count(*) as total_failed_charge_count,
      sum(amount) as total_failed_charge_amount
    from incomplete_charges
    group by 1

)

select
  weekly_balance_transactions.week,
  weekly_balance_transactions.total_sales/100.0 as total_sales,
  weekly_balance_transactions.total_refunds/100.0 as total_refunds,
  weekly_balance_transactions.total_adjustments/100.0 as total_adjustments,
  weekly_balance_transactions.total_other_transactions/100.0 as total_other_transactions,
  weekly_balance_transactions.total_gross_transaction_amount/100.0 as total_gross_transaction_amount,
  weekly_balance_transactions.total_net_tranactions/100.0 as total_net_tranactions,
  weekly_balance_transactions.total_payout_fees/100.0 as total_payout_fees,
  weekly_balance_transactions.total_gross_payout_amount/100.0 as total_gross_payout_amount,
  weekly_balance_transactions.weekly_net_activity/100.0 as weekly_net_activity,
  (weekly_balance_transactions.weekly_net_activity + weekly_balance_transactions.total_gross_payout_amount)/100.0 as weekly_end_balance,
  weekly_balance_transactions.total_sales_count,
  weekly_balance_transactions.total_payout_count,
  weekly_balance_transactions.total_adjustments_count,
  coalesce(weekly_failed_charges.total_failed_charge_count, 0) as total_failed_charge_count,
  coalesce(weekly_failed_charges.total_failed_charge_amount/100, 0) as total_failed_charge_amount
from weekly_balance_transactions
left join weekly_failed_charges on weekly_balance_transactions.week = weekly_failed_charges.week
order by 1 desc
  );
    
2020-07-14 22:31:28.041043 (Thread-1): finished collecting timing info
2020-07-14 22:31:28.041881 (Thread-1): Sending event: {'category': 'dbt', 'action': 'run_model', 'label': 'af2adbe3-49a5-46d7-928f-93fc4ae76db3', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x1065a8d30>]}
2020-07-14 22:31:28.042192 (Thread-1): 15:31:28 | 20 of 23 OK created table model dbt_kristin_2.stripe_daily_overview.. [CREATE TABLE (1246) in 2.23s]
2020-07-14 22:31:28.042428 (Thread-1): Finished running node model.stripe.stripe_daily_overview
2020-07-14 22:31:30.135478 (Thread-3): finished collecting timing info
2020-07-14 22:31:30.137806 (Thread-2): finished collecting timing info
2020-07-14 22:31:30.138469 (Thread-3): Sending event: {'category': 'dbt', 'action': 'run_model', 'label': 'af2adbe3-49a5-46d7-928f-93fc4ae76db3', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x1061fce50>]}
2020-07-14 22:31:30.139007 (Thread-2): Sending event: {'category': 'dbt', 'action': 'run_model', 'label': 'af2adbe3-49a5-46d7-928f-93fc4ae76db3', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x10647c430>]}
2020-07-14 22:31:30.139297 (Thread-3): 15:31:30 | 21 of 23 OK created table model dbt_kristin_2.stripe_monthly_overview [CREATE TABLE (63) in 2.66s]
2020-07-14 22:31:30.139639 (Thread-2): 15:31:30 | 22 of 23 OK created table model dbt_kristin_2.stripe_quarterly_overview [CREATE TABLE (22) in 2.34s]
2020-07-14 22:31:30.139783 (Thread-3): Finished running node model.stripe.stripe_monthly_overview
2020-07-14 22:31:30.139933 (Thread-2): Finished running node model.stripe.stripe_quarterly_overview
2020-07-14 22:31:30.427342 (Thread-4): finished collecting timing info
2020-07-14 22:31:30.428157 (Thread-4): Sending event: {'category': 'dbt', 'action': 'run_model', 'label': 'af2adbe3-49a5-46d7-928f-93fc4ae76db3', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x106408d00>]}
2020-07-14 22:31:30.428458 (Thread-4): 15:31:30 | 23 of 23 OK created table model dbt_kristin_2.stripe_weekly_overview. [CREATE TABLE (269) in 2.47s]
2020-07-14 22:31:30.428620 (Thread-4): Finished running node model.stripe.stripe_weekly_overview
2020-07-14 22:31:30.429981 (MainThread): Acquiring new bigquery connection "master".
2020-07-14 22:31:30.430119 (MainThread): Opening a new connection, currently in state closed
2020-07-14 22:31:30.430488 (MainThread): 15:31:30 | 
2020-07-14 22:31:30.430621 (MainThread): 15:31:30 | Finished running 23 table models in 13.46s.
2020-07-14 22:31:30.430729 (MainThread): Connection 'master' was properly closed.
2020-07-14 22:31:30.430810 (MainThread): Connection 'model.stripe.stripe_daily_overview' was left open.
2020-07-14 22:31:30.430886 (MainThread): Connection 'model.stripe.stripe_quarterly_overview' was left open.
2020-07-14 22:31:30.430966 (MainThread): Connection 'model.stripe.stripe_monthly_overview' was left open.
2020-07-14 22:31:30.431040 (MainThread): Connection 'model.stripe.stripe_weekly_overview' was left open.
2020-07-14 22:31:30.495378 (MainThread): 
2020-07-14 22:31:30.495510 (MainThread): Completed successfully
2020-07-14 22:31:30.495607 (MainThread): 
Done. PASS=23 WARN=0 ERROR=0 SKIP=0 TOTAL=23
2020-07-14 22:31:30.495736 (MainThread): Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'end', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x106430d90>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x1062938b0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x106104c40>]}
2020-07-14 22:31:30.496019 (MainThread): Flushing usage events
2020-07-14 22:32:32.419523 (MainThread): Running with dbt=0.17.0-rc1
2020-07-14 22:32:32.612145 (MainThread): running dbt with arguments Namespace(cls=<class 'dbt.task.run.RunTask'>, debug=False, exclude=None, fail_fast=False, full_refresh=False, log_cache_events=False, log_format='default', models=None, partial_parse=None, profile=None, profiles_dir='/Users/kristin/.dbt', project_dir=None, record_timing_info=None, rpc_method='run', single_threaded=False, strict=False, target=None, test_new_parser=False, threads=None, use_cache=True, vars='{}', version_check=True, warn_error=False, which='run', write_json=True)
2020-07-14 22:32:32.613062 (MainThread): Tracking: tracking
2020-07-14 22:32:32.619501 (MainThread): Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'start', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x1080bcbb0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x1080cafd0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x1080caf40>]}
2020-07-14 22:32:32.638282 (MainThread): Partial parsing not enabled
2020-07-14 22:32:32.639868 (MainThread): Parsing macros/core.sql
2020-07-14 22:32:32.643884 (MainThread): Parsing macros/materializations/helpers.sql
2020-07-14 22:32:32.650786 (MainThread): Parsing macros/materializations/snapshot/snapshot_merge.sql
2020-07-14 22:32:32.652631 (MainThread): Parsing macros/materializations/snapshot/strategies.sql
2020-07-14 22:32:32.667374 (MainThread): Parsing macros/materializations/snapshot/snapshot.sql
2020-07-14 22:32:32.694537 (MainThread): Parsing macros/materializations/seed/seed.sql
2020-07-14 22:32:32.713053 (MainThread): Parsing macros/materializations/incremental/helpers.sql
2020-07-14 22:32:32.714710 (MainThread): Parsing macros/materializations/incremental/incremental.sql
2020-07-14 22:32:32.720637 (MainThread): Parsing macros/materializations/common/merge.sql
2020-07-14 22:32:32.732965 (MainThread): Parsing macros/materializations/table/table.sql
2020-07-14 22:32:32.739234 (MainThread): Parsing macros/materializations/view/view.sql
2020-07-14 22:32:32.744899 (MainThread): Parsing macros/materializations/view/create_or_replace_view.sql
2020-07-14 22:32:32.749213 (MainThread): Parsing macros/etc/get_custom_alias.sql
2020-07-14 22:32:32.750055 (MainThread): Parsing macros/etc/query.sql
2020-07-14 22:32:32.750983 (MainThread): Parsing macros/etc/is_incremental.sql
2020-07-14 22:32:32.752411 (MainThread): Parsing macros/etc/datetime.sql
2020-07-14 22:32:32.760407 (MainThread): Parsing macros/etc/get_custom_schema.sql
2020-07-14 22:32:32.762148 (MainThread): Parsing macros/etc/get_custom_database.sql
2020-07-14 22:32:32.763088 (MainThread): Parsing macros/adapters/common.sql
2020-07-14 22:32:32.806246 (MainThread): Parsing macros/schema_tests/relationships.sql
2020-07-14 22:32:32.807235 (MainThread): Parsing macros/schema_tests/not_null.sql
2020-07-14 22:32:32.808068 (MainThread): Parsing macros/schema_tests/unique.sql
2020-07-14 22:32:32.809007 (MainThread): Parsing macros/schema_tests/accepted_values.sql
2020-07-14 22:32:32.810997 (MainThread): Parsing macros/etc.sql
2020-07-14 22:32:32.811559 (MainThread): Parsing macros/catalog.sql
2020-07-14 22:32:32.816907 (MainThread): Parsing macros/adapters.sql
2020-07-14 22:32:32.831143 (MainThread): Parsing macros/materializations/seed.sql
2020-07-14 22:32:32.832824 (MainThread): Parsing macros/materializations/view.sql
2020-07-14 22:32:32.834630 (MainThread): Parsing macros/materializations/table.sql
2020-07-14 22:32:32.843316 (MainThread): Parsing macros/materializations/incremental.sql
2020-07-14 22:32:32.854409 (MainThread): Parsing macros/materializations/snapshot.sql
2020-07-14 22:32:32.900191 (MainThread): Partial parsing not enabled
2020-07-14 22:32:32.901858 (MainThread): Parsing macros/cross_db_utils/except.sql
2020-07-14 22:32:32.902760 (MainThread): Parsing macros/cross_db_utils/replace.sql
2020-07-14 22:32:32.903865 (MainThread): Parsing macros/cross_db_utils/concat.sql
2020-07-14 22:32:32.905690 (MainThread): Parsing macros/cross_db_utils/datatypes.sql
2020-07-14 22:32:32.910676 (MainThread): Parsing macros/cross_db_utils/_is_relation.sql
2020-07-14 22:32:32.911724 (MainThread): Parsing macros/cross_db_utils/length.sql
2020-07-14 22:32:32.912833 (MainThread): Parsing macros/cross_db_utils/dateadd.sql
2020-07-14 22:32:32.914962 (MainThread): Parsing macros/cross_db_utils/intersect.sql
2020-07-14 22:32:32.915838 (MainThread): Parsing macros/cross_db_utils/right.sql
2020-07-14 22:32:32.917830 (MainThread): Parsing macros/cross_db_utils/datediff.sql
2020-07-14 22:32:32.926251 (MainThread): Parsing macros/cross_db_utils/safe_cast.sql
2020-07-14 22:32:32.927830 (MainThread): Parsing macros/cross_db_utils/hash.sql
2020-07-14 22:32:32.929256 (MainThread): Parsing macros/cross_db_utils/identifier.sql
2020-07-14 22:32:32.930464 (MainThread): Parsing macros/cross_db_utils/position.sql
2020-07-14 22:32:32.931771 (MainThread): Parsing macros/cross_db_utils/literal.sql
2020-07-14 22:32:32.932550 (MainThread): Parsing macros/cross_db_utils/current_timestamp.sql
2020-07-14 22:32:32.957434 (MainThread): Parsing macros/cross_db_utils/width_bucket.sql
2020-07-14 22:32:32.964666 (MainThread): Parsing macros/cross_db_utils/last_day.sql
2020-07-14 22:32:32.968190 (MainThread): Parsing macros/cross_db_utils/split_part.sql
2020-07-14 22:32:32.970494 (MainThread): Parsing macros/cross_db_utils/date_trunc.sql
2020-07-14 22:32:32.972329 (MainThread): Parsing macros/cross_db_utils/_is_ephemeral.sql
2020-07-14 22:32:32.974483 (MainThread): Parsing macros/materializations/insert_by_period_materialization.sql
2020-07-14 22:32:33.000601 (MainThread): Parsing macros/logger/pretty_log_format.sql
2020-07-14 22:32:33.001356 (MainThread): Parsing macros/logger/pretty_time.sql
2020-07-14 22:32:33.002152 (MainThread): Parsing macros/logger/log_info.sql
2020-07-14 22:32:33.002866 (MainThread): Parsing macros/datetime/date_spine.sql
2020-07-14 22:32:33.006195 (MainThread): Parsing macros/web/get_url_host.sql
2020-07-14 22:32:33.007527 (MainThread): Parsing macros/web/get_url_path.sql
2020-07-14 22:32:33.009589 (MainThread): Parsing macros/web/get_url_parameter.sql
2020-07-14 22:32:33.010629 (MainThread): Parsing macros/geo/haversine_distance.sql
2020-07-14 22:32:33.011494 (MainThread): Parsing macros/schema_tests/equal_rowcount.sql
2020-07-14 22:32:33.012650 (MainThread): Parsing macros/schema_tests/relationships_where.sql
2020-07-14 22:32:33.014594 (MainThread): Parsing macros/schema_tests/recency.sql
2020-07-14 22:32:33.015628 (MainThread): Parsing macros/schema_tests/not_constant.sql
2020-07-14 22:32:33.016472 (MainThread): Parsing macros/schema_tests/test_unique_where.sql
2020-07-14 22:32:33.017801 (MainThread): Parsing macros/schema_tests/at_least_one.sql
2020-07-14 22:32:33.018630 (MainThread): Parsing macros/schema_tests/unique_combination_of_columns.sql
2020-07-14 22:32:33.019612 (MainThread): Parsing macros/schema_tests/cardinality_equality.sql
2020-07-14 22:32:33.020946 (MainThread): Parsing macros/schema_tests/expression_is_true.sql
2020-07-14 22:32:33.021857 (MainThread): Parsing macros/schema_tests/test_not_null_where.sql
2020-07-14 22:32:33.023036 (MainThread): Parsing macros/schema_tests/equality.sql
2020-07-14 22:32:33.026014 (MainThread): Parsing macros/schema_tests/mutually_exclusive_ranges.sql
2020-07-14 22:32:33.030827 (MainThread): Parsing macros/sql/nullcheck_table.sql
2020-07-14 22:32:33.031834 (MainThread): Parsing macros/sql/get_relations_by_pattern.sql
2020-07-14 22:32:33.034003 (MainThread): Parsing macros/sql/generate_series.sql
2020-07-14 22:32:33.037087 (MainThread): Parsing macros/sql/get_relations_by_prefix.sql
2020-07-14 22:32:33.040194 (MainThread): Parsing macros/sql/get_tables_by_prefix_sql.sql
2020-07-14 22:32:33.042378 (MainThread): Parsing macros/sql/star.sql
2020-07-14 22:32:33.044854 (MainThread): Parsing macros/sql/unpivot.sql
2020-07-14 22:32:33.050009 (MainThread): Parsing macros/sql/union.sql
2020-07-14 22:32:33.058273 (MainThread): Parsing macros/sql/groupby.sql
2020-07-14 22:32:33.059051 (MainThread): Parsing macros/sql/get_tables_by_pattern.sql
2020-07-14 22:32:33.059840 (MainThread): Parsing macros/sql/surrogate_key.sql
2020-07-14 22:32:33.062049 (MainThread): Parsing macros/sql/safe_add.sql
2020-07-14 22:32:33.062935 (MainThread): Parsing macros/sql/nullcheck.sql
2020-07-14 22:32:33.063972 (MainThread): Parsing macros/sql/get_column_values.sql
2020-07-14 22:32:33.067488 (MainThread): Parsing macros/sql/pivot.sql
2020-07-14 22:32:33.069929 (MainThread): Parsing macros/sql/get_query_results_as_dict.sql
2020-07-14 22:32:33.102873 (MainThread): Acquiring new bigquery connection "model.stripe.stripe_weekly_overview".
2020-07-14 22:32:33.102964 (MainThread): Opening a new connection, currently in state init
2020-07-14 22:32:33.118333 (MainThread): Acquiring new bigquery connection "model.stripe.stripe_daily_overview".
2020-07-14 22:32:33.118408 (MainThread): Opening a new connection, currently in state closed
2020-07-14 22:32:33.127610 (MainThread): Acquiring new bigquery connection "model.stripe.stripe_invoice_details".
2020-07-14 22:32:33.127684 (MainThread): Opening a new connection, currently in state closed
2020-07-14 22:32:33.139839 (MainThread): Acquiring new bigquery connection "model.stripe.stripe_customer_overview".
2020-07-14 22:32:33.139916 (MainThread): Opening a new connection, currently in state closed
2020-07-14 22:32:33.150140 (MainThread): Acquiring new bigquery connection "model.stripe.stripe_balance_transactions".
2020-07-14 22:32:33.150216 (MainThread): Opening a new connection, currently in state closed
2020-07-14 22:32:33.159796 (MainThread): Acquiring new bigquery connection "model.stripe.stripe_quarterly_overview".
2020-07-14 22:32:33.159894 (MainThread): Opening a new connection, currently in state closed
2020-07-14 22:32:33.169310 (MainThread): Acquiring new bigquery connection "model.stripe.stripe_monthly_overview".
2020-07-14 22:32:33.169388 (MainThread): Opening a new connection, currently in state closed
2020-07-14 22:32:33.180392 (MainThread): Acquiring new bigquery connection "model.stripe.stripe_subscription_details".
2020-07-14 22:32:33.180479 (MainThread): Opening a new connection, currently in state closed
2020-07-14 22:32:33.195400 (MainThread): Acquiring new bigquery connection "model.stripe.stripe_balance_transaction_joined".
2020-07-14 22:32:33.195535 (MainThread): Opening a new connection, currently in state closed
2020-07-14 22:32:33.213268 (MainThread): Acquiring new bigquery connection "model.stripe.stripe_incomplete_charges".
2020-07-14 22:32:33.213403 (MainThread): Opening a new connection, currently in state closed
2020-07-14 22:32:33.494648 (MainThread): Acquiring new bigquery connection "model.stripe_source.stg_stripe_card".
2020-07-14 22:32:33.494778 (MainThread): Opening a new connection, currently in state closed
2020-07-14 22:32:33.507431 (MainThread): Acquiring new bigquery connection "model.stripe_source.stg_stripe_invoice_line_item".
2020-07-14 22:32:33.507533 (MainThread): Opening a new connection, currently in state closed
2020-07-14 22:32:33.519976 (MainThread): Acquiring new bigquery connection "model.stripe_source.stg_stripe_payment_method_card".
2020-07-14 22:32:33.520052 (MainThread): Opening a new connection, currently in state closed
2020-07-14 22:32:33.530346 (MainThread): Acquiring new bigquery connection "model.stripe_source.stg_stripe_charge".
2020-07-14 22:32:33.530421 (MainThread): Opening a new connection, currently in state closed
2020-07-14 22:32:33.540785 (MainThread): Acquiring new bigquery connection "model.stripe_source.stg_stripe_payout".
2020-07-14 22:32:33.540864 (MainThread): Opening a new connection, currently in state closed
2020-07-14 22:32:33.551350 (MainThread): Acquiring new bigquery connection "model.stripe_source.stg_stripe_customer".
2020-07-14 22:32:33.551425 (MainThread): Opening a new connection, currently in state closed
2020-07-14 22:32:33.561282 (MainThread): Acquiring new bigquery connection "model.stripe_source.stg_stripe_refund".
2020-07-14 22:32:33.561354 (MainThread): Opening a new connection, currently in state closed
2020-07-14 22:32:33.571695 (MainThread): Acquiring new bigquery connection "model.stripe_source.stg_stripe_subscription".
2020-07-14 22:32:33.571772 (MainThread): Opening a new connection, currently in state closed
2020-07-14 22:32:33.582577 (MainThread): Acquiring new bigquery connection "model.stripe_source.stg_stripe_payment_method".
2020-07-14 22:32:33.582649 (MainThread): Opening a new connection, currently in state closed
2020-07-14 22:32:33.593195 (MainThread): Acquiring new bigquery connection "model.stripe_source.stg_stripe_payment_intent".
2020-07-14 22:32:33.593276 (MainThread): Opening a new connection, currently in state closed
2020-07-14 22:32:33.603269 (MainThread): Acquiring new bigquery connection "model.stripe_source.stg_stripe_invoice".
2020-07-14 22:32:33.603342 (MainThread): Opening a new connection, currently in state closed
2020-07-14 22:32:33.614353 (MainThread): Acquiring new bigquery connection "model.stripe_source.stg_stripe_fee".
2020-07-14 22:32:33.614429 (MainThread): Opening a new connection, currently in state closed
2020-07-14 22:32:33.625233 (MainThread): Acquiring new bigquery connection "model.stripe_source.stg_stripe_balance_transaction".
2020-07-14 22:32:33.625324 (MainThread): Opening a new connection, currently in state closed
2020-07-14 22:32:35.731380 (MainThread): Found 23 models, 16 tests, 0 snapshots, 0 analyses, 278 macros, 0 operations, 0 seed files, 13 sources
2020-07-14 22:32:35.764109 (MainThread): 
2020-07-14 22:32:35.764577 (MainThread): Acquiring new bigquery connection "master".
2020-07-14 22:32:35.764726 (MainThread): Opening a new connection, currently in state closed
2020-07-14 22:32:35.787796 (ThreadPoolExecutor-0_0): Acquiring new bigquery connection "list_culdesac-labs".
2020-07-14 22:32:35.787918 (ThreadPoolExecutor-0_0): Opening a new connection, currently in state init
2020-07-14 22:32:35.788296 (ThreadPoolExecutor-0_1): Acquiring new bigquery connection "list_dbt-package-testing".
2020-07-14 22:32:35.788385 (ThreadPoolExecutor-0_1): Opening a new connection, currently in state init
2020-07-14 22:32:35.792874 (ThreadPoolExecutor-0_1): Your application has authenticated using end user credentials from Google Cloud SDK. We recommend that most server applications use service accounts instead. If your application continues to use end user credentials from Cloud SDK, you might receive a "quota exceeded" or "API not enabled" error. For more information about service accounts, see https://cloud.google.com/docs/authentication/
2020-07-14 22:32:35.795210 (ThreadPoolExecutor-0_0): Your application has authenticated using end user credentials from Google Cloud SDK. We recommend that most server applications use service accounts instead. If your application continues to use end user credentials from Cloud SDK, you might receive a "quota exceeded" or "API not enabled" error. For more information about service accounts, see https://cloud.google.com/docs/authentication/
2020-07-14 22:32:37.851408 (ThreadPoolExecutor-0_0): Unhandled error while running:
list dataset
2020-07-14 22:32:37.851760 (ThreadPoolExecutor-0_0): ('invalid_grant: reauth related error (invalid_rapt)', '{\n  "error": "invalid_grant",\n  "error_description": "reauth related error (invalid_rapt)",\n  "error_subtype": "invalid_rapt"\n}')
2020-07-14 22:32:37.853772 (ThreadPoolExecutor-0_1): Unhandled error while running:
list dataset
2020-07-14 22:32:37.854000 (ThreadPoolExecutor-0_1): ('invalid_grant: reauth related error (invalid_rapt)', '{\n  "error": "invalid_grant",\n  "error_description": "reauth related error (invalid_rapt)",\n  "error_subtype": "invalid_rapt"\n}')
2020-07-14 22:32:37.854694 (MainThread): Connection 'master' was properly closed.
2020-07-14 22:32:37.854844 (MainThread): Connection 'list_culdesac-labs' was left open.
2020-07-14 22:32:37.854954 (MainThread): Connection 'list_dbt-package-testing' was left open.
2020-07-14 22:32:37.855219 (MainThread): Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'end', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x1084d55b0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x1084d5a00>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x1084528b0>]}
2020-07-14 22:32:37.855542 (MainThread): Flushing usage events
2020-07-14 22:32:38.210170 (MainThread): Encountered an error:
2020-07-14 22:32:38.210412 (MainThread): Runtime Error
  ('invalid_grant: reauth related error (invalid_rapt)', '{\n  "error": "invalid_grant",\n  "error_description": "reauth related error (invalid_rapt)",\n  "error_subtype": "invalid_rapt"\n}')
2020-07-14 22:32:38.218948 (MainThread): Traceback (most recent call last):
  File "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/adapters/bigquery/connections.py", line 83, in exception_handler
    yield
  File "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/adapters/bigquery/connections.py", line 354, in _retry_and_handle
    return retry.retry_target(
  File "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/google/api_core/retry.py", line 184, in retry_target
    return target()
  File "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/adapters/bigquery/impl.py", line 162, in query_schemas
    return [ds.dataset_id for ds in all_datasets]
  File "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/adapters/bigquery/impl.py", line 162, in <listcomp>
    return [ds.dataset_id for ds in all_datasets]
  File "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/google/api_core/page_iterator.py", line 212, in _items_iter
    for page in self._page_iter(increment=False):
  File "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/google/api_core/page_iterator.py", line 243, in _page_iter
    page = self._next_page()
  File "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/google/api_core/page_iterator.py", line 369, in _next_page
    response = self._get_next_page_response()
  File "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/google/api_core/page_iterator.py", line 418, in _get_next_page_response
    return self.api_request(
  File "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/google/cloud/bigquery/client.py", line 556, in _call_api
    return call()
  File "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/google/api_core/retry.py", line 281, in retry_wrapped_func
    return retry_target(
  File "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/google/api_core/retry.py", line 184, in retry_target
    return target()
  File "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/google/cloud/_http.py", line 412, in api_request
    response = self._make_request(
  File "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/google/cloud/_http.py", line 276, in _make_request
    return self._do_request(
  File "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/google/cloud/_http.py", line 314, in _do_request
    return self.http.request(
  File "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/google/auth/transport/requests.py", line 442, in request
    self.credentials.before_request(auth_request, method, url, request_headers)
  File "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/google/auth/credentials.py", line 124, in before_request
    self.refresh(request)
  File "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/google/oauth2/credentials.py", line 177, in refresh
    access_token, refresh_token, expiry, grant_response = _client.refresh_grant(
  File "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/google/oauth2/_client.py", line 248, in refresh_grant
    response_data = _token_endpoint_request(request, token_uri, body)
  File "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/google/oauth2/_client.py", line 124, in _token_endpoint_request
    _handle_error_response(response_body)
  File "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/google/oauth2/_client.py", line 60, in _handle_error_response
    raise exceptions.RefreshError(error_details, response_body)
google.auth.exceptions.RefreshError: ('invalid_grant: reauth related error (invalid_rapt)', '{\n  "error": "invalid_grant",\n  "error_description": "reauth related error (invalid_rapt)",\n  "error_subtype": "invalid_rapt"\n}')

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/main.py", line 81, in main
    results, succeeded = handle_and_check(args)
  File "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/main.py", line 159, in handle_and_check
    task, res = run_from_args(parsed)
  File "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/main.py", line 212, in run_from_args
    results = task.run()
  File "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/task/runnable.py", line 416, in run
    result = self.execute_with_hooks(selected_uids)
  File "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/task/runnable.py", line 376, in execute_with_hooks
    self.before_run(adapter, selected_uids)
  File "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/task/run.py", line 202, in before_run
    super().before_run(adapter, selected_uids)
  File "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/task/runnable.py", line 362, in before_run
    self.create_schemas(adapter, selected_uids)
  File "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/task/runnable.py", line 492, in create_schemas
    existing_schemas_lowered.update(ls_future.result())
  File "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/concurrent/futures/_base.py", line 432, in result
    return self.__get_result()
  File "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/concurrent/futures/_base.py", line 388, in __get_result
    raise self._exception
  File "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/concurrent/futures/thread.py", line 57, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/task/runnable.py", line 473, in list_schemas
    for s in adapter.list_schemas(database_quoted)
  File "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/adapters/bigquery/impl.py", line 164, in list_schemas
    return self.connections._retry_and_handle(
  File "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/adapters/bigquery/connections.py", line 354, in _retry_and_handle
    return retry.retry_target(
  File "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/contextlib.py", line 131, in __exit__
    self.gen.throw(type, value, traceback)
  File "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/adapters/bigquery/connections.py", line 106, in exception_handler
    raise RuntimeException(exc_message)
dbt.exceptions.RuntimeException: Runtime Error
  ('invalid_grant: reauth related error (invalid_rapt)', '{\n  "error": "invalid_grant",\n  "error_description": "reauth related error (invalid_rapt)",\n  "error_subtype": "invalid_rapt"\n}')

2020-07-14 22:33:26.968966 (MainThread): Running with dbt=0.17.0-rc1
2020-07-14 22:33:27.165158 (MainThread): running dbt with arguments Namespace(cls=<class 'dbt.task.run.RunTask'>, debug=False, exclude=None, fail_fast=False, full_refresh=False, log_cache_events=False, log_format='default', models=None, partial_parse=None, profile=None, profiles_dir='/Users/kristin/.dbt', project_dir=None, record_timing_info=None, rpc_method='run', single_threaded=False, strict=False, target=None, test_new_parser=False, threads=None, use_cache=True, vars='{}', version_check=True, warn_error=False, which='run', write_json=True)
2020-07-14 22:33:27.165939 (MainThread): Tracking: tracking
2020-07-14 22:33:27.172074 (MainThread): Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'start', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x108606be0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x108618f70>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x108618d00>]}
2020-07-14 22:33:27.193156 (MainThread): Partial parsing not enabled
2020-07-14 22:33:27.194757 (MainThread): Parsing macros/core.sql
2020-07-14 22:33:27.199408 (MainThread): Parsing macros/materializations/helpers.sql
2020-07-14 22:33:27.207765 (MainThread): Parsing macros/materializations/snapshot/snapshot_merge.sql
2020-07-14 22:33:27.209931 (MainThread): Parsing macros/materializations/snapshot/strategies.sql
2020-07-14 22:33:27.226278 (MainThread): Parsing macros/materializations/snapshot/snapshot.sql
2020-07-14 22:33:27.255855 (MainThread): Parsing macros/materializations/seed/seed.sql
2020-07-14 22:33:27.275390 (MainThread): Parsing macros/materializations/incremental/helpers.sql
2020-07-14 22:33:27.277056 (MainThread): Parsing macros/materializations/incremental/incremental.sql
2020-07-14 22:33:27.283960 (MainThread): Parsing macros/materializations/common/merge.sql
2020-07-14 22:33:27.296864 (MainThread): Parsing macros/materializations/table/table.sql
2020-07-14 22:33:27.303482 (MainThread): Parsing macros/materializations/view/view.sql
2020-07-14 22:33:27.309888 (MainThread): Parsing macros/materializations/view/create_or_replace_view.sql
2020-07-14 22:33:27.314339 (MainThread): Parsing macros/etc/get_custom_alias.sql
2020-07-14 22:33:27.315222 (MainThread): Parsing macros/etc/query.sql
2020-07-14 22:33:27.316165 (MainThread): Parsing macros/etc/is_incremental.sql
2020-07-14 22:33:27.317653 (MainThread): Parsing macros/etc/datetime.sql
2020-07-14 22:33:27.325819 (MainThread): Parsing macros/etc/get_custom_schema.sql
2020-07-14 22:33:27.327654 (MainThread): Parsing macros/etc/get_custom_database.sql
2020-07-14 22:33:27.328798 (MainThread): Parsing macros/adapters/common.sql
2020-07-14 22:33:27.376804 (MainThread): Parsing macros/schema_tests/relationships.sql
2020-07-14 22:33:27.377959 (MainThread): Parsing macros/schema_tests/not_null.sql
2020-07-14 22:33:27.378902 (MainThread): Parsing macros/schema_tests/unique.sql
2020-07-14 22:33:27.380123 (MainThread): Parsing macros/schema_tests/accepted_values.sql
2020-07-14 22:33:27.382291 (MainThread): Parsing macros/etc.sql
2020-07-14 22:33:27.382906 (MainThread): Parsing macros/catalog.sql
2020-07-14 22:33:27.388612 (MainThread): Parsing macros/adapters.sql
2020-07-14 22:33:27.403897 (MainThread): Parsing macros/materializations/seed.sql
2020-07-14 22:33:27.405723 (MainThread): Parsing macros/materializations/view.sql
2020-07-14 22:33:27.407561 (MainThread): Parsing macros/materializations/table.sql
2020-07-14 22:33:27.416682 (MainThread): Parsing macros/materializations/incremental.sql
2020-07-14 22:33:27.428508 (MainThread): Parsing macros/materializations/snapshot.sql
2020-07-14 22:33:27.477363 (MainThread): Partial parsing not enabled
2020-07-14 22:33:27.479355 (MainThread): Parsing macros/cross_db_utils/except.sql
2020-07-14 22:33:27.480344 (MainThread): Parsing macros/cross_db_utils/replace.sql
2020-07-14 22:33:27.481473 (MainThread): Parsing macros/cross_db_utils/concat.sql
2020-07-14 22:33:27.483412 (MainThread): Parsing macros/cross_db_utils/datatypes.sql
2020-07-14 22:33:27.488358 (MainThread): Parsing macros/cross_db_utils/_is_relation.sql
2020-07-14 22:33:27.489443 (MainThread): Parsing macros/cross_db_utils/length.sql
2020-07-14 22:33:27.490591 (MainThread): Parsing macros/cross_db_utils/dateadd.sql
2020-07-14 22:33:27.492821 (MainThread): Parsing macros/cross_db_utils/intersect.sql
2020-07-14 22:33:27.493730 (MainThread): Parsing macros/cross_db_utils/right.sql
2020-07-14 22:33:27.495860 (MainThread): Parsing macros/cross_db_utils/datediff.sql
2020-07-14 22:33:27.505489 (MainThread): Parsing macros/cross_db_utils/safe_cast.sql
2020-07-14 22:33:27.507216 (MainThread): Parsing macros/cross_db_utils/hash.sql
2020-07-14 22:33:27.508501 (MainThread): Parsing macros/cross_db_utils/identifier.sql
2020-07-14 22:33:27.509807 (MainThread): Parsing macros/cross_db_utils/position.sql
2020-07-14 22:33:27.511227 (MainThread): Parsing macros/cross_db_utils/literal.sql
2020-07-14 22:33:27.512074 (MainThread): Parsing macros/cross_db_utils/current_timestamp.sql
2020-07-14 22:33:27.536770 (MainThread): Parsing macros/cross_db_utils/width_bucket.sql
2020-07-14 22:33:27.542008 (MainThread): Parsing macros/cross_db_utils/last_day.sql
2020-07-14 22:33:27.544727 (MainThread): Parsing macros/cross_db_utils/split_part.sql
2020-07-14 22:33:27.546454 (MainThread): Parsing macros/cross_db_utils/date_trunc.sql
2020-07-14 22:33:27.547849 (MainThread): Parsing macros/cross_db_utils/_is_ephemeral.sql
2020-07-14 22:33:27.549518 (MainThread): Parsing macros/materializations/insert_by_period_materialization.sql
2020-07-14 22:33:27.572025 (MainThread): Parsing macros/logger/pretty_log_format.sql
2020-07-14 22:33:27.572711 (MainThread): Parsing macros/logger/pretty_time.sql
2020-07-14 22:33:27.573398 (MainThread): Parsing macros/logger/log_info.sql
2020-07-14 22:33:27.574035 (MainThread): Parsing macros/datetime/date_spine.sql
2020-07-14 22:33:27.577126 (MainThread): Parsing macros/web/get_url_host.sql
2020-07-14 22:33:27.578360 (MainThread): Parsing macros/web/get_url_path.sql
2020-07-14 22:33:27.580288 (MainThread): Parsing macros/web/get_url_parameter.sql
2020-07-14 22:33:27.581359 (MainThread): Parsing macros/geo/haversine_distance.sql
2020-07-14 22:33:27.582206 (MainThread): Parsing macros/schema_tests/equal_rowcount.sql
2020-07-14 22:33:27.583382 (MainThread): Parsing macros/schema_tests/relationships_where.sql
2020-07-14 22:33:27.585534 (MainThread): Parsing macros/schema_tests/recency.sql
2020-07-14 22:33:27.586650 (MainThread): Parsing macros/schema_tests/not_constant.sql
2020-07-14 22:33:27.587564 (MainThread): Parsing macros/schema_tests/test_unique_where.sql
2020-07-14 22:33:27.589058 (MainThread): Parsing macros/schema_tests/at_least_one.sql
2020-07-14 22:33:27.589953 (MainThread): Parsing macros/schema_tests/unique_combination_of_columns.sql
2020-07-14 22:33:27.591017 (MainThread): Parsing macros/schema_tests/cardinality_equality.sql
2020-07-14 22:33:27.592485 (MainThread): Parsing macros/schema_tests/expression_is_true.sql
2020-07-14 22:33:27.593498 (MainThread): Parsing macros/schema_tests/test_not_null_where.sql
2020-07-14 22:33:27.594767 (MainThread): Parsing macros/schema_tests/equality.sql
2020-07-14 22:33:27.597752 (MainThread): Parsing macros/schema_tests/mutually_exclusive_ranges.sql
2020-07-14 22:33:27.602999 (MainThread): Parsing macros/sql/nullcheck_table.sql
2020-07-14 22:33:27.604112 (MainThread): Parsing macros/sql/get_relations_by_pattern.sql
2020-07-14 22:33:27.606811 (MainThread): Parsing macros/sql/generate_series.sql
2020-07-14 22:33:27.609756 (MainThread): Parsing macros/sql/get_relations_by_prefix.sql
2020-07-14 22:33:27.613071 (MainThread): Parsing macros/sql/get_tables_by_prefix_sql.sql
2020-07-14 22:33:27.615477 (MainThread): Parsing macros/sql/star.sql
2020-07-14 22:33:27.618333 (MainThread): Parsing macros/sql/unpivot.sql
2020-07-14 22:33:27.624272 (MainThread): Parsing macros/sql/union.sql
2020-07-14 22:33:27.633215 (MainThread): Parsing macros/sql/groupby.sql
2020-07-14 22:33:27.634043 (MainThread): Parsing macros/sql/get_tables_by_pattern.sql
2020-07-14 22:33:27.634873 (MainThread): Parsing macros/sql/surrogate_key.sql
2020-07-14 22:33:27.637193 (MainThread): Parsing macros/sql/safe_add.sql
2020-07-14 22:33:27.638151 (MainThread): Parsing macros/sql/nullcheck.sql
2020-07-14 22:33:27.639234 (MainThread): Parsing macros/sql/get_column_values.sql
2020-07-14 22:33:27.642817 (MainThread): Parsing macros/sql/pivot.sql
2020-07-14 22:33:27.645271 (MainThread): Parsing macros/sql/get_query_results_as_dict.sql
2020-07-14 22:33:27.681484 (MainThread): Acquiring new bigquery connection "model.stripe.stripe_weekly_overview".
2020-07-14 22:33:27.681594 (MainThread): Opening a new connection, currently in state init
2020-07-14 22:33:27.698610 (MainThread): Acquiring new bigquery connection "model.stripe.stripe_daily_overview".
2020-07-14 22:33:27.698696 (MainThread): Opening a new connection, currently in state closed
2020-07-14 22:33:27.708734 (MainThread): Acquiring new bigquery connection "model.stripe.stripe_invoice_details".
2020-07-14 22:33:27.708812 (MainThread): Opening a new connection, currently in state closed
2020-07-14 22:33:27.723624 (MainThread): Acquiring new bigquery connection "model.stripe.stripe_customer_overview".
2020-07-14 22:33:27.723792 (MainThread): Opening a new connection, currently in state closed
2020-07-14 22:33:27.734929 (MainThread): Acquiring new bigquery connection "model.stripe.stripe_balance_transactions".
2020-07-14 22:33:27.735069 (MainThread): Opening a new connection, currently in state closed
2020-07-14 22:33:27.743944 (MainThread): Acquiring new bigquery connection "model.stripe.stripe_quarterly_overview".
2020-07-14 22:33:27.744027 (MainThread): Opening a new connection, currently in state closed
2020-07-14 22:33:27.754179 (MainThread): Acquiring new bigquery connection "model.stripe.stripe_monthly_overview".
2020-07-14 22:33:27.754254 (MainThread): Opening a new connection, currently in state closed
2020-07-14 22:33:27.764906 (MainThread): Acquiring new bigquery connection "model.stripe.stripe_subscription_details".
2020-07-14 22:33:27.764987 (MainThread): Opening a new connection, currently in state closed
2020-07-14 22:33:27.778810 (MainThread): Acquiring new bigquery connection "model.stripe.stripe_balance_transaction_joined".
2020-07-14 22:33:27.778893 (MainThread): Opening a new connection, currently in state closed
2020-07-14 22:33:27.794299 (MainThread): Acquiring new bigquery connection "model.stripe.stripe_incomplete_charges".
2020-07-14 22:33:27.794381 (MainThread): Opening a new connection, currently in state closed
2020-07-14 22:33:28.077336 (MainThread): Acquiring new bigquery connection "model.stripe_source.stg_stripe_card".
2020-07-14 22:33:28.077451 (MainThread): Opening a new connection, currently in state closed
2020-07-14 22:33:28.087192 (MainThread): Acquiring new bigquery connection "model.stripe_source.stg_stripe_invoice_line_item".
2020-07-14 22:33:28.087285 (MainThread): Opening a new connection, currently in state closed
2020-07-14 22:33:28.097840 (MainThread): Acquiring new bigquery connection "model.stripe_source.stg_stripe_payment_method_card".
2020-07-14 22:33:28.097919 (MainThread): Opening a new connection, currently in state closed
2020-07-14 22:33:28.107616 (MainThread): Acquiring new bigquery connection "model.stripe_source.stg_stripe_charge".
2020-07-14 22:33:28.107798 (MainThread): Opening a new connection, currently in state closed
2020-07-14 22:33:28.117827 (MainThread): Acquiring new bigquery connection "model.stripe_source.stg_stripe_payout".
2020-07-14 22:33:28.117933 (MainThread): Opening a new connection, currently in state closed
2020-07-14 22:33:28.128150 (MainThread): Acquiring new bigquery connection "model.stripe_source.stg_stripe_customer".
2020-07-14 22:33:28.128234 (MainThread): Opening a new connection, currently in state closed
2020-07-14 22:33:28.137791 (MainThread): Acquiring new bigquery connection "model.stripe_source.stg_stripe_refund".
2020-07-14 22:33:28.137878 (MainThread): Opening a new connection, currently in state closed
2020-07-14 22:33:28.147751 (MainThread): Acquiring new bigquery connection "model.stripe_source.stg_stripe_subscription".
2020-07-14 22:33:28.147840 (MainThread): Opening a new connection, currently in state closed
2020-07-14 22:33:28.159511 (MainThread): Acquiring new bigquery connection "model.stripe_source.stg_stripe_payment_method".
2020-07-14 22:33:28.159698 (MainThread): Opening a new connection, currently in state closed
2020-07-14 22:33:28.175024 (MainThread): Acquiring new bigquery connection "model.stripe_source.stg_stripe_payment_intent".
2020-07-14 22:33:28.175183 (MainThread): Opening a new connection, currently in state closed
2020-07-14 22:33:28.188276 (MainThread): Acquiring new bigquery connection "model.stripe_source.stg_stripe_invoice".
2020-07-14 22:33:28.188407 (MainThread): Opening a new connection, currently in state closed
2020-07-14 22:33:28.201439 (MainThread): Acquiring new bigquery connection "model.stripe_source.stg_stripe_fee".
2020-07-14 22:33:28.201639 (MainThread): Opening a new connection, currently in state closed
2020-07-14 22:33:28.220007 (MainThread): Acquiring new bigquery connection "model.stripe_source.stg_stripe_balance_transaction".
2020-07-14 22:33:28.220198 (MainThread): Opening a new connection, currently in state closed
2020-07-14 22:33:30.330883 (MainThread): Found 23 models, 16 tests, 0 snapshots, 0 analyses, 278 macros, 0 operations, 0 seed files, 13 sources
2020-07-14 22:33:30.364021 (MainThread): 
2020-07-14 22:33:30.364435 (MainThread): Acquiring new bigquery connection "master".
2020-07-14 22:33:30.364604 (MainThread): Opening a new connection, currently in state closed
2020-07-14 22:33:30.387627 (ThreadPoolExecutor-0_0): Acquiring new bigquery connection "list_dbt-package-testing".
2020-07-14 22:33:30.387744 (ThreadPoolExecutor-0_0): Opening a new connection, currently in state init
2020-07-14 22:33:30.388558 (ThreadPoolExecutor-0_0): Your application has authenticated using end user credentials from Google Cloud SDK. We recommend that most server applications use service accounts instead. If your application continues to use end user credentials from Cloud SDK, you might receive a "quota exceeded" or "API not enabled" error. For more information about service accounts, see https://cloud.google.com/docs/authentication/
2020-07-14 22:33:31.814983 (ThreadPoolExecutor-0_0): Unhandled error while running:
list dataset
2020-07-14 22:33:31.815300 (ThreadPoolExecutor-0_0): ('invalid_grant: reauth related error (invalid_rapt)', '{\n  "error": "invalid_grant",\n  "error_description": "reauth related error (invalid_rapt)",\n  "error_subtype": "invalid_rapt"\n}')
2020-07-14 22:33:31.816524 (MainThread): Connection 'master' was properly closed.
2020-07-14 22:33:31.816693 (MainThread): Connection 'list_dbt-package-testing' was left open.
2020-07-14 22:33:31.816968 (MainThread): Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'end', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x1089a72e0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x1086875b0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x1088cb6d0>]}
2020-07-14 22:33:31.817294 (MainThread): Flushing usage events
2020-07-14 22:33:32.208327 (MainThread): Encountered an error:
2020-07-14 22:33:32.208574 (MainThread): Runtime Error
  ('invalid_grant: reauth related error (invalid_rapt)', '{\n  "error": "invalid_grant",\n  "error_description": "reauth related error (invalid_rapt)",\n  "error_subtype": "invalid_rapt"\n}')
2020-07-14 22:33:32.212855 (MainThread): Traceback (most recent call last):
  File "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/adapters/bigquery/connections.py", line 83, in exception_handler
    yield
  File "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/adapters/bigquery/connections.py", line 354, in _retry_and_handle
    return retry.retry_target(
  File "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/google/api_core/retry.py", line 184, in retry_target
    return target()
  File "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/adapters/bigquery/impl.py", line 162, in query_schemas
    return [ds.dataset_id for ds in all_datasets]
  File "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/adapters/bigquery/impl.py", line 162, in <listcomp>
    return [ds.dataset_id for ds in all_datasets]
  File "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/google/api_core/page_iterator.py", line 212, in _items_iter
    for page in self._page_iter(increment=False):
  File "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/google/api_core/page_iterator.py", line 243, in _page_iter
    page = self._next_page()
  File "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/google/api_core/page_iterator.py", line 369, in _next_page
    response = self._get_next_page_response()
  File "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/google/api_core/page_iterator.py", line 418, in _get_next_page_response
    return self.api_request(
  File "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/google/cloud/bigquery/client.py", line 556, in _call_api
    return call()
  File "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/google/api_core/retry.py", line 281, in retry_wrapped_func
    return retry_target(
  File "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/google/api_core/retry.py", line 184, in retry_target
    return target()
  File "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/google/cloud/_http.py", line 412, in api_request
    response = self._make_request(
  File "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/google/cloud/_http.py", line 276, in _make_request
    return self._do_request(
  File "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/google/cloud/_http.py", line 314, in _do_request
    return self.http.request(
  File "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/google/auth/transport/requests.py", line 442, in request
    self.credentials.before_request(auth_request, method, url, request_headers)
  File "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/google/auth/credentials.py", line 124, in before_request
    self.refresh(request)
  File "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/google/oauth2/credentials.py", line 177, in refresh
    access_token, refresh_token, expiry, grant_response = _client.refresh_grant(
  File "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/google/oauth2/_client.py", line 248, in refresh_grant
    response_data = _token_endpoint_request(request, token_uri, body)
  File "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/google/oauth2/_client.py", line 124, in _token_endpoint_request
    _handle_error_response(response_body)
  File "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/google/oauth2/_client.py", line 60, in _handle_error_response
    raise exceptions.RefreshError(error_details, response_body)
google.auth.exceptions.RefreshError: ('invalid_grant: reauth related error (invalid_rapt)', '{\n  "error": "invalid_grant",\n  "error_description": "reauth related error (invalid_rapt)",\n  "error_subtype": "invalid_rapt"\n}')

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/main.py", line 81, in main
    results, succeeded = handle_and_check(args)
  File "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/main.py", line 159, in handle_and_check
    task, res = run_from_args(parsed)
  File "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/main.py", line 212, in run_from_args
    results = task.run()
  File "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/task/runnable.py", line 416, in run
    result = self.execute_with_hooks(selected_uids)
  File "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/task/runnable.py", line 376, in execute_with_hooks
    self.before_run(adapter, selected_uids)
  File "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/task/run.py", line 202, in before_run
    super().before_run(adapter, selected_uids)
  File "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/task/runnable.py", line 362, in before_run
    self.create_schemas(adapter, selected_uids)
  File "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/task/runnable.py", line 492, in create_schemas
    existing_schemas_lowered.update(ls_future.result())
  File "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/concurrent/futures/_base.py", line 432, in result
    return self.__get_result()
  File "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/concurrent/futures/_base.py", line 388, in __get_result
    raise self._exception
  File "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/concurrent/futures/thread.py", line 57, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/task/runnable.py", line 473, in list_schemas
    for s in adapter.list_schemas(database_quoted)
  File "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/adapters/bigquery/impl.py", line 164, in list_schemas
    return self.connections._retry_and_handle(
  File "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/adapters/bigquery/connections.py", line 354, in _retry_and_handle
    return retry.retry_target(
  File "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/contextlib.py", line 131, in __exit__
    self.gen.throw(type, value, traceback)
  File "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/adapters/bigquery/connections.py", line 106, in exception_handler
    raise RuntimeException(exc_message)
dbt.exceptions.RuntimeException: Runtime Error
  ('invalid_grant: reauth related error (invalid_rapt)', '{\n  "error": "invalid_grant",\n  "error_description": "reauth related error (invalid_rapt)",\n  "error_subtype": "invalid_rapt"\n}')

2020-07-14 22:34:14.830545 (MainThread): Running with dbt=0.17.0-rc1
2020-07-14 22:34:15.040609 (MainThread): running dbt with arguments Namespace(cls=<class 'dbt.task.run.RunTask'>, debug=False, exclude=None, fail_fast=False, full_refresh=False, log_cache_events=False, log_format='default', models=None, partial_parse=None, profile=None, profiles_dir='/Users/kristin/.dbt', project_dir=None, record_timing_info=None, rpc_method='run', single_threaded=False, strict=False, target=None, test_new_parser=False, threads=None, use_cache=True, vars='{}', version_check=True, warn_error=False, which='run', write_json=True)
2020-07-14 22:34:15.041282 (MainThread): Tracking: tracking
2020-07-14 22:34:15.046484 (MainThread): Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'start', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x108788b20>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x108799fa0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x108799d30>]}
2020-07-14 22:34:15.065051 (MainThread): Partial parsing not enabled
2020-07-14 22:34:15.066641 (MainThread): Parsing macros/core.sql
2020-07-14 22:34:15.070619 (MainThread): Parsing macros/materializations/helpers.sql
2020-07-14 22:34:15.077798 (MainThread): Parsing macros/materializations/snapshot/snapshot_merge.sql
2020-07-14 22:34:15.079386 (MainThread): Parsing macros/materializations/snapshot/strategies.sql
2020-07-14 22:34:15.094402 (MainThread): Parsing macros/materializations/snapshot/snapshot.sql
2020-07-14 22:34:15.120701 (MainThread): Parsing macros/materializations/seed/seed.sql
2020-07-14 22:34:15.139284 (MainThread): Parsing macros/materializations/incremental/helpers.sql
2020-07-14 22:34:15.140924 (MainThread): Parsing macros/materializations/incremental/incremental.sql
2020-07-14 22:34:15.148120 (MainThread): Parsing macros/materializations/common/merge.sql
2020-07-14 22:34:15.161454 (MainThread): Parsing macros/materializations/table/table.sql
2020-07-14 22:34:15.167429 (MainThread): Parsing macros/materializations/view/view.sql
2020-07-14 22:34:15.173081 (MainThread): Parsing macros/materializations/view/create_or_replace_view.sql
2020-07-14 22:34:15.177575 (MainThread): Parsing macros/etc/get_custom_alias.sql
2020-07-14 22:34:15.178549 (MainThread): Parsing macros/etc/query.sql
2020-07-14 22:34:15.179477 (MainThread): Parsing macros/etc/is_incremental.sql
2020-07-14 22:34:15.180877 (MainThread): Parsing macros/etc/datetime.sql
2020-07-14 22:34:15.189025 (MainThread): Parsing macros/etc/get_custom_schema.sql
2020-07-14 22:34:15.190805 (MainThread): Parsing macros/etc/get_custom_database.sql
2020-07-14 22:34:15.191820 (MainThread): Parsing macros/adapters/common.sql
2020-07-14 22:34:15.236433 (MainThread): Parsing macros/schema_tests/relationships.sql
2020-07-14 22:34:15.237466 (MainThread): Parsing macros/schema_tests/not_null.sql
2020-07-14 22:34:15.238265 (MainThread): Parsing macros/schema_tests/unique.sql
2020-07-14 22:34:15.239213 (MainThread): Parsing macros/schema_tests/accepted_values.sql
2020-07-14 22:34:15.241260 (MainThread): Parsing macros/etc.sql
2020-07-14 22:34:15.241825 (MainThread): Parsing macros/catalog.sql
2020-07-14 22:34:15.247500 (MainThread): Parsing macros/adapters.sql
2020-07-14 22:34:15.261755 (MainThread): Parsing macros/materializations/seed.sql
2020-07-14 22:34:15.263618 (MainThread): Parsing macros/materializations/view.sql
2020-07-14 22:34:15.265356 (MainThread): Parsing macros/materializations/table.sql
2020-07-14 22:34:15.273869 (MainThread): Parsing macros/materializations/incremental.sql
2020-07-14 22:34:15.285027 (MainThread): Parsing macros/materializations/snapshot.sql
2020-07-14 22:34:15.331233 (MainThread): Partial parsing not enabled
2020-07-14 22:34:15.332784 (MainThread): Parsing macros/cross_db_utils/except.sql
2020-07-14 22:34:15.333707 (MainThread): Parsing macros/cross_db_utils/replace.sql
2020-07-14 22:34:15.334777 (MainThread): Parsing macros/cross_db_utils/concat.sql
2020-07-14 22:34:15.336803 (MainThread): Parsing macros/cross_db_utils/datatypes.sql
2020-07-14 22:34:15.341552 (MainThread): Parsing macros/cross_db_utils/_is_relation.sql
2020-07-14 22:34:15.342601 (MainThread): Parsing macros/cross_db_utils/length.sql
2020-07-14 22:34:15.343717 (MainThread): Parsing macros/cross_db_utils/dateadd.sql
2020-07-14 22:34:15.345854 (MainThread): Parsing macros/cross_db_utils/intersect.sql
2020-07-14 22:34:15.346735 (MainThread): Parsing macros/cross_db_utils/right.sql
2020-07-14 22:34:15.348966 (MainThread): Parsing macros/cross_db_utils/datediff.sql
2020-07-14 22:34:15.357694 (MainThread): Parsing macros/cross_db_utils/safe_cast.sql
2020-07-14 22:34:15.359337 (MainThread): Parsing macros/cross_db_utils/hash.sql
2020-07-14 22:34:15.360538 (MainThread): Parsing macros/cross_db_utils/identifier.sql
2020-07-14 22:34:15.361755 (MainThread): Parsing macros/cross_db_utils/position.sql
2020-07-14 22:34:15.363079 (MainThread): Parsing macros/cross_db_utils/literal.sql
2020-07-14 22:34:15.363867 (MainThread): Parsing macros/cross_db_utils/current_timestamp.sql
2020-07-14 22:34:15.390552 (MainThread): Parsing macros/cross_db_utils/width_bucket.sql
2020-07-14 22:34:15.397857 (MainThread): Parsing macros/cross_db_utils/last_day.sql
2020-07-14 22:34:15.401428 (MainThread): Parsing macros/cross_db_utils/split_part.sql
2020-07-14 22:34:15.403813 (MainThread): Parsing macros/cross_db_utils/date_trunc.sql
2020-07-14 22:34:15.405724 (MainThread): Parsing macros/cross_db_utils/_is_ephemeral.sql
2020-07-14 22:34:15.407993 (MainThread): Parsing macros/materializations/insert_by_period_materialization.sql
2020-07-14 22:34:15.434826 (MainThread): Parsing macros/logger/pretty_log_format.sql
2020-07-14 22:34:15.435567 (MainThread): Parsing macros/logger/pretty_time.sql
2020-07-14 22:34:15.436328 (MainThread): Parsing macros/logger/log_info.sql
2020-07-14 22:34:15.437040 (MainThread): Parsing macros/datetime/date_spine.sql
2020-07-14 22:34:15.440436 (MainThread): Parsing macros/web/get_url_host.sql
2020-07-14 22:34:15.441786 (MainThread): Parsing macros/web/get_url_path.sql
2020-07-14 22:34:15.443864 (MainThread): Parsing macros/web/get_url_parameter.sql
2020-07-14 22:34:15.444948 (MainThread): Parsing macros/geo/haversine_distance.sql
2020-07-14 22:34:15.445886 (MainThread): Parsing macros/schema_tests/equal_rowcount.sql
2020-07-14 22:34:15.447177 (MainThread): Parsing macros/schema_tests/relationships_where.sql
2020-07-14 22:34:15.449394 (MainThread): Parsing macros/schema_tests/recency.sql
2020-07-14 22:34:15.450653 (MainThread): Parsing macros/schema_tests/not_constant.sql
2020-07-14 22:34:15.451665 (MainThread): Parsing macros/schema_tests/test_unique_where.sql
2020-07-14 22:34:15.453241 (MainThread): Parsing macros/schema_tests/at_least_one.sql
2020-07-14 22:34:15.454198 (MainThread): Parsing macros/schema_tests/unique_combination_of_columns.sql
2020-07-14 22:34:15.455305 (MainThread): Parsing macros/schema_tests/cardinality_equality.sql
2020-07-14 22:34:15.457074 (MainThread): Parsing macros/schema_tests/expression_is_true.sql
2020-07-14 22:34:15.458022 (MainThread): Parsing macros/schema_tests/test_not_null_where.sql
2020-07-14 22:34:15.459895 (MainThread): Parsing macros/schema_tests/equality.sql
2020-07-14 22:34:15.463294 (MainThread): Parsing macros/schema_tests/mutually_exclusive_ranges.sql
2020-07-14 22:34:15.468202 (MainThread): Parsing macros/sql/nullcheck_table.sql
2020-07-14 22:34:15.469221 (MainThread): Parsing macros/sql/get_relations_by_pattern.sql
2020-07-14 22:34:15.471375 (MainThread): Parsing macros/sql/generate_series.sql
2020-07-14 22:34:15.474434 (MainThread): Parsing macros/sql/get_relations_by_prefix.sql
2020-07-14 22:34:15.478406 (MainThread): Parsing macros/sql/get_tables_by_prefix_sql.sql
2020-07-14 22:34:15.480738 (MainThread): Parsing macros/sql/star.sql
2020-07-14 22:34:15.483333 (MainThread): Parsing macros/sql/unpivot.sql
2020-07-14 22:34:15.488799 (MainThread): Parsing macros/sql/union.sql
2020-07-14 22:34:15.496862 (MainThread): Parsing macros/sql/groupby.sql
2020-07-14 22:34:15.497659 (MainThread): Parsing macros/sql/get_tables_by_pattern.sql
2020-07-14 22:34:15.498735 (MainThread): Parsing macros/sql/surrogate_key.sql
2020-07-14 22:34:15.501034 (MainThread): Parsing macros/sql/safe_add.sql
2020-07-14 22:34:15.501933 (MainThread): Parsing macros/sql/nullcheck.sql
2020-07-14 22:34:15.502994 (MainThread): Parsing macros/sql/get_column_values.sql
2020-07-14 22:34:15.506613 (MainThread): Parsing macros/sql/pivot.sql
2020-07-14 22:34:15.508989 (MainThread): Parsing macros/sql/get_query_results_as_dict.sql
2020-07-14 22:34:15.542439 (MainThread): Acquiring new bigquery connection "model.stripe.stripe_weekly_overview".
2020-07-14 22:34:15.542536 (MainThread): Opening a new connection, currently in state init
2020-07-14 22:34:15.559192 (MainThread): Acquiring new bigquery connection "model.stripe.stripe_daily_overview".
2020-07-14 22:34:15.559284 (MainThread): Opening a new connection, currently in state closed
2020-07-14 22:34:15.570066 (MainThread): Acquiring new bigquery connection "model.stripe.stripe_invoice_details".
2020-07-14 22:34:15.570156 (MainThread): Opening a new connection, currently in state closed
2020-07-14 22:34:15.582683 (MainThread): Acquiring new bigquery connection "model.stripe.stripe_customer_overview".
2020-07-14 22:34:15.582760 (MainThread): Opening a new connection, currently in state closed
2020-07-14 22:34:15.593041 (MainThread): Acquiring new bigquery connection "model.stripe.stripe_balance_transactions".
2020-07-14 22:34:15.593121 (MainThread): Opening a new connection, currently in state closed
2020-07-14 22:34:15.601461 (MainThread): Acquiring new bigquery connection "model.stripe.stripe_quarterly_overview".
2020-07-14 22:34:15.601536 (MainThread): Opening a new connection, currently in state closed
2020-07-14 22:34:15.610929 (MainThread): Acquiring new bigquery connection "model.stripe.stripe_monthly_overview".
2020-07-14 22:34:15.611005 (MainThread): Opening a new connection, currently in state closed
2020-07-14 22:34:15.620376 (MainThread): Acquiring new bigquery connection "model.stripe.stripe_subscription_details".
2020-07-14 22:34:15.620453 (MainThread): Opening a new connection, currently in state closed
2020-07-14 22:34:15.633454 (MainThread): Acquiring new bigquery connection "model.stripe.stripe_balance_transaction_joined".
2020-07-14 22:34:15.633546 (MainThread): Opening a new connection, currently in state closed
2020-07-14 22:34:15.648913 (MainThread): Acquiring new bigquery connection "model.stripe.stripe_incomplete_charges".
2020-07-14 22:34:15.648997 (MainThread): Opening a new connection, currently in state closed
2020-07-14 22:34:15.921629 (MainThread): Acquiring new bigquery connection "model.stripe_source.stg_stripe_card".
2020-07-14 22:34:15.921754 (MainThread): Opening a new connection, currently in state closed
2020-07-14 22:34:15.932754 (MainThread): Acquiring new bigquery connection "model.stripe_source.stg_stripe_invoice_line_item".
2020-07-14 22:34:15.932847 (MainThread): Opening a new connection, currently in state closed
2020-07-14 22:34:15.943790 (MainThread): Acquiring new bigquery connection "model.stripe_source.stg_stripe_payment_method_card".
2020-07-14 22:34:15.943866 (MainThread): Opening a new connection, currently in state closed
2020-07-14 22:34:15.952994 (MainThread): Acquiring new bigquery connection "model.stripe_source.stg_stripe_charge".
2020-07-14 22:34:15.953071 (MainThread): Opening a new connection, currently in state closed
2020-07-14 22:34:15.961902 (MainThread): Acquiring new bigquery connection "model.stripe_source.stg_stripe_payout".
2020-07-14 22:34:15.961976 (MainThread): Opening a new connection, currently in state closed
2020-07-14 22:34:15.971394 (MainThread): Acquiring new bigquery connection "model.stripe_source.stg_stripe_customer".
2020-07-14 22:34:15.971472 (MainThread): Opening a new connection, currently in state closed
2020-07-14 22:34:15.980500 (MainThread): Acquiring new bigquery connection "model.stripe_source.stg_stripe_refund".
2020-07-14 22:34:15.980574 (MainThread): Opening a new connection, currently in state closed
2020-07-14 22:34:15.989804 (MainThread): Acquiring new bigquery connection "model.stripe_source.stg_stripe_subscription".
2020-07-14 22:34:15.989880 (MainThread): Opening a new connection, currently in state closed
2020-07-14 22:34:15.999574 (MainThread): Acquiring new bigquery connection "model.stripe_source.stg_stripe_payment_method".
2020-07-14 22:34:15.999651 (MainThread): Opening a new connection, currently in state closed
2020-07-14 22:34:16.008534 (MainThread): Acquiring new bigquery connection "model.stripe_source.stg_stripe_payment_intent".
2020-07-14 22:34:16.008608 (MainThread): Opening a new connection, currently in state closed
2020-07-14 22:34:16.017703 (MainThread): Acquiring new bigquery connection "model.stripe_source.stg_stripe_invoice".
2020-07-14 22:34:16.017818 (MainThread): Opening a new connection, currently in state closed
2020-07-14 22:34:16.027602 (MainThread): Acquiring new bigquery connection "model.stripe_source.stg_stripe_fee".
2020-07-14 22:34:16.027677 (MainThread): Opening a new connection, currently in state closed
2020-07-14 22:34:16.036861 (MainThread): Acquiring new bigquery connection "model.stripe_source.stg_stripe_balance_transaction".
2020-07-14 22:34:16.036937 (MainThread): Opening a new connection, currently in state closed
2020-07-14 22:34:18.178330 (MainThread): Found 23 models, 16 tests, 0 snapshots, 0 analyses, 278 macros, 0 operations, 0 seed files, 13 sources
2020-07-14 22:34:18.217896 (MainThread): 
2020-07-14 22:34:18.218237 (MainThread): Acquiring new bigquery connection "master".
2020-07-14 22:34:18.218328 (MainThread): Opening a new connection, currently in state closed
2020-07-14 22:34:18.243710 (ThreadPoolExecutor-0_0): Acquiring new bigquery connection "list_dbt-package-testing".
2020-07-14 22:34:18.243828 (ThreadPoolExecutor-0_0): Opening a new connection, currently in state init
2020-07-14 22:34:18.244592 (ThreadPoolExecutor-0_0): Your application has authenticated using end user credentials from Google Cloud SDK. We recommend that most server applications use service accounts instead. If your application continues to use end user credentials from Cloud SDK, you might receive a "quota exceeded" or "API not enabled" error. For more information about service accounts, see https://cloud.google.com/docs/authentication/
2020-07-14 22:34:19.514258 (ThreadPoolExecutor-0_0): Unhandled error while running:
list dataset
2020-07-14 22:34:19.514512 (ThreadPoolExecutor-0_0): ('invalid_grant: reauth related error (invalid_rapt)', '{\n  "error": "invalid_grant",\n  "error_description": "reauth related error (invalid_rapt)",\n  "error_subtype": "invalid_rapt"\n}')
2020-07-14 22:34:19.515536 (MainThread): Connection 'master' was properly closed.
2020-07-14 22:34:19.515651 (MainThread): Connection 'list_dbt-package-testing' was left open.
2020-07-14 22:34:19.515898 (MainThread): Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'end', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x108b89250>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x108b11f40>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x108b11a30>]}
2020-07-14 22:34:19.516198 (MainThread): Flushing usage events
2020-07-14 22:34:19.873256 (MainThread): Encountered an error:
2020-07-14 22:34:19.873474 (MainThread): Runtime Error
  ('invalid_grant: reauth related error (invalid_rapt)', '{\n  "error": "invalid_grant",\n  "error_description": "reauth related error (invalid_rapt)",\n  "error_subtype": "invalid_rapt"\n}')
2020-07-14 22:34:19.877493 (MainThread): Traceback (most recent call last):
  File "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/adapters/bigquery/connections.py", line 83, in exception_handler
    yield
  File "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/adapters/bigquery/connections.py", line 354, in _retry_and_handle
    return retry.retry_target(
  File "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/google/api_core/retry.py", line 184, in retry_target
    return target()
  File "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/adapters/bigquery/impl.py", line 162, in query_schemas
    return [ds.dataset_id for ds in all_datasets]
  File "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/adapters/bigquery/impl.py", line 162, in <listcomp>
    return [ds.dataset_id for ds in all_datasets]
  File "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/google/api_core/page_iterator.py", line 212, in _items_iter
    for page in self._page_iter(increment=False):
  File "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/google/api_core/page_iterator.py", line 243, in _page_iter
    page = self._next_page()
  File "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/google/api_core/page_iterator.py", line 369, in _next_page
    response = self._get_next_page_response()
  File "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/google/api_core/page_iterator.py", line 418, in _get_next_page_response
    return self.api_request(
  File "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/google/cloud/bigquery/client.py", line 556, in _call_api
    return call()
  File "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/google/api_core/retry.py", line 281, in retry_wrapped_func
    return retry_target(
  File "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/google/api_core/retry.py", line 184, in retry_target
    return target()
  File "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/google/cloud/_http.py", line 412, in api_request
    response = self._make_request(
  File "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/google/cloud/_http.py", line 276, in _make_request
    return self._do_request(
  File "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/google/cloud/_http.py", line 314, in _do_request
    return self.http.request(
  File "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/google/auth/transport/requests.py", line 442, in request
    self.credentials.before_request(auth_request, method, url, request_headers)
  File "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/google/auth/credentials.py", line 124, in before_request
    self.refresh(request)
  File "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/google/oauth2/credentials.py", line 177, in refresh
    access_token, refresh_token, expiry, grant_response = _client.refresh_grant(
  File "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/google/oauth2/_client.py", line 248, in refresh_grant
    response_data = _token_endpoint_request(request, token_uri, body)
  File "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/google/oauth2/_client.py", line 124, in _token_endpoint_request
    _handle_error_response(response_body)
  File "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/google/oauth2/_client.py", line 60, in _handle_error_response
    raise exceptions.RefreshError(error_details, response_body)
google.auth.exceptions.RefreshError: ('invalid_grant: reauth related error (invalid_rapt)', '{\n  "error": "invalid_grant",\n  "error_description": "reauth related error (invalid_rapt)",\n  "error_subtype": "invalid_rapt"\n}')

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/main.py", line 81, in main
    results, succeeded = handle_and_check(args)
  File "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/main.py", line 159, in handle_and_check
    task, res = run_from_args(parsed)
  File "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/main.py", line 212, in run_from_args
    results = task.run()
  File "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/task/runnable.py", line 416, in run
    result = self.execute_with_hooks(selected_uids)
  File "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/task/runnable.py", line 376, in execute_with_hooks
    self.before_run(adapter, selected_uids)
  File "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/task/run.py", line 202, in before_run
    super().before_run(adapter, selected_uids)
  File "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/task/runnable.py", line 362, in before_run
    self.create_schemas(adapter, selected_uids)
  File "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/task/runnable.py", line 492, in create_schemas
    existing_schemas_lowered.update(ls_future.result())
  File "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/concurrent/futures/_base.py", line 432, in result
    return self.__get_result()
  File "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/concurrent/futures/_base.py", line 388, in __get_result
    raise self._exception
  File "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/concurrent/futures/thread.py", line 57, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/task/runnable.py", line 473, in list_schemas
    for s in adapter.list_schemas(database_quoted)
  File "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/adapters/bigquery/impl.py", line 164, in list_schemas
    return self.connections._retry_and_handle(
  File "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/adapters/bigquery/connections.py", line 354, in _retry_and_handle
    return retry.retry_target(
  File "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/contextlib.py", line 131, in __exit__
    self.gen.throw(type, value, traceback)
  File "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/adapters/bigquery/connections.py", line 106, in exception_handler
    raise RuntimeException(exc_message)
dbt.exceptions.RuntimeException: Runtime Error
  ('invalid_grant: reauth related error (invalid_rapt)', '{\n  "error": "invalid_grant",\n  "error_description": "reauth related error (invalid_rapt)",\n  "error_subtype": "invalid_rapt"\n}')

2020-07-14 22:35:46.781912 (MainThread): Running with dbt=0.17.0-rc1
2020-07-14 22:35:46.975033 (MainThread): running dbt with arguments Namespace(cls=<class 'dbt.task.run.RunTask'>, debug=False, exclude=None, fail_fast=False, full_refresh=False, log_cache_events=False, log_format='default', models=None, partial_parse=None, profile=None, profiles_dir='/Users/kristin/.dbt', project_dir=None, record_timing_info=None, rpc_method='run', single_threaded=False, strict=False, target=None, test_new_parser=False, threads=None, use_cache=True, vars='{}', version_check=True, warn_error=False, which='run', write_json=True)
2020-07-14 22:35:46.976344 (MainThread): Tracking: tracking
2020-07-14 22:35:46.983143 (MainThread): Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'start', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x10c941c40>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x10c95bf70>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x10c95bd00>]}
2020-07-14 22:35:47.001175 (MainThread): Partial parsing not enabled
2020-07-14 22:35:47.002628 (MainThread): Parsing macros/core.sql
2020-07-14 22:35:47.007080 (MainThread): Parsing macros/materializations/helpers.sql
2020-07-14 22:35:47.013795 (MainThread): Parsing macros/materializations/snapshot/snapshot_merge.sql
2020-07-14 22:35:47.015337 (MainThread): Parsing macros/materializations/snapshot/strategies.sql
2020-07-14 22:35:47.030100 (MainThread): Parsing macros/materializations/snapshot/snapshot.sql
2020-07-14 22:35:47.056108 (MainThread): Parsing macros/materializations/seed/seed.sql
2020-07-14 22:35:47.074354 (MainThread): Parsing macros/materializations/incremental/helpers.sql
2020-07-14 22:35:47.075944 (MainThread): Parsing macros/materializations/incremental/incremental.sql
2020-07-14 22:35:47.081817 (MainThread): Parsing macros/materializations/common/merge.sql
2020-07-14 22:35:47.094006 (MainThread): Parsing macros/materializations/table/table.sql
2020-07-14 22:35:47.099865 (MainThread): Parsing macros/materializations/view/view.sql
2020-07-14 22:35:47.105392 (MainThread): Parsing macros/materializations/view/create_or_replace_view.sql
2020-07-14 22:35:47.109630 (MainThread): Parsing macros/etc/get_custom_alias.sql
2020-07-14 22:35:47.110484 (MainThread): Parsing macros/etc/query.sql
2020-07-14 22:35:47.111427 (MainThread): Parsing macros/etc/is_incremental.sql
2020-07-14 22:35:47.113047 (MainThread): Parsing macros/etc/datetime.sql
2020-07-14 22:35:47.121688 (MainThread): Parsing macros/etc/get_custom_schema.sql
2020-07-14 22:35:47.123482 (MainThread): Parsing macros/etc/get_custom_database.sql
2020-07-14 22:35:47.124409 (MainThread): Parsing macros/adapters/common.sql
2020-07-14 22:35:47.167284 (MainThread): Parsing macros/schema_tests/relationships.sql
2020-07-14 22:35:47.168265 (MainThread): Parsing macros/schema_tests/not_null.sql
2020-07-14 22:35:47.169097 (MainThread): Parsing macros/schema_tests/unique.sql
2020-07-14 22:35:47.170004 (MainThread): Parsing macros/schema_tests/accepted_values.sql
2020-07-14 22:35:47.171944 (MainThread): Parsing macros/etc.sql
2020-07-14 22:35:47.172488 (MainThread): Parsing macros/catalog.sql
2020-07-14 22:35:47.177978 (MainThread): Parsing macros/adapters.sql
2020-07-14 22:35:47.191895 (MainThread): Parsing macros/materializations/seed.sql
2020-07-14 22:35:47.193642 (MainThread): Parsing macros/materializations/view.sql
2020-07-14 22:35:47.195304 (MainThread): Parsing macros/materializations/table.sql
2020-07-14 22:35:47.204075 (MainThread): Parsing macros/materializations/incremental.sql
2020-07-14 22:35:47.214862 (MainThread): Parsing macros/materializations/snapshot.sql
2020-07-14 22:35:47.260366 (MainThread): Partial parsing not enabled
2020-07-14 22:35:47.262077 (MainThread): Parsing macros/cross_db_utils/except.sql
2020-07-14 22:35:47.262993 (MainThread): Parsing macros/cross_db_utils/replace.sql
2020-07-14 22:35:47.264049 (MainThread): Parsing macros/cross_db_utils/concat.sql
2020-07-14 22:35:47.266020 (MainThread): Parsing macros/cross_db_utils/datatypes.sql
2020-07-14 22:35:47.270812 (MainThread): Parsing macros/cross_db_utils/_is_relation.sql
2020-07-14 22:35:47.271858 (MainThread): Parsing macros/cross_db_utils/length.sql
2020-07-14 22:35:47.273088 (MainThread): Parsing macros/cross_db_utils/dateadd.sql
2020-07-14 22:35:47.275240 (MainThread): Parsing macros/cross_db_utils/intersect.sql
2020-07-14 22:35:47.276120 (MainThread): Parsing macros/cross_db_utils/right.sql
2020-07-14 22:35:47.278079 (MainThread): Parsing macros/cross_db_utils/datediff.sql
2020-07-14 22:35:47.286907 (MainThread): Parsing macros/cross_db_utils/safe_cast.sql
2020-07-14 22:35:47.288506 (MainThread): Parsing macros/cross_db_utils/hash.sql
2020-07-14 22:35:47.289817 (MainThread): Parsing macros/cross_db_utils/identifier.sql
2020-07-14 22:35:47.291027 (MainThread): Parsing macros/cross_db_utils/position.sql
2020-07-14 22:35:47.292342 (MainThread): Parsing macros/cross_db_utils/literal.sql
2020-07-14 22:35:47.293127 (MainThread): Parsing macros/cross_db_utils/current_timestamp.sql
2020-07-14 22:35:47.317394 (MainThread): Parsing macros/cross_db_utils/width_bucket.sql
2020-07-14 22:35:47.324476 (MainThread): Parsing macros/cross_db_utils/last_day.sql
2020-07-14 22:35:47.328090 (MainThread): Parsing macros/cross_db_utils/split_part.sql
2020-07-14 22:35:47.330430 (MainThread): Parsing macros/cross_db_utils/date_trunc.sql
2020-07-14 22:35:47.332246 (MainThread): Parsing macros/cross_db_utils/_is_ephemeral.sql
2020-07-14 22:35:47.334416 (MainThread): Parsing macros/materializations/insert_by_period_materialization.sql
2020-07-14 22:35:47.360507 (MainThread): Parsing macros/logger/pretty_log_format.sql
2020-07-14 22:35:47.361251 (MainThread): Parsing macros/logger/pretty_time.sql
2020-07-14 22:35:47.362039 (MainThread): Parsing macros/logger/log_info.sql
2020-07-14 22:35:47.362768 (MainThread): Parsing macros/datetime/date_spine.sql
2020-07-14 22:35:47.366187 (MainThread): Parsing macros/web/get_url_host.sql
2020-07-14 22:35:47.367563 (MainThread): Parsing macros/web/get_url_path.sql
2020-07-14 22:35:47.369688 (MainThread): Parsing macros/web/get_url_parameter.sql
2020-07-14 22:35:47.370740 (MainThread): Parsing macros/geo/haversine_distance.sql
2020-07-14 22:35:47.371610 (MainThread): Parsing macros/schema_tests/equal_rowcount.sql
2020-07-14 22:35:47.372796 (MainThread): Parsing macros/schema_tests/relationships_where.sql
2020-07-14 22:35:47.374600 (MainThread): Parsing macros/schema_tests/recency.sql
2020-07-14 22:35:47.375647 (MainThread): Parsing macros/schema_tests/not_constant.sql
2020-07-14 22:35:47.376481 (MainThread): Parsing macros/schema_tests/test_unique_where.sql
2020-07-14 22:35:47.377808 (MainThread): Parsing macros/schema_tests/at_least_one.sql
2020-07-14 22:35:47.378752 (MainThread): Parsing macros/schema_tests/unique_combination_of_columns.sql
2020-07-14 22:35:47.379735 (MainThread): Parsing macros/schema_tests/cardinality_equality.sql
2020-07-14 22:35:47.381058 (MainThread): Parsing macros/schema_tests/expression_is_true.sql
2020-07-14 22:35:47.381958 (MainThread): Parsing macros/schema_tests/test_not_null_where.sql
2020-07-14 22:35:47.383131 (MainThread): Parsing macros/schema_tests/equality.sql
2020-07-14 22:35:47.385899 (MainThread): Parsing macros/schema_tests/mutually_exclusive_ranges.sql
2020-07-14 22:35:47.391017 (MainThread): Parsing macros/sql/nullcheck_table.sql
2020-07-14 22:35:47.392021 (MainThread): Parsing macros/sql/get_relations_by_pattern.sql
2020-07-14 22:35:47.394141 (MainThread): Parsing macros/sql/generate_series.sql
2020-07-14 22:35:47.396876 (MainThread): Parsing macros/sql/get_relations_by_prefix.sql
2020-07-14 22:35:47.399871 (MainThread): Parsing macros/sql/get_tables_by_prefix_sql.sql
2020-07-14 22:35:47.402126 (MainThread): Parsing macros/sql/star.sql
2020-07-14 22:35:47.404623 (MainThread): Parsing macros/sql/unpivot.sql
2020-07-14 22:35:47.409794 (MainThread): Parsing macros/sql/union.sql
2020-07-14 22:35:47.417805 (MainThread): Parsing macros/sql/groupby.sql
2020-07-14 22:35:47.418569 (MainThread): Parsing macros/sql/get_tables_by_pattern.sql
2020-07-14 22:35:47.419356 (MainThread): Parsing macros/sql/surrogate_key.sql
2020-07-14 22:35:47.421730 (MainThread): Parsing macros/sql/safe_add.sql
2020-07-14 22:35:47.422603 (MainThread): Parsing macros/sql/nullcheck.sql
2020-07-14 22:35:47.423629 (MainThread): Parsing macros/sql/get_column_values.sql
2020-07-14 22:35:47.427046 (MainThread): Parsing macros/sql/pivot.sql
2020-07-14 22:35:47.429438 (MainThread): Parsing macros/sql/get_query_results_as_dict.sql
2020-07-14 22:35:47.462424 (MainThread): Acquiring new bigquery connection "model.stripe.stripe_weekly_overview".
2020-07-14 22:35:47.462521 (MainThread): Opening a new connection, currently in state init
2020-07-14 22:35:47.478410 (MainThread): Acquiring new bigquery connection "model.stripe.stripe_daily_overview".
2020-07-14 22:35:47.478487 (MainThread): Opening a new connection, currently in state closed
2020-07-14 22:35:47.487593 (MainThread): Acquiring new bigquery connection "model.stripe.stripe_invoice_details".
2020-07-14 22:35:47.487665 (MainThread): Opening a new connection, currently in state closed
2020-07-14 22:35:47.500075 (MainThread): Acquiring new bigquery connection "model.stripe.stripe_customer_overview".
2020-07-14 22:35:47.500152 (MainThread): Opening a new connection, currently in state closed
2020-07-14 22:35:47.510646 (MainThread): Acquiring new bigquery connection "model.stripe.stripe_balance_transactions".
2020-07-14 22:35:47.510723 (MainThread): Opening a new connection, currently in state closed
2020-07-14 22:35:47.519047 (MainThread): Acquiring new bigquery connection "model.stripe.stripe_quarterly_overview".
2020-07-14 22:35:47.519123 (MainThread): Opening a new connection, currently in state closed
2020-07-14 22:35:47.528179 (MainThread): Acquiring new bigquery connection "model.stripe.stripe_monthly_overview".
2020-07-14 22:35:47.528251 (MainThread): Opening a new connection, currently in state closed
2020-07-14 22:35:47.537086 (MainThread): Acquiring new bigquery connection "model.stripe.stripe_subscription_details".
2020-07-14 22:35:47.537157 (MainThread): Opening a new connection, currently in state closed
2020-07-14 22:35:47.550289 (MainThread): Acquiring new bigquery connection "model.stripe.stripe_balance_transaction_joined".
2020-07-14 22:35:47.550399 (MainThread): Opening a new connection, currently in state closed
2020-07-14 22:35:47.567199 (MainThread): Acquiring new bigquery connection "model.stripe.stripe_incomplete_charges".
2020-07-14 22:35:47.567318 (MainThread): Opening a new connection, currently in state closed
2020-07-14 22:35:47.838000 (MainThread): Acquiring new bigquery connection "model.stripe_source.stg_stripe_card".
2020-07-14 22:35:47.838128 (MainThread): Opening a new connection, currently in state closed
2020-07-14 22:35:47.849136 (MainThread): Acquiring new bigquery connection "model.stripe_source.stg_stripe_invoice_line_item".
2020-07-14 22:35:47.849227 (MainThread): Opening a new connection, currently in state closed
2020-07-14 22:35:47.860383 (MainThread): Acquiring new bigquery connection "model.stripe_source.stg_stripe_payment_method_card".
2020-07-14 22:35:47.860459 (MainThread): Opening a new connection, currently in state closed
2020-07-14 22:35:47.869175 (MainThread): Acquiring new bigquery connection "model.stripe_source.stg_stripe_charge".
2020-07-14 22:35:47.869249 (MainThread): Opening a new connection, currently in state closed
2020-07-14 22:35:47.877922 (MainThread): Acquiring new bigquery connection "model.stripe_source.stg_stripe_payout".
2020-07-14 22:35:47.877992 (MainThread): Opening a new connection, currently in state closed
2020-07-14 22:35:47.887444 (MainThread): Acquiring new bigquery connection "model.stripe_source.stg_stripe_customer".
2020-07-14 22:35:47.887519 (MainThread): Opening a new connection, currently in state closed
2020-07-14 22:35:47.896114 (MainThread): Acquiring new bigquery connection "model.stripe_source.stg_stripe_refund".
2020-07-14 22:35:47.896184 (MainThread): Opening a new connection, currently in state closed
2020-07-14 22:35:47.904884 (MainThread): Acquiring new bigquery connection "model.stripe_source.stg_stripe_subscription".
2020-07-14 22:35:47.904955 (MainThread): Opening a new connection, currently in state closed
2020-07-14 22:35:47.917363 (MainThread): Acquiring new bigquery connection "model.stripe_source.stg_stripe_payment_method".
2020-07-14 22:35:47.917451 (MainThread): Opening a new connection, currently in state closed
2020-07-14 22:35:47.926785 (MainThread): Acquiring new bigquery connection "model.stripe_source.stg_stripe_payment_intent".
2020-07-14 22:35:47.926861 (MainThread): Opening a new connection, currently in state closed
2020-07-14 22:35:47.935490 (MainThread): Acquiring new bigquery connection "model.stripe_source.stg_stripe_invoice".
2020-07-14 22:35:47.935560 (MainThread): Opening a new connection, currently in state closed
2020-07-14 22:35:47.945426 (MainThread): Acquiring new bigquery connection "model.stripe_source.stg_stripe_fee".
2020-07-14 22:35:47.945502 (MainThread): Opening a new connection, currently in state closed
2020-07-14 22:35:47.954589 (MainThread): Acquiring new bigquery connection "model.stripe_source.stg_stripe_balance_transaction".
2020-07-14 22:35:47.954666 (MainThread): Opening a new connection, currently in state closed
2020-07-14 22:35:50.081883 (MainThread): Found 23 models, 16 tests, 0 snapshots, 0 analyses, 278 macros, 0 operations, 0 seed files, 13 sources
2020-07-14 22:35:50.120744 (MainThread): 
2020-07-14 22:35:50.121127 (MainThread): Acquiring new bigquery connection "master".
2020-07-14 22:35:50.121236 (MainThread): Opening a new connection, currently in state closed
2020-07-14 22:35:50.147525 (ThreadPoolExecutor-0_0): Acquiring new bigquery connection "list_dbt-package-testing".
2020-07-14 22:35:50.147661 (ThreadPoolExecutor-0_0): Opening a new connection, currently in state init
2020-07-14 22:35:50.149676 (ThreadPoolExecutor-0_0): Your application has authenticated using end user credentials from Google Cloud SDK. We recommend that most server applications use service accounts instead. If your application continues to use end user credentials from Cloud SDK, you might receive a "quota exceeded" or "API not enabled" error. For more information about service accounts, see https://cloud.google.com/docs/authentication/
2020-07-14 22:35:51.757546 (ThreadPoolExecutor-1_0): Acquiring new bigquery connection "list_dbt-package-testing_dbt_kristin_2".
2020-07-14 22:35:51.757732 (ThreadPoolExecutor-1_0): Re-using an available connection from the pool (formerly list_dbt-package-testing).
2020-07-14 22:35:51.757849 (ThreadPoolExecutor-1_0): Client.dataset is deprecated and will be removed in a future version. Use a string like 'my_project.my_dataset' or a cloud.google.bigquery.DatasetReference object, instead.
2020-07-14 22:35:51.931339 (MainThread): Acquiring new bigquery connection "master".
2020-07-14 22:35:51.931511 (MainThread): Opening a new connection, currently in state closed
2020-07-14 22:35:51.931849 (MainThread): 15:35:51 | Concurrency: 4 threads (target='dev_bigquery_dbt_testing')
2020-07-14 22:35:51.932012 (MainThread): 15:35:51 | 
2020-07-14 22:35:51.939372 (Thread-1): Began running node model.stripe_source.stg_stripe_charge
2020-07-14 22:35:51.939621 (Thread-2): Began running node model.stripe_source.stg_stripe_customer
2020-07-14 22:35:51.939783 (Thread-3): Began running node model.stripe_source.stg_stripe_balance_transaction
2020-07-14 22:35:51.939939 (Thread-1): 15:35:51 | 1 of 23 START table model dbt_kristin_2.stg_stripe_charge............ [RUN]
2020-07-14 22:35:51.940034 (Thread-4): Began running node model.stripe_source.stg_stripe_card
2020-07-14 22:35:51.940204 (Thread-2): 15:35:51 | 2 of 23 START table model dbt_kristin_2.stg_stripe_customer.......... [RUN]
2020-07-14 22:35:51.940342 (Thread-3): 15:35:51 | 3 of 23 START table model dbt_kristin_2.stg_stripe_balance_transaction [RUN]
2020-07-14 22:35:51.940687 (Thread-1): Acquiring new bigquery connection "model.stripe_source.stg_stripe_charge".
2020-07-14 22:35:51.940881 (Thread-4): 15:35:51 | 4 of 23 START table model dbt_kristin_2.stg_stripe_card.............. [RUN]
2020-07-14 22:35:51.941218 (Thread-2): Acquiring new bigquery connection "model.stripe_source.stg_stripe_customer".
2020-07-14 22:35:51.941409 (Thread-1): Re-using an available connection from the pool (formerly list_dbt-package-testing_dbt_kristin_2).
2020-07-14 22:35:51.941678 (Thread-3): Acquiring new bigquery connection "model.stripe_source.stg_stripe_balance_transaction".
2020-07-14 22:35:51.941964 (Thread-4): Acquiring new bigquery connection "model.stripe_source.stg_stripe_card".
2020-07-14 22:35:51.942110 (Thread-2): Opening a new connection, currently in state init
2020-07-14 22:35:51.942279 (Thread-1): Compiling model.stripe_source.stg_stripe_charge
2020-07-14 22:35:51.942416 (Thread-3): Opening a new connection, currently in state init
2020-07-14 22:35:51.942532 (Thread-4): Opening a new connection, currently in state init
2020-07-14 22:35:51.942655 (Thread-2): Compiling model.stripe_source.stg_stripe_customer
2020-07-14 22:35:51.954966 (Thread-3): Compiling model.stripe_source.stg_stripe_balance_transaction
2020-07-14 22:35:51.958471 (Thread-1): Writing injected SQL for node "model.stripe_source.stg_stripe_charge"
2020-07-14 22:35:51.958652 (Thread-4): Compiling model.stripe_source.stg_stripe_card
2020-07-14 22:35:51.971703 (Thread-2): Writing injected SQL for node "model.stripe_source.stg_stripe_customer"
2020-07-14 22:35:51.973430 (Thread-3): Writing injected SQL for node "model.stripe_source.stg_stripe_balance_transaction"
2020-07-14 22:35:51.980316 (Thread-4): Writing injected SQL for node "model.stripe_source.stg_stripe_card"
2020-07-14 22:35:51.980842 (Thread-2): finished collecting timing info
2020-07-14 22:35:51.981139 (Thread-1): finished collecting timing info
2020-07-14 22:35:52.003889 (Thread-3): finished collecting timing info
2020-07-14 22:35:52.010183 (Thread-4): finished collecting timing info
2020-07-14 22:35:52.023978 (Thread-1): Client.dataset is deprecated and will be removed in a future version. Use a string like 'my_project.my_dataset' or a cloud.google.bigquery.DatasetReference object, instead.
2020-07-14 22:35:52.027430 (Thread-3): Your application has authenticated using end user credentials from Google Cloud SDK. We recommend that most server applications use service accounts instead. If your application continues to use end user credentials from Cloud SDK, you might receive a "quota exceeded" or "API not enabled" error. For more information about service accounts, see https://cloud.google.com/docs/authentication/
2020-07-14 22:35:52.028249 (Thread-2): Your application has authenticated using end user credentials from Google Cloud SDK. We recommend that most server applications use service accounts instead. If your application continues to use end user credentials from Cloud SDK, you might receive a "quota exceeded" or "API not enabled" error. For more information about service accounts, see https://cloud.google.com/docs/authentication/
2020-07-14 22:35:52.031869 (Thread-4): Your application has authenticated using end user credentials from Google Cloud SDK. We recommend that most server applications use service accounts instead. If your application continues to use end user credentials from Cloud SDK, you might receive a "quota exceeded" or "API not enabled" error. For more information about service accounts, see https://cloud.google.com/docs/authentication/
2020-07-14 22:35:52.204225 (Thread-1): Writing runtime SQL for node "model.stripe_source.stg_stripe_charge"
2020-07-14 22:35:52.205073 (Thread-1): On model.stripe_source.stg_stripe_charge: /* {"app": "dbt", "dbt_version": "0.17.0rc1", "profile_name": "integration_test", "target_name": "dev_bigquery_dbt_testing", "node_id": "model.stripe_source.stg_stripe_charge"} */


  create or replace table `dbt-package-testing`.`dbt_kristin_2`.`stg_stripe_charge`
  
  
  OPTIONS()
  as (
    with charge as (

    select *
    from `dbt-package-testing`.`stripe`.`charge`

), fields as (

    select 
      id as charge_id, 
      amount,
      amount_refunded,
      application_fee_amount,
      balance_transaction_id,
      captured as is_captured,
      card_id,
      created as created_at,
      customer_id,
      currency,
      description,
      failure_code,
      failure_message,
      paid as is_paid,
      payment_intent_id,
      receipt_email,
      receipt_number,
      refunded as is_refunded,
      status,
      invoice_id
    from charge
    
)

select *
from fields
  );
    
2020-07-14 22:35:53.241013 (Thread-2): Client.dataset is deprecated and will be removed in a future version. Use a string like 'my_project.my_dataset' or a cloud.google.bigquery.DatasetReference object, instead.
2020-07-14 22:35:53.241356 (Thread-3): Client.dataset is deprecated and will be removed in a future version. Use a string like 'my_project.my_dataset' or a cloud.google.bigquery.DatasetReference object, instead.
2020-07-14 22:35:53.241600 (Thread-4): Client.dataset is deprecated and will be removed in a future version. Use a string like 'my_project.my_dataset' or a cloud.google.bigquery.DatasetReference object, instead.
2020-07-14 22:35:53.515527 (Thread-4): Writing runtime SQL for node "model.stripe_source.stg_stripe_card"
2020-07-14 22:35:53.516087 (Thread-4): On model.stripe_source.stg_stripe_card: /* {"app": "dbt", "dbt_version": "0.17.0rc1", "profile_name": "integration_test", "target_name": "dev_bigquery_dbt_testing", "node_id": "model.stripe_source.stg_stripe_card"} */


  create or replace table `dbt-package-testing`.`dbt_kristin_2`.`stg_stripe_card`
  
  
  OPTIONS()
  as (
    with card as (

    select *
    from `dbt-package-testing`.`stripe`.`card`

), fields as (

    select 
      id as card_id,
      brand,
      country,
      created as created_at,
      customer_id,
      name,
      recipient,
      funding
    from card
    where not coalesce(is_deleted, false)

)

select *
from fields
  );
    
2020-07-14 22:35:53.527349 (Thread-2): Writing runtime SQL for node "model.stripe_source.stg_stripe_customer"
2020-07-14 22:35:53.528263 (Thread-2): On model.stripe_source.stg_stripe_customer: /* {"app": "dbt", "dbt_version": "0.17.0rc1", "profile_name": "integration_test", "target_name": "dev_bigquery_dbt_testing", "node_id": "model.stripe_source.stg_stripe_customer"} */


  create or replace table `dbt-package-testing`.`dbt_kristin_2`.`stg_stripe_customer`
  
  
  OPTIONS()
  as (
    with customer as (

    select *
    from `dbt-package-testing`.`stripe`.`customer`

), fields as (

    select 
      id as customer_id,
      account_balance,
      created as created_at,
      currency,
      default_card_id,
      delinquent as is_deliguent,
      description,
      email,
      shipping_address_city,
      shipping_address_country,
      shipping_address_line_1,
      shipping_address_line_2,
      shipping_address_postal_code,
      shipping_address_state,
      shipping_name,
      shipping_phone
    from customer
    where not is_deleted

)

select *
from fields
  );
    
2020-07-14 22:35:53.540759 (Thread-3): Writing runtime SQL for node "model.stripe_source.stg_stripe_balance_transaction"
2020-07-14 22:35:53.541256 (Thread-3): On model.stripe_source.stg_stripe_balance_transaction: /* {"app": "dbt", "dbt_version": "0.17.0rc1", "profile_name": "integration_test", "target_name": "dev_bigquery_dbt_testing", "node_id": "model.stripe_source.stg_stripe_balance_transaction"} */


  create or replace table `dbt-package-testing`.`dbt_kristin_2`.`stg_stripe_balance_transaction`
  
  
  OPTIONS()
  as (
    with balance_transaction as (

    select *
    from `dbt-package-testing`.`stripe`.`balance_transaction`

), fields as (

    select 
      id as balance_transaction_id,
      amount,
      available_on,
      created as created_at,
      currency,
      description,
      exchange_rate,
      fee,
      net,
      source,
      status,
      type
    from balance_transaction
)

select *
from fields
  );
    
2020-07-14 22:35:54.119700 (Thread-1): finished collecting timing info
2020-07-14 22:35:54.120542 (Thread-1): Sending event: {'category': 'dbt', 'action': 'run_model', 'label': 'c0e710c7-783c-4220-89c9-fa47825d938c', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x10cb94250>]}
2020-07-14 22:35:54.120881 (Thread-1): 15:35:54 | 1 of 23 OK created table model dbt_kristin_2.stg_stripe_charge....... [CREATE TABLE (1485) in 2.18s]
2020-07-14 22:35:54.121044 (Thread-1): Finished running node model.stripe_source.stg_stripe_charge
2020-07-14 22:35:54.121213 (Thread-1): Began running node model.stripe_source.stg_stripe_payment_intent
2020-07-14 22:35:54.121642 (Thread-1): 15:35:54 | 5 of 23 START table model dbt_kristin_2.stg_stripe_payment_intent.... [RUN]
2020-07-14 22:35:54.122374 (Thread-1): Acquiring new bigquery connection "model.stripe_source.stg_stripe_payment_intent".
2020-07-14 22:35:54.122597 (Thread-1): Re-using an available connection from the pool (formerly model.stripe_source.stg_stripe_charge).
2020-07-14 22:35:54.122741 (Thread-1): Compiling model.stripe_source.stg_stripe_payment_intent
2020-07-14 22:35:54.132803 (Thread-1): Writing injected SQL for node "model.stripe_source.stg_stripe_payment_intent"
2020-07-14 22:35:54.133563 (Thread-1): finished collecting timing info
2020-07-14 22:35:54.172442 (Thread-1): Client.dataset is deprecated and will be removed in a future version. Use a string like 'my_project.my_dataset' or a cloud.google.bigquery.DatasetReference object, instead.
2020-07-14 22:35:54.316340 (Thread-1): Writing runtime SQL for node "model.stripe_source.stg_stripe_payment_intent"
2020-07-14 22:35:54.316795 (Thread-1): On model.stripe_source.stg_stripe_payment_intent: /* {"app": "dbt", "dbt_version": "0.17.0rc1", "profile_name": "integration_test", "target_name": "dev_bigquery_dbt_testing", "node_id": "model.stripe_source.stg_stripe_payment_intent"} */


  create or replace table `dbt-package-testing`.`dbt_kristin_2`.`stg_stripe_payment_intent`
  
  
  OPTIONS()
  as (
    with payment_intent as (

    select *
    from `dbt-package-testing`.`stripe`.`payment_intent`

), fields as (

    select 
      id as payment_intent_id,
      amount,
      amount_capturable,
      amount_received,
      application,
      application_fee_amount,
      canceled_at,
      cancellation_reason,
      capture_method,
      confirmation_method,
      created as created_at,
      currency,
      customer_id,
      description,
      payment_method_id,
      receipt_email,
      statement_descriptor,
      status
    from payment_intent

)

select *
from fields
  );
    
2020-07-14 22:35:55.322839 (Thread-3): finished collecting timing info
2020-07-14 22:35:55.323692 (Thread-3): Sending event: {'category': 'dbt', 'action': 'run_model', 'label': 'c0e710c7-783c-4220-89c9-fa47825d938c', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x10cdb9b20>]}
2020-07-14 22:35:55.324661 (Thread-3): 15:35:55 | 3 of 23 OK created table model dbt_kristin_2.stg_stripe_balance_transaction [CREATE TABLE (2124) in 3.38s]
2020-07-14 22:35:55.324852 (Thread-3): Finished running node model.stripe_source.stg_stripe_balance_transaction
2020-07-14 22:35:55.325029 (Thread-3): Began running node model.stripe_source.stg_stripe_payment_method
2020-07-14 22:35:55.325201 (Thread-3): 15:35:55 | 6 of 23 START table model dbt_kristin_2.stg_stripe_payment_method.... [RUN]
2020-07-14 22:35:55.325765 (Thread-3): Acquiring new bigquery connection "model.stripe_source.stg_stripe_payment_method".
2020-07-14 22:35:55.325889 (Thread-3): Re-using an available connection from the pool (formerly model.stripe_source.stg_stripe_balance_transaction).
2020-07-14 22:35:55.325999 (Thread-3): Compiling model.stripe_source.stg_stripe_payment_method
2020-07-14 22:35:55.328220 (Thread-2): finished collecting timing info
2020-07-14 22:35:55.336222 (Thread-3): Writing injected SQL for node "model.stripe_source.stg_stripe_payment_method"
2020-07-14 22:35:55.336862 (Thread-2): Sending event: {'category': 'dbt', 'action': 'run_model', 'label': 'c0e710c7-783c-4220-89c9-fa47825d938c', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x10cb379a0>]}
2020-07-14 22:35:55.337294 (Thread-2): 15:35:55 | 2 of 23 OK created table model dbt_kristin_2.stg_stripe_customer..... [CREATE TABLE (405) in 3.40s]
2020-07-14 22:35:55.337463 (Thread-2): Finished running node model.stripe_source.stg_stripe_customer
2020-07-14 22:35:55.337670 (Thread-2): Began running node model.stripe_source.stg_stripe_payout
2020-07-14 22:35:55.337844 (Thread-2): 15:35:55 | 7 of 23 START table model dbt_kristin_2.stg_stripe_payout............ [RUN]
2020-07-14 22:35:55.338236 (Thread-2): Acquiring new bigquery connection "model.stripe_source.stg_stripe_payout".
2020-07-14 22:35:55.338365 (Thread-2): Re-using an available connection from the pool (formerly model.stripe_source.stg_stripe_customer).
2020-07-14 22:35:55.338473 (Thread-2): Compiling model.stripe_source.stg_stripe_payout
2020-07-14 22:35:55.346737 (Thread-2): Writing injected SQL for node "model.stripe_source.stg_stripe_payout"
2020-07-14 22:35:55.347118 (Thread-3): finished collecting timing info
2020-07-14 22:35:55.351777 (Thread-3): Client.dataset is deprecated and will be removed in a future version. Use a string like 'my_project.my_dataset' or a cloud.google.bigquery.DatasetReference object, instead.
2020-07-14 22:35:55.352808 (Thread-2): finished collecting timing info
2020-07-14 22:35:55.359758 (Thread-2): Client.dataset is deprecated and will be removed in a future version. Use a string like 'my_project.my_dataset' or a cloud.google.bigquery.DatasetReference object, instead.
2020-07-14 22:35:55.373489 (Thread-4): finished collecting timing info
2020-07-14 22:35:55.374217 (Thread-4): Sending event: {'category': 'dbt', 'action': 'run_model', 'label': 'c0e710c7-783c-4220-89c9-fa47825d938c', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x10ca4d070>]}
2020-07-14 22:35:55.374492 (Thread-4): 15:35:55 | 4 of 23 OK created table model dbt_kristin_2.stg_stripe_card......... [CREATE TABLE (560) in 3.43s]
2020-07-14 22:35:55.374634 (Thread-4): Finished running node model.stripe_source.stg_stripe_card
2020-07-14 22:35:55.374779 (Thread-4): Began running node model.stripe_source.stg_stripe_refund
2020-07-14 22:35:55.375036 (Thread-4): 15:35:55 | 8 of 23 START table model dbt_kristin_2.stg_stripe_refund............ [RUN]
2020-07-14 22:35:55.375324 (Thread-4): Acquiring new bigquery connection "model.stripe_source.stg_stripe_refund".
2020-07-14 22:35:55.375424 (Thread-4): Re-using an available connection from the pool (formerly model.stripe_source.stg_stripe_card).
2020-07-14 22:35:55.375524 (Thread-4): Compiling model.stripe_source.stg_stripe_refund
2020-07-14 22:35:55.382904 (Thread-4): Writing injected SQL for node "model.stripe_source.stg_stripe_refund"
2020-07-14 22:35:55.383362 (Thread-4): finished collecting timing info
2020-07-14 22:35:55.388209 (Thread-4): Client.dataset is deprecated and will be removed in a future version. Use a string like 'my_project.my_dataset' or a cloud.google.bigquery.DatasetReference object, instead.
2020-07-14 22:35:55.508710 (Thread-2): Writing runtime SQL for node "model.stripe_source.stg_stripe_payout"
2020-07-14 22:35:55.510460 (Thread-3): Writing runtime SQL for node "model.stripe_source.stg_stripe_payment_method"
2020-07-14 22:35:55.511046 (Thread-2): On model.stripe_source.stg_stripe_payout: /* {"app": "dbt", "dbt_version": "0.17.0rc1", "profile_name": "integration_test", "target_name": "dev_bigquery_dbt_testing", "node_id": "model.stripe_source.stg_stripe_payout"} */


  create or replace table `dbt-package-testing`.`dbt_kristin_2`.`stg_stripe_payout`
  
  
  OPTIONS()
  as (
    with payout as (

    select *
    from `dbt-package-testing`.`stripe`.`payout`

), fields as (

    select 
      id as payout_id,
      amount,
      arrival_date,
      automatic as is_automatic,
      balance_transaction_id,
      created as created_at,
      currency,
      description,
      method,
      source_type,
      status,
      type
    from payout

)

select *
from fields
  );
    
2020-07-14 22:35:55.511644 (Thread-3): On model.stripe_source.stg_stripe_payment_method: /* {"app": "dbt", "dbt_version": "0.17.0rc1", "profile_name": "integration_test", "target_name": "dev_bigquery_dbt_testing", "node_id": "model.stripe_source.stg_stripe_payment_method"} */


  create or replace table `dbt-package-testing`.`dbt_kristin_2`.`stg_stripe_payment_method`
  
  
  OPTIONS()
  as (
    with payment_method as (

    select *
    from `dbt-package-testing`.`stripe`.`payment_method`

), fields as (

    select 
      id as payment_method_id,
      created as created_at,
      customer_id,
      type
    from payment_method
    where not is_deleted

)

select *
from fields
  );
    
2020-07-14 22:35:55.526802 (Thread-4): Writing runtime SQL for node "model.stripe_source.stg_stripe_refund"
2020-07-14 22:35:55.527318 (Thread-4): On model.stripe_source.stg_stripe_refund: /* {"app": "dbt", "dbt_version": "0.17.0rc1", "profile_name": "integration_test", "target_name": "dev_bigquery_dbt_testing", "node_id": "model.stripe_source.stg_stripe_refund"} */


  create or replace table `dbt-package-testing`.`dbt_kristin_2`.`stg_stripe_refund`
  
  
  OPTIONS()
  as (
    with refund as (

    select *
    from `dbt-package-testing`.`stripe`.`refund`

), fields as (

    select 
      id as refund_id,
      amount,
      balance_transaction_id,
      charge_id,
      created as created_at,
      currency,
      description,
      reason,
      receipt_number,
      status
    from refund

)

select *
from fields
  );
    
2020-07-14 22:35:55.874824 (Thread-1): finished collecting timing info
2020-07-14 22:35:55.875647 (Thread-1): Sending event: {'category': 'dbt', 'action': 'run_model', 'label': 'c0e710c7-783c-4220-89c9-fa47825d938c', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x10cd24b20>]}
2020-07-14 22:35:55.875957 (Thread-1): 15:35:55 | 5 of 23 OK created table model dbt_kristin_2.stg_stripe_payment_intent [CREATE TABLE (205) in 1.75s]
2020-07-14 22:35:55.876126 (Thread-1): Finished running node model.stripe_source.stg_stripe_payment_intent
2020-07-14 22:35:55.876268 (Thread-1): Began running node model.stripe_source.stg_stripe_invoice
2020-07-14 22:35:55.876409 (Thread-1): 15:35:55 | 9 of 23 START table model dbt_kristin_2.stg_stripe_invoice........... [RUN]
2020-07-14 22:35:55.876787 (Thread-1): Acquiring new bigquery connection "model.stripe_source.stg_stripe_invoice".
2020-07-14 22:35:55.876902 (Thread-1): Re-using an available connection from the pool (formerly model.stripe_source.stg_stripe_payment_intent).
2020-07-14 22:35:55.877004 (Thread-1): Compiling model.stripe_source.stg_stripe_invoice
2020-07-14 22:35:55.885478 (Thread-1): Writing injected SQL for node "model.stripe_source.stg_stripe_invoice"
2020-07-14 22:35:55.885975 (Thread-1): finished collecting timing info
2020-07-14 22:35:55.890710 (Thread-1): Client.dataset is deprecated and will be removed in a future version. Use a string like 'my_project.my_dataset' or a cloud.google.bigquery.DatasetReference object, instead.
2020-07-14 22:35:56.021940 (Thread-1): Writing runtime SQL for node "model.stripe_source.stg_stripe_invoice"
2020-07-14 22:35:56.022805 (Thread-1): On model.stripe_source.stg_stripe_invoice: /* {"app": "dbt", "dbt_version": "0.17.0rc1", "profile_name": "integration_test", "target_name": "dev_bigquery_dbt_testing", "node_id": "model.stripe_source.stg_stripe_invoice"} */


  create or replace table `dbt-package-testing`.`dbt_kristin_2`.`stg_stripe_invoice`
  
  
  OPTIONS()
  as (
    

with invoice as (

    select *
    from `dbt-package-testing`.`stripe`.`invoice`

), fields as (

    select
      id as invoice_id,
      amount_due,
      amount_paid,
      amount_remaining,
      attempt_count,
      auto_advance,
      billing_reason,
      charge_id,
      created as created_at,
      currency,
      customer_id,
      description,
      due_date,
      number,
      paid as is_paid,
      receipt_number,
      status,
      subtotal,
      tax,
      tax_percent,
      total
    from invoice
    where not coalesce(is_deleted, false)

)

select * from fields
  );
    
2020-07-14 22:35:57.292334 (Thread-4): finished collecting timing info
2020-07-14 22:35:57.293068 (Thread-4): Sending event: {'category': 'dbt', 'action': 'run_model', 'label': 'c0e710c7-783c-4220-89c9-fa47825d938c', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x10cee1b50>]}
2020-07-14 22:35:57.293346 (Thread-4): 15:35:57 | 8 of 23 OK created table model dbt_kristin_2.stg_stripe_refund....... [CREATE TABLE (31) in 1.92s]
2020-07-14 22:35:57.293495 (Thread-4): Finished running node model.stripe_source.stg_stripe_refund
2020-07-14 22:35:57.293646 (Thread-4): Began running node model.stripe_source.stg_stripe_invoice_line_item
2020-07-14 22:35:57.293897 (Thread-4): 15:35:57 | 10 of 23 START table model dbt_kristin_2.stg_stripe_invoice_line_item [RUN]
2020-07-14 22:35:57.294200 (Thread-4): Acquiring new bigquery connection "model.stripe_source.stg_stripe_invoice_line_item".
2020-07-14 22:35:57.294306 (Thread-4): Re-using an available connection from the pool (formerly model.stripe_source.stg_stripe_refund).
2020-07-14 22:35:57.294409 (Thread-4): Compiling model.stripe_source.stg_stripe_invoice_line_item
2020-07-14 22:35:57.303016 (Thread-4): Writing injected SQL for node "model.stripe_source.stg_stripe_invoice_line_item"
2020-07-14 22:35:57.303682 (Thread-4): finished collecting timing info
2020-07-14 22:35:57.308143 (Thread-4): Client.dataset is deprecated and will be removed in a future version. Use a string like 'my_project.my_dataset' or a cloud.google.bigquery.DatasetReference object, instead.
2020-07-14 22:35:57.320005 (Thread-2): finished collecting timing info
2020-07-14 22:35:57.320778 (Thread-2): Sending event: {'category': 'dbt', 'action': 'run_model', 'label': 'c0e710c7-783c-4220-89c9-fa47825d938c', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x10ccfa880>]}
2020-07-14 22:35:57.321069 (Thread-2): 15:35:57 | 7 of 23 OK created table model dbt_kristin_2.stg_stripe_payout....... [CREATE TABLE (836) in 1.98s]
2020-07-14 22:35:57.321215 (Thread-2): Finished running node model.stripe_source.stg_stripe_payout
2020-07-14 22:35:57.321362 (Thread-2): Began running node model.stripe_source.stg_stripe_subscription
2020-07-14 22:35:57.321708 (Thread-2): 15:35:57 | 11 of 23 START table model dbt_kristin_2.stg_stripe_subscription..... [RUN]
2020-07-14 22:35:57.322103 (Thread-2): Acquiring new bigquery connection "model.stripe_source.stg_stripe_subscription".
2020-07-14 22:35:57.322218 (Thread-2): Re-using an available connection from the pool (formerly model.stripe_source.stg_stripe_payout).
2020-07-14 22:35:57.322321 (Thread-2): Compiling model.stripe_source.stg_stripe_subscription
2020-07-14 22:35:57.331014 (Thread-2): Writing injected SQL for node "model.stripe_source.stg_stripe_subscription"
2020-07-14 22:35:57.331467 (Thread-2): finished collecting timing info
2020-07-14 22:35:57.335335 (Thread-2): Client.dataset is deprecated and will be removed in a future version. Use a string like 'my_project.my_dataset' or a cloud.google.bigquery.DatasetReference object, instead.
2020-07-14 22:35:57.433045 (Thread-3): finished collecting timing info
2020-07-14 22:35:57.433867 (Thread-3): Sending event: {'category': 'dbt', 'action': 'run_model', 'label': 'c0e710c7-783c-4220-89c9-fa47825d938c', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x10cd1a910>]}
2020-07-14 22:35:57.434169 (Thread-3): 15:35:57 | 6 of 23 OK created table model dbt_kristin_2.stg_stripe_payment_method [CREATE TABLE (214) in 2.11s]
2020-07-14 22:35:57.434338 (Thread-3): Finished running node model.stripe_source.stg_stripe_payment_method
2020-07-14 22:35:57.434509 (Thread-3): Began running node model.stripe_source.stg_stripe_fee
2020-07-14 22:35:57.434813 (Thread-3): 15:35:57 | 12 of 23 START table model dbt_kristin_2.stg_stripe_fee.............. [RUN]
2020-07-14 22:35:57.435174 (Thread-3): Acquiring new bigquery connection "model.stripe_source.stg_stripe_fee".
2020-07-14 22:35:57.435413 (Thread-3): Re-using an available connection from the pool (formerly model.stripe_source.stg_stripe_payment_method).
2020-07-14 22:35:57.435563 (Thread-3): Compiling model.stripe_source.stg_stripe_fee
2020-07-14 22:35:57.444671 (Thread-3): Writing injected SQL for node "model.stripe_source.stg_stripe_fee"
2020-07-14 22:35:57.446420 (Thread-4): Writing runtime SQL for node "model.stripe_source.stg_stripe_invoice_line_item"
2020-07-14 22:35:57.446843 (Thread-3): finished collecting timing info
2020-07-14 22:35:57.451190 (Thread-3): Client.dataset is deprecated and will be removed in a future version. Use a string like 'my_project.my_dataset' or a cloud.google.bigquery.DatasetReference object, instead.
2020-07-14 22:35:57.452016 (Thread-4): On model.stripe_source.stg_stripe_invoice_line_item: /* {"app": "dbt", "dbt_version": "0.17.0rc1", "profile_name": "integration_test", "target_name": "dev_bigquery_dbt_testing", "node_id": "model.stripe_source.stg_stripe_invoice_line_item"} */


  create or replace table `dbt-package-testing`.`dbt_kristin_2`.`stg_stripe_invoice_line_item`
  
  
  OPTIONS()
  as (
    

with invoice_line_item as (

    select *
    from `dbt-package-testing`.`stripe`.`invoice_line_item`

), fields as (

    select
      id as invoice_line_item_id,
      invoice_id,
      amount,
      currency,
      description,
      discountable as is_discountable,
      plan_id,
      proration,
      quantity,
      subscription_id,
      subscription_item_id,
      type,
      unique_id
    from invoice_line_item
    where id not like 'sub%'

)

select * from fields
  );
    
2020-07-14 22:35:57.470336 (Thread-2): Writing runtime SQL for node "model.stripe_source.stg_stripe_subscription"
2020-07-14 22:35:57.470921 (Thread-2): On model.stripe_source.stg_stripe_subscription: /* {"app": "dbt", "dbt_version": "0.17.0rc1", "profile_name": "integration_test", "target_name": "dev_bigquery_dbt_testing", "node_id": "model.stripe_source.stg_stripe_subscription"} */


  create or replace table `dbt-package-testing`.`dbt_kristin_2`.`stg_stripe_subscription`
  
  
  OPTIONS()
  as (
    

with subscription as (

    select *
    from `dbt-package-testing`.`stripe`.`subscription`

), fields as (

    select
      id as subscription_id,
      status,
      billing,
      billing_cycle_anchor,
      cancel_at,
      cancel_at_period_end,
      canceled_at,
      created as created_at,
      current_period_start,
      current_period_end,
      customer_id,
      days_until_due,
      start_date,
      ended_at
    from subscription

)

select * from fields
  );
    
2020-07-14 22:35:57.694024 (Thread-3): Writing runtime SQL for node "model.stripe_source.stg_stripe_fee"
2020-07-14 22:35:57.694548 (Thread-3): On model.stripe_source.stg_stripe_fee: /* {"app": "dbt", "dbt_version": "0.17.0rc1", "profile_name": "integration_test", "target_name": "dev_bigquery_dbt_testing", "node_id": "model.stripe_source.stg_stripe_fee"} */


  create or replace table `dbt-package-testing`.`dbt_kristin_2`.`stg_stripe_fee`
  
  
  OPTIONS()
  as (
    with fee as (

    select *
    from `dbt-package-testing`.`stripe`.`fee`

), fields as (

    select 
      balance_transaction_id,
      amount,
      application,
      currency,
      description,
      type
    from fee

)

select *
from fields
  );
    
2020-07-14 22:35:58.002247 (Thread-1): finished collecting timing info
2020-07-14 22:35:58.003011 (Thread-1): Sending event: {'category': 'dbt', 'action': 'run_model', 'label': 'c0e710c7-783c-4220-89c9-fa47825d938c', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x10cd542b0>]}
2020-07-14 22:35:58.003276 (Thread-1): 15:35:58 | 9 of 23 OK created table model dbt_kristin_2.stg_stripe_invoice...... [CREATE TABLE (492) in 2.13s]
2020-07-14 22:35:58.003476 (Thread-1): Finished running node model.stripe_source.stg_stripe_invoice
2020-07-14 22:35:58.003720 (Thread-1): Began running node model.stripe_source.stg_stripe_payment_method_card
2020-07-14 22:35:58.003893 (Thread-1): 15:35:58 | 13 of 23 START table model dbt_kristin_2.stg_stripe_payment_method_card [RUN]
2020-07-14 22:35:58.004301 (Thread-1): Acquiring new bigquery connection "model.stripe_source.stg_stripe_payment_method_card".
2020-07-14 22:35:58.004418 (Thread-1): Re-using an available connection from the pool (formerly model.stripe_source.stg_stripe_invoice).
2020-07-14 22:35:58.004525 (Thread-1): Compiling model.stripe_source.stg_stripe_payment_method_card
2020-07-14 22:35:58.012525 (Thread-1): Writing injected SQL for node "model.stripe_source.stg_stripe_payment_method_card"
2020-07-14 22:35:58.013036 (Thread-1): finished collecting timing info
2020-07-14 22:35:58.017776 (Thread-1): Client.dataset is deprecated and will be removed in a future version. Use a string like 'my_project.my_dataset' or a cloud.google.bigquery.DatasetReference object, instead.
2020-07-14 22:35:58.142708 (Thread-1): Writing runtime SQL for node "model.stripe_source.stg_stripe_payment_method_card"
2020-07-14 22:35:58.143066 (Thread-1): On model.stripe_source.stg_stripe_payment_method_card: /* {"app": "dbt", "dbt_version": "0.17.0rc1", "profile_name": "integration_test", "target_name": "dev_bigquery_dbt_testing", "node_id": "model.stripe_source.stg_stripe_payment_method_card"} */


  create or replace table `dbt-package-testing`.`dbt_kristin_2`.`stg_stripe_payment_method_card`
  
  
  OPTIONS()
  as (
    with payment_method_card as (

    select *
    from `dbt-package-testing`.`stripe`.`payment_method_card`

), fields as (

    select 
      payment_method_id,
      brand,
      funding
    from payment_method_card

)

select *
from fields
  );
    
2020-07-14 22:35:59.017032 (Thread-4): finished collecting timing info
2020-07-14 22:35:59.017723 (Thread-4): Sending event: {'category': 'dbt', 'action': 'run_model', 'label': 'c0e710c7-783c-4220-89c9-fa47825d938c', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x10caa4a90>]}
2020-07-14 22:35:59.017982 (Thread-4): 15:35:59 | 10 of 23 OK created table model dbt_kristin_2.stg_stripe_invoice_line_item [CREATE TABLE (33) in 1.72s]
2020-07-14 22:35:59.018121 (Thread-4): Finished running node model.stripe_source.stg_stripe_invoice_line_item
2020-07-14 22:35:59.018264 (Thread-4): Began running node model.stripe.stripe_incomplete_charges
2020-07-14 22:35:59.018405 (Thread-4): 15:35:59 | 14 of 23 START table model dbt_kristin_2.stripe_incomplete_charges... [RUN]
2020-07-14 22:35:59.018807 (Thread-4): Acquiring new bigquery connection "model.stripe.stripe_incomplete_charges".
2020-07-14 22:35:59.018922 (Thread-4): Re-using an available connection from the pool (formerly model.stripe_source.stg_stripe_invoice_line_item).
2020-07-14 22:35:59.019024 (Thread-4): Compiling model.stripe.stripe_incomplete_charges
2020-07-14 22:35:59.027394 (Thread-4): Writing injected SQL for node "model.stripe.stripe_incomplete_charges"
2020-07-14 22:35:59.027885 (Thread-4): finished collecting timing info
2020-07-14 22:35:59.032097 (Thread-4): Client.dataset is deprecated and will be removed in a future version. Use a string like 'my_project.my_dataset' or a cloud.google.bigquery.DatasetReference object, instead.
2020-07-14 22:35:59.135506 (Thread-4): Writing runtime SQL for node "model.stripe.stripe_incomplete_charges"
2020-07-14 22:35:59.136006 (Thread-4): On model.stripe.stripe_incomplete_charges: /* {"app": "dbt", "dbt_version": "0.17.0rc1", "profile_name": "integration_test", "target_name": "dev_bigquery_dbt_testing", "node_id": "model.stripe.stripe_incomplete_charges"} */


  create or replace table `dbt-package-testing`.`dbt_kristin_2`.`stripe_incomplete_charges`
  
  
  OPTIONS()
  as (
    with charge as (

    select *
    from `dbt-package-testing`.`dbt_kristin_2`.`stg_stripe_charge`

)

select 
  created_at,
  customer_id,
  amount
from charge
where not is_captured
  );
    
2020-07-14 22:35:59.231710 (Thread-3): finished collecting timing info
2020-07-14 22:35:59.232412 (Thread-3): Sending event: {'category': 'dbt', 'action': 'run_model', 'label': 'c0e710c7-783c-4220-89c9-fa47825d938c', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x10c9e1220>]}
2020-07-14 22:35:59.232679 (Thread-3): 15:35:59 | 12 of 23 OK created table model dbt_kristin_2.stg_stripe_fee......... [CREATE TABLE (1227) in 1.80s]
2020-07-14 22:35:59.232821 (Thread-3): Finished running node model.stripe_source.stg_stripe_fee
2020-07-14 22:35:59.232968 (Thread-3): Began running node model.stripe.stripe_balance_transaction_joined
2020-07-14 22:35:59.233110 (Thread-3): 15:35:59 | 15 of 23 START table model dbt_kristin_2.stripe_balance_transaction_joined [RUN]
2020-07-14 22:35:59.233373 (Thread-3): Acquiring new bigquery connection "model.stripe.stripe_balance_transaction_joined".
2020-07-14 22:35:59.233559 (Thread-3): Re-using an available connection from the pool (formerly model.stripe_source.stg_stripe_fee).
2020-07-14 22:35:59.233684 (Thread-3): Compiling model.stripe.stripe_balance_transaction_joined
2020-07-14 22:35:59.247080 (Thread-2): finished collecting timing info
2020-07-14 22:35:59.253282 (Thread-2): Sending event: {'category': 'dbt', 'action': 'run_model', 'label': 'c0e710c7-783c-4220-89c9-fa47825d938c', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x10ccd79d0>]}
2020-07-14 22:35:59.253553 (Thread-2): 15:35:59 | 11 of 23 OK created table model dbt_kristin_2.stg_stripe_subscription [CREATE TABLE (49) in 1.93s]
2020-07-14 22:35:59.253752 (Thread-2): Finished running node model.stripe_source.stg_stripe_subscription
2020-07-14 22:35:59.256279 (Thread-3): Writing injected SQL for node "model.stripe.stripe_balance_transaction_joined"
2020-07-14 22:35:59.256878 (Thread-2): Began running node model.stripe.stripe_invoice_details
2020-07-14 22:35:59.257062 (Thread-2): 15:35:59 | 16 of 23 START table model dbt_kristin_2.stripe_invoice_details...... [RUN]
2020-07-14 22:35:59.257455 (Thread-2): Acquiring new bigquery connection "model.stripe.stripe_invoice_details".
2020-07-14 22:35:59.257573 (Thread-2): Re-using an available connection from the pool (formerly model.stripe_source.stg_stripe_subscription).
2020-07-14 22:35:59.257711 (Thread-2): Compiling model.stripe.stripe_invoice_details
2020-07-14 22:35:59.258019 (Thread-3): finished collecting timing info
2020-07-14 22:35:59.273550 (Thread-3): Client.dataset is deprecated and will be removed in a future version. Use a string like 'my_project.my_dataset' or a cloud.google.bigquery.DatasetReference object, instead.
2020-07-14 22:35:59.288312 (Thread-2): Writing injected SQL for node "model.stripe.stripe_invoice_details"
2020-07-14 22:35:59.289450 (Thread-2): finished collecting timing info
2020-07-14 22:35:59.294763 (Thread-2): Client.dataset is deprecated and will be removed in a future version. Use a string like 'my_project.my_dataset' or a cloud.google.bigquery.DatasetReference object, instead.
2020-07-14 22:35:59.416497 (Thread-2): Writing runtime SQL for node "model.stripe.stripe_invoice_details"
2020-07-14 22:35:59.416995 (Thread-2): On model.stripe.stripe_invoice_details: /* {"app": "dbt", "dbt_version": "0.17.0rc1", "profile_name": "integration_test", "target_name": "dev_bigquery_dbt_testing", "node_id": "model.stripe.stripe_invoice_details"} */


  create or replace table `dbt-package-testing`.`dbt_kristin_2`.`stripe_invoice_details`
  
  
  OPTIONS()
  as (
    

with invoice as (

    select *
    from `dbt-package-testing`.`dbt_kristin_2`.`stg_stripe_invoice`  

), charge as (

    select *
    from `dbt-package-testing`.`dbt_kristin_2`.`stg_stripe_charge`  

), invoice_line_item as (

    select *
    from `dbt-package-testing`.`dbt_kristin_2`.`stg_stripe_invoice_line_item`  

), subscription as (

    select *
    from `dbt-package-testing`.`dbt_kristin_2`.`stg_stripe_subscription`  

), customer as (

    select *
    from `dbt-package-testing`.`dbt_kristin_2`.`stg_stripe_customer`  

)

select 
  invoice.invoice_id,
  invoice.number,
  invoice.created_at as invoice_created_at,
  invoice.status,
  invoice.due_date,
  invoice.amount_due,
  invoice.subtotal,
  invoice.tax,
  invoice.total,
  invoice.amount_paid,
  invoice.amount_remaining,
  invoice.attempt_count,
  invoice.description as invoice_memo,
  invoice_line_item.description as line_item_desc,
  invoice_line_item.amount as line_item_amount,
  invoice_line_item.quantity,
  charge.balance_transaction_id,
  charge.amount as charge_amount, 
  charge.status as charge_status,
  charge.created_at as charge_created_at,
  customer.description as customer_description,
  customer.email as customer_email,
  subscription.subscription_id,
  subscription.billing as subcription_billing,
  subscription.start_date as subscription_start_date,
  subscription.ended_at as subscription_ended_at
from invoice
left join charge on charge.charge_id = invoice.charge_id
left join invoice_line_item on invoice.invoice_id = invoice_line_item.invoice_id
left join subscription on invoice_line_item.subscription_id = subscription.subscription_id
left join customer on invoice.customer_id = customer.customer_id
order by invoice.created_at desc
  );
    
2020-07-14 22:35:59.443385 (Thread-3): Writing runtime SQL for node "model.stripe.stripe_balance_transaction_joined"
2020-07-14 22:35:59.443893 (Thread-3): On model.stripe.stripe_balance_transaction_joined: /* {"app": "dbt", "dbt_version": "0.17.0rc1", "profile_name": "integration_test", "target_name": "dev_bigquery_dbt_testing", "node_id": "model.stripe.stripe_balance_transaction_joined"} */


  create or replace table `dbt-package-testing`.`dbt_kristin_2`.`stripe_balance_transaction_joined`
  
  
  OPTIONS()
  as (
    with balance_transaction as (

    select *
    from `dbt-package-testing`.`dbt_kristin_2`.`stg_stripe_balance_transaction`
  
), charge as (

    select *
    from `dbt-package-testing`.`dbt_kristin_2`.`stg_stripe_charge`

), payment_intent as (

    select *
    from `dbt-package-testing`.`dbt_kristin_2`.`stg_stripe_payment_intent`

), payment_method as (

    select *
    from `dbt-package-testing`.`dbt_kristin_2`.`stg_stripe_payment_method`

), card as (

    select *
    from `dbt-package-testing`.`dbt_kristin_2`.`stg_stripe_card`

), payout as (

    select *
    from `dbt-package-testing`.`dbt_kristin_2`.`stg_stripe_payout`

), refund as (

    select *
    from `dbt-package-testing`.`dbt_kristin_2`.`stg_stripe_refund`

), customer as (

    select *
    from `dbt-package-testing`.`dbt_kristin_2`.`stg_stripe_customer`


)

select 
  balance_transaction.balance_transaction_id,
  balance_transaction.created_at,
  balance_transaction.available_on,
  balance_transaction.currency,
  balance_transaction.amount,
  balance_transaction.fee,
  balance_transaction.net,
  balance_transaction.type,
  case
    when balance_transaction.type in ('charge', 'payment') then 'charge'
    when balance_transaction.type in ('refund', 'payment_refund') then 'refund'
    when balance_transaction.type in ('payout_cancel', 'payout_failure')	then 'payout_reversal'
    when balance_transaction.type in ('transfer', 'recipient_transfer') then	'transfer'
    when balance_transaction.type in ('transfer_cancel', 'transfer_failure', 'recipient_transfer_cancel', 'recipient_transfer_failure') then 'transfer_reversal'
    else balance_transaction.type
  end as reporting_category,
  balance_transaction.source,
  balance_transaction.description,
  case when balance_transaction.type = 'charge' then charge.amount end as customer_facing_amount, --think this might be the charge amount/currency
  case when balance_transaction.type = 'charge' then charge.currency end as customer_facing_currency,
  date_add(date(balance_transaction.available_on), interval 1 day) as effective_at,
  coalesce(charge.customer_id, refund_charge.customer_id) as customer_id,
  charge.receipt_email,
  customer.description as customer_description,
  charge.charge_id,
  charge.payment_intent_id,
  charge.created_at as charge_created_at,
  payment_method.type as payment_method_type,
  card.brand as card_brand,
  card.funding as card_funding,
  card.country as card_country,
  payout.payout_id,
  payout.arrival_date as payout_expeted_arrival_date,
  payout.status as payout_status,
  payout.type as payout_type,
  payout.description as payout_description,
  refund.reason as refund_reason
from balance_transaction
left join charge on charge.balance_transaction_id = balance_transaction.balance_transaction_id
left join customer on charge.customer_id = customer.customer_id
left join payment_intent on charge.payment_intent_id = payment_intent.payment_intent_id
left join payment_method on payment_intent.payment_method_id = payment_method.payment_method_id
left join card on charge.card_id = card.card_id
left join payout on payout.balance_transaction_id = balance_transaction.balance_transaction_id
left join refund on refund.balance_transaction_id = balance_transaction.balance_transaction_id
left join charge as refund_charge on refund.charge_id = refund_charge.charge_id
order by created_at desc
  );
    
2020-07-14 22:35:59.860483 (Thread-1): finished collecting timing info
2020-07-14 22:35:59.861322 (Thread-1): Sending event: {'category': 'dbt', 'action': 'run_model', 'label': 'c0e710c7-783c-4220-89c9-fa47825d938c', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x10cc17490>]}
2020-07-14 22:35:59.861639 (Thread-1): 15:35:59 | 13 of 23 OK created table model dbt_kristin_2.stg_stripe_payment_method_card [CREATE TABLE (214) in 1.86s]
2020-07-14 22:35:59.861806 (Thread-1): Finished running node model.stripe_source.stg_stripe_payment_method_card
2020-07-14 22:35:59.861957 (Thread-1): Began running node model.stripe.stripe_subscription_details
2020-07-14 22:35:59.862209 (Thread-1): 15:35:59 | 17 of 23 START table model dbt_kristin_2.stripe_subscription_details. [RUN]
2020-07-14 22:35:59.862498 (Thread-1): Acquiring new bigquery connection "model.stripe.stripe_subscription_details".
2020-07-14 22:35:59.862600 (Thread-1): Re-using an available connection from the pool (formerly model.stripe_source.stg_stripe_payment_method_card).
2020-07-14 22:35:59.862700 (Thread-1): Compiling model.stripe.stripe_subscription_details
2020-07-14 22:35:59.885438 (Thread-1): Writing injected SQL for node "model.stripe.stripe_subscription_details"
2020-07-14 22:35:59.885927 (Thread-1): finished collecting timing info
2020-07-14 22:35:59.891710 (Thread-1): Client.dataset is deprecated and will be removed in a future version. Use a string like 'my_project.my_dataset' or a cloud.google.bigquery.DatasetReference object, instead.
2020-07-14 22:36:00.035542 (Thread-1): Writing runtime SQL for node "model.stripe.stripe_subscription_details"
2020-07-14 22:36:00.036283 (Thread-1): On model.stripe.stripe_subscription_details: /* {"app": "dbt", "dbt_version": "0.17.0rc1", "profile_name": "integration_test", "target_name": "dev_bigquery_dbt_testing", "node_id": "model.stripe.stripe_subscription_details"} */


  create or replace table `dbt-package-testing`.`dbt_kristin_2`.`stripe_subscription_details`
  
  
  OPTIONS()
  as (
    

with invoice as (

    select *
    from `dbt-package-testing`.`dbt_kristin_2`.`stg_stripe_invoice`  

), charge as (

    select *
    from `dbt-package-testing`.`dbt_kristin_2`.`stg_stripe_charge`  

), invoice_line_item as (

    select *
    from `dbt-package-testing`.`dbt_kristin_2`.`stg_stripe_invoice_line_item`  

), subscription as (

    select *
    from `dbt-package-testing`.`dbt_kristin_2`.`stg_stripe_subscription`  

), customer as (

    select *
    from `dbt-package-testing`.`dbt_kristin_2`.`stg_stripe_customer`  

), line_items_groups as (

  select
    invoice.invoice_id,
    invoice.amount_due,
    invoice.amount_paid,
    invoice.amount_remaining,
    invoice.created_at,
    max(invoice_line_item.subscription_id) as subscription_id,
    sum(invoice_line_item.amount) as total_item_amount,
    count(distinct invoice_line_item.unique_id) as number_line_items
  from invoice_line_item
  join invoice on invoice.invoice_id = invoice_line_item.invoice_id
  group by 1, 2, 3, 4, 5

), grouped_by_subcription as (

  select
    subscription_id,
    count(distinct invoice_id) as number_invoices_generated,
    sum(amount_due) as total_amount_billed,
    sum(amount_paid) as total_amount_paid,
    sum(amount_remaining) total_amount_remaining,
    max(created_at) as most_recent_invoice_created_at,
    avg(amount_due) as average_invoice_amount,
    avg(total_item_amount) as average_line_item_amount,
    avg(number_line_items) as avg_num_invoice_items
  from line_items_groups
  group by 1

)


select
  subscription.subscription_id,
  subscription.customer_id,
  customer.description as customer_description,
  customer.email as customer_email,
  subscription.status,
  subscription.start_date,
  subscription.ended_at,
  subscription.billing,
  subscription.billing_cycle_anchor,
  subscription.canceled_at,
  subscription.created_at,
  subscription.current_period_start,
  subscription.current_period_end,
  subscription.days_until_due,
  subscription.cancel_at_period_end,
  subscription.cancel_at,
  number_invoices_generated,
  total_amount_billed,
  total_amount_paid,
  total_amount_remaining,
  most_recent_invoice_created_at,
  average_invoice_amount,
  average_line_item_amount,
  avg_num_invoice_items
from subscription
left join grouped_by_subcription on subscription.subscription_id = grouped_by_subcription.subscription_id
left join customer on subscription.customer_id = customer.customer_id
order by subscription.created_at desc
  );
    
2020-07-14 22:36:01.123529 (Thread-4): finished collecting timing info
2020-07-14 22:36:01.124389 (Thread-4): Sending event: {'category': 'dbt', 'action': 'run_model', 'label': 'c0e710c7-783c-4220-89c9-fa47825d938c', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x10ccef040>]}
2020-07-14 22:36:01.124697 (Thread-4): 15:36:01 | 14 of 23 OK created table model dbt_kristin_2.stripe_incomplete_charges [CREATE TABLE (286) in 2.11s]
2020-07-14 22:36:01.124867 (Thread-4): Finished running node model.stripe.stripe_incomplete_charges
2020-07-14 22:36:01.544266 (Thread-3): finished collecting timing info
2020-07-14 22:36:01.544960 (Thread-3): Sending event: {'category': 'dbt', 'action': 'run_model', 'label': 'c0e710c7-783c-4220-89c9-fa47825d938c', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x10ccd7580>]}
2020-07-14 22:36:01.545209 (Thread-3): 15:36:01 | 15 of 23 OK created table model dbt_kristin_2.stripe_balance_transaction_joined [CREATE TABLE (2124) in 2.31s]
2020-07-14 22:36:01.545345 (Thread-3): Finished running node model.stripe.stripe_balance_transaction_joined
2020-07-14 22:36:01.545817 (Thread-4): Began running node model.stripe.stripe_balance_transactions
2020-07-14 22:36:01.545984 (Thread-4): 15:36:01 | 18 of 23 START table model dbt_kristin_2.stripe_balance_transactions. [RUN]
2020-07-14 22:36:01.546135 (Thread-3): Began running node model.stripe.stripe_customer_overview
2020-07-14 22:36:01.546438 (Thread-4): Acquiring new bigquery connection "model.stripe.stripe_balance_transactions".
2020-07-14 22:36:01.546556 (Thread-3): 15:36:01 | 19 of 23 START table model dbt_kristin_2.stripe_customer_overview.... [RUN]
2020-07-14 22:36:01.546671 (Thread-4): Re-using an available connection from the pool (formerly model.stripe.stripe_incomplete_charges).
2020-07-14 22:36:01.546987 (Thread-3): Acquiring new bigquery connection "model.stripe.stripe_customer_overview".
2020-07-14 22:36:01.547113 (Thread-4): Compiling model.stripe.stripe_balance_transactions
2020-07-14 22:36:01.547216 (Thread-3): Re-using an available connection from the pool (formerly model.stripe.stripe_balance_transaction_joined).
2020-07-14 22:36:01.552442 (Thread-3): Compiling model.stripe.stripe_customer_overview
2020-07-14 22:36:01.584555 (Thread-4): Writing injected SQL for node "model.stripe.stripe_balance_transactions"
2020-07-14 22:36:01.590040 (Thread-3): Writing injected SQL for node "model.stripe.stripe_customer_overview"
2020-07-14 22:36:01.590405 (Thread-4): finished collecting timing info
2020-07-14 22:36:01.595425 (Thread-4): Client.dataset is deprecated and will be removed in a future version. Use a string like 'my_project.my_dataset' or a cloud.google.bigquery.DatasetReference object, instead.
2020-07-14 22:36:01.596194 (Thread-3): finished collecting timing info
2020-07-14 22:36:01.601850 (Thread-3): Client.dataset is deprecated and will be removed in a future version. Use a string like 'my_project.my_dataset' or a cloud.google.bigquery.DatasetReference object, instead.
2020-07-14 22:36:01.663111 (Thread-2): finished collecting timing info
2020-07-14 22:36:01.663834 (Thread-2): Sending event: {'category': 'dbt', 'action': 'run_model', 'label': 'c0e710c7-783c-4220-89c9-fa47825d938c', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x10cdb3d60>]}
2020-07-14 22:36:01.664099 (Thread-2): 15:36:01 | 16 of 23 OK created table model dbt_kristin_2.stripe_invoice_details. [CREATE TABLE (494) in 2.41s]
2020-07-14 22:36:01.664254 (Thread-2): Finished running node model.stripe.stripe_invoice_details
2020-07-14 22:36:01.664425 (Thread-2): Began running node model.stripe.stripe_daily_overview
2020-07-14 22:36:01.664763 (Thread-2): 15:36:01 | 20 of 23 START table model dbt_kristin_2.stripe_daily_overview....... [RUN]
2020-07-14 22:36:01.665043 (Thread-2): Acquiring new bigquery connection "model.stripe.stripe_daily_overview".
2020-07-14 22:36:01.665141 (Thread-2): Re-using an available connection from the pool (formerly model.stripe.stripe_invoice_details).
2020-07-14 22:36:01.665238 (Thread-2): Compiling model.stripe.stripe_daily_overview
2020-07-14 22:36:01.680473 (Thread-2): Writing injected SQL for node "model.stripe.stripe_daily_overview"
2020-07-14 22:36:01.680957 (Thread-2): finished collecting timing info
2020-07-14 22:36:01.686126 (Thread-2): Client.dataset is deprecated and will be removed in a future version. Use a string like 'my_project.my_dataset' or a cloud.google.bigquery.DatasetReference object, instead.
2020-07-14 22:36:01.747155 (Thread-3): Writing runtime SQL for node "model.stripe.stripe_customer_overview"
2020-07-14 22:36:01.748687 (Thread-3): On model.stripe.stripe_customer_overview: /* {"app": "dbt", "dbt_version": "0.17.0rc1", "profile_name": "integration_test", "target_name": "dev_bigquery_dbt_testing", "node_id": "model.stripe.stripe_customer_overview"} */


  create or replace table `dbt-package-testing`.`dbt_kristin_2`.`stripe_customer_overview`
  
  
  OPTIONS()
  as (
    with balance_transaction_joined as (

    select *
    from `dbt-package-testing`.`dbt_kristin_2`.`stripe_balance_transaction_joined`  

), incomplete_charges as (

    select *
    from `dbt-package-testing`.`dbt_kristin_2`.`stripe_incomplete_charges`  

), customer as (

    select *
    from `dbt-package-testing`.`dbt_kristin_2`.`stg_stripe_customer`  

), transactions_grouped as (
 
    select
      customer_id,
      sum(if(type in ('charge', 'payment'), amount, 0)) as total_sales,
      sum(if(type in ('payment_refund', 'refund'), amount, 0)) as total_refunds,
      sum(amount) as total_gross_transaction_amount,
      sum(fee) as total_fees,
      sum(net) as total_net_transaction_amount,
      sum(if(type in ('payment', 'charge'), 1, 0)) as total_sales_count,
      sum(if(type in ('payment_refund', 'refund'), 1, 0)) as total_refund_count,    
      sum(if(type in ('charge', 'payment') and date_trunc(date(created_at), month) = date_trunc(current_date(), month),amount, 0)) as sales_this_month,
      sum(if(type in ('payment_refund', 'refund') and date_trunc(date(created_at), month) = date_trunc(current_date(), month), amount, 0)) as refunds_this_month,
      sum(if(date_trunc(date(created_at), month) = date_trunc(current_date(), month), amount, 0)) as gross_transaction_amount_this_month,
      sum(if(date_trunc(date(created_at), month) = date_trunc(current_date(), month), fee, 0)) as fees_this_month,
      sum(if(date_trunc(date(created_at), month) = date_trunc(current_date(), month), net, 0)) as net_transaction_amount_this_month,
      sum(if(type in ('payment', 'charge') and date_trunc(date(created_at), month) = date_trunc(current_date(), month) , 1, 0)) as sales_count_this_month,
      sum(if(type in ('payment_refund', 'refund') and date_trunc(date(created_at), month) = date_trunc(current_date(), month) , 1, 0)) as refund_count_this_month,
      min(if(type in ('payment', 'charge'), date(created_at), null)) as first_sale_date,
      max(if(type in ('payment', 'charge'), date(created_at), null)) as most_recent_sale_date
    from balance_transaction_joined
      where type in ('payment', 'charge', 'payment_refund', 'refund')
    group by 1

), failed_charges_by_customer as (

    select
      customer_id,
      count(*) as total_failed_charge_count,
      sum(amount) as total_failed_charge_amount,
      sum(if(date_trunc(date(created_at), month) = date_trunc(current_date(), month), 1, 0)) as failed_charge_count_this_month,
      sum(if(date_trunc(date(created_at), month) = date_trunc(current_date(), month), amount, 0)) as failed_charge_amount_this_month
    from incomplete_charges
    group by 1

)

select
  coalesce(customer.description, customer.customer_id, 'No associated customer') as customer_description,
  customer.email,
  customer.created_at as customer_created_at,
  customer.is_deliguent,
  coalesce(transactions_grouped.total_sales/100.0, 0) as total_sales,
  coalesce(transactions_grouped.total_refunds/100.0, 0) as total_refunds,
  coalesce(transactions_grouped.total_gross_transaction_amount/100.0, 0) as total_gross_transcation_amount,
  coalesce(transactions_grouped.total_fees/100.0, 0) as total_fees,
  coalesce(transactions_grouped.total_net_transaction_amount/100.0, 0) as total_net_trasnaction_amount,
  coalesce(transactions_grouped.total_sales_count, 0) as total_sales_count,
  coalesce(transactions_grouped.total_refund_count, 0) as total_refund_count,    
  coalesce(transactions_grouped.sales_this_month/100.0, 0) as sales_this_month,
  coalesce(transactions_grouped.refunds_this_month/100.0, 0) as refunds_this_month,
  coalesce(transactions_grouped.gross_transaction_amount_this_month/100.0, 0) as gross_transaction_amount_this_month,
  coalesce(transactions_grouped.fees_this_month/100.0, 0) as fees_this_month,
  coalesce(transactions_grouped.net_transaction_amount_this_month/100.0, 0) as net_transaction_amount_this_month,
  coalesce(transactions_grouped.sales_count_this_month, 0) as sales_count_this_month,
  coalesce(transactions_grouped.refund_count_this_month, 0) as refund_count_this_month,
  transactions_grouped.first_sale_date,
  transactions_grouped.most_recent_sale_date,
  coalesce(total_failed_charge_count, 0) as total_failed_charge_count,
  coalesce(total_failed_charge_amount/100, 0) as total_failed_charge_amount,
  coalesce(failed_charge_count_this_month, 0) as failed_charge_count_this_month,
  coalesce(failed_charge_amount_this_month/100, 0) as failed_charge_amount_this_month,
  customer.currency as customer_currency,
  customer.default_card_id,
  customer.shipping_name,
  customer.shipping_address_line_1,
  customer.shipping_address_line_2,
  customer.shipping_address_city,
  customer.shipping_address_state,
  customer.shipping_address_country,
  customer.shipping_address_postal_code,
  customer.shipping_phone
from customer
left join transactions_grouped on transactions_grouped.customer_id = customer.customer_id
left join failed_charges_by_customer on customer.customer_id = failed_charges_by_customer.customer_id
  );
    
2020-07-14 22:36:01.762125 (Thread-4): Writing runtime SQL for node "model.stripe.stripe_balance_transactions"
2020-07-14 22:36:01.762651 (Thread-4): On model.stripe.stripe_balance_transactions: /* {"app": "dbt", "dbt_version": "0.17.0rc1", "profile_name": "integration_test", "target_name": "dev_bigquery_dbt_testing", "node_id": "model.stripe.stripe_balance_transactions"} */


  create or replace table `dbt-package-testing`.`dbt_kristin_2`.`stripe_balance_transactions`
  
  
  OPTIONS()
  as (
    with balance_transaction_joined as (

    select *
    from `dbt-package-testing`.`dbt_kristin_2`.`stripe_balance_transaction_joined`  

)

select 
  balance_transaction_id,
  created_at,
  available_on,
  currency,
  amount,
  fee,
  net,
  type,
  reporting_category,
  source,
  description,
  customer_facing_amount,
  customer_facing_currency,
  effective_at,
  customer_id,
  receipt_email,
  customer_description,
  charge_id,
  payment_intent_id,
  charge_created_at,
  payment_method_type,
  card_brand,
  card_funding,
  card_country,
  payout_id,
  payout_expeted_arrival_date,
  payout_status,
  payout_type,
  payout_description,
  refund_reason
from balance_transaction_joined
  );
    
2020-07-14 22:36:01.830816 (Thread-2): Writing runtime SQL for node "model.stripe.stripe_daily_overview"
2020-07-14 22:36:01.831494 (Thread-2): On model.stripe.stripe_daily_overview: /* {"app": "dbt", "dbt_version": "0.17.0rc1", "profile_name": "integration_test", "target_name": "dev_bigquery_dbt_testing", "node_id": "model.stripe.stripe_daily_overview"} */


  create or replace table `dbt-package-testing`.`dbt_kristin_2`.`stripe_daily_overview`
  
  
  OPTIONS()
  as (
    with balance_transaction_joined as (

    select *
    from `dbt-package-testing`.`dbt_kristin_2`.`stripe_balance_transaction_joined`  

), incomplete_charges as (

    select *
    from `dbt-package-testing`.`dbt_kristin_2`.`stripe_incomplete_charges`  

), daily_balance_transactions as (

  select
    date(case when type = 'payout' then available_on else created_at end) as date,
    sum(case when type in ('charge', 'payment') then amount else 0 end) as total_sales,
    sum(case when type in ('payment_refund', 'refund') then amount else 0 end) as total_refunds,
    sum(case when type = 'adjustment' then amount else 0 end) as total_adjustments,
    sum(case when type not in ('charge', 'payment', 'payment_refund', 'refund', 'adjustment', 'payout') and type not like '%transfer%' then amount else 0 end) as total_other_transactions,
    sum(case when type <> 'payout' and type not like '%transfer%' then amount else 0 end) as total_gross_transaction_amount,
    sum(case when type <> 'payout' and type not like '%transfer%' then net else 0 end) as total_net_tranactions,
    sum(case when type = 'payout' or type like '%transfer%' then fee * -1.0 else 0 end) as total_payout_fees,
    sum(case when type = 'payout' or type like '%transfer%' then amount else 0 end) as total_gross_payout_amount,
    sum(case when type = 'payout' or type like '%transfer%' then fee * -1.0 else net end) as daily_net_activity,
    sum(if(type in ('payment', 'charge'), 1, 0)) as total_sales_count,
    sum(if(type = 'payout', 1, 0)) as total_payouts_count,
    count(distinct case when type = 'adjustment' then coalesce(source, payout_id) end) as total_adjustments_count
  from balance_transaction_joined
  group by 1

), daily_failed_charges as (

    select
      date(created_at) as date,
      count(*) as total_failed_charge_count,
      sum(amount) as total_failed_charge_amount
    from incomplete_charges
    group by 1

)

select
  daily_balance_transactions.date,
  daily_balance_transactions.total_sales/100.0 as total_sales,
  daily_balance_transactions.total_refunds/100.0 as total_refunds,
  daily_balance_transactions.total_adjustments/100.0 as total_adjustments,
  daily_balance_transactions.total_other_transactions/100.0 as total_other_transactions,
  daily_balance_transactions.total_gross_transaction_amount/100.0 as total_gross_transaction_amount,
  daily_balance_transactions.total_net_tranactions/100.0 as total_net_tranactions,
  daily_balance_transactions.total_payout_fees/100.0 as total_payout_fees,
  daily_balance_transactions.total_gross_payout_amount/100.0 as total_gross_payout_amount,
  daily_balance_transactions.daily_net_activity/100.0 as daily_net_activity,
  (daily_balance_transactions.daily_net_activity + daily_balance_transactions.total_gross_payout_amount)/100.0 as daily_end_balance,
  daily_balance_transactions.total_sales_count,
  daily_balance_transactions.total_payouts_count,
  daily_balance_transactions.total_adjustments_count,
  coalesce(daily_failed_charges.total_failed_charge_count, 0) as total_failed_charge_count,
  coalesce(daily_failed_charges.total_failed_charge_amount/100, 0) as total_failed_charge_amount
from daily_balance_transactions
left join daily_failed_charges on daily_balance_transactions.date = daily_failed_charges.date
order by 1 desc
  );
    
2020-07-14 22:36:02.658982 (Thread-1): finished collecting timing info
2020-07-14 22:36:02.659758 (Thread-1): Sending event: {'category': 'dbt', 'action': 'run_model', 'label': 'c0e710c7-783c-4220-89c9-fa47825d938c', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x10cbad700>]}
2020-07-14 22:36:02.660095 (Thread-1): 15:36:02 | 17 of 23 OK created table model dbt_kristin_2.stripe_subscription_details [CREATE TABLE (49) in 2.80s]
2020-07-14 22:36:02.660261 (Thread-1): Finished running node model.stripe.stripe_subscription_details
2020-07-14 22:36:02.660423 (Thread-1): Began running node model.stripe.stripe_monthly_overview
2020-07-14 22:36:02.660571 (Thread-1): 15:36:02 | 21 of 23 START table model dbt_kristin_2.stripe_monthly_overview..... [RUN]
2020-07-14 22:36:02.660984 (Thread-1): Acquiring new bigquery connection "model.stripe.stripe_monthly_overview".
2020-07-14 22:36:02.661097 (Thread-1): Re-using an available connection from the pool (formerly model.stripe.stripe_subscription_details).
2020-07-14 22:36:02.661198 (Thread-1): Compiling model.stripe.stripe_monthly_overview
2020-07-14 22:36:02.677371 (Thread-1): Writing injected SQL for node "model.stripe.stripe_monthly_overview"
2020-07-14 22:36:02.677867 (Thread-1): finished collecting timing info
2020-07-14 22:36:02.683664 (Thread-1): Client.dataset is deprecated and will be removed in a future version. Use a string like 'my_project.my_dataset' or a cloud.google.bigquery.DatasetReference object, instead.
2020-07-14 22:36:02.970473 (Thread-1): Writing runtime SQL for node "model.stripe.stripe_monthly_overview"
2020-07-14 22:36:02.971079 (Thread-1): On model.stripe.stripe_monthly_overview: /* {"app": "dbt", "dbt_version": "0.17.0rc1", "profile_name": "integration_test", "target_name": "dev_bigquery_dbt_testing", "node_id": "model.stripe.stripe_monthly_overview"} */


  create or replace table `dbt-package-testing`.`dbt_kristin_2`.`stripe_monthly_overview`
  
  
  OPTIONS()
  as (
    with balance_transaction_joined as (

    select *
    from `dbt-package-testing`.`dbt_kristin_2`.`stripe_balance_transaction_joined`  

), incomplete_charges as (

    select *
    from `dbt-package-testing`.`dbt_kristin_2`.`stripe_incomplete_charges`  

), monthly_balance_transactions as (

  select
    date_trunc(date(case when type = 'payout' then available_on else created_at end), month) as month,
    sum(case when type in ('charge', 'payment') then amount else 0 end) as total_sales,
    sum(case when type in ('payment_refund', 'refund') then amount else 0 end) as total_refunds,
    sum(case when type = 'adjustment' then amount else 0 end) as total_adjustments,
    sum(case when type not in ('charge', 'payment', 'payment_refund', 'refund', 'adjustment', 'payout') and type not like '%transfer%' then amount else 0 end) as total_other_transactions,
    sum(case when type <> 'payout' and type not like '%transfer%' then amount else 0 end) as total_gross_transaction_amount,
    sum(case when type <> 'payout' and type not like '%transfer%' then net else 0 end) as total_net_tranactions,
    sum(case when type = 'payout' or type like '%transfer%' then fee * -1.0 else 0 end) as total_payout_fees,
    sum(case when type = 'payout' or type like '%transfer%' then amount else 0 end) as total_gross_payout_amount,
    sum(case when type = 'payout' or type like '%transfer%' then fee * -1.0 else net end) as monthly_net_activity,
    sum(if(type in ('payment', 'charge'), 1, 0)) as total_sales_count,
    sum(if(type = 'payout', 1, 0)) as total_payout_count,
    count(distinct case when type = 'adjustment' then coalesce(source, payout_id) end) as total_adjustments_count
  from balance_transaction_joined
  group by 1

), monthly_failed_charges as (

    select
      date_trunc(date(created_at), month) as month,
      count(*) as total_failed_charge_count,
      sum(amount) as total_failed_charge_amount
    from incomplete_charges
    group by 1

)

select
  monthly_balance_transactions.month,
  monthly_balance_transactions.total_sales/100.0 as total_sales,
  monthly_balance_transactions.total_refunds/100.0 as total_refunds,
  monthly_balance_transactions.total_adjustments/100.0 as total_adjustments,
  monthly_balance_transactions.total_other_transactions/100.0 as total_other_transactions,
  monthly_balance_transactions.total_gross_transaction_amount/100.0 as total_gross_transaction_amount,
  monthly_balance_transactions.total_net_tranactions/100.0 as total_net_tranactions,
  monthly_balance_transactions.total_payout_fees/100.0 as total_payout_fees,
  monthly_balance_transactions.total_gross_payout_amount/100.0 as total_gross_payout_amount,
  monthly_balance_transactions.monthly_net_activity/100.0 as monthly_net_activity,
  (monthly_balance_transactions.monthly_net_activity + monthly_balance_transactions.total_gross_payout_amount)/100.0 as monthly_end_balance,
  monthly_balance_transactions.total_sales_count,
  monthly_balance_transactions.total_payout_count,
  monthly_balance_transactions.total_adjustments_count,
  coalesce(monthly_failed_charges.total_failed_charge_count, 0) as total_failed_charge_count,
  coalesce(monthly_failed_charges.total_failed_charge_amount/100, 0) as total_failed_charge_amount
from monthly_balance_transactions
left join monthly_failed_charges on monthly_balance_transactions.month = monthly_failed_charges.month
order by 1 desc
  );
    
2020-07-14 22:36:03.897693 (Thread-4): finished collecting timing info
2020-07-14 22:36:03.898541 (Thread-4): Sending event: {'category': 'dbt', 'action': 'run_model', 'label': 'c0e710c7-783c-4220-89c9-fa47825d938c', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x10ce02d60>]}
2020-07-14 22:36:03.898855 (Thread-4): 15:36:03 | 18 of 23 OK created table model dbt_kristin_2.stripe_balance_transactions [CREATE TABLE (2124) in 2.35s]
2020-07-14 22:36:03.899026 (Thread-4): Finished running node model.stripe.stripe_balance_transactions
2020-07-14 22:36:03.899199 (Thread-4): Began running node model.stripe.stripe_quarterly_overview
2020-07-14 22:36:03.899505 (Thread-4): 15:36:03 | 22 of 23 START table model dbt_kristin_2.stripe_quarterly_overview... [RUN]
2020-07-14 22:36:03.899843 (Thread-4): Acquiring new bigquery connection "model.stripe.stripe_quarterly_overview".
2020-07-14 22:36:03.899961 (Thread-4): Re-using an available connection from the pool (formerly model.stripe.stripe_balance_transactions).
2020-07-14 22:36:03.900075 (Thread-4): Compiling model.stripe.stripe_quarterly_overview
2020-07-14 22:36:03.917474 (Thread-4): Writing injected SQL for node "model.stripe.stripe_quarterly_overview"
2020-07-14 22:36:03.917996 (Thread-4): finished collecting timing info
2020-07-14 22:36:03.923369 (Thread-4): Client.dataset is deprecated and will be removed in a future version. Use a string like 'my_project.my_dataset' or a cloud.google.bigquery.DatasetReference object, instead.
2020-07-14 22:36:04.103674 (Thread-4): Writing runtime SQL for node "model.stripe.stripe_quarterly_overview"
2020-07-14 22:36:04.104540 (Thread-4): On model.stripe.stripe_quarterly_overview: /* {"app": "dbt", "dbt_version": "0.17.0rc1", "profile_name": "integration_test", "target_name": "dev_bigquery_dbt_testing", "node_id": "model.stripe.stripe_quarterly_overview"} */


  create or replace table `dbt-package-testing`.`dbt_kristin_2`.`stripe_quarterly_overview`
  
  
  OPTIONS()
  as (
    with balance_transaction_joined as (

    select *
    from `dbt-package-testing`.`dbt_kristin_2`.`stripe_balance_transaction_joined`  

), incomplete_charges as (

    select *
    from `dbt-package-testing`.`dbt_kristin_2`.`stripe_incomplete_charges`  

), quarterly_balance_transactions as (

  select
    date_trunc(date(case when type = 'payout' then available_on else created_at end), quarter) as quarter,
    sum(case when type in ('charge', 'payment') then amount else 0 end) as total_sales,
    sum(case when type in ('payment_refund', 'refund') then amount else 0 end) as total_refunds,
    sum(case when type = 'adjustment' then amount else 0 end) as total_adjustments,
    sum(case when type not in ('charge', 'payment', 'payment_refund', 'refund', 'adjustment', 'payout') and type not like '%transfer%' then amount else 0 end) as total_other_transactions,
    sum(case when type <> 'payout' and type not like '%transfer%' then amount else 0 end) as total_gross_transaction_amount,
    sum(case when type <> 'payout' and type not like '%transfer%' then net else 0 end) as total_net_tranactions,
    sum(case when type = 'payout' or type like '%transfer%' then fee * -1.0 else 0 end) as total_payout_fees,
    sum(case when type = 'payout' or type like '%transfer%' then amount else 0 end) as total_gross_payout_amount,
    sum(case when type = 'payout' or type like '%transfer%' then fee * -1.0 else net end) as quarterly_net_activity,
    sum(if(type in ('payment', 'charge'), 1, 0)) as total_sales_count,
    sum(if(type = 'payout', 1, 0)) as total_payout_count,
    count(distinct case when type = 'adjustment' then coalesce(source, payout_id) end) as total_adjustments_count
  from balance_transaction_joined
  group by 1

), quarterly_failed_charges as (

    select
      date_trunc(date(created_at), quarter) as quarter,
      count(*) as total_failed_charge_count,
      sum(amount) as total_failed_charge_amount
    from incomplete_charges
    group by 1

)

select
  quarterly_balance_transactions.quarter,
  quarterly_balance_transactions.total_sales/100.0 as total_sales,
  quarterly_balance_transactions.total_refunds/100.0 as total_refunds,
  quarterly_balance_transactions.total_adjustments/100.0 as total_adjustments,
  quarterly_balance_transactions.total_other_transactions/100.0 as total_other_transactions,
  quarterly_balance_transactions.total_gross_transaction_amount/100.0 as total_gross_transaction_amount,
  quarterly_balance_transactions.total_net_tranactions/100.0 as total_net_tranactions,
  quarterly_balance_transactions.total_payout_fees/100.0 as total_payout_fees,
  quarterly_balance_transactions.total_gross_payout_amount/100.0 as total_gross_payout_amount,
  quarterly_balance_transactions.quarterly_net_activity/100.0 as quarterly_net_activity,
  (quarterly_balance_transactions.quarterly_net_activity + quarterly_balance_transactions.total_gross_payout_amount)/100.0 as quarterly_end_balance,
  quarterly_balance_transactions.total_sales_count,
  quarterly_balance_transactions.total_payout_count,
  quarterly_balance_transactions.total_adjustments_count,
  coalesce(quarterly_failed_charges.total_failed_charge_count, 0) as total_failed_charge_count,
  coalesce(quarterly_failed_charges.total_failed_charge_amount/100, 0) as total_failed_charge_amount
from quarterly_balance_transactions
left join quarterly_failed_charges on quarterly_balance_transactions.quarter = quarterly_failed_charges.quarter
order by 1 desc
  );
    
2020-07-14 22:36:04.147545 (Thread-2): finished collecting timing info
2020-07-14 22:36:04.148282 (Thread-2): Sending event: {'category': 'dbt', 'action': 'run_model', 'label': 'c0e710c7-783c-4220-89c9-fa47825d938c', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x10ca17850>]}
2020-07-14 22:36:04.148559 (Thread-2): 15:36:04 | 20 of 23 OK created table model dbt_kristin_2.stripe_daily_overview.. [CREATE TABLE (1246) in 2.48s]
2020-07-14 22:36:04.148732 (Thread-2): Finished running node model.stripe.stripe_daily_overview
2020-07-14 22:36:04.148881 (Thread-2): Began running node model.stripe.stripe_weekly_overview
2020-07-14 22:36:04.149136 (Thread-2): 15:36:04 | 23 of 23 START table model dbt_kristin_2.stripe_weekly_overview...... [RUN]
2020-07-14 22:36:04.149522 (Thread-2): Acquiring new bigquery connection "model.stripe.stripe_weekly_overview".
2020-07-14 22:36:04.149708 (Thread-2): Re-using an available connection from the pool (formerly model.stripe.stripe_daily_overview).
2020-07-14 22:36:04.149873 (Thread-2): Compiling model.stripe.stripe_weekly_overview
2020-07-14 22:36:04.169008 (Thread-2): Writing injected SQL for node "model.stripe.stripe_weekly_overview"
2020-07-14 22:36:04.172747 (Thread-3): finished collecting timing info
2020-07-14 22:36:04.173709 (Thread-3): Sending event: {'category': 'dbt', 'action': 'run_model', 'label': 'c0e710c7-783c-4220-89c9-fa47825d938c', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x10cec2790>]}
2020-07-14 22:36:04.174376 (Thread-3): 15:36:04 | 19 of 23 OK created table model dbt_kristin_2.stripe_customer_overview [CREATE TABLE (405) in 2.63s]
2020-07-14 22:36:04.174578 (Thread-2): finished collecting timing info
2020-07-14 22:36:04.180384 (Thread-3): Finished running node model.stripe.stripe_customer_overview
2020-07-14 22:36:04.181264 (Thread-2): Client.dataset is deprecated and will be removed in a future version. Use a string like 'my_project.my_dataset' or a cloud.google.bigquery.DatasetReference object, instead.
2020-07-14 22:36:04.292334 (Thread-2): Writing runtime SQL for node "model.stripe.stripe_weekly_overview"
2020-07-14 22:36:04.292941 (Thread-2): On model.stripe.stripe_weekly_overview: /* {"app": "dbt", "dbt_version": "0.17.0rc1", "profile_name": "integration_test", "target_name": "dev_bigquery_dbt_testing", "node_id": "model.stripe.stripe_weekly_overview"} */


  create or replace table `dbt-package-testing`.`dbt_kristin_2`.`stripe_weekly_overview`
  
  
  OPTIONS()
  as (
    with balance_transaction_joined as (

    select *
    from `dbt-package-testing`.`dbt_kristin_2`.`stripe_balance_transaction_joined`  

), incomplete_charges as (

    select *
    from `dbt-package-testing`.`dbt_kristin_2`.`stripe_incomplete_charges`  

), weekly_balance_transactions as (

  select
    date_trunc(date(case when type = 'payout' then available_on else created_at end), week) as week,
    sum(case when type in ('charge', 'payment') then amount else 0 end) as total_sales,
    sum(case when type in ('payment_refund', 'refund') then amount else 0 end) as total_refunds,
    sum(case when type = 'adjustment' then amount else 0 end) as total_adjustments,
    sum(case when type not in ('charge', 'payment', 'payment_refund', 'refund', 'adjustment', 'payout') and type not like '%transfer%' then amount else 0 end) as total_other_transactions,
    sum(case when type <> 'payout' and type not like '%transfer%' then amount else 0 end) as total_gross_transaction_amount,
    sum(case when type <> 'payout' and type not like '%transfer%' then net else 0 end) as total_net_tranactions,
    sum(case when type = 'payout' or type like '%transfer%' then fee * -1.0 else 0 end) as total_payout_fees,
    sum(case when type = 'payout' or type like '%transfer%' then amount else 0 end) as total_gross_payout_amount,
    sum(case when type = 'payout' or type like '%transfer%' then fee * -1.0 else net end) as weekly_net_activity,
    sum(if(type in ('payment', 'charge'), 1, 0)) as total_sales_count,
    sum(if(type = 'payout', 1, 0)) as total_payout_count,
    count(distinct case when type = 'adjustment' then coalesce(source, payout_id) end) as total_adjustments_count
  from balance_transaction_joined
  group by 1

), weekly_failed_charges as (

    select
      date_trunc(date(created_at), week) as week,
      count(*) as total_failed_charge_count,
      sum(amount) as total_failed_charge_amount
    from incomplete_charges
    group by 1

)

select
  weekly_balance_transactions.week,
  weekly_balance_transactions.total_sales/100.0 as total_sales,
  weekly_balance_transactions.total_refunds/100.0 as total_refunds,
  weekly_balance_transactions.total_adjustments/100.0 as total_adjustments,
  weekly_balance_transactions.total_other_transactions/100.0 as total_other_transactions,
  weekly_balance_transactions.total_gross_transaction_amount/100.0 as total_gross_transaction_amount,
  weekly_balance_transactions.total_net_tranactions/100.0 as total_net_tranactions,
  weekly_balance_transactions.total_payout_fees/100.0 as total_payout_fees,
  weekly_balance_transactions.total_gross_payout_amount/100.0 as total_gross_payout_amount,
  weekly_balance_transactions.weekly_net_activity/100.0 as weekly_net_activity,
  (weekly_balance_transactions.weekly_net_activity + weekly_balance_transactions.total_gross_payout_amount)/100.0 as weekly_end_balance,
  weekly_balance_transactions.total_sales_count,
  weekly_balance_transactions.total_payout_count,
  weekly_balance_transactions.total_adjustments_count,
  coalesce(weekly_failed_charges.total_failed_charge_count, 0) as total_failed_charge_count,
  coalesce(weekly_failed_charges.total_failed_charge_amount/100, 0) as total_failed_charge_amount
from weekly_balance_transactions
left join weekly_failed_charges on weekly_balance_transactions.week = weekly_failed_charges.week
order by 1 desc
  );
    
2020-07-14 22:36:05.222289 (Thread-1): finished collecting timing info
2020-07-14 22:36:05.223254 (Thread-1): Sending event: {'category': 'dbt', 'action': 'run_model', 'label': 'c0e710c7-783c-4220-89c9-fa47825d938c', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x10cc0c280>]}
2020-07-14 22:36:05.223583 (Thread-1): 15:36:05 | 21 of 23 OK created table model dbt_kristin_2.stripe_monthly_overview [CREATE TABLE (63) in 2.56s]
2020-07-14 22:36:05.223747 (Thread-1): Finished running node model.stripe.stripe_monthly_overview
2020-07-14 22:36:06.399937 (Thread-2): finished collecting timing info
2020-07-14 22:36:06.400720 (Thread-2): Sending event: {'category': 'dbt', 'action': 'run_model', 'label': 'c0e710c7-783c-4220-89c9-fa47825d938c', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x10cdb3d60>]}
2020-07-14 22:36:06.401046 (Thread-2): 15:36:06 | 23 of 23 OK created table model dbt_kristin_2.stripe_weekly_overview. [CREATE TABLE (269) in 2.25s]
2020-07-14 22:36:06.401200 (Thread-2): Finished running node model.stripe.stripe_weekly_overview
2020-07-14 22:36:06.478315 (Thread-4): finished collecting timing info
2020-07-14 22:36:06.479131 (Thread-4): Sending event: {'category': 'dbt', 'action': 'run_model', 'label': 'c0e710c7-783c-4220-89c9-fa47825d938c', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x10ce0d820>]}
2020-07-14 22:36:06.479431 (Thread-4): 15:36:06 | 22 of 23 OK created table model dbt_kristin_2.stripe_quarterly_overview [CREATE TABLE (22) in 2.58s]
2020-07-14 22:36:06.479592 (Thread-4): Finished running node model.stripe.stripe_quarterly_overview
2020-07-14 22:36:06.481099 (MainThread): Acquiring new bigquery connection "master".
2020-07-14 22:36:06.481215 (MainThread): Opening a new connection, currently in state closed
2020-07-14 22:36:06.481543 (MainThread): 15:36:06 | 
2020-07-14 22:36:06.481679 (MainThread): 15:36:06 | Finished running 23 table models in 16.36s.
2020-07-14 22:36:06.481784 (MainThread): Connection 'master' was properly closed.
2020-07-14 22:36:06.481940 (MainThread): Connection 'model.stripe.stripe_monthly_overview' was left open.
2020-07-14 22:36:06.482037 (MainThread): Connection 'model.stripe.stripe_weekly_overview' was left open.
2020-07-14 22:36:06.482116 (MainThread): Connection 'model.stripe.stripe_customer_overview' was left open.
2020-07-14 22:36:06.482190 (MainThread): Connection 'model.stripe.stripe_quarterly_overview' was left open.
2020-07-14 22:36:06.549614 (MainThread): 
2020-07-14 22:36:06.549751 (MainThread): Completed successfully
2020-07-14 22:36:06.549848 (MainThread): 
Done. PASS=23 WARN=0 ERROR=0 SKIP=0 TOTAL=23
2020-07-14 22:36:06.549992 (MainThread): Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'end', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x10cbf5e50>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x10cb379a0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x10c9e1160>]}
2020-07-14 22:36:06.550160 (MainThread): Flushing usage events
2020-07-14 22:37:54.080189 (MainThread): Running with dbt=0.17.0-rc1
2020-07-14 22:37:54.274239 (MainThread): running dbt with arguments Namespace(cls=<class 'dbt.task.run.RunTask'>, debug=False, exclude=None, fail_fast=False, full_refresh=False, log_cache_events=False, log_format='default', models=None, partial_parse=None, profile=None, profiles_dir='/Users/kristin/.dbt', project_dir=None, record_timing_info=None, rpc_method='run', single_threaded=False, strict=False, target=None, test_new_parser=False, threads=None, use_cache=True, vars='{}', version_check=True, warn_error=False, which='run', write_json=True)
2020-07-14 22:37:54.274907 (MainThread): Tracking: tracking
2020-07-14 22:37:54.282585 (MainThread): Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'start', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x1126e0be0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x1126f1fd0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x1126f1d60>]}
2020-07-14 22:37:54.301653 (MainThread): Partial parsing not enabled
2020-07-14 22:37:54.303094 (MainThread): Parsing macros/core.sql
2020-07-14 22:37:54.307232 (MainThread): Parsing macros/materializations/helpers.sql
2020-07-14 22:37:54.314944 (MainThread): Parsing macros/materializations/snapshot/snapshot_merge.sql
2020-07-14 22:37:54.316609 (MainThread): Parsing macros/materializations/snapshot/strategies.sql
2020-07-14 22:37:54.330517 (MainThread): Parsing macros/materializations/snapshot/snapshot.sql
2020-07-14 22:37:54.356232 (MainThread): Parsing macros/materializations/seed/seed.sql
2020-07-14 22:37:54.375568 (MainThread): Parsing macros/materializations/incremental/helpers.sql
2020-07-14 22:37:54.377214 (MainThread): Parsing macros/materializations/incremental/incremental.sql
2020-07-14 22:37:54.383112 (MainThread): Parsing macros/materializations/common/merge.sql
2020-07-14 22:37:54.396788 (MainThread): Parsing macros/materializations/table/table.sql
2020-07-14 22:37:54.402937 (MainThread): Parsing macros/materializations/view/view.sql
2020-07-14 22:37:54.408632 (MainThread): Parsing macros/materializations/view/create_or_replace_view.sql
2020-07-14 22:37:54.412876 (MainThread): Parsing macros/etc/get_custom_alias.sql
2020-07-14 22:37:54.413713 (MainThread): Parsing macros/etc/query.sql
2020-07-14 22:37:54.414637 (MainThread): Parsing macros/etc/is_incremental.sql
2020-07-14 22:37:54.416058 (MainThread): Parsing macros/etc/datetime.sql
2020-07-14 22:37:54.423999 (MainThread): Parsing macros/etc/get_custom_schema.sql
2020-07-14 22:37:54.425733 (MainThread): Parsing macros/etc/get_custom_database.sql
2020-07-14 22:37:54.426666 (MainThread): Parsing macros/adapters/common.sql
2020-07-14 22:37:54.469913 (MainThread): Parsing macros/schema_tests/relationships.sql
2020-07-14 22:37:54.470964 (MainThread): Parsing macros/schema_tests/not_null.sql
2020-07-14 22:37:54.471734 (MainThread): Parsing macros/schema_tests/unique.sql
2020-07-14 22:37:54.472653 (MainThread): Parsing macros/schema_tests/accepted_values.sql
2020-07-14 22:37:54.474616 (MainThread): Parsing macros/etc.sql
2020-07-14 22:37:54.475162 (MainThread): Parsing macros/catalog.sql
2020-07-14 22:37:54.480590 (MainThread): Parsing macros/adapters.sql
2020-07-14 22:37:54.494519 (MainThread): Parsing macros/materializations/seed.sql
2020-07-14 22:37:54.496253 (MainThread): Parsing macros/materializations/view.sql
2020-07-14 22:37:54.497938 (MainThread): Parsing macros/materializations/table.sql
2020-07-14 22:37:54.506566 (MainThread): Parsing macros/materializations/incremental.sql
2020-07-14 22:37:54.517569 (MainThread): Parsing macros/materializations/snapshot.sql
2020-07-14 22:37:54.569870 (MainThread): Partial parsing not enabled
2020-07-14 22:37:54.571663 (MainThread): Parsing macros/cross_db_utils/except.sql
2020-07-14 22:37:54.572873 (MainThread): Parsing macros/cross_db_utils/replace.sql
2020-07-14 22:37:54.574405 (MainThread): Parsing macros/cross_db_utils/concat.sql
2020-07-14 22:37:54.576988 (MainThread): Parsing macros/cross_db_utils/datatypes.sql
2020-07-14 22:37:54.582638 (MainThread): Parsing macros/cross_db_utils/_is_relation.sql
2020-07-14 22:37:54.584026 (MainThread): Parsing macros/cross_db_utils/length.sql
2020-07-14 22:37:54.585811 (MainThread): Parsing macros/cross_db_utils/dateadd.sql
2020-07-14 22:37:54.588598 (MainThread): Parsing macros/cross_db_utils/intersect.sql
2020-07-14 22:37:54.589707 (MainThread): Parsing macros/cross_db_utils/right.sql
2020-07-14 22:37:54.592149 (MainThread): Parsing macros/cross_db_utils/datediff.sql
2020-07-14 22:37:54.601693 (MainThread): Parsing macros/cross_db_utils/safe_cast.sql
2020-07-14 22:37:54.603436 (MainThread): Parsing macros/cross_db_utils/hash.sql
2020-07-14 22:37:54.604667 (MainThread): Parsing macros/cross_db_utils/identifier.sql
2020-07-14 22:37:54.605918 (MainThread): Parsing macros/cross_db_utils/position.sql
2020-07-14 22:37:54.607281 (MainThread): Parsing macros/cross_db_utils/literal.sql
2020-07-14 22:37:54.608099 (MainThread): Parsing macros/cross_db_utils/current_timestamp.sql
2020-07-14 22:37:54.634179 (MainThread): Parsing macros/cross_db_utils/width_bucket.sql
2020-07-14 22:37:54.641361 (MainThread): Parsing macros/cross_db_utils/last_day.sql
2020-07-14 22:37:54.644925 (MainThread): Parsing macros/cross_db_utils/split_part.sql
2020-07-14 22:37:54.647312 (MainThread): Parsing macros/cross_db_utils/date_trunc.sql
2020-07-14 22:37:54.649244 (MainThread): Parsing macros/cross_db_utils/_is_ephemeral.sql
2020-07-14 22:37:54.651542 (MainThread): Parsing macros/materializations/insert_by_period_materialization.sql
2020-07-14 22:37:54.678390 (MainThread): Parsing macros/logger/pretty_log_format.sql
2020-07-14 22:37:54.679095 (MainThread): Parsing macros/logger/pretty_time.sql
2020-07-14 22:37:54.679871 (MainThread): Parsing macros/logger/log_info.sql
2020-07-14 22:37:54.680592 (MainThread): Parsing macros/datetime/date_spine.sql
2020-07-14 22:37:54.684032 (MainThread): Parsing macros/web/get_url_host.sql
2020-07-14 22:37:54.685353 (MainThread): Parsing macros/web/get_url_path.sql
2020-07-14 22:37:54.687342 (MainThread): Parsing macros/web/get_url_parameter.sql
2020-07-14 22:37:54.688338 (MainThread): Parsing macros/geo/haversine_distance.sql
2020-07-14 22:37:54.689159 (MainThread): Parsing macros/schema_tests/equal_rowcount.sql
2020-07-14 22:37:54.690387 (MainThread): Parsing macros/schema_tests/relationships_where.sql
2020-07-14 22:37:54.692250 (MainThread): Parsing macros/schema_tests/recency.sql
2020-07-14 22:37:54.693337 (MainThread): Parsing macros/schema_tests/not_constant.sql
2020-07-14 22:37:54.694583 (MainThread): Parsing macros/schema_tests/test_unique_where.sql
2020-07-14 22:37:54.695993 (MainThread): Parsing macros/schema_tests/at_least_one.sql
2020-07-14 22:37:54.696860 (MainThread): Parsing macros/schema_tests/unique_combination_of_columns.sql
2020-07-14 22:37:54.697891 (MainThread): Parsing macros/schema_tests/cardinality_equality.sql
2020-07-14 22:37:54.699300 (MainThread): Parsing macros/schema_tests/expression_is_true.sql
2020-07-14 22:37:54.700250 (MainThread): Parsing macros/schema_tests/test_not_null_where.sql
2020-07-14 22:37:54.701507 (MainThread): Parsing macros/schema_tests/equality.sql
2020-07-14 22:37:54.704451 (MainThread): Parsing macros/schema_tests/mutually_exclusive_ranges.sql
2020-07-14 22:37:54.709588 (MainThread): Parsing macros/sql/nullcheck_table.sql
2020-07-14 22:37:54.710641 (MainThread): Parsing macros/sql/get_relations_by_pattern.sql
2020-07-14 22:37:54.712891 (MainThread): Parsing macros/sql/generate_series.sql
2020-07-14 22:37:54.715875 (MainThread): Parsing macros/sql/get_relations_by_prefix.sql
2020-07-14 22:37:54.719091 (MainThread): Parsing macros/sql/get_tables_by_prefix_sql.sql
2020-07-14 22:37:54.721383 (MainThread): Parsing macros/sql/star.sql
2020-07-14 22:37:54.723880 (MainThread): Parsing macros/sql/unpivot.sql
2020-07-14 22:37:54.729301 (MainThread): Parsing macros/sql/union.sql
2020-07-14 22:37:54.737618 (MainThread): Parsing macros/sql/groupby.sql
2020-07-14 22:37:54.738431 (MainThread): Parsing macros/sql/get_tables_by_pattern.sql
2020-07-14 22:37:54.739260 (MainThread): Parsing macros/sql/surrogate_key.sql
2020-07-14 22:37:54.741575 (MainThread): Parsing macros/sql/safe_add.sql
2020-07-14 22:37:54.742495 (MainThread): Parsing macros/sql/nullcheck.sql
2020-07-14 22:37:54.743579 (MainThread): Parsing macros/sql/get_column_values.sql
2020-07-14 22:37:54.747220 (MainThread): Parsing macros/sql/pivot.sql
2020-07-14 22:37:54.749673 (MainThread): Parsing macros/sql/get_query_results_as_dict.sql
2020-07-14 22:37:54.785562 (MainThread): Acquiring new bigquery connection "model.stripe.stripe_weekly_overview".
2020-07-14 22:37:54.785671 (MainThread): Opening a new connection, currently in state init
2020-07-14 22:37:54.802983 (MainThread): Acquiring new bigquery connection "model.stripe.stripe_daily_overview".
2020-07-14 22:37:54.803065 (MainThread): Opening a new connection, currently in state closed
2020-07-14 22:37:54.812148 (MainThread): Acquiring new bigquery connection "model.stripe.stripe_invoice_details".
2020-07-14 22:37:54.812219 (MainThread): Opening a new connection, currently in state closed
2020-07-14 22:37:54.824503 (MainThread): Acquiring new bigquery connection "model.stripe.stripe_customer_overview".
2020-07-14 22:37:54.824581 (MainThread): Opening a new connection, currently in state closed
2020-07-14 22:37:54.834264 (MainThread): Acquiring new bigquery connection "model.stripe.stripe_balance_transactions".
2020-07-14 22:37:54.834335 (MainThread): Opening a new connection, currently in state closed
2020-07-14 22:37:54.842456 (MainThread): Acquiring new bigquery connection "model.stripe.stripe_quarterly_overview".
2020-07-14 22:37:54.842542 (MainThread): Opening a new connection, currently in state closed
2020-07-14 22:37:54.853275 (MainThread): Acquiring new bigquery connection "model.stripe.stripe_monthly_overview".
2020-07-14 22:37:54.853471 (MainThread): Opening a new connection, currently in state closed
2020-07-14 22:37:54.863827 (MainThread): Acquiring new bigquery connection "model.stripe.stripe_subscription_details".
2020-07-14 22:37:54.863915 (MainThread): Opening a new connection, currently in state closed
2020-07-14 22:37:54.877935 (MainThread): Acquiring new bigquery connection "model.stripe.stripe_balance_transaction_joined".
2020-07-14 22:37:54.878046 (MainThread): Opening a new connection, currently in state closed
2020-07-14 22:37:54.893118 (MainThread): Acquiring new bigquery connection "model.stripe.stripe_incomplete_charges".
2020-07-14 22:37:54.893206 (MainThread): Opening a new connection, currently in state closed
2020-07-14 22:37:55.165661 (MainThread): Acquiring new bigquery connection "model.stripe_source.stg_stripe_card".
2020-07-14 22:37:55.165793 (MainThread): Opening a new connection, currently in state closed
2020-07-14 22:37:55.178506 (MainThread): Acquiring new bigquery connection "model.stripe_source.stg_stripe_invoice_line_item".
2020-07-14 22:37:55.178615 (MainThread): Opening a new connection, currently in state closed
2020-07-14 22:37:55.191407 (MainThread): Acquiring new bigquery connection "model.stripe_source.stg_stripe_payment_method_card".
2020-07-14 22:37:55.191490 (MainThread): Opening a new connection, currently in state closed
2020-07-14 22:37:55.201728 (MainThread): Acquiring new bigquery connection "model.stripe_source.stg_stripe_charge".
2020-07-14 22:37:55.201802 (MainThread): Opening a new connection, currently in state closed
2020-07-14 22:37:55.212063 (MainThread): Acquiring new bigquery connection "model.stripe_source.stg_stripe_payout".
2020-07-14 22:37:55.212141 (MainThread): Opening a new connection, currently in state closed
2020-07-14 22:37:55.222578 (MainThread): Acquiring new bigquery connection "model.stripe_source.stg_stripe_customer".
2020-07-14 22:37:55.222652 (MainThread): Opening a new connection, currently in state closed
2020-07-14 22:37:55.233042 (MainThread): Acquiring new bigquery connection "model.stripe_source.stg_stripe_refund".
2020-07-14 22:37:55.233119 (MainThread): Opening a new connection, currently in state closed
2020-07-14 22:37:55.243259 (MainThread): Acquiring new bigquery connection "model.stripe_source.stg_stripe_subscription".
2020-07-14 22:37:55.243332 (MainThread): Opening a new connection, currently in state closed
2020-07-14 22:37:55.254470 (MainThread): Acquiring new bigquery connection "model.stripe_source.stg_stripe_payment_method".
2020-07-14 22:37:55.254547 (MainThread): Opening a new connection, currently in state closed
2020-07-14 22:37:55.264510 (MainThread): Acquiring new bigquery connection "model.stripe_source.stg_stripe_payment_intent".
2020-07-14 22:37:55.264584 (MainThread): Opening a new connection, currently in state closed
2020-07-14 22:37:55.274908 (MainThread): Acquiring new bigquery connection "model.stripe_source.stg_stripe_invoice".
2020-07-14 22:37:55.274987 (MainThread): Opening a new connection, currently in state closed
2020-07-14 22:37:55.285445 (MainThread): Acquiring new bigquery connection "model.stripe_source.stg_stripe_fee".
2020-07-14 22:37:55.285518 (MainThread): Opening a new connection, currently in state closed
2020-07-14 22:37:55.296151 (MainThread): Acquiring new bigquery connection "model.stripe_source.stg_stripe_balance_transaction".
2020-07-14 22:37:55.296223 (MainThread): Opening a new connection, currently in state closed
2020-07-14 22:37:57.361603 (MainThread): Found 23 models, 16 tests, 0 snapshots, 0 analyses, 278 macros, 0 operations, 0 seed files, 13 sources
2020-07-14 22:37:57.394111 (MainThread): 
2020-07-14 22:37:57.394417 (MainThread): Acquiring new bigquery connection "master".
2020-07-14 22:37:57.394532 (MainThread): Opening a new connection, currently in state closed
2020-07-14 22:37:57.417103 (ThreadPoolExecutor-0_0): Acquiring new bigquery connection "list_dbt-package-testing".
2020-07-14 22:37:57.417220 (ThreadPoolExecutor-0_0): Opening a new connection, currently in state init
2020-07-14 22:37:57.417656 (ThreadPoolExecutor-0_1): Acquiring new bigquery connection "list_culdesac-labs".
2020-07-14 22:37:57.417743 (ThreadPoolExecutor-0_1): Opening a new connection, currently in state init
2020-07-14 22:37:57.418530 (ThreadPoolExecutor-0_1): Your application has authenticated using end user credentials from Google Cloud SDK. We recommend that most server applications use service accounts instead. If your application continues to use end user credentials from Cloud SDK, you might receive a "quota exceeded" or "API not enabled" error. For more information about service accounts, see https://cloud.google.com/docs/authentication/
2020-07-14 22:37:57.422143 (ThreadPoolExecutor-0_0): Your application has authenticated using end user credentials from Google Cloud SDK. We recommend that most server applications use service accounts instead. If your application continues to use end user credentials from Cloud SDK, you might receive a "quota exceeded" or "API not enabled" error. For more information about service accounts, see https://cloud.google.com/docs/authentication/
2020-07-14 22:37:59.149223 (ThreadPoolExecutor-0_0): Acquiring new bigquery connection "create_culdesac-labs_dbt_kristin_2".
2020-07-14 22:37:59.150605 (ThreadPoolExecutor-0_0): Re-using an available connection from the pool (formerly list_dbt-package-testing).
2020-07-14 22:37:59.150841 (ThreadPoolExecutor-0_0): Creating schema "culdesac-labs.dbt_kristin_2".
2020-07-14 22:37:59.151082 (ThreadPoolExecutor-0_0): Client.dataset is deprecated and will be removed in a future version. Use a string like 'my_project.my_dataset' or a cloud.google.bigquery.DatasetReference object, instead.
2020-07-14 22:37:59.354910 (MainThread): Connection 'master' was properly closed.
2020-07-14 22:37:59.355125 (MainThread): Connection 'create_culdesac-labs_dbt_kristin_2' was left open.
2020-07-14 22:37:59.355258 (MainThread): Connection 'list_culdesac-labs' was left open.
2020-07-14 22:37:59.355604 (MainThread): Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'end', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x112ac6a00>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x112ac67c0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x11291d460>]}
2020-07-14 22:37:59.356012 (MainThread): Flushing usage events
2020-07-14 22:37:59.723379 (MainThread): Encountered an error:
2020-07-14 22:37:59.723628 (MainThread): Database Error
  Access Denied: Project culdesac-labs: User does not have bigquery.datasets.create permission in project culdesac-labs.
2020-07-14 22:37:59.734722 (MainThread): Traceback (most recent call last):
  File "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/adapters/bigquery/connections.py", line 83, in exception_handler
    yield
  File "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/adapters/bigquery/connections.py", line 354, in _retry_and_handle
    return retry.retry_target(
  File "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/google/api_core/retry.py", line 184, in retry_target
    return target()
  File "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/adapters/bigquery/connections.py", line 339, in fn
    return client.create_dataset(dataset, exists_ok=True)
  File "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/google/cloud/bigquery/client.py", line 460, in create_dataset
    api_response = self._call_api(
  File "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/google/cloud/bigquery/client.py", line 556, in _call_api
    return call()
  File "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/google/api_core/retry.py", line 281, in retry_wrapped_func
    return retry_target(
  File "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/google/api_core/retry.py", line 184, in retry_target
    return target()
  File "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/google/cloud/_http.py", line 423, in api_request
    raise exceptions.from_http_response(response)
google.api_core.exceptions.Forbidden: 403 POST https://bigquery.googleapis.com/bigquery/v2/projects/culdesac-labs/datasets: Access Denied: Project culdesac-labs: User does not have bigquery.datasets.create permission in project culdesac-labs.

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/main.py", line 81, in main
    results, succeeded = handle_and_check(args)
  File "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/main.py", line 159, in handle_and_check
    task, res = run_from_args(parsed)
  File "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/main.py", line 212, in run_from_args
    results = task.run()
  File "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/task/runnable.py", line 416, in run
    result = self.execute_with_hooks(selected_uids)
  File "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/task/runnable.py", line 376, in execute_with_hooks
    self.before_run(adapter, selected_uids)
  File "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/task/run.py", line 202, in before_run
    super().before_run(adapter, selected_uids)
  File "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/task/runnable.py", line 362, in before_run
    self.create_schemas(adapter, selected_uids)
  File "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/task/runnable.py", line 515, in create_schemas
    create_future.result()
  File "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/concurrent/futures/_base.py", line 432, in result
    return self.__get_result()
  File "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/concurrent/futures/_base.py", line 388, in __get_result
    raise self._exception
  File "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/concurrent/futures/thread.py", line 57, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/task/runnable.py", line 481, in create_schema
    adapter.create_schema(relation)
  File "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/adapters/bigquery/impl.py", line 266, in create_schema
    self.connections.create_dataset(database, schema)
  File "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/adapters/bigquery/connections.py", line 340, in create_dataset
    self._retry_and_handle(msg='create dataset', conn=conn, fn=fn)
  File "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/adapters/bigquery/connections.py", line 354, in _retry_and_handle
    return retry.retry_target(
  File "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/contextlib.py", line 131, in __exit__
    self.gen.throw(type, value, traceback)
  File "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/adapters/bigquery/connections.py", line 91, in exception_handler
    self.handle_error(e, message)
  File "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/adapters/bigquery/connections.py", line 75, in handle_error
    raise DatabaseException(error_msg)
dbt.exceptions.DatabaseException: Database Error
  Access Denied: Project culdesac-labs: User does not have bigquery.datasets.create permission in project culdesac-labs.

2020-07-14 22:38:17.239624 (MainThread): Running with dbt=0.17.0-rc1
2020-07-14 22:38:17.427120 (MainThread): running dbt with arguments Namespace(cls=<class 'dbt.task.compile.CompileTask'>, debug=False, exclude=None, full_refresh=False, log_cache_events=False, log_format='default', models=None, parse_only=False, partial_parse=None, profile=None, profiles_dir='/Users/kristin/.dbt', project_dir=None, record_timing_info=None, rpc_method='compile', single_threaded=False, strict=False, target=None, test_new_parser=False, threads=None, use_cache=True, vars='{}', version_check=True, warn_error=False, which='compile', write_json=True)
2020-07-14 22:38:17.427938 (MainThread): Tracking: tracking
2020-07-14 22:38:17.435318 (MainThread): Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'start', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x1119c7b50>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x1119d9e20>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x1119d7130>]}
2020-07-14 22:38:17.453430 (MainThread): Partial parsing not enabled
2020-07-14 22:38:17.454922 (MainThread): Parsing macros/core.sql
2020-07-14 22:38:17.459298 (MainThread): Parsing macros/materializations/helpers.sql
2020-07-14 22:38:17.466047 (MainThread): Parsing macros/materializations/snapshot/snapshot_merge.sql
2020-07-14 22:38:17.467614 (MainThread): Parsing macros/materializations/snapshot/strategies.sql
2020-07-14 22:38:17.482197 (MainThread): Parsing macros/materializations/snapshot/snapshot.sql
2020-07-14 22:38:17.508100 (MainThread): Parsing macros/materializations/seed/seed.sql
2020-07-14 22:38:17.526260 (MainThread): Parsing macros/materializations/incremental/helpers.sql
2020-07-14 22:38:17.527870 (MainThread): Parsing macros/materializations/incremental/incremental.sql
2020-07-14 22:38:17.533659 (MainThread): Parsing macros/materializations/common/merge.sql
2020-07-14 22:38:17.546096 (MainThread): Parsing macros/materializations/table/table.sql
2020-07-14 22:38:17.552043 (MainThread): Parsing macros/materializations/view/view.sql
2020-07-14 22:38:17.557561 (MainThread): Parsing macros/materializations/view/create_or_replace_view.sql
2020-07-14 22:38:17.561689 (MainThread): Parsing macros/etc/get_custom_alias.sql
2020-07-14 22:38:17.562497 (MainThread): Parsing macros/etc/query.sql
2020-07-14 22:38:17.563684 (MainThread): Parsing macros/etc/is_incremental.sql
2020-07-14 22:38:17.565069 (MainThread): Parsing macros/etc/datetime.sql
2020-07-14 22:38:17.572725 (MainThread): Parsing macros/etc/get_custom_schema.sql
2020-07-14 22:38:17.574392 (MainThread): Parsing macros/etc/get_custom_database.sql
2020-07-14 22:38:17.575279 (MainThread): Parsing macros/adapters/common.sql
2020-07-14 22:38:17.619769 (MainThread): Parsing macros/schema_tests/relationships.sql
2020-07-14 22:38:17.620764 (MainThread): Parsing macros/schema_tests/not_null.sql
2020-07-14 22:38:17.621538 (MainThread): Parsing macros/schema_tests/unique.sql
2020-07-14 22:38:17.622452 (MainThread): Parsing macros/schema_tests/accepted_values.sql
2020-07-14 22:38:17.624396 (MainThread): Parsing macros/etc.sql
2020-07-14 22:38:17.624942 (MainThread): Parsing macros/catalog.sql
2020-07-14 22:38:17.630785 (MainThread): Parsing macros/adapters.sql
2020-07-14 22:38:17.644860 (MainThread): Parsing macros/materializations/seed.sql
2020-07-14 22:38:17.646805 (MainThread): Parsing macros/materializations/view.sql
2020-07-14 22:38:17.649026 (MainThread): Parsing macros/materializations/table.sql
2020-07-14 22:38:17.657428 (MainThread): Parsing macros/materializations/incremental.sql
2020-07-14 22:38:17.668138 (MainThread): Parsing macros/materializations/snapshot.sql
2020-07-14 22:38:17.714765 (MainThread): Partial parsing not enabled
2020-07-14 22:38:17.716365 (MainThread): Parsing macros/cross_db_utils/except.sql
2020-07-14 22:38:17.717312 (MainThread): Parsing macros/cross_db_utils/replace.sql
2020-07-14 22:38:17.718394 (MainThread): Parsing macros/cross_db_utils/concat.sql
2020-07-14 22:38:17.720283 (MainThread): Parsing macros/cross_db_utils/datatypes.sql
2020-07-14 22:38:17.725124 (MainThread): Parsing macros/cross_db_utils/_is_relation.sql
2020-07-14 22:38:17.726196 (MainThread): Parsing macros/cross_db_utils/length.sql
2020-07-14 22:38:17.727336 (MainThread): Parsing macros/cross_db_utils/dateadd.sql
2020-07-14 22:38:17.730287 (MainThread): Parsing macros/cross_db_utils/intersect.sql
2020-07-14 22:38:17.731248 (MainThread): Parsing macros/cross_db_utils/right.sql
2020-07-14 22:38:17.733257 (MainThread): Parsing macros/cross_db_utils/datediff.sql
2020-07-14 22:38:17.742192 (MainThread): Parsing macros/cross_db_utils/safe_cast.sql
2020-07-14 22:38:17.743810 (MainThread): Parsing macros/cross_db_utils/hash.sql
2020-07-14 22:38:17.745006 (MainThread): Parsing macros/cross_db_utils/identifier.sql
2020-07-14 22:38:17.746226 (MainThread): Parsing macros/cross_db_utils/position.sql
2020-07-14 22:38:17.747565 (MainThread): Parsing macros/cross_db_utils/literal.sql
2020-07-14 22:38:17.748363 (MainThread): Parsing macros/cross_db_utils/current_timestamp.sql
2020-07-14 22:38:17.772571 (MainThread): Parsing macros/cross_db_utils/width_bucket.sql
2020-07-14 22:38:17.779771 (MainThread): Parsing macros/cross_db_utils/last_day.sql
2020-07-14 22:38:17.783322 (MainThread): Parsing macros/cross_db_utils/split_part.sql
2020-07-14 22:38:17.785625 (MainThread): Parsing macros/cross_db_utils/date_trunc.sql
2020-07-14 22:38:17.787462 (MainThread): Parsing macros/cross_db_utils/_is_ephemeral.sql
2020-07-14 22:38:17.789577 (MainThread): Parsing macros/materializations/insert_by_period_materialization.sql
2020-07-14 22:38:17.815317 (MainThread): Parsing macros/logger/pretty_log_format.sql
2020-07-14 22:38:17.816028 (MainThread): Parsing macros/logger/pretty_time.sql
2020-07-14 22:38:17.816798 (MainThread): Parsing macros/logger/log_info.sql
2020-07-14 22:38:17.817518 (MainThread): Parsing macros/datetime/date_spine.sql
2020-07-14 22:38:17.820968 (MainThread): Parsing macros/web/get_url_host.sql
2020-07-14 22:38:17.822279 (MainThread): Parsing macros/web/get_url_path.sql
2020-07-14 22:38:17.824248 (MainThread): Parsing macros/web/get_url_parameter.sql
2020-07-14 22:38:17.825234 (MainThread): Parsing macros/geo/haversine_distance.sql
2020-07-14 22:38:17.826061 (MainThread): Parsing macros/schema_tests/equal_rowcount.sql
2020-07-14 22:38:17.827171 (MainThread): Parsing macros/schema_tests/relationships_where.sql
2020-07-14 22:38:17.828949 (MainThread): Parsing macros/schema_tests/recency.sql
2020-07-14 22:38:17.830002 (MainThread): Parsing macros/schema_tests/not_constant.sql
2020-07-14 22:38:17.830862 (MainThread): Parsing macros/schema_tests/test_unique_where.sql
2020-07-14 22:38:17.832225 (MainThread): Parsing macros/schema_tests/at_least_one.sql
2020-07-14 22:38:17.833076 (MainThread): Parsing macros/schema_tests/unique_combination_of_columns.sql
2020-07-14 22:38:17.834090 (MainThread): Parsing macros/schema_tests/cardinality_equality.sql
2020-07-14 22:38:17.835452 (MainThread): Parsing macros/schema_tests/expression_is_true.sql
2020-07-14 22:38:17.836388 (MainThread): Parsing macros/schema_tests/test_not_null_where.sql
2020-07-14 22:38:17.837602 (MainThread): Parsing macros/schema_tests/equality.sql
2020-07-14 22:38:17.840842 (MainThread): Parsing macros/schema_tests/mutually_exclusive_ranges.sql
2020-07-14 22:38:17.845760 (MainThread): Parsing macros/sql/nullcheck_table.sql
2020-07-14 22:38:17.846835 (MainThread): Parsing macros/sql/get_relations_by_pattern.sql
2020-07-14 22:38:17.849018 (MainThread): Parsing macros/sql/generate_series.sql
2020-07-14 22:38:17.852665 (MainThread): Parsing macros/sql/get_relations_by_prefix.sql
2020-07-14 22:38:17.855784 (MainThread): Parsing macros/sql/get_tables_by_prefix_sql.sql
2020-07-14 22:38:17.858030 (MainThread): Parsing macros/sql/star.sql
2020-07-14 22:38:17.861020 (MainThread): Parsing macros/sql/unpivot.sql
2020-07-14 22:38:17.866671 (MainThread): Parsing macros/sql/union.sql
2020-07-14 22:38:17.875017 (MainThread): Parsing macros/sql/groupby.sql
2020-07-14 22:38:17.876065 (MainThread): Parsing macros/sql/get_tables_by_pattern.sql
2020-07-14 22:38:17.877243 (MainThread): Parsing macros/sql/surrogate_key.sql
2020-07-14 22:38:17.879616 (MainThread): Parsing macros/sql/safe_add.sql
2020-07-14 22:38:17.880516 (MainThread): Parsing macros/sql/nullcheck.sql
2020-07-14 22:38:17.881571 (MainThread): Parsing macros/sql/get_column_values.sql
2020-07-14 22:38:17.886813 (MainThread): Parsing macros/sql/pivot.sql
2020-07-14 22:38:17.889860 (MainThread): Parsing macros/sql/get_query_results_as_dict.sql
2020-07-14 22:38:17.926783 (MainThread): Acquiring new bigquery connection "model.stripe.stripe_weekly_overview".
2020-07-14 22:38:17.926899 (MainThread): Opening a new connection, currently in state init
2020-07-14 22:38:17.944452 (MainThread): Acquiring new bigquery connection "model.stripe.stripe_daily_overview".
2020-07-14 22:38:17.944559 (MainThread): Opening a new connection, currently in state closed
2020-07-14 22:38:17.954783 (MainThread): Acquiring new bigquery connection "model.stripe.stripe_invoice_details".
2020-07-14 22:38:17.954882 (MainThread): Opening a new connection, currently in state closed
2020-07-14 22:38:17.968497 (MainThread): Acquiring new bigquery connection "model.stripe.stripe_customer_overview".
2020-07-14 22:38:17.968688 (MainThread): Opening a new connection, currently in state closed
2020-07-14 22:38:17.979516 (MainThread): Acquiring new bigquery connection "model.stripe.stripe_balance_transactions".
2020-07-14 22:38:17.979605 (MainThread): Opening a new connection, currently in state closed
2020-07-14 22:38:17.987938 (MainThread): Acquiring new bigquery connection "model.stripe.stripe_quarterly_overview".
2020-07-14 22:38:17.988013 (MainThread): Opening a new connection, currently in state closed
2020-07-14 22:38:17.997904 (MainThread): Acquiring new bigquery connection "model.stripe.stripe_monthly_overview".
2020-07-14 22:38:17.998004 (MainThread): Opening a new connection, currently in state closed
2020-07-14 22:38:18.007405 (MainThread): Acquiring new bigquery connection "model.stripe.stripe_subscription_details".
2020-07-14 22:38:18.007482 (MainThread): Opening a new connection, currently in state closed
2020-07-14 22:38:18.020438 (MainThread): Acquiring new bigquery connection "model.stripe.stripe_balance_transaction_joined".
2020-07-14 22:38:18.020516 (MainThread): Opening a new connection, currently in state closed
2020-07-14 22:38:18.036839 (MainThread): Acquiring new bigquery connection "model.stripe.stripe_incomplete_charges".
2020-07-14 22:38:18.036950 (MainThread): Opening a new connection, currently in state closed
2020-07-14 22:38:18.346071 (MainThread): Acquiring new bigquery connection "model.stripe_source.stg_stripe_card".
2020-07-14 22:38:18.346219 (MainThread): Opening a new connection, currently in state closed
2020-07-14 22:38:18.359829 (MainThread): Acquiring new bigquery connection "model.stripe_source.stg_stripe_invoice_line_item".
2020-07-14 22:38:18.359961 (MainThread): Opening a new connection, currently in state closed
2020-07-14 22:38:18.374922 (MainThread): Acquiring new bigquery connection "model.stripe_source.stg_stripe_payment_method_card".
2020-07-14 22:38:18.375134 (MainThread): Opening a new connection, currently in state closed
2020-07-14 22:38:18.386980 (MainThread): Acquiring new bigquery connection "model.stripe_source.stg_stripe_charge".
2020-07-14 22:38:18.387100 (MainThread): Opening a new connection, currently in state closed
2020-07-14 22:38:18.398772 (MainThread): Acquiring new bigquery connection "model.stripe_source.stg_stripe_payout".
2020-07-14 22:38:18.398890 (MainThread): Opening a new connection, currently in state closed
2020-07-14 22:38:18.412490 (MainThread): Acquiring new bigquery connection "model.stripe_source.stg_stripe_customer".
2020-07-14 22:38:18.412613 (MainThread): Opening a new connection, currently in state closed
2020-07-14 22:38:18.423753 (MainThread): Acquiring new bigquery connection "model.stripe_source.stg_stripe_refund".
2020-07-14 22:38:18.423866 (MainThread): Opening a new connection, currently in state closed
2020-07-14 22:38:18.435085 (MainThread): Acquiring new bigquery connection "model.stripe_source.stg_stripe_subscription".
2020-07-14 22:38:18.435180 (MainThread): Opening a new connection, currently in state closed
2020-07-14 22:38:18.449404 (MainThread): Acquiring new bigquery connection "model.stripe_source.stg_stripe_payment_method".
2020-07-14 22:38:18.449510 (MainThread): Opening a new connection, currently in state closed
2020-07-14 22:38:18.462099 (MainThread): Acquiring new bigquery connection "model.stripe_source.stg_stripe_payment_intent".
2020-07-14 22:38:18.462210 (MainThread): Opening a new connection, currently in state closed
2020-07-14 22:38:18.474394 (MainThread): Acquiring new bigquery connection "model.stripe_source.stg_stripe_invoice".
2020-07-14 22:38:18.474506 (MainThread): Opening a new connection, currently in state closed
2020-07-14 22:38:18.486816 (MainThread): Acquiring new bigquery connection "model.stripe_source.stg_stripe_fee".
2020-07-14 22:38:18.486924 (MainThread): Opening a new connection, currently in state closed
2020-07-14 22:38:18.498384 (MainThread): Acquiring new bigquery connection "model.stripe_source.stg_stripe_balance_transaction".
2020-07-14 22:38:18.498472 (MainThread): Opening a new connection, currently in state closed
2020-07-14 22:38:20.654238 (MainThread): Found 23 models, 16 tests, 0 snapshots, 0 analyses, 278 macros, 0 operations, 0 seed files, 13 sources
2020-07-14 22:38:20.688403 (MainThread): 
2020-07-14 22:38:20.688713 (MainThread): Acquiring new bigquery connection "master".
2020-07-14 22:38:20.688790 (MainThread): Opening a new connection, currently in state closed
2020-07-14 22:38:20.712228 (ThreadPoolExecutor-0_0): Acquiring new bigquery connection "list_culdesac-labs".
2020-07-14 22:38:20.712347 (ThreadPoolExecutor-0_0): Opening a new connection, currently in state init
2020-07-14 22:38:20.712785 (ThreadPoolExecutor-0_1): Acquiring new bigquery connection "list_dbt-package-testing".
2020-07-14 22:38:20.712874 (ThreadPoolExecutor-0_1): Opening a new connection, currently in state init
2020-07-14 22:38:20.713698 (ThreadPoolExecutor-0_1): Your application has authenticated using end user credentials from Google Cloud SDK. We recommend that most server applications use service accounts instead. If your application continues to use end user credentials from Cloud SDK, you might receive a "quota exceeded" or "API not enabled" error. For more information about service accounts, see https://cloud.google.com/docs/authentication/
2020-07-14 22:38:20.713831 (ThreadPoolExecutor-0_0): Your application has authenticated using end user credentials from Google Cloud SDK. We recommend that most server applications use service accounts instead. If your application continues to use end user credentials from Cloud SDK, you might receive a "quota exceeded" or "API not enabled" error. For more information about service accounts, see https://cloud.google.com/docs/authentication/
2020-07-14 22:38:22.253695 (ThreadPoolExecutor-0_1): Acquiring new bigquery connection "create_culdesac-labs_dbt_kristin_2".
2020-07-14 22:38:22.254576 (ThreadPoolExecutor-0_1): Re-using an available connection from the pool (formerly list_dbt-package-testing).
2020-07-14 22:38:22.254820 (ThreadPoolExecutor-0_1): Creating schema "culdesac-labs.dbt_kristin_2".
2020-07-14 22:38:22.255059 (ThreadPoolExecutor-0_1): Client.dataset is deprecated and will be removed in a future version. Use a string like 'my_project.my_dataset' or a cloud.google.bigquery.DatasetReference object, instead.
2020-07-14 22:38:22.450891 (MainThread): Connection 'master' was properly closed.
2020-07-14 22:38:22.451053 (MainThread): Connection 'list_culdesac-labs' was left open.
2020-07-14 22:38:22.451145 (MainThread): Connection 'create_culdesac-labs_dbt_kristin_2' was left open.
2020-07-14 22:38:22.451382 (MainThread): Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'end', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x111bea910>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x111dae400>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x111dae250>]}
2020-07-14 22:38:22.451667 (MainThread): Flushing usage events
2020-07-14 22:38:22.798480 (MainThread): Encountered an error:
2020-07-14 22:38:22.798695 (MainThread): Database Error
  Access Denied: Project culdesac-labs: User does not have bigquery.datasets.create permission in project culdesac-labs.
2020-07-14 22:38:22.806177 (MainThread): Traceback (most recent call last):
  File "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/adapters/bigquery/connections.py", line 83, in exception_handler
    yield
  File "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/adapters/bigquery/connections.py", line 354, in _retry_and_handle
    return retry.retry_target(
  File "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/google/api_core/retry.py", line 184, in retry_target
    return target()
  File "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/adapters/bigquery/connections.py", line 339, in fn
    return client.create_dataset(dataset, exists_ok=True)
  File "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/google/cloud/bigquery/client.py", line 460, in create_dataset
    api_response = self._call_api(
  File "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/google/cloud/bigquery/client.py", line 556, in _call_api
    return call()
  File "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/google/api_core/retry.py", line 281, in retry_wrapped_func
    return retry_target(
  File "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/google/api_core/retry.py", line 184, in retry_target
    return target()
  File "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/google/cloud/_http.py", line 423, in api_request
    raise exceptions.from_http_response(response)
google.api_core.exceptions.Forbidden: 403 POST https://bigquery.googleapis.com/bigquery/v2/projects/culdesac-labs/datasets: Access Denied: Project culdesac-labs: User does not have bigquery.datasets.create permission in project culdesac-labs.

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/main.py", line 81, in main
    results, succeeded = handle_and_check(args)
  File "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/main.py", line 159, in handle_and_check
    task, res = run_from_args(parsed)
  File "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/main.py", line 212, in run_from_args
    results = task.run()
  File "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/task/runnable.py", line 416, in run
    result = self.execute_with_hooks(selected_uids)
  File "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/task/runnable.py", line 376, in execute_with_hooks
    self.before_run(adapter, selected_uids)
  File "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/task/runnable.py", line 362, in before_run
    self.create_schemas(adapter, selected_uids)
  File "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/task/runnable.py", line 515, in create_schemas
    create_future.result()
  File "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/concurrent/futures/_base.py", line 432, in result
    return self.__get_result()
  File "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/concurrent/futures/_base.py", line 388, in __get_result
    raise self._exception
  File "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/concurrent/futures/thread.py", line 57, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/task/runnable.py", line 481, in create_schema
    adapter.create_schema(relation)
  File "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/adapters/bigquery/impl.py", line 266, in create_schema
    self.connections.create_dataset(database, schema)
  File "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/adapters/bigquery/connections.py", line 340, in create_dataset
    self._retry_and_handle(msg='create dataset', conn=conn, fn=fn)
  File "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/adapters/bigquery/connections.py", line 354, in _retry_and_handle
    return retry.retry_target(
  File "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/contextlib.py", line 131, in __exit__
    self.gen.throw(type, value, traceback)
  File "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/adapters/bigquery/connections.py", line 91, in exception_handler
    self.handle_error(e, message)
  File "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/adapters/bigquery/connections.py", line 75, in handle_error
    raise DatabaseException(error_msg)
dbt.exceptions.DatabaseException: Database Error
  Access Denied: Project culdesac-labs: User does not have bigquery.datasets.create permission in project culdesac-labs.

2020-07-23 16:31:11.400739 (MainThread): Running with dbt=0.17.0-rc1
2020-07-23 16:31:11.817369 (MainThread): running dbt with arguments Namespace(cls=<class 'dbt.task.generate.GenerateTask'>, compile=True, debug=False, exclude=None, log_cache_events=False, log_format='default', models=None, partial_parse=None, profile=None, profiles_dir='/Users/kristin/.dbt', project_dir=None, record_timing_info=None, rpc_method='docs.generate', single_threaded=False, strict=False, target=None, test_new_parser=False, threads=None, use_cache=True, vars='{}', version_check=True, warn_error=False, which='generate', write_json=True)
2020-07-23 16:31:11.819361 (MainThread): Tracking: tracking
2020-07-23 16:31:11.833847 (MainThread): Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'start', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x10fde5460>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x1105d2af0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x1105caac0>]}
2020-07-23 16:31:11.854434 (MainThread): Partial parsing not enabled
2020-07-23 16:31:11.857186 (MainThread): Parsing macros/core.sql
2020-07-23 16:31:11.863355 (MainThread): Parsing macros/materializations/helpers.sql
2020-07-23 16:31:11.871680 (MainThread): Parsing macros/materializations/snapshot/snapshot_merge.sql
2020-07-23 16:31:11.873959 (MainThread): Parsing macros/materializations/snapshot/strategies.sql
2020-07-23 16:31:11.889492 (MainThread): Parsing macros/materializations/snapshot/snapshot.sql
2020-07-23 16:31:11.917244 (MainThread): Parsing macros/materializations/seed/seed.sql
2020-07-23 16:31:11.942204 (MainThread): Parsing macros/materializations/incremental/helpers.sql
2020-07-23 16:31:11.944085 (MainThread): Parsing macros/materializations/incremental/incremental.sql
2020-07-23 16:31:11.950905 (MainThread): Parsing macros/materializations/common/merge.sql
2020-07-23 16:31:11.964754 (MainThread): Parsing macros/materializations/table/table.sql
2020-07-23 16:31:11.970964 (MainThread): Parsing macros/materializations/view/view.sql
2020-07-23 16:31:11.976829 (MainThread): Parsing macros/materializations/view/create_or_replace_view.sql
2020-07-23 16:31:11.981665 (MainThread): Parsing macros/etc/get_custom_alias.sql
2020-07-23 16:31:11.982918 (MainThread): Parsing macros/etc/query.sql
2020-07-23 16:31:11.984150 (MainThread): Parsing macros/etc/is_incremental.sql
2020-07-23 16:31:11.985746 (MainThread): Parsing macros/etc/datetime.sql
2020-07-23 16:31:11.993768 (MainThread): Parsing macros/etc/get_custom_schema.sql
2020-07-23 16:31:11.995808 (MainThread): Parsing macros/etc/get_custom_database.sql
2020-07-23 16:31:11.997187 (MainThread): Parsing macros/adapters/common.sql
2020-07-23 16:31:12.042991 (MainThread): Parsing macros/schema_tests/relationships.sql
2020-07-23 16:31:12.044487 (MainThread): Parsing macros/schema_tests/not_null.sql
2020-07-23 16:31:12.045715 (MainThread): Parsing macros/schema_tests/unique.sql
2020-07-23 16:31:12.047031 (MainThread): Parsing macros/schema_tests/accepted_values.sql
2020-07-23 16:31:12.049471 (MainThread): Parsing macros/etc.sql
2020-07-23 16:31:12.050709 (MainThread): Parsing macros/catalog.sql
2020-07-23 16:31:12.056965 (MainThread): Parsing macros/adapters.sql
2020-07-23 16:31:12.071394 (MainThread): Parsing macros/materializations/seed.sql
2020-07-23 16:31:12.073565 (MainThread): Parsing macros/materializations/view.sql
2020-07-23 16:31:12.075910 (MainThread): Parsing macros/materializations/table.sql
2020-07-23 16:31:12.085060 (MainThread): Parsing macros/materializations/incremental.sql
2020-07-23 16:31:12.096458 (MainThread): Parsing macros/materializations/snapshot.sql
2020-07-23 16:31:12.149244 (MainThread): Partial parsing not enabled
2020-07-23 16:31:12.154478 (MainThread): Parsing macros/cross_db_utils/except.sql
2020-07-23 16:31:12.156200 (MainThread): Parsing macros/cross_db_utils/replace.sql
2020-07-23 16:31:12.158082 (MainThread): Parsing macros/cross_db_utils/concat.sql
2020-07-23 16:31:12.161018 (MainThread): Parsing macros/cross_db_utils/datatypes.sql
2020-07-23 16:31:12.166946 (MainThread): Parsing macros/cross_db_utils/_is_relation.sql
2020-07-23 16:31:12.168594 (MainThread): Parsing macros/cross_db_utils/length.sql
2020-07-23 16:31:12.170065 (MainThread): Parsing macros/cross_db_utils/dateadd.sql
2020-07-23 16:31:12.172693 (MainThread): Parsing macros/cross_db_utils/intersect.sql
2020-07-23 16:31:12.174372 (MainThread): Parsing macros/cross_db_utils/right.sql
2020-07-23 16:31:12.177222 (MainThread): Parsing macros/cross_db_utils/datediff.sql
2020-07-23 16:31:12.187301 (MainThread): Parsing macros/cross_db_utils/safe_cast.sql
2020-07-23 16:31:12.189854 (MainThread): Parsing macros/cross_db_utils/hash.sql
2020-07-23 16:31:12.191394 (MainThread): Parsing macros/cross_db_utils/identifier.sql
2020-07-23 16:31:12.192964 (MainThread): Parsing macros/cross_db_utils/position.sql
2020-07-23 16:31:12.194646 (MainThread): Parsing macros/cross_db_utils/literal.sql
2020-07-23 16:31:12.195730 (MainThread): Parsing macros/cross_db_utils/current_timestamp.sql
2020-07-23 16:31:12.222291 (MainThread): Parsing macros/cross_db_utils/width_bucket.sql
2020-07-23 16:31:12.229679 (MainThread): Parsing macros/cross_db_utils/last_day.sql
2020-07-23 16:31:12.233518 (MainThread): Parsing macros/cross_db_utils/split_part.sql
2020-07-23 16:31:12.236188 (MainThread): Parsing macros/cross_db_utils/date_trunc.sql
2020-07-23 16:31:12.238431 (MainThread): Parsing macros/cross_db_utils/_is_ephemeral.sql
2020-07-23 16:31:12.240924 (MainThread): Parsing macros/materializations/insert_by_period_materialization.sql
2020-07-23 16:31:12.267872 (MainThread): Parsing macros/logger/pretty_log_format.sql
2020-07-23 16:31:12.268851 (MainThread): Parsing macros/logger/pretty_time.sql
2020-07-23 16:31:12.269910 (MainThread): Parsing macros/logger/log_info.sql
2020-07-23 16:31:12.270931 (MainThread): Parsing macros/datetime/date_spine.sql
2020-07-23 16:31:12.275044 (MainThread): Parsing macros/web/get_url_host.sql
2020-07-23 16:31:12.277243 (MainThread): Parsing macros/web/get_url_path.sql
2020-07-23 16:31:12.279951 (MainThread): Parsing macros/web/get_url_parameter.sql
2020-07-23 16:31:12.281351 (MainThread): Parsing macros/geo/haversine_distance.sql
2020-07-23 16:31:12.282550 (MainThread): Parsing macros/schema_tests/equal_rowcount.sql
2020-07-23 16:31:12.284090 (MainThread): Parsing macros/schema_tests/relationships_where.sql
2020-07-23 16:31:12.286368 (MainThread): Parsing macros/schema_tests/recency.sql
2020-07-23 16:31:12.287824 (MainThread): Parsing macros/schema_tests/not_constant.sql
2020-07-23 16:31:12.289036 (MainThread): Parsing macros/schema_tests/test_unique_where.sql
2020-07-23 16:31:12.290772 (MainThread): Parsing macros/schema_tests/at_least_one.sql
2020-07-23 16:31:12.291888 (MainThread): Parsing macros/schema_tests/unique_combination_of_columns.sql
2020-07-23 16:31:12.293159 (MainThread): Parsing macros/schema_tests/cardinality_equality.sql
2020-07-23 16:31:12.294854 (MainThread): Parsing macros/schema_tests/expression_is_true.sql
2020-07-23 16:31:12.296027 (MainThread): Parsing macros/schema_tests/test_not_null_where.sql
2020-07-23 16:31:12.297455 (MainThread): Parsing macros/schema_tests/equality.sql
2020-07-23 16:31:12.300581 (MainThread): Parsing macros/schema_tests/mutually_exclusive_ranges.sql
2020-07-23 16:31:12.305744 (MainThread): Parsing macros/sql/nullcheck_table.sql
2020-07-23 16:31:12.307107 (MainThread): Parsing macros/sql/get_relations_by_pattern.sql
2020-07-23 16:31:12.309483 (MainThread): Parsing macros/sql/generate_series.sql
2020-07-23 16:31:12.312528 (MainThread): Parsing macros/sql/get_relations_by_prefix.sql
2020-07-23 16:31:12.315784 (MainThread): Parsing macros/sql/get_tables_by_prefix_sql.sql
2020-07-23 16:31:12.318211 (MainThread): Parsing macros/sql/star.sql
2020-07-23 16:31:12.320841 (MainThread): Parsing macros/sql/unpivot.sql
2020-07-23 16:31:12.326530 (MainThread): Parsing macros/sql/union.sql
2020-07-23 16:31:12.334699 (MainThread): Parsing macros/sql/groupby.sql
2020-07-23 16:31:12.335711 (MainThread): Parsing macros/sql/get_tables_by_pattern.sql
2020-07-23 16:31:12.336724 (MainThread): Parsing macros/sql/surrogate_key.sql
2020-07-23 16:31:12.339306 (MainThread): Parsing macros/sql/safe_add.sql
2020-07-23 16:31:12.340566 (MainThread): Parsing macros/sql/nullcheck.sql
2020-07-23 16:31:12.341942 (MainThread): Parsing macros/sql/get_column_values.sql
2020-07-23 16:31:12.345858 (MainThread): Parsing macros/sql/pivot.sql
2020-07-23 16:31:12.348437 (MainThread): Parsing macros/sql/get_query_results_as_dict.sql
2020-07-23 16:31:12.381505 (MainThread): Acquiring new bigquery connection "model.stripe.stripe_weekly_overview".
2020-07-23 16:31:12.381617 (MainThread): Opening a new connection, currently in state init
2020-07-23 16:31:12.398398 (MainThread): Acquiring new bigquery connection "model.stripe.stripe_daily_overview".
2020-07-23 16:31:12.398510 (MainThread): Opening a new connection, currently in state closed
2020-07-23 16:31:12.408166 (MainThread): Acquiring new bigquery connection "model.stripe.stripe_invoice_details".
2020-07-23 16:31:12.408238 (MainThread): Opening a new connection, currently in state closed
2020-07-23 16:31:12.421144 (MainThread): Acquiring new bigquery connection "model.stripe.stripe_customer_overview".
2020-07-23 16:31:12.421255 (MainThread): Opening a new connection, currently in state closed
2020-07-23 16:31:12.432364 (MainThread): Acquiring new bigquery connection "model.stripe.stripe_balance_transactions".
2020-07-23 16:31:12.432470 (MainThread): Opening a new connection, currently in state closed
2020-07-23 16:31:12.441263 (MainThread): Acquiring new bigquery connection "model.stripe.stripe_quarterly_overview".
2020-07-23 16:31:12.441333 (MainThread): Opening a new connection, currently in state closed
2020-07-23 16:31:12.450536 (MainThread): Acquiring new bigquery connection "model.stripe.stripe_monthly_overview".
2020-07-23 16:31:12.450607 (MainThread): Opening a new connection, currently in state closed
2020-07-23 16:31:12.460440 (MainThread): Acquiring new bigquery connection "model.stripe.stripe_subscription_details".
2020-07-23 16:31:12.460516 (MainThread): Opening a new connection, currently in state closed
2020-07-23 16:31:12.476963 (MainThread): Acquiring new bigquery connection "model.stripe.stripe_balance_transaction_joined".
2020-07-23 16:31:12.477130 (MainThread): Opening a new connection, currently in state closed
2020-07-23 16:31:12.494257 (MainThread): Acquiring new bigquery connection "model.stripe.stripe_incomplete_charges".
2020-07-23 16:31:12.494334 (MainThread): Opening a new connection, currently in state closed
2020-07-23 16:31:12.770010 (MainThread): Acquiring new bigquery connection "model.stripe_source.stg_stripe_card".
2020-07-23 16:31:12.770141 (MainThread): Opening a new connection, currently in state closed
2020-07-23 16:31:12.784549 (MainThread): Acquiring new bigquery connection "model.stripe_source.stg_stripe_invoice_line_item".
2020-07-23 16:31:12.784687 (MainThread): Opening a new connection, currently in state closed
2020-07-23 16:31:12.799372 (MainThread): Acquiring new bigquery connection "model.stripe_source.stg_stripe_payment_method_card".
2020-07-23 16:31:12.799498 (MainThread): Opening a new connection, currently in state closed
2020-07-23 16:31:12.813790 (MainThread): Acquiring new bigquery connection "model.stripe_source.stg_stripe_charge".
2020-07-23 16:31:12.813909 (MainThread): Opening a new connection, currently in state closed
2020-07-23 16:31:12.825935 (MainThread): Acquiring new bigquery connection "model.stripe_source.stg_stripe_payout".
2020-07-23 16:31:12.826049 (MainThread): Opening a new connection, currently in state closed
2020-07-23 16:31:12.837883 (MainThread): Acquiring new bigquery connection "model.stripe_source.stg_stripe_customer".
2020-07-23 16:31:12.837992 (MainThread): Opening a new connection, currently in state closed
2020-07-23 16:31:12.849717 (MainThread): Acquiring new bigquery connection "model.stripe_source.stg_stripe_refund".
2020-07-23 16:31:12.849826 (MainThread): Opening a new connection, currently in state closed
2020-07-23 16:31:12.862421 (MainThread): Acquiring new bigquery connection "model.stripe_source.stg_stripe_subscription".
2020-07-23 16:31:12.862533 (MainThread): Opening a new connection, currently in state closed
2020-07-23 16:31:12.875350 (MainThread): Acquiring new bigquery connection "model.stripe_source.stg_stripe_payment_method".
2020-07-23 16:31:12.875460 (MainThread): Opening a new connection, currently in state closed
2020-07-23 16:31:12.887180 (MainThread): Acquiring new bigquery connection "model.stripe_source.stg_stripe_payment_intent".
2020-07-23 16:31:12.887253 (MainThread): Opening a new connection, currently in state closed
2020-07-23 16:31:12.898789 (MainThread): Acquiring new bigquery connection "model.stripe_source.stg_stripe_invoice".
2020-07-23 16:31:12.898899 (MainThread): Opening a new connection, currently in state closed
2020-07-23 16:31:12.911442 (MainThread): Acquiring new bigquery connection "model.stripe_source.stg_stripe_fee".
2020-07-23 16:31:12.911554 (MainThread): Opening a new connection, currently in state closed
2020-07-23 16:31:12.924150 (MainThread): Acquiring new bigquery connection "model.stripe_source.stg_stripe_balance_transaction".
2020-07-23 16:31:12.924256 (MainThread): Opening a new connection, currently in state closed
2020-07-23 16:31:14.920378 (MainThread): WARNING: Found documentation for resource "payment_method_card" which was not found or is disabled
2020-07-23 16:31:15.458584 (MainThread): Found 23 models, 34 tests, 0 snapshots, 0 analyses, 278 macros, 0 operations, 0 seed files, 13 sources
2020-07-23 16:31:15.510675 (MainThread): 
2020-07-23 16:31:15.511039 (MainThread): Acquiring new bigquery connection "master".
2020-07-23 16:31:15.511124 (MainThread): Opening a new connection, currently in state closed
2020-07-23 16:31:15.536060 (ThreadPoolExecutor-0_0): Acquiring new bigquery connection "list_culdesac-labs".
2020-07-23 16:31:15.536445 (ThreadPoolExecutor-0_1): Acquiring new bigquery connection "list_dbt-package-testing".
2020-07-23 16:31:15.536608 (ThreadPoolExecutor-0_0): Opening a new connection, currently in state init
2020-07-23 16:31:15.536702 (ThreadPoolExecutor-0_1): Opening a new connection, currently in state init
2020-07-23 16:31:15.539686 (ThreadPoolExecutor-0_0): Your application has authenticated using end user credentials from Google Cloud SDK. We recommend that most server applications use service accounts instead. If your application continues to use end user credentials from Cloud SDK, you might receive a "quota exceeded" or "API not enabled" error. For more information about service accounts, see https://cloud.google.com/docs/authentication/
2020-07-23 16:31:15.539868 (ThreadPoolExecutor-0_1): Your application has authenticated using end user credentials from Google Cloud SDK. We recommend that most server applications use service accounts instead. If your application continues to use end user credentials from Cloud SDK, you might receive a "quota exceeded" or "API not enabled" error. For more information about service accounts, see https://cloud.google.com/docs/authentication/
2020-07-23 16:31:17.643492 (ThreadPoolExecutor-0_0): Unhandled error while running:
list dataset
2020-07-23 16:31:17.643786 (ThreadPoolExecutor-0_0): ('invalid_grant: reauth related error (invalid_rapt)', '{\n  "error": "invalid_grant",\n  "error_description": "reauth related error (invalid_rapt)",\n  "error_subtype": "invalid_rapt"\n}')
2020-07-23 16:31:17.966803 (ThreadPoolExecutor-0_1): Unhandled error while running:
list dataset
2020-07-23 16:31:17.967009 (ThreadPoolExecutor-0_1): ('invalid_grant: reauth related error (invalid_rapt)', '{\n  "error": "invalid_grant",\n  "error_description": "reauth related error (invalid_rapt)",\n  "error_subtype": "invalid_rapt"\n}')
2020-07-23 16:31:17.967810 (MainThread): Connection 'master' was properly closed.
2020-07-23 16:31:17.967975 (MainThread): Connection 'list_culdesac-labs' was left open.
2020-07-23 16:31:17.968104 (MainThread): Connection 'list_dbt-package-testing' was left open.
2020-07-23 16:31:17.968445 (MainThread): Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'end', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x110994100>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x110994310>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x1106f9340>]}
2020-07-23 16:31:17.968841 (MainThread): Flushing usage events
2020-07-23 16:31:18.359221 (MainThread): Encountered an error:
2020-07-23 16:31:18.359448 (MainThread): Runtime Error
  ('invalid_grant: reauth related error (invalid_rapt)', '{\n  "error": "invalid_grant",\n  "error_description": "reauth related error (invalid_rapt)",\n  "error_subtype": "invalid_rapt"\n}')
2020-07-23 16:31:18.375928 (MainThread): Traceback (most recent call last):
  File "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/adapters/bigquery/connections.py", line 83, in exception_handler
    yield
  File "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/adapters/bigquery/connections.py", line 354, in _retry_and_handle
    return retry.retry_target(
  File "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/google/api_core/retry.py", line 184, in retry_target
    return target()
  File "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/adapters/bigquery/impl.py", line 162, in query_schemas
    return [ds.dataset_id for ds in all_datasets]
  File "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/adapters/bigquery/impl.py", line 162, in <listcomp>
    return [ds.dataset_id for ds in all_datasets]
  File "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/google/api_core/page_iterator.py", line 212, in _items_iter
    for page in self._page_iter(increment=False):
  File "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/google/api_core/page_iterator.py", line 243, in _page_iter
    page = self._next_page()
  File "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/google/api_core/page_iterator.py", line 369, in _next_page
    response = self._get_next_page_response()
  File "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/google/api_core/page_iterator.py", line 418, in _get_next_page_response
    return self.api_request(
  File "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/google/cloud/bigquery/client.py", line 556, in _call_api
    return call()
  File "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/google/api_core/retry.py", line 281, in retry_wrapped_func
    return retry_target(
  File "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/google/api_core/retry.py", line 184, in retry_target
    return target()
  File "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/google/cloud/_http.py", line 412, in api_request
    response = self._make_request(
  File "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/google/cloud/_http.py", line 276, in _make_request
    return self._do_request(
  File "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/google/cloud/_http.py", line 314, in _do_request
    return self.http.request(
  File "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/google/auth/transport/requests.py", line 442, in request
    self.credentials.before_request(auth_request, method, url, request_headers)
  File "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/google/auth/credentials.py", line 124, in before_request
    self.refresh(request)
  File "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/google/oauth2/credentials.py", line 177, in refresh
    access_token, refresh_token, expiry, grant_response = _client.refresh_grant(
  File "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/google/oauth2/_client.py", line 248, in refresh_grant
    response_data = _token_endpoint_request(request, token_uri, body)
  File "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/google/oauth2/_client.py", line 124, in _token_endpoint_request
    _handle_error_response(response_body)
  File "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/google/oauth2/_client.py", line 60, in _handle_error_response
    raise exceptions.RefreshError(error_details, response_body)
google.auth.exceptions.RefreshError: ('invalid_grant: reauth related error (invalid_rapt)', '{\n  "error": "invalid_grant",\n  "error_description": "reauth related error (invalid_rapt)",\n  "error_subtype": "invalid_rapt"\n}')

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/main.py", line 81, in main
    results, succeeded = handle_and_check(args)
  File "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/main.py", line 159, in handle_and_check
    task, res = run_from_args(parsed)
  File "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/main.py", line 212, in run_from_args
    results = task.run()
  File "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/task/generate.py", line 208, in run
    compile_results = CompileTask.run(self)
  File "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/task/runnable.py", line 416, in run
    result = self.execute_with_hooks(selected_uids)
  File "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/task/runnable.py", line 376, in execute_with_hooks
    self.before_run(adapter, selected_uids)
  File "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/task/runnable.py", line 362, in before_run
    self.create_schemas(adapter, selected_uids)
  File "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/task/runnable.py", line 492, in create_schemas
    existing_schemas_lowered.update(ls_future.result())
  File "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/concurrent/futures/_base.py", line 432, in result
    return self.__get_result()
  File "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/concurrent/futures/_base.py", line 388, in __get_result
    raise self._exception
  File "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/concurrent/futures/thread.py", line 57, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/task/runnable.py", line 473, in list_schemas
    for s in adapter.list_schemas(database_quoted)
  File "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/adapters/bigquery/impl.py", line 164, in list_schemas
    return self.connections._retry_and_handle(
  File "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/adapters/bigquery/connections.py", line 354, in _retry_and_handle
    return retry.retry_target(
  File "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/contextlib.py", line 131, in __exit__
    self.gen.throw(type, value, traceback)
  File "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/adapters/bigquery/connections.py", line 106, in exception_handler
    raise RuntimeException(exc_message)
dbt.exceptions.RuntimeException: Runtime Error
  ('invalid_grant: reauth related error (invalid_rapt)', '{\n  "error": "invalid_grant",\n  "error_description": "reauth related error (invalid_rapt)",\n  "error_subtype": "invalid_rapt"\n}')

2020-07-23 16:33:16.020433 (MainThread): Running with dbt=0.17.0-rc1
2020-07-23 16:33:16.353667 (MainThread): running dbt with arguments Namespace(cls=<class 'dbt.task.generate.GenerateTask'>, compile=True, debug=False, exclude=None, log_cache_events=False, log_format='default', models=None, partial_parse=None, profile=None, profiles_dir='/Users/kristin/.dbt', project_dir=None, record_timing_info=None, rpc_method='docs.generate', single_threaded=False, strict=False, target=None, test_new_parser=False, threads=None, use_cache=True, vars='{}', version_check=True, warn_error=False, which='generate', write_json=True)
2020-07-23 16:33:16.355080 (MainThread): Tracking: tracking
2020-07-23 16:33:16.361604 (MainThread): Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'start', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x107bef460>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x1083e5af0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x1083ddac0>]}
2020-07-23 16:33:16.382777 (MainThread): Partial parsing not enabled
2020-07-23 16:33:16.384844 (MainThread): Parsing macros/core.sql
2020-07-23 16:33:16.390038 (MainThread): Parsing macros/materializations/helpers.sql
2020-07-23 16:33:16.398095 (MainThread): Parsing macros/materializations/snapshot/snapshot_merge.sql
2020-07-23 16:33:16.399954 (MainThread): Parsing macros/materializations/snapshot/strategies.sql
2020-07-23 16:33:16.415190 (MainThread): Parsing macros/materializations/snapshot/snapshot.sql
2020-07-23 16:33:16.444040 (MainThread): Parsing macros/materializations/seed/seed.sql
2020-07-23 16:33:16.463758 (MainThread): Parsing macros/materializations/incremental/helpers.sql
2020-07-23 16:33:16.467732 (MainThread): Parsing macros/materializations/incremental/incremental.sql
2020-07-23 16:33:16.476667 (MainThread): Parsing macros/materializations/common/merge.sql
2020-07-23 16:33:16.490413 (MainThread): Parsing macros/materializations/table/table.sql
2020-07-23 16:33:16.496736 (MainThread): Parsing macros/materializations/view/view.sql
2020-07-23 16:33:16.502822 (MainThread): Parsing macros/materializations/view/create_or_replace_view.sql
2020-07-23 16:33:16.507827 (MainThread): Parsing macros/etc/get_custom_alias.sql
2020-07-23 16:33:16.509061 (MainThread): Parsing macros/etc/query.sql
2020-07-23 16:33:16.510191 (MainThread): Parsing macros/etc/is_incremental.sql
2020-07-23 16:33:16.511849 (MainThread): Parsing macros/etc/datetime.sql
2020-07-23 16:33:16.519857 (MainThread): Parsing macros/etc/get_custom_schema.sql
2020-07-23 16:33:16.521759 (MainThread): Parsing macros/etc/get_custom_database.sql
2020-07-23 16:33:16.523264 (MainThread): Parsing macros/adapters/common.sql
2020-07-23 16:33:16.567164 (MainThread): Parsing macros/schema_tests/relationships.sql
2020-07-23 16:33:16.568370 (MainThread): Parsing macros/schema_tests/not_null.sql
2020-07-23 16:33:16.569380 (MainThread): Parsing macros/schema_tests/unique.sql
2020-07-23 16:33:16.570595 (MainThread): Parsing macros/schema_tests/accepted_values.sql
2020-07-23 16:33:16.572812 (MainThread): Parsing macros/etc.sql
2020-07-23 16:33:16.573977 (MainThread): Parsing macros/catalog.sql
2020-07-23 16:33:16.579923 (MainThread): Parsing macros/adapters.sql
2020-07-23 16:33:16.594481 (MainThread): Parsing macros/materializations/seed.sql
2020-07-23 16:33:16.596759 (MainThread): Parsing macros/materializations/view.sql
2020-07-23 16:33:16.599286 (MainThread): Parsing macros/materializations/table.sql
2020-07-23 16:33:16.608637 (MainThread): Parsing macros/materializations/incremental.sql
2020-07-23 16:33:16.620311 (MainThread): Parsing macros/materializations/snapshot.sql
2020-07-23 16:33:16.673463 (MainThread): Partial parsing not enabled
2020-07-23 16:33:16.675512 (MainThread): Parsing macros/cross_db_utils/except.sql
2020-07-23 16:33:16.677217 (MainThread): Parsing macros/cross_db_utils/replace.sql
2020-07-23 16:33:16.678929 (MainThread): Parsing macros/cross_db_utils/concat.sql
2020-07-23 16:33:16.681890 (MainThread): Parsing macros/cross_db_utils/datatypes.sql
2020-07-23 16:33:16.687281 (MainThread): Parsing macros/cross_db_utils/_is_relation.sql
2020-07-23 16:33:16.688654 (MainThread): Parsing macros/cross_db_utils/length.sql
2020-07-23 16:33:16.689952 (MainThread): Parsing macros/cross_db_utils/dateadd.sql
2020-07-23 16:33:16.692127 (MainThread): Parsing macros/cross_db_utils/intersect.sql
2020-07-23 16:33:16.693590 (MainThread): Parsing macros/cross_db_utils/right.sql
2020-07-23 16:33:16.696313 (MainThread): Parsing macros/cross_db_utils/datediff.sql
2020-07-23 16:33:16.705353 (MainThread): Parsing macros/cross_db_utils/safe_cast.sql
2020-07-23 16:33:16.707339 (MainThread): Parsing macros/cross_db_utils/hash.sql
2020-07-23 16:33:16.708751 (MainThread): Parsing macros/cross_db_utils/identifier.sql
2020-07-23 16:33:16.710133 (MainThread): Parsing macros/cross_db_utils/position.sql
2020-07-23 16:33:16.711825 (MainThread): Parsing macros/cross_db_utils/literal.sql
2020-07-23 16:33:16.712982 (MainThread): Parsing macros/cross_db_utils/current_timestamp.sql
2020-07-23 16:33:16.740957 (MainThread): Parsing macros/cross_db_utils/width_bucket.sql
2020-07-23 16:33:16.748492 (MainThread): Parsing macros/cross_db_utils/last_day.sql
2020-07-23 16:33:16.752332 (MainThread): Parsing macros/cross_db_utils/split_part.sql
2020-07-23 16:33:16.754954 (MainThread): Parsing macros/cross_db_utils/date_trunc.sql
2020-07-23 16:33:16.757152 (MainThread): Parsing macros/cross_db_utils/_is_ephemeral.sql
2020-07-23 16:33:16.759692 (MainThread): Parsing macros/materializations/insert_by_period_materialization.sql
2020-07-23 16:33:16.786701 (MainThread): Parsing macros/logger/pretty_log_format.sql
2020-07-23 16:33:16.788592 (MainThread): Parsing macros/logger/pretty_time.sql
2020-07-23 16:33:16.790295 (MainThread): Parsing macros/logger/log_info.sql
2020-07-23 16:33:16.791606 (MainThread): Parsing macros/datetime/date_spine.sql
2020-07-23 16:33:16.796855 (MainThread): Parsing macros/web/get_url_host.sql
2020-07-23 16:33:16.799407 (MainThread): Parsing macros/web/get_url_path.sql
2020-07-23 16:33:16.802456 (MainThread): Parsing macros/web/get_url_parameter.sql
2020-07-23 16:33:16.803821 (MainThread): Parsing macros/geo/haversine_distance.sql
2020-07-23 16:33:16.805002 (MainThread): Parsing macros/schema_tests/equal_rowcount.sql
2020-07-23 16:33:16.806552 (MainThread): Parsing macros/schema_tests/relationships_where.sql
2020-07-23 16:33:16.808988 (MainThread): Parsing macros/schema_tests/recency.sql
2020-07-23 16:33:16.811011 (MainThread): Parsing macros/schema_tests/not_constant.sql
2020-07-23 16:33:16.812468 (MainThread): Parsing macros/schema_tests/test_unique_where.sql
2020-07-23 16:33:16.814528 (MainThread): Parsing macros/schema_tests/at_least_one.sql
2020-07-23 16:33:16.815777 (MainThread): Parsing macros/schema_tests/unique_combination_of_columns.sql
2020-07-23 16:33:16.817255 (MainThread): Parsing macros/schema_tests/cardinality_equality.sql
2020-07-23 16:33:16.819156 (MainThread): Parsing macros/schema_tests/expression_is_true.sql
2020-07-23 16:33:16.820345 (MainThread): Parsing macros/schema_tests/test_not_null_where.sql
2020-07-23 16:33:16.821820 (MainThread): Parsing macros/schema_tests/equality.sql
2020-07-23 16:33:16.825033 (MainThread): Parsing macros/schema_tests/mutually_exclusive_ranges.sql
2020-07-23 16:33:16.830415 (MainThread): Parsing macros/sql/nullcheck_table.sql
2020-07-23 16:33:16.831642 (MainThread): Parsing macros/sql/get_relations_by_pattern.sql
2020-07-23 16:33:16.834096 (MainThread): Parsing macros/sql/generate_series.sql
2020-07-23 16:33:16.837815 (MainThread): Parsing macros/sql/get_relations_by_prefix.sql
2020-07-23 16:33:16.841355 (MainThread): Parsing macros/sql/get_tables_by_prefix_sql.sql
2020-07-23 16:33:16.843967 (MainThread): Parsing macros/sql/star.sql
2020-07-23 16:33:16.846788 (MainThread): Parsing macros/sql/unpivot.sql
2020-07-23 16:33:16.852247 (MainThread): Parsing macros/sql/union.sql
2020-07-23 16:33:16.860376 (MainThread): Parsing macros/sql/groupby.sql
2020-07-23 16:33:16.861414 (MainThread): Parsing macros/sql/get_tables_by_pattern.sql
2020-07-23 16:33:16.862396 (MainThread): Parsing macros/sql/surrogate_key.sql
2020-07-23 16:33:16.864836 (MainThread): Parsing macros/sql/safe_add.sql
2020-07-23 16:33:16.865962 (MainThread): Parsing macros/sql/nullcheck.sql
2020-07-23 16:33:16.868041 (MainThread): Parsing macros/sql/get_column_values.sql
2020-07-23 16:33:16.872947 (MainThread): Parsing macros/sql/pivot.sql
2020-07-23 16:33:16.875540 (MainThread): Parsing macros/sql/get_query_results_as_dict.sql
2020-07-23 16:33:16.909990 (MainThread): Acquiring new bigquery connection "model.stripe.stripe_weekly_overview".
2020-07-23 16:33:16.910097 (MainThread): Opening a new connection, currently in state init
2020-07-23 16:33:16.926929 (MainThread): Acquiring new bigquery connection "model.stripe.stripe_daily_overview".
2020-07-23 16:33:16.927049 (MainThread): Opening a new connection, currently in state closed
2020-07-23 16:33:16.937222 (MainThread): Acquiring new bigquery connection "model.stripe.stripe_invoice_details".
2020-07-23 16:33:16.937340 (MainThread): Opening a new connection, currently in state closed
2020-07-23 16:33:16.951107 (MainThread): Acquiring new bigquery connection "model.stripe.stripe_customer_overview".
2020-07-23 16:33:16.951226 (MainThread): Opening a new connection, currently in state closed
2020-07-23 16:33:16.962409 (MainThread): Acquiring new bigquery connection "model.stripe.stripe_balance_transactions".
2020-07-23 16:33:16.962524 (MainThread): Opening a new connection, currently in state closed
2020-07-23 16:33:16.971011 (MainThread): Acquiring new bigquery connection "model.stripe.stripe_quarterly_overview".
2020-07-23 16:33:16.971090 (MainThread): Opening a new connection, currently in state closed
2020-07-23 16:33:16.981654 (MainThread): Acquiring new bigquery connection "model.stripe.stripe_monthly_overview".
2020-07-23 16:33:16.981767 (MainThread): Opening a new connection, currently in state closed
2020-07-23 16:33:16.991310 (MainThread): Acquiring new bigquery connection "model.stripe.stripe_subscription_details".
2020-07-23 16:33:16.991391 (MainThread): Opening a new connection, currently in state closed
2020-07-23 16:33:17.004774 (MainThread): Acquiring new bigquery connection "model.stripe.stripe_balance_transaction_joined".
2020-07-23 16:33:17.004893 (MainThread): Opening a new connection, currently in state closed
2020-07-23 16:33:17.019251 (MainThread): Acquiring new bigquery connection "model.stripe.stripe_incomplete_charges".
2020-07-23 16:33:17.019333 (MainThread): Opening a new connection, currently in state closed
2020-07-23 16:33:17.301992 (MainThread): Acquiring new bigquery connection "model.stripe_source.stg_stripe_card".
2020-07-23 16:33:17.302134 (MainThread): Opening a new connection, currently in state closed
2020-07-23 16:33:17.315752 (MainThread): Acquiring new bigquery connection "model.stripe_source.stg_stripe_invoice_line_item".
2020-07-23 16:33:17.315842 (MainThread): Opening a new connection, currently in state closed
2020-07-23 16:33:17.329904 (MainThread): Acquiring new bigquery connection "model.stripe_source.stg_stripe_payment_method_card".
2020-07-23 16:33:17.330018 (MainThread): Opening a new connection, currently in state closed
2020-07-23 16:33:17.342611 (MainThread): Acquiring new bigquery connection "model.stripe_source.stg_stripe_charge".
2020-07-23 16:33:17.342728 (MainThread): Opening a new connection, currently in state closed
2020-07-23 16:33:17.354543 (MainThread): Acquiring new bigquery connection "model.stripe_source.stg_stripe_payout".
2020-07-23 16:33:17.354660 (MainThread): Opening a new connection, currently in state closed
2020-07-23 16:33:17.367825 (MainThread): Acquiring new bigquery connection "model.stripe_source.stg_stripe_customer".
2020-07-23 16:33:17.367950 (MainThread): Opening a new connection, currently in state closed
2020-07-23 16:33:17.380436 (MainThread): Acquiring new bigquery connection "model.stripe_source.stg_stripe_refund".
2020-07-23 16:33:17.380553 (MainThread): Opening a new connection, currently in state closed
2020-07-23 16:33:17.392806 (MainThread): Acquiring new bigquery connection "model.stripe_source.stg_stripe_subscription".
2020-07-23 16:33:17.392924 (MainThread): Opening a new connection, currently in state closed
2020-07-23 16:33:17.405499 (MainThread): Acquiring new bigquery connection "model.stripe_source.stg_stripe_payment_method".
2020-07-23 16:33:17.405618 (MainThread): Opening a new connection, currently in state closed
2020-07-23 16:33:17.417392 (MainThread): Acquiring new bigquery connection "model.stripe_source.stg_stripe_payment_intent".
2020-07-23 16:33:17.417468 (MainThread): Opening a new connection, currently in state closed
2020-07-23 16:33:17.429234 (MainThread): Acquiring new bigquery connection "model.stripe_source.stg_stripe_invoice".
2020-07-23 16:33:17.429358 (MainThread): Opening a new connection, currently in state closed
2020-07-23 16:33:17.442799 (MainThread): Acquiring new bigquery connection "model.stripe_source.stg_stripe_fee".
2020-07-23 16:33:17.442886 (MainThread): Opening a new connection, currently in state closed
2020-07-23 16:33:17.457645 (MainThread): Acquiring new bigquery connection "model.stripe_source.stg_stripe_balance_transaction".
2020-07-23 16:33:17.457757 (MainThread): Opening a new connection, currently in state closed
2020-07-23 16:33:19.504788 (MainThread): WARNING: Found documentation for resource "payment_method_card" which was not found or is disabled
2020-07-23 16:33:20.076598 (MainThread): Found 23 models, 34 tests, 0 snapshots, 0 analyses, 278 macros, 0 operations, 0 seed files, 13 sources
2020-07-23 16:33:20.130968 (MainThread): 
2020-07-23 16:33:20.131345 (MainThread): Acquiring new bigquery connection "master".
2020-07-23 16:33:20.131445 (MainThread): Opening a new connection, currently in state closed
2020-07-23 16:33:20.158894 (ThreadPoolExecutor-0_0): Acquiring new bigquery connection "list_dbt-package-testing".
2020-07-23 16:33:20.159054 (ThreadPoolExecutor-0_0): Opening a new connection, currently in state init
2020-07-23 16:33:20.159576 (ThreadPoolExecutor-0_1): Acquiring new bigquery connection "list_culdesac-labs".
2020-07-23 16:33:20.159689 (ThreadPoolExecutor-0_1): Opening a new connection, currently in state init
2020-07-23 16:33:20.161757 (ThreadPoolExecutor-0_0): Your application has authenticated using end user credentials from Google Cloud SDK. We recommend that most server applications use service accounts instead. If your application continues to use end user credentials from Cloud SDK, you might receive a "quota exceeded" or "API not enabled" error. For more information about service accounts, see https://cloud.google.com/docs/authentication/
2020-07-23 16:33:20.161900 (ThreadPoolExecutor-0_1): Your application has authenticated using end user credentials from Google Cloud SDK. We recommend that most server applications use service accounts instead. If your application continues to use end user credentials from Cloud SDK, you might receive a "quota exceeded" or "API not enabled" error. For more information about service accounts, see https://cloud.google.com/docs/authentication/
2020-07-23 16:33:22.242687 (ThreadPoolExecutor-0_0): Acquiring new bigquery connection "create_culdesac-labs_dbt_kristin_2".
2020-07-23 16:33:22.243011 (ThreadPoolExecutor-0_0): Re-using an available connection from the pool (formerly list_dbt-package-testing).
2020-07-23 16:33:22.243137 (ThreadPoolExecutor-0_0): Creating schema "culdesac-labs.dbt_kristin_2".
2020-07-23 16:33:22.243315 (ThreadPoolExecutor-0_0): Client.dataset is deprecated and will be removed in a future version. Use a string like 'my_project.my_dataset' or a cloud.google.bigquery.DatasetReference object, instead.
2020-07-23 16:33:22.438027 (MainThread): Connection 'master' was properly closed.
2020-07-23 16:33:22.438202 (MainThread): Connection 'create_culdesac-labs_dbt_kristin_2' was left open.
2020-07-23 16:33:22.438297 (MainThread): Connection 'list_culdesac-labs' was left open.
2020-07-23 16:33:22.438556 (MainThread): Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'end', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x1087afb20>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x1087afa30>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x10881e340>]}
2020-07-23 16:33:22.438879 (MainThread): Flushing usage events
2020-07-23 16:33:22.828585 (MainThread): Encountered an error:
2020-07-23 16:33:22.829016 (MainThread): Database Error
  Access Denied: Project culdesac-labs: User does not have bigquery.datasets.create permission in project culdesac-labs.
2020-07-23 16:33:22.839221 (MainThread): Traceback (most recent call last):
  File "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/adapters/bigquery/connections.py", line 83, in exception_handler
    yield
  File "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/adapters/bigquery/connections.py", line 354, in _retry_and_handle
    return retry.retry_target(
  File "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/google/api_core/retry.py", line 184, in retry_target
    return target()
  File "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/adapters/bigquery/connections.py", line 339, in fn
    return client.create_dataset(dataset, exists_ok=True)
  File "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/google/cloud/bigquery/client.py", line 460, in create_dataset
    api_response = self._call_api(
  File "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/google/cloud/bigquery/client.py", line 556, in _call_api
    return call()
  File "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/google/api_core/retry.py", line 281, in retry_wrapped_func
    return retry_target(
  File "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/google/api_core/retry.py", line 184, in retry_target
    return target()
  File "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/google/cloud/_http.py", line 423, in api_request
    raise exceptions.from_http_response(response)
google.api_core.exceptions.Forbidden: 403 POST https://bigquery.googleapis.com/bigquery/v2/projects/culdesac-labs/datasets: Access Denied: Project culdesac-labs: User does not have bigquery.datasets.create permission in project culdesac-labs.

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/main.py", line 81, in main
    results, succeeded = handle_and_check(args)
  File "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/main.py", line 159, in handle_and_check
    task, res = run_from_args(parsed)
  File "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/main.py", line 212, in run_from_args
    results = task.run()
  File "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/task/generate.py", line 208, in run
    compile_results = CompileTask.run(self)
  File "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/task/runnable.py", line 416, in run
    result = self.execute_with_hooks(selected_uids)
  File "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/task/runnable.py", line 376, in execute_with_hooks
    self.before_run(adapter, selected_uids)
  File "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/task/runnable.py", line 362, in before_run
    self.create_schemas(adapter, selected_uids)
  File "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/task/runnable.py", line 515, in create_schemas
    create_future.result()
  File "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/concurrent/futures/_base.py", line 432, in result
    return self.__get_result()
  File "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/concurrent/futures/_base.py", line 388, in __get_result
    raise self._exception
  File "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/concurrent/futures/thread.py", line 57, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/task/runnable.py", line 481, in create_schema
    adapter.create_schema(relation)
  File "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/adapters/bigquery/impl.py", line 266, in create_schema
    self.connections.create_dataset(database, schema)
  File "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/adapters/bigquery/connections.py", line 340, in create_dataset
    self._retry_and_handle(msg='create dataset', conn=conn, fn=fn)
  File "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/adapters/bigquery/connections.py", line 354, in _retry_and_handle
    return retry.retry_target(
  File "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/contextlib.py", line 131, in __exit__
    self.gen.throw(type, value, traceback)
  File "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/adapters/bigquery/connections.py", line 91, in exception_handler
    self.handle_error(e, message)
  File "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/adapters/bigquery/connections.py", line 75, in handle_error
    raise DatabaseException(error_msg)
dbt.exceptions.DatabaseException: Database Error
  Access Denied: Project culdesac-labs: User does not have bigquery.datasets.create permission in project culdesac-labs.

2020-07-23 16:33:56.850161 (MainThread): Running with dbt=0.17.0-rc1
2020-07-23 16:33:57.157658 (MainThread): running dbt with arguments Namespace(cls=<class 'dbt.task.generate.GenerateTask'>, compile=True, debug=False, exclude=None, log_cache_events=False, log_format='default', models=None, partial_parse=None, profile=None, profiles_dir='/Users/kristin/.dbt', project_dir=None, record_timing_info=None, rpc_method='docs.generate', single_threaded=False, strict=False, target=None, test_new_parser=False, threads=None, use_cache=True, vars='{}', version_check=True, warn_error=False, which='generate', write_json=True)
2020-07-23 16:33:57.158348 (MainThread): Tracking: tracking
2020-07-23 16:33:57.164830 (MainThread): Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'start', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x1048c4490>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x1050aadc0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x1050aab20>]}
2020-07-23 16:33:57.185240 (MainThread): Partial parsing not enabled
2020-07-23 16:33:57.187137 (MainThread): Parsing macros/core.sql
2020-07-23 16:33:57.191731 (MainThread): Parsing macros/materializations/helpers.sql
2020-07-23 16:33:57.199280 (MainThread): Parsing macros/materializations/snapshot/snapshot_merge.sql
2020-07-23 16:33:57.201250 (MainThread): Parsing macros/materializations/snapshot/strategies.sql
2020-07-23 16:33:57.216717 (MainThread): Parsing macros/materializations/snapshot/snapshot.sql
2020-07-23 16:33:57.243179 (MainThread): Parsing macros/materializations/seed/seed.sql
2020-07-23 16:33:57.262037 (MainThread): Parsing macros/materializations/incremental/helpers.sql
2020-07-23 16:33:57.263804 (MainThread): Parsing macros/materializations/incremental/incremental.sql
2020-07-23 16:33:57.269901 (MainThread): Parsing macros/materializations/common/merge.sql
2020-07-23 16:33:57.282523 (MainThread): Parsing macros/materializations/table/table.sql
2020-07-23 16:33:57.288665 (MainThread): Parsing macros/materializations/view/view.sql
2020-07-23 16:33:57.294535 (MainThread): Parsing macros/materializations/view/create_or_replace_view.sql
2020-07-23 16:33:57.299217 (MainThread): Parsing macros/etc/get_custom_alias.sql
2020-07-23 16:33:57.300436 (MainThread): Parsing macros/etc/query.sql
2020-07-23 16:33:57.301552 (MainThread): Parsing macros/etc/is_incremental.sql
2020-07-23 16:33:57.303168 (MainThread): Parsing macros/etc/datetime.sql
2020-07-23 16:33:57.311169 (MainThread): Parsing macros/etc/get_custom_schema.sql
2020-07-23 16:33:57.313056 (MainThread): Parsing macros/etc/get_custom_database.sql
2020-07-23 16:33:57.314531 (MainThread): Parsing macros/adapters/common.sql
2020-07-23 16:33:57.357169 (MainThread): Parsing macros/schema_tests/relationships.sql
2020-07-23 16:33:57.358364 (MainThread): Parsing macros/schema_tests/not_null.sql
2020-07-23 16:33:57.359371 (MainThread): Parsing macros/schema_tests/unique.sql
2020-07-23 16:33:57.360782 (MainThread): Parsing macros/schema_tests/accepted_values.sql
2020-07-23 16:33:57.363339 (MainThread): Parsing macros/etc.sql
2020-07-23 16:33:57.364870 (MainThread): Parsing macros/catalog.sql
2020-07-23 16:33:57.371168 (MainThread): Parsing macros/adapters.sql
2020-07-23 16:33:57.386157 (MainThread): Parsing macros/materializations/seed.sql
2020-07-23 16:33:57.388547 (MainThread): Parsing macros/materializations/view.sql
2020-07-23 16:33:57.390980 (MainThread): Parsing macros/materializations/table.sql
2020-07-23 16:33:57.401061 (MainThread): Parsing macros/materializations/incremental.sql
2020-07-23 16:33:57.413758 (MainThread): Parsing macros/materializations/snapshot.sql
2020-07-23 16:33:57.470720 (MainThread): Partial parsing not enabled
2020-07-23 16:33:57.472857 (MainThread): Parsing macros/cross_db_utils/except.sql
2020-07-23 16:33:57.474822 (MainThread): Parsing macros/cross_db_utils/replace.sql
2020-07-23 16:33:57.477088 (MainThread): Parsing macros/cross_db_utils/concat.sql
2020-07-23 16:33:57.479538 (MainThread): Parsing macros/cross_db_utils/datatypes.sql
2020-07-23 16:33:57.484448 (MainThread): Parsing macros/cross_db_utils/_is_relation.sql
2020-07-23 16:33:57.485804 (MainThread): Parsing macros/cross_db_utils/length.sql
2020-07-23 16:33:57.487120 (MainThread): Parsing macros/cross_db_utils/dateadd.sql
2020-07-23 16:33:57.489394 (MainThread): Parsing macros/cross_db_utils/intersect.sql
2020-07-23 16:33:57.490885 (MainThread): Parsing macros/cross_db_utils/right.sql
2020-07-23 16:33:57.493363 (MainThread): Parsing macros/cross_db_utils/datediff.sql
2020-07-23 16:33:57.502800 (MainThread): Parsing macros/cross_db_utils/safe_cast.sql
2020-07-23 16:33:57.506978 (MainThread): Parsing macros/cross_db_utils/hash.sql
2020-07-23 16:33:57.509434 (MainThread): Parsing macros/cross_db_utils/identifier.sql
2020-07-23 16:33:57.511507 (MainThread): Parsing macros/cross_db_utils/position.sql
2020-07-23 16:33:57.513702 (MainThread): Parsing macros/cross_db_utils/literal.sql
2020-07-23 16:33:57.515008 (MainThread): Parsing macros/cross_db_utils/current_timestamp.sql
2020-07-23 16:33:57.545517 (MainThread): Parsing macros/cross_db_utils/width_bucket.sql
2020-07-23 16:33:57.553037 (MainThread): Parsing macros/cross_db_utils/last_day.sql
2020-07-23 16:33:57.556918 (MainThread): Parsing macros/cross_db_utils/split_part.sql
2020-07-23 16:33:57.559469 (MainThread): Parsing macros/cross_db_utils/date_trunc.sql
2020-07-23 16:33:57.561626 (MainThread): Parsing macros/cross_db_utils/_is_ephemeral.sql
2020-07-23 16:33:57.564173 (MainThread): Parsing macros/materializations/insert_by_period_materialization.sql
2020-07-23 16:33:57.591817 (MainThread): Parsing macros/logger/pretty_log_format.sql
2020-07-23 16:33:57.592713 (MainThread): Parsing macros/logger/pretty_time.sql
2020-07-23 16:33:57.593753 (MainThread): Parsing macros/logger/log_info.sql
2020-07-23 16:33:57.594683 (MainThread): Parsing macros/datetime/date_spine.sql
2020-07-23 16:33:57.598695 (MainThread): Parsing macros/web/get_url_host.sql
2020-07-23 16:33:57.600572 (MainThread): Parsing macros/web/get_url_path.sql
2020-07-23 16:33:57.603226 (MainThread): Parsing macros/web/get_url_parameter.sql
2020-07-23 16:33:57.604550 (MainThread): Parsing macros/geo/haversine_distance.sql
2020-07-23 16:33:57.605688 (MainThread): Parsing macros/schema_tests/equal_rowcount.sql
2020-07-23 16:33:57.607212 (MainThread): Parsing macros/schema_tests/relationships_where.sql
2020-07-23 16:33:57.609463 (MainThread): Parsing macros/schema_tests/recency.sql
2020-07-23 16:33:57.610979 (MainThread): Parsing macros/schema_tests/not_constant.sql
2020-07-23 16:33:57.612262 (MainThread): Parsing macros/schema_tests/test_unique_where.sql
2020-07-23 16:33:57.614028 (MainThread): Parsing macros/schema_tests/at_least_one.sql
2020-07-23 16:33:57.615196 (MainThread): Parsing macros/schema_tests/unique_combination_of_columns.sql
2020-07-23 16:33:57.616583 (MainThread): Parsing macros/schema_tests/cardinality_equality.sql
2020-07-23 16:33:57.618382 (MainThread): Parsing macros/schema_tests/expression_is_true.sql
2020-07-23 16:33:57.619644 (MainThread): Parsing macros/schema_tests/test_not_null_where.sql
2020-07-23 16:33:57.621177 (MainThread): Parsing macros/schema_tests/equality.sql
2020-07-23 16:33:57.624225 (MainThread): Parsing macros/schema_tests/mutually_exclusive_ranges.sql
2020-07-23 16:33:57.629799 (MainThread): Parsing macros/sql/nullcheck_table.sql
2020-07-23 16:33:57.631156 (MainThread): Parsing macros/sql/get_relations_by_pattern.sql
2020-07-23 16:33:57.633526 (MainThread): Parsing macros/sql/generate_series.sql
2020-07-23 16:33:57.636594 (MainThread): Parsing macros/sql/get_relations_by_prefix.sql
2020-07-23 16:33:57.639969 (MainThread): Parsing macros/sql/get_tables_by_prefix_sql.sql
2020-07-23 16:33:57.642829 (MainThread): Parsing macros/sql/star.sql
2020-07-23 16:33:57.645856 (MainThread): Parsing macros/sql/unpivot.sql
2020-07-23 16:33:57.651511 (MainThread): Parsing macros/sql/union.sql
2020-07-23 16:33:57.659956 (MainThread): Parsing macros/sql/groupby.sql
2020-07-23 16:33:57.660993 (MainThread): Parsing macros/sql/get_tables_by_pattern.sql
2020-07-23 16:33:57.661980 (MainThread): Parsing macros/sql/surrogate_key.sql
2020-07-23 16:33:57.664521 (MainThread): Parsing macros/sql/safe_add.sql
2020-07-23 16:33:57.665723 (MainThread): Parsing macros/sql/nullcheck.sql
2020-07-23 16:33:57.666992 (MainThread): Parsing macros/sql/get_column_values.sql
2020-07-23 16:33:57.670793 (MainThread): Parsing macros/sql/pivot.sql
2020-07-23 16:33:57.673400 (MainThread): Parsing macros/sql/get_query_results_as_dict.sql
2020-07-23 16:33:57.712518 (MainThread): Acquiring new bigquery connection "model.stripe.stripe_weekly_overview".
2020-07-23 16:33:57.712653 (MainThread): Opening a new connection, currently in state init
2020-07-23 16:33:57.731182 (MainThread): Acquiring new bigquery connection "model.stripe.stripe_daily_overview".
2020-07-23 16:33:57.731316 (MainThread): Opening a new connection, currently in state closed
2020-07-23 16:33:57.741552 (MainThread): Acquiring new bigquery connection "model.stripe.stripe_invoice_details".
2020-07-23 16:33:57.741667 (MainThread): Opening a new connection, currently in state closed
2020-07-23 16:33:57.755060 (MainThread): Acquiring new bigquery connection "model.stripe.stripe_customer_overview".
2020-07-23 16:33:57.755171 (MainThread): Opening a new connection, currently in state closed
2020-07-23 16:33:57.766220 (MainThread): Acquiring new bigquery connection "model.stripe.stripe_balance_transactions".
2020-07-23 16:33:57.766337 (MainThread): Opening a new connection, currently in state closed
2020-07-23 16:33:57.774854 (MainThread): Acquiring new bigquery connection "model.stripe.stripe_quarterly_overview".
2020-07-23 16:33:57.774931 (MainThread): Opening a new connection, currently in state closed
2020-07-23 16:33:57.784655 (MainThread): Acquiring new bigquery connection "model.stripe.stripe_monthly_overview".
2020-07-23 16:33:57.784733 (MainThread): Opening a new connection, currently in state closed
2020-07-23 16:33:57.794185 (MainThread): Acquiring new bigquery connection "model.stripe.stripe_subscription_details".
2020-07-23 16:33:57.794261 (MainThread): Opening a new connection, currently in state closed
2020-07-23 16:33:57.807368 (MainThread): Acquiring new bigquery connection "model.stripe.stripe_balance_transaction_joined".
2020-07-23 16:33:57.807483 (MainThread): Opening a new connection, currently in state closed
2020-07-23 16:33:57.821813 (MainThread): Acquiring new bigquery connection "model.stripe.stripe_incomplete_charges".
2020-07-23 16:33:57.821889 (MainThread): Opening a new connection, currently in state closed
2020-07-23 16:33:58.103978 (MainThread): Acquiring new bigquery connection "model.stripe_source.stg_stripe_card".
2020-07-23 16:33:58.104151 (MainThread): Opening a new connection, currently in state closed
2020-07-23 16:33:58.117999 (MainThread): Acquiring new bigquery connection "model.stripe_source.stg_stripe_invoice_line_item".
2020-07-23 16:33:58.118132 (MainThread): Opening a new connection, currently in state closed
2020-07-23 16:33:58.131335 (MainThread): Acquiring new bigquery connection "model.stripe_source.stg_stripe_payment_method_card".
2020-07-23 16:33:58.131465 (MainThread): Opening a new connection, currently in state closed
2020-07-23 16:33:58.144301 (MainThread): Acquiring new bigquery connection "model.stripe_source.stg_stripe_charge".
2020-07-23 16:33:58.144424 (MainThread): Opening a new connection, currently in state closed
2020-07-23 16:33:58.156513 (MainThread): Acquiring new bigquery connection "model.stripe_source.stg_stripe_payout".
2020-07-23 16:33:58.156642 (MainThread): Opening a new connection, currently in state closed
2020-07-23 16:33:58.168989 (MainThread): Acquiring new bigquery connection "model.stripe_source.stg_stripe_customer".
2020-07-23 16:33:58.169119 (MainThread): Opening a new connection, currently in state closed
2020-07-23 16:33:58.180220 (MainThread): Acquiring new bigquery connection "model.stripe_source.stg_stripe_refund".
2020-07-23 16:33:58.180295 (MainThread): Opening a new connection, currently in state closed
2020-07-23 16:33:58.191074 (MainThread): Acquiring new bigquery connection "model.stripe_source.stg_stripe_subscription".
2020-07-23 16:33:58.191191 (MainThread): Opening a new connection, currently in state closed
2020-07-23 16:33:58.202395 (MainThread): Acquiring new bigquery connection "model.stripe_source.stg_stripe_payment_method".
2020-07-23 16:33:58.202510 (MainThread): Opening a new connection, currently in state closed
2020-07-23 16:33:58.213233 (MainThread): Acquiring new bigquery connection "model.stripe_source.stg_stripe_payment_intent".
2020-07-23 16:33:58.213306 (MainThread): Opening a new connection, currently in state closed
2020-07-23 16:33:58.223266 (MainThread): Acquiring new bigquery connection "model.stripe_source.stg_stripe_invoice".
2020-07-23 16:33:58.223381 (MainThread): Opening a new connection, currently in state closed
2020-07-23 16:33:58.235054 (MainThread): Acquiring new bigquery connection "model.stripe_source.stg_stripe_fee".
2020-07-23 16:33:58.235178 (MainThread): Opening a new connection, currently in state closed
2020-07-23 16:33:58.246032 (MainThread): Acquiring new bigquery connection "model.stripe_source.stg_stripe_balance_transaction".
2020-07-23 16:33:58.246105 (MainThread): Opening a new connection, currently in state closed
2020-07-23 16:34:00.250353 (MainThread): WARNING: Found documentation for resource "payment_method_card" which was not found or is disabled
2020-07-23 16:34:00.776539 (MainThread): Found 23 models, 34 tests, 0 snapshots, 0 analyses, 278 macros, 0 operations, 0 seed files, 13 sources
2020-07-23 16:34:00.826781 (MainThread): 
2020-07-23 16:34:00.827087 (MainThread): Acquiring new bigquery connection "master".
2020-07-23 16:34:00.827204 (MainThread): Opening a new connection, currently in state closed
2020-07-23 16:34:00.854218 (ThreadPoolExecutor-0_0): Acquiring new bigquery connection "list_dbt-package-testing".
2020-07-23 16:34:00.854437 (ThreadPoolExecutor-0_0): Opening a new connection, currently in state init
2020-07-23 16:34:00.855342 (ThreadPoolExecutor-0_0): Your application has authenticated using end user credentials from Google Cloud SDK. We recommend that most server applications use service accounts instead. If your application continues to use end user credentials from Cloud SDK, you might receive a "quota exceeded" or "API not enabled" error. For more information about service accounts, see https://cloud.google.com/docs/authentication/
2020-07-23 16:34:02.022358 (ThreadPoolExecutor-1_0): Acquiring new bigquery connection "list_dbt-package-testing_dbt_kristin_2".
2020-07-23 16:34:02.022517 (ThreadPoolExecutor-1_0): Re-using an available connection from the pool (formerly list_dbt-package-testing).
2020-07-23 16:34:02.022619 (ThreadPoolExecutor-1_0): Client.dataset is deprecated and will be removed in a future version. Use a string like 'my_project.my_dataset' or a cloud.google.bigquery.DatasetReference object, instead.
2020-07-23 16:34:02.224320 (MainThread): 09:34:02 | Concurrency: 4 threads (target='dev_bigquery_dbt_testing')
2020-07-23 16:34:02.224522 (MainThread): 09:34:02 | 
2020-07-23 16:34:02.231154 (Thread-1): Began running node model.stripe_source.stg_stripe_charge
2020-07-23 16:34:02.231560 (Thread-1): Acquiring new bigquery connection "model.stripe_source.stg_stripe_charge".
2020-07-23 16:34:02.231719 (Thread-2): Began running node model.stripe_source.stg_stripe_customer
2020-07-23 16:34:02.231845 (Thread-1): Re-using an available connection from the pool (formerly list_dbt-package-testing_dbt_kristin_2).
2020-07-23 16:34:02.231937 (Thread-3): Began running node model.stripe_source.stg_stripe_balance_transaction
2020-07-23 16:34:02.232111 (Thread-4): Began running node model.stripe_source.stg_stripe_card
2020-07-23 16:34:02.232422 (Thread-2): Acquiring new bigquery connection "model.stripe_source.stg_stripe_customer".
2020-07-23 16:34:02.232574 (Thread-1): Compiling model.stripe_source.stg_stripe_charge
2020-07-23 16:34:02.232829 (Thread-3): Acquiring new bigquery connection "model.stripe_source.stg_stripe_balance_transaction".
2020-07-23 16:34:02.233098 (Thread-4): Acquiring new bigquery connection "model.stripe_source.stg_stripe_card".
2020-07-23 16:34:02.233220 (Thread-2): Opening a new connection, currently in state init
2020-07-23 16:34:02.250827 (Thread-3): Opening a new connection, currently in state init
2020-07-23 16:34:02.260307 (Thread-1): Writing injected SQL for node "model.stripe_source.stg_stripe_charge"
2020-07-23 16:34:02.260467 (Thread-4): Opening a new connection, currently in state init
2020-07-23 16:34:02.260580 (Thread-2): Compiling model.stripe_source.stg_stripe_customer
2020-07-23 16:34:02.260675 (Thread-3): Compiling model.stripe_source.stg_stripe_balance_transaction
2020-07-23 16:34:02.260905 (Thread-4): Compiling model.stripe_source.stg_stripe_card
2020-07-23 16:34:02.285509 (Thread-2): Writing injected SQL for node "model.stripe_source.stg_stripe_customer"
2020-07-23 16:34:02.289801 (Thread-3): Writing injected SQL for node "model.stripe_source.stg_stripe_balance_transaction"
2020-07-23 16:34:02.292351 (Thread-4): Writing injected SQL for node "model.stripe_source.stg_stripe_card"
2020-07-23 16:34:02.293458 (Thread-1): finished collecting timing info
2020-07-23 16:34:02.293793 (Thread-1): finished collecting timing info
2020-07-23 16:34:02.294191 (Thread-1): Finished running node model.stripe_source.stg_stripe_charge
2020-07-23 16:34:02.294327 (Thread-1): Began running node model.stripe_source.stg_stripe_payment_intent
2020-07-23 16:34:02.294550 (Thread-1): Acquiring new bigquery connection "model.stripe_source.stg_stripe_payment_intent".
2020-07-23 16:34:02.294630 (Thread-1): Re-using an available connection from the pool (formerly model.stripe_source.stg_stripe_charge).
2020-07-23 16:34:02.294706 (Thread-1): Compiling model.stripe_source.stg_stripe_payment_intent
2020-07-23 16:34:02.301071 (Thread-2): finished collecting timing info
2020-07-23 16:34:02.301323 (Thread-2): finished collecting timing info
2020-07-23 16:34:02.301625 (Thread-2): Finished running node model.stripe_source.stg_stripe_customer
2020-07-23 16:34:02.301733 (Thread-2): Began running node model.stripe_source.stg_stripe_payout
2020-07-23 16:34:02.301927 (Thread-2): Acquiring new bigquery connection "model.stripe_source.stg_stripe_payout".
2020-07-23 16:34:02.302006 (Thread-2): Opening a new connection, currently in state closed
2020-07-23 16:34:02.302080 (Thread-2): Compiling model.stripe_source.stg_stripe_payout
2020-07-23 16:34:02.307164 (Thread-1): Writing injected SQL for node "model.stripe_source.stg_stripe_payment_intent"
2020-07-23 16:34:02.307253 (Thread-3): finished collecting timing info
2020-07-23 16:34:02.316502 (Thread-2): Writing injected SQL for node "model.stripe_source.stg_stripe_payout"
2020-07-23 16:34:02.316796 (Thread-3): finished collecting timing info
2020-07-23 16:34:02.316933 (Thread-4): finished collecting timing info
2020-07-23 16:34:02.317522 (Thread-3): Finished running node model.stripe_source.stg_stripe_balance_transaction
2020-07-23 16:34:02.317685 (Thread-4): finished collecting timing info
2020-07-23 16:34:02.317817 (Thread-1): finished collecting timing info
2020-07-23 16:34:02.318117 (Thread-3): Began running node model.stripe_source.stg_stripe_refund
2020-07-23 16:34:02.318810 (Thread-4): Finished running node model.stripe_source.stg_stripe_card
2020-07-23 16:34:02.319196 (Thread-2): finished collecting timing info
2020-07-23 16:34:02.319437 (Thread-1): finished collecting timing info
2020-07-23 16:34:02.319723 (Thread-3): Acquiring new bigquery connection "model.stripe_source.stg_stripe_refund".
2020-07-23 16:34:02.319827 (Thread-4): Began running node model.stripe_source.stg_stripe_invoice
2020-07-23 16:34:02.319927 (Thread-2): finished collecting timing info
2020-07-23 16:34:02.320297 (Thread-1): Finished running node model.stripe_source.stg_stripe_payment_intent
2020-07-23 16:34:02.320430 (Thread-3): Opening a new connection, currently in state closed
2020-07-23 16:34:02.320608 (Thread-4): Acquiring new bigquery connection "model.stripe_source.stg_stripe_invoice".
2020-07-23 16:34:02.320801 (Thread-2): Finished running node model.stripe_source.stg_stripe_payout
2020-07-23 16:34:02.320904 (Thread-1): Began running node model.stripe_source.stg_stripe_invoice_line_item
2020-07-23 16:34:02.321100 (Thread-3): Compiling model.stripe_source.stg_stripe_refund
2020-07-23 16:34:02.321180 (Thread-4): Opening a new connection, currently in state closed
2020-07-23 16:34:02.321269 (Thread-2): Began running node model.stripe_source.stg_stripe_subscription
2020-07-23 16:34:02.321485 (Thread-1): Acquiring new bigquery connection "model.stripe_source.stg_stripe_invoice_line_item".
2020-07-23 16:34:02.330088 (Thread-3): Writing injected SQL for node "model.stripe_source.stg_stripe_refund"
2020-07-23 16:34:02.330184 (Thread-4): Compiling model.stripe_source.stg_stripe_invoice
2020-07-23 16:34:02.330439 (Thread-2): Acquiring new bigquery connection "model.stripe_source.stg_stripe_subscription".
2020-07-23 16:34:02.330521 (Thread-1): Re-using an available connection from the pool (formerly model.stripe_source.stg_stripe_payment_intent).
2020-07-23 16:34:02.336651 (Thread-2): Opening a new connection, currently in state closed
2020-07-23 16:34:02.342410 (Thread-4): Writing injected SQL for node "model.stripe_source.stg_stripe_invoice"
2020-07-23 16:34:02.342720 (Thread-1): Compiling model.stripe_source.stg_stripe_invoice_line_item
2020-07-23 16:34:02.342865 (Thread-2): Compiling model.stripe_source.stg_stripe_subscription
2020-07-23 16:34:02.343191 (Thread-3): finished collecting timing info
2020-07-23 16:34:02.352946 (Thread-1): Writing injected SQL for node "model.stripe_source.stg_stripe_invoice_line_item"
2020-07-23 16:34:02.353076 (Thread-4): finished collecting timing info
2020-07-23 16:34:02.363574 (Thread-2): Writing injected SQL for node "model.stripe_source.stg_stripe_subscription"
2020-07-23 16:34:02.363662 (Thread-3): finished collecting timing info
2020-07-23 16:34:02.363922 (Thread-4): finished collecting timing info
2020-07-23 16:34:02.364357 (Thread-3): Finished running node model.stripe_source.stg_stripe_refund
2020-07-23 16:34:02.364513 (Thread-1): finished collecting timing info
2020-07-23 16:34:02.364854 (Thread-4): Finished running node model.stripe_source.stg_stripe_invoice
2020-07-23 16:34:02.365009 (Thread-3): Began running node model.stripe_source.stg_stripe_fee
2020-07-23 16:34:02.365076 (Thread-2): finished collecting timing info
2020-07-23 16:34:02.365293 (Thread-1): finished collecting timing info
2020-07-23 16:34:02.365609 (Thread-4): Began running node model.stripe_source.stg_stripe_payment_method
2020-07-23 16:34:02.366138 (Thread-3): Acquiring new bigquery connection "model.stripe_source.stg_stripe_fee".
2020-07-23 16:34:02.366559 (Thread-2): finished collecting timing info
2020-07-23 16:34:02.366861 (Thread-1): Finished running node model.stripe_source.stg_stripe_invoice_line_item
2020-07-23 16:34:02.367050 (Thread-4): Acquiring new bigquery connection "model.stripe_source.stg_stripe_payment_method".
2020-07-23 16:34:02.367133 (Thread-3): Opening a new connection, currently in state closed
2020-07-23 16:34:02.367323 (Thread-2): Finished running node model.stripe_source.stg_stripe_subscription
2020-07-23 16:34:02.367427 (Thread-1): Began running node model.stripe_source.stg_stripe_payment_method_card
2020-07-23 16:34:02.367507 (Thread-4): Opening a new connection, currently in state closed
2020-07-23 16:34:02.367758 (Thread-3): Compiling model.stripe_source.stg_stripe_fee
2020-07-23 16:34:02.367866 (Thread-2): Began running node test.stripe_source.source_not_null_stripe_balance_transaction_id
2020-07-23 16:34:02.368061 (Thread-1): Acquiring new bigquery connection "model.stripe_source.stg_stripe_payment_method_card".
2020-07-23 16:34:02.368200 (Thread-4): Compiling model.stripe_source.stg_stripe_payment_method
2020-07-23 16:34:02.375684 (Thread-3): Writing injected SQL for node "model.stripe_source.stg_stripe_fee"
2020-07-23 16:34:02.375855 (Thread-2): Acquiring new bigquery connection "test.stripe_source.source_not_null_stripe_balance_transaction_id".
2020-07-23 16:34:02.375935 (Thread-1): Re-using an available connection from the pool (formerly model.stripe_source.stg_stripe_invoice_line_item).
2020-07-23 16:34:02.383024 (Thread-4): Writing injected SQL for node "model.stripe_source.stg_stripe_payment_method"
2020-07-23 16:34:02.383163 (Thread-2): Opening a new connection, currently in state closed
2020-07-23 16:34:02.383249 (Thread-1): Compiling model.stripe_source.stg_stripe_payment_method_card
2020-07-23 16:34:02.383385 (Thread-2): Compiling test.stripe_source.source_not_null_stripe_balance_transaction_id
2020-07-23 16:34:02.389318 (Thread-1): Writing injected SQL for node "model.stripe_source.stg_stripe_payment_method_card"
2020-07-23 16:34:02.394709 (Thread-4): finished collecting timing info
2020-07-23 16:34:02.400196 (Thread-2): Writing injected SQL for node "test.stripe_source.source_not_null_stripe_balance_transaction_id"
2020-07-23 16:34:02.400448 (Thread-4): finished collecting timing info
2020-07-23 16:34:02.400886 (Thread-4): Finished running node model.stripe_source.stg_stripe_payment_method
2020-07-23 16:34:02.401037 (Thread-4): Began running node test.stripe_source.source_not_null_stripe_card_id
2020-07-23 16:34:02.401220 (Thread-4): Acquiring new bigquery connection "test.stripe_source.source_not_null_stripe_card_id".
2020-07-23 16:34:02.401293 (Thread-4): Opening a new connection, currently in state closed
2020-07-23 16:34:02.401360 (Thread-4): Compiling test.stripe_source.source_not_null_stripe_card_id
2020-07-23 16:34:02.406638 (Thread-3): finished collecting timing info
2020-07-23 16:34:02.408251 (Thread-4): Writing injected SQL for node "test.stripe_source.source_not_null_stripe_card_id"
2020-07-23 16:34:02.408335 (Thread-3): finished collecting timing info
2020-07-23 16:34:02.408841 (Thread-1): finished collecting timing info
2020-07-23 16:34:02.409276 (Thread-3): Finished running node model.stripe_source.stg_stripe_fee
2020-07-23 16:34:02.409381 (Thread-1): finished collecting timing info
2020-07-23 16:34:02.409598 (Thread-3): Began running node test.stripe_source.source_not_null_stripe_charge_id
2020-07-23 16:34:02.409843 (Thread-1): Finished running node model.stripe_source.stg_stripe_payment_method_card
2020-07-23 16:34:02.410137 (Thread-3): Acquiring new bigquery connection "test.stripe_source.source_not_null_stripe_charge_id".
2020-07-23 16:34:02.410396 (Thread-1): Began running node test.stripe_source.source_not_null_stripe_customer_id
2020-07-23 16:34:02.410611 (Thread-2): finished collecting timing info
2020-07-23 16:34:02.410755 (Thread-4): finished collecting timing info
2020-07-23 16:34:02.410881 (Thread-3): Opening a new connection, currently in state closed
2020-07-23 16:34:02.411112 (Thread-1): Acquiring new bigquery connection "test.stripe_source.source_not_null_stripe_customer_id".
2020-07-23 16:34:02.411217 (Thread-2): finished collecting timing info
2020-07-23 16:34:02.411394 (Thread-4): finished collecting timing info
2020-07-23 16:34:02.411551 (Thread-3): Compiling test.stripe_source.source_not_null_stripe_charge_id
2020-07-23 16:34:02.411619 (Thread-1): Re-using an available connection from the pool (formerly model.stripe_source.stg_stripe_payment_method_card).
2020-07-23 16:34:02.411803 (Thread-2): Finished running node test.stripe_source.source_not_null_stripe_balance_transaction_id
2020-07-23 16:34:02.411996 (Thread-4): Finished running node test.stripe_source.source_not_null_stripe_card_id
2020-07-23 16:34:02.418184 (Thread-3): Writing injected SQL for node "test.stripe_source.source_not_null_stripe_charge_id"
2020-07-23 16:34:02.418293 (Thread-1): Compiling test.stripe_source.source_not_null_stripe_customer_id
2020-07-23 16:34:02.418387 (Thread-2): Began running node test.stripe_source.source_not_null_stripe_payment_intent_id
2020-07-23 16:34:02.418486 (Thread-4): Began running node test.stripe_source.source_not_null_stripe_payout_id
2020-07-23 16:34:02.424157 (Thread-2): Acquiring new bigquery connection "test.stripe_source.source_not_null_stripe_payment_intent_id".
2020-07-23 16:34:02.425067 (Thread-1): Writing injected SQL for node "test.stripe_source.source_not_null_stripe_customer_id"
2020-07-23 16:34:02.425410 (Thread-4): Acquiring new bigquery connection "test.stripe_source.source_not_null_stripe_payout_id".
2020-07-23 16:34:02.425521 (Thread-3): finished collecting timing info
2020-07-23 16:34:02.425669 (Thread-2): Opening a new connection, currently in state closed
2020-07-23 16:34:02.425817 (Thread-4): Opening a new connection, currently in state closed
2020-07-23 16:34:02.425932 (Thread-3): finished collecting timing info
2020-07-23 16:34:02.426099 (Thread-2): Compiling test.stripe_source.source_not_null_stripe_payment_intent_id
2020-07-23 16:34:02.426217 (Thread-4): Compiling test.stripe_source.source_not_null_stripe_payout_id
2020-07-23 16:34:02.426399 (Thread-3): Finished running node test.stripe_source.source_not_null_stripe_charge_id
2020-07-23 16:34:02.439484 (Thread-4): Writing injected SQL for node "test.stripe_source.source_not_null_stripe_payout_id"
2020-07-23 16:34:02.440041 (Thread-2): Writing injected SQL for node "test.stripe_source.source_not_null_stripe_payment_intent_id"
2020-07-23 16:34:02.440187 (Thread-3): Began running node test.stripe_source.source_not_null_stripe_refund_id
2020-07-23 16:34:02.440586 (Thread-1): finished collecting timing info
2020-07-23 16:34:02.441135 (Thread-3): Acquiring new bigquery connection "test.stripe_source.source_not_null_stripe_refund_id".
2020-07-23 16:34:02.441382 (Thread-1): finished collecting timing info
2020-07-23 16:34:02.441694 (Thread-2): finished collecting timing info
2020-07-23 16:34:02.441999 (Thread-3): Opening a new connection, currently in state closed
2020-07-23 16:34:02.442185 (Thread-4): finished collecting timing info
2020-07-23 16:34:02.442459 (Thread-1): Finished running node test.stripe_source.source_not_null_stripe_customer_id
2020-07-23 16:34:02.442558 (Thread-2): finished collecting timing info
2020-07-23 16:34:02.442719 (Thread-3): Compiling test.stripe_source.source_not_null_stripe_refund_id
2020-07-23 16:34:02.442800 (Thread-4): finished collecting timing info
2020-07-23 16:34:02.442967 (Thread-1): Began running node test.stripe_source.source_unique_stripe_balance_transaction_id
2020-07-23 16:34:02.443210 (Thread-2): Finished running node test.stripe_source.source_not_null_stripe_payment_intent_id
2020-07-23 16:34:02.449742 (Thread-3): Writing injected SQL for node "test.stripe_source.source_not_null_stripe_refund_id"
2020-07-23 16:34:02.449938 (Thread-4): Finished running node test.stripe_source.source_not_null_stripe_payout_id
2020-07-23 16:34:02.450126 (Thread-1): Acquiring new bigquery connection "test.stripe_source.source_unique_stripe_balance_transaction_id".
2020-07-23 16:34:02.450226 (Thread-2): Began running node test.stripe_source.source_unique_stripe_card_id
2020-07-23 16:34:02.450546 (Thread-4): Began running node test.stripe_source.source_unique_stripe_charge_id
2020-07-23 16:34:02.450885 (Thread-1): Re-using an available connection from the pool (formerly test.stripe_source.source_not_null_stripe_customer_id).
2020-07-23 16:34:02.451339 (Thread-2): Acquiring new bigquery connection "test.stripe_source.source_unique_stripe_card_id".
2020-07-23 16:34:02.451718 (Thread-4): Acquiring new bigquery connection "test.stripe_source.source_unique_stripe_charge_id".
2020-07-23 16:34:02.451847 (Thread-3): finished collecting timing info
2020-07-23 16:34:02.452119 (Thread-1): Compiling test.stripe_source.source_unique_stripe_balance_transaction_id
2020-07-23 16:34:02.452216 (Thread-2): Opening a new connection, currently in state closed
2020-07-23 16:34:02.452319 (Thread-4): Opening a new connection, currently in state closed
2020-07-23 16:34:02.452455 (Thread-3): finished collecting timing info
2020-07-23 16:34:02.460205 (Thread-1): Writing injected SQL for node "test.stripe_source.source_unique_stripe_balance_transaction_id"
2020-07-23 16:34:02.460326 (Thread-2): Compiling test.stripe_source.source_unique_stripe_card_id
2020-07-23 16:34:02.460407 (Thread-4): Compiling test.stripe_source.source_unique_stripe_charge_id
2020-07-23 16:34:02.460634 (Thread-3): Finished running node test.stripe_source.source_not_null_stripe_refund_id
2020-07-23 16:34:02.467918 (Thread-2): Writing injected SQL for node "test.stripe_source.source_unique_stripe_card_id"
2020-07-23 16:34:02.473830 (Thread-3): Began running node test.stripe_source.source_unique_stripe_customer_id
2020-07-23 16:34:02.474822 (Thread-4): Writing injected SQL for node "test.stripe_source.source_unique_stripe_charge_id"
2020-07-23 16:34:02.475094 (Thread-1): finished collecting timing info
2020-07-23 16:34:02.475497 (Thread-3): Acquiring new bigquery connection "test.stripe_source.source_unique_stripe_customer_id".
2020-07-23 16:34:02.475661 (Thread-1): finished collecting timing info
2020-07-23 16:34:02.475876 (Thread-3): Opening a new connection, currently in state closed
2020-07-23 16:34:02.476144 (Thread-1): Finished running node test.stripe_source.source_unique_stripe_balance_transaction_id
2020-07-23 16:34:02.476262 (Thread-3): Compiling test.stripe_source.source_unique_stripe_customer_id
2020-07-23 16:34:02.476473 (Thread-1): Began running node test.stripe_source.source_unique_stripe_payment_intent_id
2020-07-23 16:34:02.476549 (Thread-2): finished collecting timing info
2020-07-23 16:34:02.482972 (Thread-3): Writing injected SQL for node "test.stripe_source.source_unique_stripe_customer_id"
2020-07-23 16:34:02.483039 (Thread-4): finished collecting timing info
2020-07-23 16:34:02.483307 (Thread-1): Acquiring new bigquery connection "test.stripe_source.source_unique_stripe_payment_intent_id".
2020-07-23 16:34:02.483405 (Thread-2): finished collecting timing info
2020-07-23 16:34:02.483709 (Thread-4): finished collecting timing info
2020-07-23 16:34:02.484363 (Thread-1): Re-using an available connection from the pool (formerly test.stripe_source.source_unique_stripe_balance_transaction_id).
2020-07-23 16:34:02.484598 (Thread-2): Finished running node test.stripe_source.source_unique_stripe_card_id
2020-07-23 16:34:02.484809 (Thread-4): Finished running node test.stripe_source.source_unique_stripe_charge_id
2020-07-23 16:34:02.484899 (Thread-1): Compiling test.stripe_source.source_unique_stripe_payment_intent_id
2020-07-23 16:34:02.485018 (Thread-2): Began running node test.stripe_source.source_unique_stripe_payout_id
2020-07-23 16:34:02.485133 (Thread-3): finished collecting timing info
2020-07-23 16:34:02.485390 (Thread-4): Began running node test.stripe_source.source_unique_stripe_refund_id
2020-07-23 16:34:02.493322 (Thread-1): Writing injected SQL for node "test.stripe_source.source_unique_stripe_payment_intent_id"
2020-07-23 16:34:02.493549 (Thread-2): Acquiring new bigquery connection "test.stripe_source.source_unique_stripe_payout_id".
2020-07-23 16:34:02.493666 (Thread-3): finished collecting timing info
2020-07-23 16:34:02.493928 (Thread-4): Acquiring new bigquery connection "test.stripe_source.source_unique_stripe_refund_id".
2020-07-23 16:34:02.494084 (Thread-2): Opening a new connection, currently in state closed
2020-07-23 16:34:02.494295 (Thread-3): Finished running node test.stripe_source.source_unique_stripe_customer_id
2020-07-23 16:34:02.494429 (Thread-4): Opening a new connection, currently in state closed
2020-07-23 16:34:02.494496 (Thread-1): finished collecting timing info
2020-07-23 16:34:02.494672 (Thread-2): Compiling test.stripe_source.source_unique_stripe_payout_id
2020-07-23 16:34:02.494768 (Thread-3): Began running node model.stripe.stripe_incomplete_charges
2020-07-23 16:34:02.494858 (Thread-4): Compiling test.stripe_source.source_unique_stripe_refund_id
2020-07-23 16:34:02.494993 (Thread-1): finished collecting timing info
2020-07-23 16:34:02.502162 (Thread-2): Writing injected SQL for node "test.stripe_source.source_unique_stripe_payout_id"
2020-07-23 16:34:02.502378 (Thread-3): Acquiring new bigquery connection "model.stripe.stripe_incomplete_charges".
2020-07-23 16:34:02.509456 (Thread-4): Writing injected SQL for node "test.stripe_source.source_unique_stripe_refund_id"
2020-07-23 16:34:02.509657 (Thread-1): Finished running node test.stripe_source.source_unique_stripe_payment_intent_id
2020-07-23 16:34:02.509831 (Thread-3): Opening a new connection, currently in state closed
2020-07-23 16:34:02.510236 (Thread-1): Began running node test.stripe_source.not_null_stg_stripe_charge_charge_id
2020-07-23 16:34:02.510403 (Thread-3): Compiling model.stripe.stripe_incomplete_charges
2020-07-23 16:34:02.510718 (Thread-1): Acquiring new bigquery connection "test.stripe_source.not_null_stg_stripe_charge_charge_id".
2020-07-23 16:34:02.515665 (Thread-3): Writing injected SQL for node "model.stripe.stripe_incomplete_charges"
2020-07-23 16:34:02.515838 (Thread-1): Re-using an available connection from the pool (formerly test.stripe_source.source_unique_stripe_payment_intent_id).
2020-07-23 16:34:02.515906 (Thread-4): finished collecting timing info
2020-07-23 16:34:02.516111 (Thread-2): finished collecting timing info
2020-07-23 16:34:02.516322 (Thread-1): Compiling test.stripe_source.not_null_stg_stripe_charge_charge_id
2020-07-23 16:34:02.516489 (Thread-4): finished collecting timing info
2020-07-23 16:34:02.516639 (Thread-3): finished collecting timing info
2020-07-23 16:34:02.516801 (Thread-2): finished collecting timing info
2020-07-23 16:34:02.523508 (Thread-1): Writing injected SQL for node "test.stripe_source.not_null_stg_stripe_charge_charge_id"
2020-07-23 16:34:02.523865 (Thread-4): Finished running node test.stripe_source.source_unique_stripe_refund_id
2020-07-23 16:34:02.524058 (Thread-3): finished collecting timing info
2020-07-23 16:34:02.524459 (Thread-2): Finished running node test.stripe_source.source_unique_stripe_payout_id
2020-07-23 16:34:02.524899 (Thread-4): Began running node test.stripe_source.not_null_stg_stripe_customer_id
2020-07-23 16:34:02.525405 (Thread-3): Finished running node model.stripe.stripe_incomplete_charges
2020-07-23 16:34:02.525588 (Thread-2): Began running node test.stripe_source.unique_stg_stripe_charge_charge_id
2020-07-23 16:34:02.526045 (Thread-4): Acquiring new bigquery connection "test.stripe_source.not_null_stg_stripe_customer_id".
2020-07-23 16:34:02.526323 (Thread-3): Began running node test.stripe_source.unique_stg_stripe_customer_id
2020-07-23 16:34:02.526867 (Thread-2): Acquiring new bigquery connection "test.stripe_source.unique_stg_stripe_charge_charge_id".
2020-07-23 16:34:02.526974 (Thread-1): finished collecting timing info
2020-07-23 16:34:02.527210 (Thread-4): Opening a new connection, currently in state closed
2020-07-23 16:34:02.527468 (Thread-3): Acquiring new bigquery connection "test.stripe_source.unique_stg_stripe_customer_id".
2020-07-23 16:34:02.527596 (Thread-2): Opening a new connection, currently in state closed
2020-07-23 16:34:02.527799 (Thread-1): finished collecting timing info
2020-07-23 16:34:02.528019 (Thread-4): Compiling test.stripe_source.not_null_stg_stripe_customer_id
2020-07-23 16:34:02.528129 (Thread-3): Opening a new connection, currently in state closed
2020-07-23 16:34:02.528268 (Thread-2): Compiling test.stripe_source.unique_stg_stripe_charge_charge_id
2020-07-23 16:34:02.528547 (Thread-1): Finished running node test.stripe_source.not_null_stg_stripe_charge_charge_id
2020-07-23 16:34:02.536061 (Thread-4): Writing injected SQL for node "test.stripe_source.not_null_stg_stripe_customer_id"
2020-07-23 16:34:02.536227 (Thread-3): Compiling test.stripe_source.unique_stg_stripe_customer_id
2020-07-23 16:34:02.543874 (Thread-2): Writing injected SQL for node "test.stripe_source.unique_stg_stripe_charge_charge_id"
2020-07-23 16:34:02.544024 (Thread-1): Began running node test.stripe_source.not_null_stg_stripe_balance_transaction_balance_transaction_id
2020-07-23 16:34:02.550366 (Thread-3): Writing injected SQL for node "test.stripe_source.unique_stg_stripe_customer_id"
2020-07-23 16:34:02.550595 (Thread-4): finished collecting timing info
2020-07-23 16:34:02.550888 (Thread-1): Acquiring new bigquery connection "test.stripe_source.not_null_stg_stripe_balance_transaction_balance_transaction_id".
2020-07-23 16:34:02.551233 (Thread-4): finished collecting timing info
2020-07-23 16:34:02.551472 (Thread-2): finished collecting timing info
2020-07-23 16:34:02.551606 (Thread-3): finished collecting timing info
2020-07-23 16:34:02.551742 (Thread-1): Re-using an available connection from the pool (formerly test.stripe_source.not_null_stg_stripe_charge_charge_id).
2020-07-23 16:34:02.551934 (Thread-4): Finished running node test.stripe_source.not_null_stg_stripe_customer_id
2020-07-23 16:34:02.552027 (Thread-2): finished collecting timing info
2020-07-23 16:34:02.552192 (Thread-3): finished collecting timing info
2020-07-23 16:34:02.552339 (Thread-1): Compiling test.stripe_source.not_null_stg_stripe_balance_transaction_balance_transaction_id
2020-07-23 16:34:02.552424 (Thread-4): Began running node test.stripe_source.unique_stg_stripe_balance_transaction_balance_transaction_id
2020-07-23 16:34:02.552619 (Thread-2): Finished running node test.stripe_source.unique_stg_stripe_charge_charge_id
2020-07-23 16:34:02.552851 (Thread-3): Finished running node test.stripe_source.unique_stg_stripe_customer_id
2020-07-23 16:34:02.559991 (Thread-1): Writing injected SQL for node "test.stripe_source.not_null_stg_stripe_balance_transaction_balance_transaction_id"
2020-07-23 16:34:02.560422 (Thread-4): Acquiring new bigquery connection "test.stripe_source.unique_stg_stripe_balance_transaction_balance_transaction_id".
2020-07-23 16:34:02.560655 (Thread-2): Began running node test.stripe_source.not_null_stg_stripe_card_card_id
2020-07-23 16:34:02.560974 (Thread-3): Began running node test.stripe_source.unique_stg_stripe_card_card_id
2020-07-23 16:34:02.561378 (Thread-4): Opening a new connection, currently in state closed
2020-07-23 16:34:02.561701 (Thread-2): Acquiring new bigquery connection "test.stripe_source.not_null_stg_stripe_card_card_id".
2020-07-23 16:34:02.562011 (Thread-3): Acquiring new bigquery connection "test.stripe_source.unique_stg_stripe_card_card_id".
2020-07-23 16:34:02.562280 (Thread-4): Compiling test.stripe_source.unique_stg_stripe_balance_transaction_balance_transaction_id
2020-07-23 16:34:02.562456 (Thread-1): finished collecting timing info
2020-07-23 16:34:02.562791 (Thread-2): Opening a new connection, currently in state closed
2020-07-23 16:34:02.562974 (Thread-3): Opening a new connection, currently in state closed
2020-07-23 16:34:02.569686 (Thread-4): Writing injected SQL for node "test.stripe_source.unique_stg_stripe_balance_transaction_balance_transaction_id"
2020-07-23 16:34:02.569774 (Thread-1): finished collecting timing info
2020-07-23 16:34:02.569943 (Thread-2): Compiling test.stripe_source.not_null_stg_stripe_card_card_id
2020-07-23 16:34:02.570015 (Thread-3): Compiling test.stripe_source.unique_stg_stripe_card_card_id
2020-07-23 16:34:02.570276 (Thread-1): Finished running node test.stripe_source.not_null_stg_stripe_balance_transaction_balance_transaction_id
2020-07-23 16:34:02.583315 (Thread-3): Writing injected SQL for node "test.stripe_source.unique_stg_stripe_card_card_id"
2020-07-23 16:34:02.584661 (Thread-2): Writing injected SQL for node "test.stripe_source.not_null_stg_stripe_card_card_id"
2020-07-23 16:34:02.584808 (Thread-1): Began running node test.stripe_source.not_null_stg_stripe_payment_intent_payment_intent_id
2020-07-23 16:34:02.585538 (Thread-1): Acquiring new bigquery connection "test.stripe_source.not_null_stg_stripe_payment_intent_payment_intent_id".
2020-07-23 16:34:02.585618 (Thread-1): Re-using an available connection from the pool (formerly test.stripe_source.not_null_stg_stripe_balance_transaction_balance_transaction_id).
2020-07-23 16:34:02.585688 (Thread-1): Compiling test.stripe_source.not_null_stg_stripe_payment_intent_payment_intent_id
2020-07-23 16:34:02.591617 (Thread-1): Writing injected SQL for node "test.stripe_source.not_null_stg_stripe_payment_intent_payment_intent_id"
2020-07-23 16:34:02.591787 (Thread-4): finished collecting timing info
2020-07-23 16:34:02.591976 (Thread-4): finished collecting timing info
2020-07-23 16:34:02.592305 (Thread-4): Finished running node test.stripe_source.unique_stg_stripe_balance_transaction_balance_transaction_id
2020-07-23 16:34:02.592465 (Thread-3): finished collecting timing info
2020-07-23 16:34:02.592686 (Thread-4): Began running node test.stripe_source.unique_stg_stripe_payment_intent_payment_intent_id
2020-07-23 16:34:02.592762 (Thread-2): finished collecting timing info
2020-07-23 16:34:02.592980 (Thread-3): finished collecting timing info
2020-07-23 16:34:02.593226 (Thread-1): finished collecting timing info
2020-07-23 16:34:02.593464 (Thread-4): Acquiring new bigquery connection "test.stripe_source.unique_stg_stripe_payment_intent_payment_intent_id".
2020-07-23 16:34:02.593557 (Thread-2): finished collecting timing info
2020-07-23 16:34:02.593818 (Thread-3): Finished running node test.stripe_source.unique_stg_stripe_card_card_id
2020-07-23 16:34:02.593913 (Thread-1): finished collecting timing info
2020-07-23 16:34:02.594059 (Thread-4): Opening a new connection, currently in state closed
2020-07-23 16:34:02.594236 (Thread-2): Finished running node test.stripe_source.not_null_stg_stripe_card_card_id
2020-07-23 16:34:02.594332 (Thread-3): Began running node test.stripe_source.not_null_stg_stripe_payout_payout_id
2020-07-23 16:34:02.594548 (Thread-1): Finished running node test.stripe_source.not_null_stg_stripe_payment_intent_payment_intent_id
2020-07-23 16:34:02.594675 (Thread-4): Compiling test.stripe_source.unique_stg_stripe_payment_intent_payment_intent_id
2020-07-23 16:34:02.594764 (Thread-2): Began running node test.stripe_source.unique_stg_stripe_payout_payout_id
2020-07-23 16:34:02.594983 (Thread-3): Acquiring new bigquery connection "test.stripe_source.not_null_stg_stripe_payout_payout_id".
2020-07-23 16:34:02.595128 (Thread-1): Began running node model.stripe.stripe_balance_transaction_joined
2020-07-23 16:34:02.602950 (Thread-4): Writing injected SQL for node "test.stripe_source.unique_stg_stripe_payment_intent_payment_intent_id"
2020-07-23 16:34:02.603222 (Thread-2): Acquiring new bigquery connection "test.stripe_source.unique_stg_stripe_payout_payout_id".
2020-07-23 16:34:02.603313 (Thread-3): Opening a new connection, currently in state closed
2020-07-23 16:34:02.603487 (Thread-1): Acquiring new bigquery connection "model.stripe.stripe_balance_transaction_joined".
2020-07-23 16:34:02.603643 (Thread-2): Opening a new connection, currently in state closed
2020-07-23 16:34:02.603738 (Thread-3): Compiling test.stripe_source.not_null_stg_stripe_payout_payout_id
2020-07-23 16:34:02.603866 (Thread-1): Re-using an available connection from the pool (formerly test.stripe_source.not_null_stg_stripe_payment_intent_payment_intent_id).
2020-07-23 16:34:02.603935 (Thread-4): finished collecting timing info
2020-07-23 16:34:02.604101 (Thread-2): Compiling test.stripe_source.unique_stg_stripe_payout_payout_id
2020-07-23 16:34:02.610364 (Thread-3): Writing injected SQL for node "test.stripe_source.not_null_stg_stripe_payout_payout_id"
2020-07-23 16:34:02.610452 (Thread-1): Compiling model.stripe.stripe_balance_transaction_joined
2020-07-23 16:34:02.610543 (Thread-4): finished collecting timing info
2020-07-23 16:34:02.616897 (Thread-2): Writing injected SQL for node "test.stripe_source.unique_stg_stripe_payout_payout_id"
2020-07-23 16:34:02.627178 (Thread-1): Writing injected SQL for node "model.stripe.stripe_balance_transaction_joined"
2020-07-23 16:34:02.627541 (Thread-4): Finished running node test.stripe_source.unique_stg_stripe_payment_intent_payment_intent_id
2020-07-23 16:34:02.627742 (Thread-3): finished collecting timing info
2020-07-23 16:34:02.628193 (Thread-4): Began running node test.stripe_source.not_null_stg_stripe_refund_refund_id
2020-07-23 16:34:02.628655 (Thread-3): finished collecting timing info
2020-07-23 16:34:02.628813 (Thread-1): finished collecting timing info
2020-07-23 16:34:02.628946 (Thread-2): finished collecting timing info
2020-07-23 16:34:02.629219 (Thread-4): Acquiring new bigquery connection "test.stripe_source.not_null_stg_stripe_refund_refund_id".
2020-07-23 16:34:02.629416 (Thread-3): Finished running node test.stripe_source.not_null_stg_stripe_payout_payout_id
2020-07-23 16:34:02.629515 (Thread-1): finished collecting timing info
2020-07-23 16:34:02.629685 (Thread-2): finished collecting timing info
2020-07-23 16:34:02.629831 (Thread-4): Opening a new connection, currently in state closed
2020-07-23 16:34:02.629919 (Thread-3): Began running node test.stripe_source.unique_stg_stripe_refund_refund_id
2020-07-23 16:34:02.630120 (Thread-1): Finished running node model.stripe.stripe_balance_transaction_joined
2020-07-23 16:34:02.630360 (Thread-2): Finished running node test.stripe_source.unique_stg_stripe_payout_payout_id
2020-07-23 16:34:02.630449 (Thread-4): Compiling test.stripe_source.not_null_stg_stripe_refund_refund_id
2020-07-23 16:34:02.630620 (Thread-3): Acquiring new bigquery connection "test.stripe_source.unique_stg_stripe_refund_refund_id".
2020-07-23 16:34:02.630716 (Thread-1): Began running node test.stripe_source.not_null_stg_stripe_invoice_invoice_id
2020-07-23 16:34:02.630813 (Thread-2): Began running node test.stripe_source.unique_stg_stripe_invoice_invoice_id
2020-07-23 16:34:02.637435 (Thread-3): Opening a new connection, currently in state closed
2020-07-23 16:34:02.637665 (Thread-4): Writing injected SQL for node "test.stripe_source.not_null_stg_stripe_refund_refund_id"
2020-07-23 16:34:02.637871 (Thread-1): Acquiring new bigquery connection "test.stripe_source.not_null_stg_stripe_invoice_invoice_id".
2020-07-23 16:34:02.638052 (Thread-2): Acquiring new bigquery connection "test.stripe_source.unique_stg_stripe_invoice_invoice_id".
2020-07-23 16:34:02.638138 (Thread-3): Compiling test.stripe_source.unique_stg_stripe_refund_refund_id
2020-07-23 16:34:02.638376 (Thread-1): Re-using an available connection from the pool (formerly model.stripe.stripe_balance_transaction_joined).
2020-07-23 16:34:02.638631 (Thread-2): Opening a new connection, currently in state closed
2020-07-23 16:34:02.645611 (Thread-3): Writing injected SQL for node "test.stripe_source.unique_stg_stripe_refund_refund_id"
2020-07-23 16:34:02.645745 (Thread-1): Compiling test.stripe_source.not_null_stg_stripe_invoice_invoice_id
2020-07-23 16:34:02.645810 (Thread-4): finished collecting timing info
2020-07-23 16:34:02.645981 (Thread-2): Compiling test.stripe_source.unique_stg_stripe_invoice_invoice_id
2020-07-23 16:34:02.651588 (Thread-4): finished collecting timing info
2020-07-23 16:34:02.653089 (Thread-1): Writing injected SQL for node "test.stripe_source.not_null_stg_stripe_invoice_invoice_id"
2020-07-23 16:34:02.659510 (Thread-3): finished collecting timing info
2020-07-23 16:34:02.660580 (Thread-2): Writing injected SQL for node "test.stripe_source.unique_stg_stripe_invoice_invoice_id"
2020-07-23 16:34:02.660801 (Thread-4): Finished running node test.stripe_source.not_null_stg_stripe_refund_refund_id
2020-07-23 16:34:02.661000 (Thread-3): finished collecting timing info
2020-07-23 16:34:02.661309 (Thread-4): Began running node test.stripe_source.not_null_stg_stripe_invoice_line_item_unique_id
2020-07-23 16:34:02.661439 (Thread-1): finished collecting timing info
2020-07-23 16:34:02.661915 (Thread-3): Finished running node test.stripe_source.unique_stg_stripe_refund_refund_id
2020-07-23 16:34:02.662176 (Thread-4): Acquiring new bigquery connection "test.stripe_source.not_null_stg_stripe_invoice_line_item_unique_id".
2020-07-23 16:34:02.662244 (Thread-2): finished collecting timing info
2020-07-23 16:34:02.662421 (Thread-1): finished collecting timing info
2020-07-23 16:34:02.662593 (Thread-3): Began running node test.stripe_source.unique_stg_stripe_invoice_line_item_unique_id
2020-07-23 16:34:02.662675 (Thread-4): Opening a new connection, currently in state closed
2020-07-23 16:34:02.662796 (Thread-2): finished collecting timing info
2020-07-23 16:34:02.663065 (Thread-1): Finished running node test.stripe_source.not_null_stg_stripe_invoice_invoice_id
2020-07-23 16:34:02.663245 (Thread-3): Acquiring new bigquery connection "test.stripe_source.unique_stg_stripe_invoice_line_item_unique_id".
2020-07-23 16:34:02.663327 (Thread-4): Compiling test.stripe_source.not_null_stg_stripe_invoice_line_item_unique_id
2020-07-23 16:34:02.663505 (Thread-2): Finished running node test.stripe_source.unique_stg_stripe_invoice_invoice_id
2020-07-23 16:34:02.663606 (Thread-1): Began running node model.stripe.stripe_invoice_details
2020-07-23 16:34:02.663683 (Thread-3): Opening a new connection, currently in state closed
2020-07-23 16:34:02.669997 (Thread-4): Writing injected SQL for node "test.stripe_source.not_null_stg_stripe_invoice_line_item_unique_id"
2020-07-23 16:34:02.670112 (Thread-2): Began running node model.stripe.stripe_subscription_details
2020-07-23 16:34:02.670309 (Thread-1): Acquiring new bigquery connection "model.stripe.stripe_invoice_details".
2020-07-23 16:34:02.670435 (Thread-3): Compiling test.stripe_source.unique_stg_stripe_invoice_line_item_unique_id
2020-07-23 16:34:02.670706 (Thread-2): Acquiring new bigquery connection "model.stripe.stripe_subscription_details".
2020-07-23 16:34:02.670880 (Thread-1): Re-using an available connection from the pool (formerly test.stripe_source.not_null_stg_stripe_invoice_invoice_id).
2020-07-23 16:34:02.670951 (Thread-4): finished collecting timing info
2020-07-23 16:34:02.677433 (Thread-3): Writing injected SQL for node "test.stripe_source.unique_stg_stripe_invoice_line_item_unique_id"
2020-07-23 16:34:02.677514 (Thread-2): Opening a new connection, currently in state closed
2020-07-23 16:34:02.677591 (Thread-1): Compiling model.stripe.stripe_invoice_details
2020-07-23 16:34:02.677678 (Thread-4): finished collecting timing info
2020-07-23 16:34:02.677927 (Thread-2): Compiling model.stripe.stripe_subscription_details
2020-07-23 16:34:02.694839 (Thread-1): Writing injected SQL for node "model.stripe.stripe_invoice_details"
2020-07-23 16:34:02.695210 (Thread-4): Finished running node test.stripe_source.not_null_stg_stripe_invoice_line_item_unique_id
2020-07-23 16:34:02.706737 (Thread-3): finished collecting timing info
2020-07-23 16:34:02.706949 (Thread-4): Began running node test.stripe_source.not_null_stg_stripe_payment_method_payment_method_id
2020-07-23 16:34:02.710985 (Thread-2): Writing injected SQL for node "model.stripe.stripe_subscription_details"
2020-07-23 16:34:02.711167 (Thread-3): finished collecting timing info
2020-07-23 16:34:02.711521 (Thread-4): Acquiring new bigquery connection "test.stripe_source.not_null_stg_stripe_payment_method_payment_method_id".
2020-07-23 16:34:02.711586 (Thread-1): finished collecting timing info
2020-07-23 16:34:02.712042 (Thread-3): Finished running node test.stripe_source.unique_stg_stripe_invoice_line_item_unique_id
2020-07-23 16:34:02.712131 (Thread-4): Opening a new connection, currently in state closed
2020-07-23 16:34:02.712281 (Thread-1): finished collecting timing info
2020-07-23 16:34:02.712472 (Thread-3): Began running node test.stripe_source.unique_stg_stripe_payment_method_payment_method_id
2020-07-23 16:34:02.712652 (Thread-4): Compiling test.stripe_source.not_null_stg_stripe_payment_method_payment_method_id
2020-07-23 16:34:02.712833 (Thread-2): finished collecting timing info
2020-07-23 16:34:02.713125 (Thread-1): Finished running node model.stripe.stripe_invoice_details
2020-07-23 16:34:02.713317 (Thread-3): Acquiring new bigquery connection "test.stripe_source.unique_stg_stripe_payment_method_payment_method_id".
2020-07-23 16:34:02.719156 (Thread-2): finished collecting timing info
2020-07-23 16:34:02.719990 (Thread-4): Writing injected SQL for node "test.stripe_source.not_null_stg_stripe_payment_method_payment_method_id"
2020-07-23 16:34:02.720097 (Thread-1): Began running node model.stripe.stripe_balance_transactions
2020-07-23 16:34:02.720183 (Thread-3): Opening a new connection, currently in state closed
2020-07-23 16:34:02.720432 (Thread-2): Finished running node model.stripe.stripe_subscription_details
2020-07-23 16:34:02.720703 (Thread-1): Acquiring new bigquery connection "model.stripe.stripe_balance_transactions".
2020-07-23 16:34:02.720793 (Thread-3): Compiling test.stripe_source.unique_stg_stripe_payment_method_payment_method_id
2020-07-23 16:34:02.720939 (Thread-2): Began running node model.stripe.stripe_customer_overview
2020-07-23 16:34:02.721030 (Thread-4): finished collecting timing info
2020-07-23 16:34:02.721190 (Thread-1): Re-using an available connection from the pool (formerly model.stripe.stripe_invoice_details).
2020-07-23 16:34:02.727932 (Thread-2): Acquiring new bigquery connection "model.stripe.stripe_customer_overview".
2020-07-23 16:34:02.728794 (Thread-3): Writing injected SQL for node "test.stripe_source.unique_stg_stripe_payment_method_payment_method_id"
2020-07-23 16:34:02.728922 (Thread-4): finished collecting timing info
2020-07-23 16:34:02.729135 (Thread-1): Compiling model.stripe.stripe_balance_transactions
2020-07-23 16:34:02.729245 (Thread-2): Opening a new connection, currently in state closed
2020-07-23 16:34:02.729621 (Thread-4): Finished running node test.stripe_source.not_null_stg_stripe_payment_method_payment_method_id
2020-07-23 16:34:02.741242 (Thread-2): Compiling model.stripe.stripe_customer_overview
2020-07-23 16:34:02.746495 (Thread-3): finished collecting timing info
2020-07-23 16:34:02.746741 (Thread-4): Began running node model.stripe.stripe_daily_overview
2020-07-23 16:34:02.749039 (Thread-1): Writing injected SQL for node "model.stripe.stripe_balance_transactions"
2020-07-23 16:34:02.755561 (Thread-3): finished collecting timing info
2020-07-23 16:34:02.765588 (Thread-2): Writing injected SQL for node "model.stripe.stripe_customer_overview"
2020-07-23 16:34:02.765852 (Thread-4): Acquiring new bigquery connection "model.stripe.stripe_daily_overview".
2020-07-23 16:34:02.766138 (Thread-3): Finished running node test.stripe_source.unique_stg_stripe_payment_method_payment_method_id
2020-07-23 16:34:02.766402 (Thread-4): Opening a new connection, currently in state closed
2020-07-23 16:34:02.766574 (Thread-3): Began running node model.stripe.stripe_monthly_overview
2020-07-23 16:34:02.766647 (Thread-1): finished collecting timing info
2020-07-23 16:34:02.766816 (Thread-4): Compiling model.stripe.stripe_daily_overview
2020-07-23 16:34:02.767037 (Thread-3): Acquiring new bigquery connection "model.stripe.stripe_monthly_overview".
2020-07-23 16:34:02.767134 (Thread-1): finished collecting timing info
2020-07-23 16:34:02.773903 (Thread-2): finished collecting timing info
2020-07-23 16:34:02.774107 (Thread-3): Opening a new connection, currently in state closed
2020-07-23 16:34:02.778197 (Thread-4): Writing injected SQL for node "model.stripe.stripe_daily_overview"
2020-07-23 16:34:02.778569 (Thread-1): Finished running node model.stripe.stripe_balance_transactions
2020-07-23 16:34:02.778719 (Thread-2): finished collecting timing info
2020-07-23 16:34:02.778930 (Thread-3): Compiling model.stripe.stripe_monthly_overview
2020-07-23 16:34:02.779223 (Thread-1): Began running node model.stripe.stripe_quarterly_overview
2020-07-23 16:34:02.779516 (Thread-2): Finished running node model.stripe.stripe_customer_overview
2020-07-23 16:34:02.790336 (Thread-4): finished collecting timing info
2020-07-23 16:34:02.790839 (Thread-3): Writing injected SQL for node "model.stripe.stripe_monthly_overview"
2020-07-23 16:34:02.791479 (Thread-1): Acquiring new bigquery connection "model.stripe.stripe_quarterly_overview".
2020-07-23 16:34:02.791603 (Thread-2): Began running node model.stripe.stripe_weekly_overview
2020-07-23 16:34:02.791751 (Thread-4): finished collecting timing info
2020-07-23 16:34:02.792271 (Thread-1): Re-using an available connection from the pool (formerly model.stripe.stripe_balance_transactions).
2020-07-23 16:34:02.792692 (Thread-2): Acquiring new bigquery connection "model.stripe.stripe_weekly_overview".
2020-07-23 16:34:02.792965 (Thread-4): Finished running node model.stripe.stripe_daily_overview
2020-07-23 16:34:02.793100 (Thread-1): Compiling model.stripe.stripe_quarterly_overview
2020-07-23 16:34:02.793155 (Thread-3): finished collecting timing info
2020-07-23 16:34:02.793307 (Thread-2): Opening a new connection, currently in state closed
2020-07-23 16:34:02.799147 (Thread-3): finished collecting timing info
2020-07-23 16:34:02.804452 (Thread-1): Writing injected SQL for node "model.stripe.stripe_quarterly_overview"
2020-07-23 16:34:02.804587 (Thread-2): Compiling model.stripe.stripe_weekly_overview
2020-07-23 16:34:02.804873 (Thread-3): Finished running node model.stripe.stripe_monthly_overview
2020-07-23 16:34:02.816867 (Thread-2): Writing injected SQL for node "model.stripe.stripe_weekly_overview"
2020-07-23 16:34:02.817464 (Thread-1): finished collecting timing info
2020-07-23 16:34:02.817674 (Thread-1): finished collecting timing info
2020-07-23 16:34:02.817974 (Thread-1): Finished running node model.stripe.stripe_quarterly_overview
2020-07-23 16:34:02.818814 (Thread-2): finished collecting timing info
2020-07-23 16:34:02.819020 (Thread-2): finished collecting timing info
2020-07-23 16:34:02.819304 (Thread-2): Finished running node model.stripe.stripe_weekly_overview
2020-07-23 16:34:02.820254 (MainThread): Connection 'master' was properly closed.
2020-07-23 16:34:02.820331 (MainThread): Connection 'model.stripe.stripe_quarterly_overview' was left open.
2020-07-23 16:34:02.820388 (MainThread): Connection 'model.stripe.stripe_weekly_overview' was properly closed.
2020-07-23 16:34:02.820440 (MainThread): Connection 'model.stripe.stripe_monthly_overview' was properly closed.
2020-07-23 16:34:02.820489 (MainThread): Connection 'model.stripe.stripe_daily_overview' was properly closed.
2020-07-23 16:34:02.944613 (MainThread): 09:34:02 | Done.
2020-07-23 16:34:02.948574 (MainThread): Acquiring new bigquery connection "generate_catalog".
2020-07-23 16:34:02.948694 (MainThread): Opening a new connection, currently in state init
2020-07-23 16:34:02.948765 (MainThread): 09:34:02 | Building catalog
2020-07-23 16:34:03.071942 (MainThread): Your application has authenticated using end user credentials from Google Cloud SDK. We recommend that most server applications use service accounts instead. If your application continues to use end user credentials from Cloud SDK, you might receive a "quota exceeded" or "API not enabled" error. For more information about service accounts, see https://cloud.google.com/docs/authentication/
2020-07-23 16:34:04.706619 (ThreadPoolExecutor-2_0): Acquiring new bigquery connection "dbt-package-testing.information_schema".
2020-07-23 16:34:04.707215 (ThreadPoolExecutor-2_1): Acquiring new bigquery connection "dbt-package-testing.information_schema".
2020-07-23 16:34:04.707352 (ThreadPoolExecutor-2_0): Opening a new connection, currently in state init
2020-07-23 16:34:04.707553 (ThreadPoolExecutor-2_1): Opening a new connection, currently in state init
2020-07-23 16:34:04.747137 (ThreadPoolExecutor-2_1): Your application has authenticated using end user credentials from Google Cloud SDK. We recommend that most server applications use service accounts instead. If your application continues to use end user credentials from Cloud SDK, you might receive a "quota exceeded" or "API not enabled" error. For more information about service accounts, see https://cloud.google.com/docs/authentication/
2020-07-23 16:34:04.749785 (ThreadPoolExecutor-2_0): Your application has authenticated using end user credentials from Google Cloud SDK. We recommend that most server applications use service accounts instead. If your application continues to use end user credentials from Cloud SDK, you might receive a "quota exceeded" or "API not enabled" error. For more information about service accounts, see https://cloud.google.com/docs/authentication/
2020-07-23 16:34:05.836421 (ThreadPoolExecutor-2_0): On dbt-package-testing.information_schema: /* {"app": "dbt", "dbt_version": "0.17.0rc1", "profile_name": "integration_test", "target_name": "dev_bigquery_dbt_testing", "connection_name": "dbt-package-testing.information_schema"} */

    with tables as (
        select
            project_id as table_database,
            dataset_id as table_schema,
            table_id as original_table_name,

            concat(project_id, '.', dataset_id, '.', table_id) as relation_id,

            row_count,
            size_bytes as size_bytes,
            case
                when type = 1 then 'table'
                when type = 2 then 'view'
                else 'external'
            end as table_type,

            REGEXP_CONTAINS(table_id, '^.+[0-9]{8}$') and coalesce(type, 0) = 1 as is_date_shard,
            REGEXP_EXTRACT(table_id, '^(.+)[0-9]{8}$') as shard_base_name,
            REGEXP_EXTRACT(table_id, '^.+([0-9]{8})$') as shard_name

        from `dbt-package-testing`.`dbt_kristin_2`.__TABLES__
        where (upper(dataset_id) = upper('dbt_kristin_2'))
    ),

    extracted as (

        select *,
            case
                when is_date_shard then shard_base_name
                else original_table_name
            end as table_name

        from tables

    ),

    unsharded_tables as (

        select
            table_database,
            table_schema,
            table_name,
            coalesce(table_type, 'external') as table_type,
            is_date_shard,

            struct(
                min(shard_name) as shard_min,
                max(shard_name) as shard_max,
                count(*) as shard_count
            ) as table_shards,

            sum(size_bytes) as size_bytes,
            sum(row_count) as row_count,

            max(relation_id) as relation_id

        from extracted
        group by 1,2,3,4,5

    ),

    info_schema_columns as (

        select
            concat(table_catalog, '.', table_schema, '.', table_name) as relation_id,
            table_catalog as table_database,
            table_schema,
            table_name,

            -- use the "real" column name from the paths query below
            column_name as base_column_name,
            ordinal_position as column_index,
            cast(null as string) as column_comment,

            is_partitioning_column,
            clustering_ordinal_position

        from `dbt-package-testing`.`dbt_kristin_2`.INFORMATION_SCHEMA.COLUMNS
        where ordinal_position is not null

    ),

    info_schema_column_paths as (

        select
            concat(table_catalog, '.', table_schema, '.', table_name) as relation_id,
            field_path as column_name,
            data_type as column_type,
            column_name as base_column_name

        from `dbt-package-testing`.`dbt_kristin_2`.INFORMATION_SCHEMA.COLUMN_FIELD_PATHS
        where data_type not like 'STRUCT%'

    ),

    columns as (

        select * except (base_column_name)
        from info_schema_columns
        join info_schema_column_paths using (relation_id, base_column_name)

    ),

    column_stats as (

        select
            table_database,
            table_schema,
            table_name,
            max(relation_id) as relation_id,
            max(case when is_partitioning_column = 'YES' then 1 else 0 end) = 1 as is_partitioned,
            max(case when is_partitioning_column = 'YES' then column_name else null end) as partition_column,
            max(case when clustering_ordinal_position is not null then 1 else 0 end) = 1 as is_clustered,
            array_to_string(
                array_agg(
                    case
                        when clustering_ordinal_position is not null then column_name
                        else null
                    end ignore nulls
                    order by clustering_ordinal_position
                ), ', '
            ) as clustering_columns

        from columns
        group by 1,2,3

    )

    select
        unsharded_tables.table_database,
        unsharded_tables.table_schema,
        case
            when is_date_shard then concat(unsharded_tables.table_name, '*')
            else unsharded_tables.table_name
        end as table_name,
        unsharded_tables.table_type,

        -- coalesce name and type for External tables - these columns are not
        -- present in the COLUMN_FIELD_PATHS resultset
        coalesce(columns.column_name, '<unknown>') as column_name,
        -- invent a row number to account for nested fields -- BQ does
        -- not treat these nested properties as independent fields
        row_number() over (
            partition by relation_id
            order by columns.column_index, columns.column_name
        ) as column_index,
        coalesce(columns.column_type, '<unknown>') as column_type,
        columns.column_comment,

        'Shard count' as `stats__date_shards__label`,
        table_shards.shard_count as `stats__date_shards__value`,
        'The number of date shards in this table' as `stats__date_shards__description`,
        is_date_shard as `stats__date_shards__include`,

        'Shard (min)' as `stats__date_shard_min__label`,
        table_shards.shard_min as `stats__date_shard_min__value`,
        'The first date shard in this table' as `stats__date_shard_min__description`,
        is_date_shard as `stats__date_shard_min__include`,

        'Shard (max)' as `stats__date_shard_max__label`,
        table_shards.shard_max as `stats__date_shard_max__value`,
        'The last date shard in this table' as `stats__date_shard_max__description`,
        is_date_shard as `stats__date_shard_max__include`,

        '# Rows' as `stats__num_rows__label`,
        row_count as `stats__num_rows__value`,
        'Approximate count of rows in this table' as `stats__num_rows__description`,
        (unsharded_tables.table_type = 'table') as `stats__num_rows__include`,

        'Approximate Size' as `stats__num_bytes__label`,
        size_bytes as `stats__num_bytes__value`,
        'Approximate size of table as reported by BigQuery' as `stats__num_bytes__description`,
        (unsharded_tables.table_type = 'table') as `stats__num_bytes__include`,

        'Partitioned By' as `stats__partitioning_type__label`,
        partition_column as `stats__partitioning_type__value`,
        'The partitioning column for this table' as `stats__partitioning_type__description`,
        is_partitioned as `stats__partitioning_type__include`,

        'Clustered By' as `stats__clustering_fields__label`,
        clustering_columns as `stats__clustering_fields__value`,
        'The clustering columns for this table' as `stats__clustering_fields__description`,
        is_clustered as `stats__clustering_fields__include`

    -- join using relation_id (an actual relation, not a shard prefix) to make
    -- sure that column metadata is picked up through the join. This will only
    -- return the column information for the "max" table in a date-sharded table set
    from unsharded_tables
    left join columns using (relation_id)
    left join column_stats using (relation_id)
  
2020-07-23 16:34:05.860165 (ThreadPoolExecutor-2_1): On dbt-package-testing.information_schema: /* {"app": "dbt", "dbt_version": "0.17.0rc1", "profile_name": "integration_test", "target_name": "dev_bigquery_dbt_testing", "connection_name": "dbt-package-testing.information_schema"} */

    with tables as (
        select
            project_id as table_database,
            dataset_id as table_schema,
            table_id as original_table_name,

            concat(project_id, '.', dataset_id, '.', table_id) as relation_id,

            row_count,
            size_bytes as size_bytes,
            case
                when type = 1 then 'table'
                when type = 2 then 'view'
                else 'external'
            end as table_type,

            REGEXP_CONTAINS(table_id, '^.+[0-9]{8}$') and coalesce(type, 0) = 1 as is_date_shard,
            REGEXP_EXTRACT(table_id, '^(.+)[0-9]{8}$') as shard_base_name,
            REGEXP_EXTRACT(table_id, '^.+([0-9]{8})$') as shard_name

        from `dbt-package-testing`.`stripe`.__TABLES__
        where (upper(dataset_id) = upper('stripe'))
    ),

    extracted as (

        select *,
            case
                when is_date_shard then shard_base_name
                else original_table_name
            end as table_name

        from tables

    ),

    unsharded_tables as (

        select
            table_database,
            table_schema,
            table_name,
            coalesce(table_type, 'external') as table_type,
            is_date_shard,

            struct(
                min(shard_name) as shard_min,
                max(shard_name) as shard_max,
                count(*) as shard_count
            ) as table_shards,

            sum(size_bytes) as size_bytes,
            sum(row_count) as row_count,

            max(relation_id) as relation_id

        from extracted
        group by 1,2,3,4,5

    ),

    info_schema_columns as (

        select
            concat(table_catalog, '.', table_schema, '.', table_name) as relation_id,
            table_catalog as table_database,
            table_schema,
            table_name,

            -- use the "real" column name from the paths query below
            column_name as base_column_name,
            ordinal_position as column_index,
            cast(null as string) as column_comment,

            is_partitioning_column,
            clustering_ordinal_position

        from `dbt-package-testing`.`stripe`.INFORMATION_SCHEMA.COLUMNS
        where ordinal_position is not null

    ),

    info_schema_column_paths as (

        select
            concat(table_catalog, '.', table_schema, '.', table_name) as relation_id,
            field_path as column_name,
            data_type as column_type,
            column_name as base_column_name

        from `dbt-package-testing`.`stripe`.INFORMATION_SCHEMA.COLUMN_FIELD_PATHS
        where data_type not like 'STRUCT%'

    ),

    columns as (

        select * except (base_column_name)
        from info_schema_columns
        join info_schema_column_paths using (relation_id, base_column_name)

    ),

    column_stats as (

        select
            table_database,
            table_schema,
            table_name,
            max(relation_id) as relation_id,
            max(case when is_partitioning_column = 'YES' then 1 else 0 end) = 1 as is_partitioned,
            max(case when is_partitioning_column = 'YES' then column_name else null end) as partition_column,
            max(case when clustering_ordinal_position is not null then 1 else 0 end) = 1 as is_clustered,
            array_to_string(
                array_agg(
                    case
                        when clustering_ordinal_position is not null then column_name
                        else null
                    end ignore nulls
                    order by clustering_ordinal_position
                ), ', '
            ) as clustering_columns

        from columns
        group by 1,2,3

    )

    select
        unsharded_tables.table_database,
        unsharded_tables.table_schema,
        case
            when is_date_shard then concat(unsharded_tables.table_name, '*')
            else unsharded_tables.table_name
        end as table_name,
        unsharded_tables.table_type,

        -- coalesce name and type for External tables - these columns are not
        -- present in the COLUMN_FIELD_PATHS resultset
        coalesce(columns.column_name, '<unknown>') as column_name,
        -- invent a row number to account for nested fields -- BQ does
        -- not treat these nested properties as independent fields
        row_number() over (
            partition by relation_id
            order by columns.column_index, columns.column_name
        ) as column_index,
        coalesce(columns.column_type, '<unknown>') as column_type,
        columns.column_comment,

        'Shard count' as `stats__date_shards__label`,
        table_shards.shard_count as `stats__date_shards__value`,
        'The number of date shards in this table' as `stats__date_shards__description`,
        is_date_shard as `stats__date_shards__include`,

        'Shard (min)' as `stats__date_shard_min__label`,
        table_shards.shard_min as `stats__date_shard_min__value`,
        'The first date shard in this table' as `stats__date_shard_min__description`,
        is_date_shard as `stats__date_shard_min__include`,

        'Shard (max)' as `stats__date_shard_max__label`,
        table_shards.shard_max as `stats__date_shard_max__value`,
        'The last date shard in this table' as `stats__date_shard_max__description`,
        is_date_shard as `stats__date_shard_max__include`,

        '# Rows' as `stats__num_rows__label`,
        row_count as `stats__num_rows__value`,
        'Approximate count of rows in this table' as `stats__num_rows__description`,
        (unsharded_tables.table_type = 'table') as `stats__num_rows__include`,

        'Approximate Size' as `stats__num_bytes__label`,
        size_bytes as `stats__num_bytes__value`,
        'Approximate size of table as reported by BigQuery' as `stats__num_bytes__description`,
        (unsharded_tables.table_type = 'table') as `stats__num_bytes__include`,

        'Partitioned By' as `stats__partitioning_type__label`,
        partition_column as `stats__partitioning_type__value`,
        'The partitioning column for this table' as `stats__partitioning_type__description`,
        is_partitioned as `stats__partitioning_type__include`,

        'Clustered By' as `stats__clustering_fields__label`,
        clustering_columns as `stats__clustering_fields__value`,
        'The clustering columns for this table' as `stats__clustering_fields__description`,
        is_clustered as `stats__clustering_fields__include`

    -- join using relation_id (an actual relation, not a shard prefix) to make
    -- sure that column metadata is picked up through the join. This will only
    -- return the column information for the "max" table in a date-sharded table set
    from unsharded_tables
    left join columns using (relation_id)
    left join column_stats using (relation_id)
  
2020-07-23 16:34:10.439261 (MainThread): unclosed <socket.socket fd=17, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6, laddr=('192.168.0.10', 57348), raddr=('172.217.14.234', 443)>
2020-07-23 16:34:10.439505 (MainThread): unclosed <socket.socket fd=18, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6, laddr=('192.168.0.10', 57349), raddr=('172.217.14.202', 443)>
2020-07-23 16:34:10.599339 (MainThread): 09:34:10 | Catalog written to /Users/kristin/Documents/Github/dbt_stripe/target/catalog.json
2020-07-23 16:34:10.600273 (MainThread): Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'end', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x1048c4490>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x1051d62e0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x105403e50>]}
2020-07-23 16:34:10.600461 (MainThread): Flushing usage events
2020-07-23 16:34:10.950322 (MainThread): Connection 'generate_catalog' was left open.
2020-07-23 16:34:10.950485 (MainThread): Connection 'dbt-package-testing.information_schema' was left open.
2020-07-23 16:34:10.950576 (MainThread): Connection 'dbt-package-testing.information_schema' was left open.
2020-07-23 18:07:55.660854 (MainThread): Running with dbt=0.17.0-rc1
2020-07-23 18:07:56.043902 (MainThread): running dbt with arguments Namespace(cls=<class 'dbt.task.generate.GenerateTask'>, compile=True, debug=False, exclude=None, log_cache_events=False, log_format='default', models=None, partial_parse=None, profile=None, profiles_dir='/Users/kristin/.dbt', project_dir=None, record_timing_info=None, rpc_method='docs.generate', single_threaded=False, strict=False, target=None, test_new_parser=False, threads=None, use_cache=True, vars='{}', version_check=True, warn_error=False, which='generate', write_json=True)
2020-07-23 18:07:56.045584 (MainThread): Tracking: tracking
2020-07-23 18:07:56.055968 (MainThread): Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'start', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x107bddfa0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x107bc1fd0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x107bc1c40>]}
2020-07-23 18:07:56.080942 (MainThread): Partial parsing not enabled
2020-07-23 18:07:56.084107 (MainThread): Parsing macros/core.sql
2020-07-23 18:07:56.090189 (MainThread): Parsing macros/materializations/helpers.sql
2020-07-23 18:07:56.098880 (MainThread): Parsing macros/materializations/snapshot/snapshot_merge.sql
2020-07-23 18:07:56.101464 (MainThread): Parsing macros/materializations/snapshot/strategies.sql
2020-07-23 18:07:56.120045 (MainThread): Parsing macros/materializations/snapshot/snapshot.sql
2020-07-23 18:07:56.150580 (MainThread): Parsing macros/materializations/seed/seed.sql
2020-07-23 18:07:56.172399 (MainThread): Parsing macros/materializations/incremental/helpers.sql
2020-07-23 18:07:56.174448 (MainThread): Parsing macros/materializations/incremental/incremental.sql
2020-07-23 18:07:56.181040 (MainThread): Parsing macros/materializations/common/merge.sql
2020-07-23 18:07:56.195015 (MainThread): Parsing macros/materializations/table/table.sql
2020-07-23 18:07:56.201723 (MainThread): Parsing macros/materializations/view/view.sql
2020-07-23 18:07:56.209859 (MainThread): Parsing macros/materializations/view/create_or_replace_view.sql
2020-07-23 18:07:56.215033 (MainThread): Parsing macros/etc/get_custom_alias.sql
2020-07-23 18:07:56.216137 (MainThread): Parsing macros/etc/query.sql
2020-07-23 18:07:56.217306 (MainThread): Parsing macros/etc/is_incremental.sql
2020-07-23 18:07:56.219048 (MainThread): Parsing macros/etc/datetime.sql
2020-07-23 18:07:56.227622 (MainThread): Parsing macros/etc/get_custom_schema.sql
2020-07-23 18:07:56.229601 (MainThread): Parsing macros/etc/get_custom_database.sql
2020-07-23 18:07:56.231056 (MainThread): Parsing macros/adapters/common.sql
2020-07-23 18:07:56.283750 (MainThread): Parsing macros/schema_tests/relationships.sql
2020-07-23 18:07:56.285139 (MainThread): Parsing macros/schema_tests/not_null.sql
2020-07-23 18:07:56.286416 (MainThread): Parsing macros/schema_tests/unique.sql
2020-07-23 18:07:56.287759 (MainThread): Parsing macros/schema_tests/accepted_values.sql
2020-07-23 18:07:56.290620 (MainThread): Parsing macros/etc.sql
2020-07-23 18:07:56.291771 (MainThread): Parsing macros/catalog.sql
2020-07-23 18:07:56.298849 (MainThread): Parsing macros/adapters.sql
2020-07-23 18:07:56.315466 (MainThread): Parsing macros/materializations/seed.sql
2020-07-23 18:07:56.317782 (MainThread): Parsing macros/materializations/view.sql
2020-07-23 18:07:56.320464 (MainThread): Parsing macros/materializations/table.sql
2020-07-23 18:07:56.330977 (MainThread): Parsing macros/materializations/incremental.sql
2020-07-23 18:07:56.345345 (MainThread): Parsing macros/materializations/snapshot.sql
2020-07-23 18:07:56.402855 (MainThread): Partial parsing not enabled
2020-07-23 18:07:56.407208 (MainThread): Parsing macros/cross_db_utils/except.sql
2020-07-23 18:07:56.408917 (MainThread): Parsing macros/cross_db_utils/replace.sql
2020-07-23 18:07:56.410927 (MainThread): Parsing macros/cross_db_utils/concat.sql
2020-07-23 18:07:56.413954 (MainThread): Parsing macros/cross_db_utils/datatypes.sql
2020-07-23 18:07:56.420226 (MainThread): Parsing macros/cross_db_utils/_is_relation.sql
2020-07-23 18:07:56.422288 (MainThread): Parsing macros/cross_db_utils/length.sql
2020-07-23 18:07:56.423839 (MainThread): Parsing macros/cross_db_utils/dateadd.sql
2020-07-23 18:07:56.426486 (MainThread): Parsing macros/cross_db_utils/intersect.sql
2020-07-23 18:07:56.428261 (MainThread): Parsing macros/cross_db_utils/right.sql
2020-07-23 18:07:56.431201 (MainThread): Parsing macros/cross_db_utils/datediff.sql
2020-07-23 18:07:56.442148 (MainThread): Parsing macros/cross_db_utils/safe_cast.sql
2020-07-23 18:07:56.444543 (MainThread): Parsing macros/cross_db_utils/hash.sql
2020-07-23 18:07:56.446288 (MainThread): Parsing macros/cross_db_utils/identifier.sql
2020-07-23 18:07:56.447844 (MainThread): Parsing macros/cross_db_utils/position.sql
2020-07-23 18:07:56.449753 (MainThread): Parsing macros/cross_db_utils/literal.sql
2020-07-23 18:07:56.451095 (MainThread): Parsing macros/cross_db_utils/current_timestamp.sql
2020-07-23 18:07:56.482120 (MainThread): Parsing macros/cross_db_utils/width_bucket.sql
2020-07-23 18:07:56.489636 (MainThread): Parsing macros/cross_db_utils/last_day.sql
2020-07-23 18:07:56.493611 (MainThread): Parsing macros/cross_db_utils/split_part.sql
2020-07-23 18:07:56.496145 (MainThread): Parsing macros/cross_db_utils/date_trunc.sql
2020-07-23 18:07:56.498357 (MainThread): Parsing macros/cross_db_utils/_is_ephemeral.sql
2020-07-23 18:07:56.500978 (MainThread): Parsing macros/materializations/insert_by_period_materialization.sql
2020-07-23 18:07:56.529932 (MainThread): Parsing macros/logger/pretty_log_format.sql
2020-07-23 18:07:56.530898 (MainThread): Parsing macros/logger/pretty_time.sql
2020-07-23 18:07:56.531947 (MainThread): Parsing macros/logger/log_info.sql
2020-07-23 18:07:56.532906 (MainThread): Parsing macros/datetime/date_spine.sql
2020-07-23 18:07:56.537233 (MainThread): Parsing macros/web/get_url_host.sql
2020-07-23 18:07:56.539158 (MainThread): Parsing macros/web/get_url_path.sql
2020-07-23 18:07:56.541687 (MainThread): Parsing macros/web/get_url_parameter.sql
2020-07-23 18:07:56.543137 (MainThread): Parsing macros/geo/haversine_distance.sql
2020-07-23 18:07:56.544443 (MainThread): Parsing macros/schema_tests/equal_rowcount.sql
2020-07-23 18:07:56.546154 (MainThread): Parsing macros/schema_tests/relationships_where.sql
2020-07-23 18:07:56.548533 (MainThread): Parsing macros/schema_tests/recency.sql
2020-07-23 18:07:56.549950 (MainThread): Parsing macros/schema_tests/not_constant.sql
2020-07-23 18:07:56.551191 (MainThread): Parsing macros/schema_tests/test_unique_where.sql
2020-07-23 18:07:56.553001 (MainThread): Parsing macros/schema_tests/at_least_one.sql
2020-07-23 18:07:56.554134 (MainThread): Parsing macros/schema_tests/unique_combination_of_columns.sql
2020-07-23 18:07:56.555608 (MainThread): Parsing macros/schema_tests/cardinality_equality.sql
2020-07-23 18:07:56.557267 (MainThread): Parsing macros/schema_tests/expression_is_true.sql
2020-07-23 18:07:56.558447 (MainThread): Parsing macros/schema_tests/test_not_null_where.sql
2020-07-23 18:07:56.560139 (MainThread): Parsing macros/schema_tests/equality.sql
2020-07-23 18:07:56.563387 (MainThread): Parsing macros/schema_tests/mutually_exclusive_ranges.sql
2020-07-23 18:07:56.569187 (MainThread): Parsing macros/sql/nullcheck_table.sql
2020-07-23 18:07:56.570424 (MainThread): Parsing macros/sql/get_relations_by_pattern.sql
2020-07-23 18:07:56.573029 (MainThread): Parsing macros/sql/generate_series.sql
2020-07-23 18:07:56.576600 (MainThread): Parsing macros/sql/get_relations_by_prefix.sql
2020-07-23 18:07:56.580621 (MainThread): Parsing macros/sql/get_tables_by_prefix_sql.sql
2020-07-23 18:07:56.583730 (MainThread): Parsing macros/sql/star.sql
2020-07-23 18:07:56.586968 (MainThread): Parsing macros/sql/unpivot.sql
2020-07-23 18:07:56.592637 (MainThread): Parsing macros/sql/union.sql
2020-07-23 18:07:56.601388 (MainThread): Parsing macros/sql/groupby.sql
2020-07-23 18:07:56.602483 (MainThread): Parsing macros/sql/get_tables_by_pattern.sql
2020-07-23 18:07:56.603641 (MainThread): Parsing macros/sql/surrogate_key.sql
2020-07-23 18:07:56.606416 (MainThread): Parsing macros/sql/safe_add.sql
2020-07-23 18:07:56.607586 (MainThread): Parsing macros/sql/nullcheck.sql
2020-07-23 18:07:56.608999 (MainThread): Parsing macros/sql/get_column_values.sql
2020-07-23 18:07:56.612989 (MainThread): Parsing macros/sql/pivot.sql
2020-07-23 18:07:56.615725 (MainThread): Parsing macros/sql/get_query_results_as_dict.sql
2020-07-23 18:07:56.654429 (MainThread): Acquiring new bigquery connection "model.stripe.stripe_weekly_overview".
2020-07-23 18:07:56.654572 (MainThread): Opening a new connection, currently in state init
2020-07-23 18:07:56.676076 (MainThread): Acquiring new bigquery connection "model.stripe.stripe_daily_overview".
2020-07-23 18:07:56.676203 (MainThread): Opening a new connection, currently in state closed
2020-07-23 18:07:56.688247 (MainThread): Acquiring new bigquery connection "model.stripe.stripe_invoice_details".
2020-07-23 18:07:56.688359 (MainThread): Opening a new connection, currently in state closed
2020-07-23 18:07:56.703851 (MainThread): Acquiring new bigquery connection "model.stripe.stripe_customer_overview".
2020-07-23 18:07:56.704106 (MainThread): Opening a new connection, currently in state closed
2020-07-23 18:07:56.717442 (MainThread): Acquiring new bigquery connection "model.stripe.stripe_balance_transactions".
2020-07-23 18:07:56.717587 (MainThread): Opening a new connection, currently in state closed
2020-07-23 18:07:56.727936 (MainThread): Acquiring new bigquery connection "model.stripe.stripe_quarterly_overview".
2020-07-23 18:07:56.728027 (MainThread): Opening a new connection, currently in state closed
2020-07-23 18:07:56.738537 (MainThread): Acquiring new bigquery connection "model.stripe.stripe_monthly_overview".
2020-07-23 18:07:56.738641 (MainThread): Opening a new connection, currently in state closed
2020-07-23 18:07:56.751387 (MainThread): Acquiring new bigquery connection "model.stripe.stripe_subscription_details".
2020-07-23 18:07:56.751516 (MainThread): Opening a new connection, currently in state closed
2020-07-23 18:07:56.766268 (MainThread): Acquiring new bigquery connection "model.stripe.stripe_balance_transaction_joined".
2020-07-23 18:07:56.766378 (MainThread): Opening a new connection, currently in state closed
2020-07-23 18:07:56.781891 (MainThread): Acquiring new bigquery connection "model.stripe.stripe_incomplete_charges".
2020-07-23 18:07:56.781995 (MainThread): Opening a new connection, currently in state closed
2020-07-23 18:07:57.099059 (MainThread): Acquiring new bigquery connection "model.stripe_source.stg_stripe_card".
2020-07-23 18:07:57.099206 (MainThread): Opening a new connection, currently in state closed
2020-07-23 18:07:57.114836 (MainThread): Acquiring new bigquery connection "model.stripe_source.stg_stripe_invoice_line_item".
2020-07-23 18:07:57.114949 (MainThread): Opening a new connection, currently in state closed
2020-07-23 18:07:57.132248 (MainThread): Acquiring new bigquery connection "model.stripe_source.stg_stripe_payment_method_card".
2020-07-23 18:07:57.132387 (MainThread): Opening a new connection, currently in state closed
2020-07-23 18:07:57.148509 (MainThread): Acquiring new bigquery connection "model.stripe_source.stg_stripe_charge".
2020-07-23 18:07:57.148650 (MainThread): Opening a new connection, currently in state closed
2020-07-23 18:07:57.163653 (MainThread): Acquiring new bigquery connection "model.stripe_source.stg_stripe_payout".
2020-07-23 18:07:57.163800 (MainThread): Opening a new connection, currently in state closed
2020-07-23 18:07:57.178869 (MainThread): Acquiring new bigquery connection "model.stripe_source.stg_stripe_customer".
2020-07-23 18:07:57.179014 (MainThread): Opening a new connection, currently in state closed
2020-07-23 18:07:57.193861 (MainThread): Acquiring new bigquery connection "model.stripe_source.stg_stripe_refund".
2020-07-23 18:07:57.193996 (MainThread): Opening a new connection, currently in state closed
2020-07-23 18:07:57.209939 (MainThread): Acquiring new bigquery connection "model.stripe_source.stg_stripe_subscription".
2020-07-23 18:07:57.210083 (MainThread): Opening a new connection, currently in state closed
2020-07-23 18:07:57.225750 (MainThread): Acquiring new bigquery connection "model.stripe_source.stg_stripe_payment_method".
2020-07-23 18:07:57.225880 (MainThread): Opening a new connection, currently in state closed
2020-07-23 18:07:57.241288 (MainThread): Acquiring new bigquery connection "model.stripe_source.stg_stripe_payment_intent".
2020-07-23 18:07:57.241436 (MainThread): Opening a new connection, currently in state closed
2020-07-23 18:07:57.256658 (MainThread): Acquiring new bigquery connection "model.stripe_source.stg_stripe_invoice".
2020-07-23 18:07:57.256846 (MainThread): Opening a new connection, currently in state closed
2020-07-23 18:07:57.274475 (MainThread): Acquiring new bigquery connection "model.stripe_source.stg_stripe_fee".
2020-07-23 18:07:57.274653 (MainThread): Opening a new connection, currently in state closed
2020-07-23 18:07:57.291553 (MainThread): Acquiring new bigquery connection "model.stripe_source.stg_stripe_balance_transaction".
2020-07-23 18:07:57.291731 (MainThread): Opening a new connection, currently in state closed
2020-07-23 18:08:00.286668 (MainThread): WARNING: Found documentation for resource "payment_method_card" which was not found or is disabled
2020-07-23 18:08:01.029046 (MainThread): Found 23 models, 34 tests, 0 snapshots, 0 analyses, 278 macros, 0 operations, 0 seed files, 13 sources
2020-07-23 18:08:01.095144 (MainThread): 
2020-07-23 18:08:01.095552 (MainThread): Acquiring new bigquery connection "master".
2020-07-23 18:08:01.095657 (MainThread): Opening a new connection, currently in state closed
2020-07-23 18:08:01.134783 (ThreadPoolExecutor-0_0): Acquiring new bigquery connection "list_dbt-package-testing".
2020-07-23 18:08:01.135061 (ThreadPoolExecutor-0_0): Opening a new connection, currently in state init
2020-07-23 18:08:01.135674 (ThreadPoolExecutor-0_1): Acquiring new bigquery connection "list_culdesac-labs".
2020-07-23 18:08:01.135962 (ThreadPoolExecutor-0_1): Opening a new connection, currently in state init
2020-07-23 18:08:01.138123 (ThreadPoolExecutor-0_0): Your application has authenticated using end user credentials from Google Cloud SDK. We recommend that most server applications use service accounts instead. If your application continues to use end user credentials from Cloud SDK, you might receive a "quota exceeded" or "API not enabled" error. For more information about service accounts, see https://cloud.google.com/docs/authentication/
2020-07-23 18:08:01.138284 (ThreadPoolExecutor-0_1): Your application has authenticated using end user credentials from Google Cloud SDK. We recommend that most server applications use service accounts instead. If your application continues to use end user credentials from Cloud SDK, you might receive a "quota exceeded" or "API not enabled" error. For more information about service accounts, see https://cloud.google.com/docs/authentication/
2020-07-23 18:08:03.136703 (ThreadPoolExecutor-0_0): Acquiring new bigquery connection "create_culdesac-labs_dbt_kristin_2".
2020-07-23 18:08:03.136950 (ThreadPoolExecutor-0_0): Re-using an available connection from the pool (formerly list_dbt-package-testing).
2020-07-23 18:08:03.137071 (ThreadPoolExecutor-0_0): Creating schema "culdesac-labs.dbt_kristin_2".
2020-07-23 18:08:03.137217 (ThreadPoolExecutor-0_0): Client.dataset is deprecated and will be removed in a future version. Use a string like 'my_project.my_dataset' or a cloud.google.bigquery.DatasetReference object, instead.
2020-07-23 18:08:03.346274 (MainThread): Connection 'master' was properly closed.
2020-07-23 18:08:03.346447 (MainThread): Connection 'create_culdesac-labs_dbt_kristin_2' was left open.
2020-07-23 18:08:03.346536 (MainThread): Connection 'list_culdesac-labs' was left open.
2020-07-23 18:08:03.346871 (MainThread): Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'end', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x107fdb340>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x1080049a0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x107cecf40>]}
2020-07-23 18:08:03.347201 (MainThread): Flushing usage events
2020-07-23 18:08:03.733512 (MainThread): Encountered an error:
2020-07-23 18:08:03.733705 (MainThread): Database Error
  Access Denied: Project culdesac-labs: User does not have bigquery.datasets.create permission in project culdesac-labs.
2020-07-23 18:08:03.744933 (MainThread): Traceback (most recent call last):
  File "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/adapters/bigquery/connections.py", line 83, in exception_handler
    yield
  File "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/adapters/bigquery/connections.py", line 354, in _retry_and_handle
    return retry.retry_target(
  File "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/google/api_core/retry.py", line 184, in retry_target
    return target()
  File "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/adapters/bigquery/connections.py", line 339, in fn
    return client.create_dataset(dataset, exists_ok=True)
  File "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/google/cloud/bigquery/client.py", line 460, in create_dataset
    api_response = self._call_api(
  File "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/google/cloud/bigquery/client.py", line 556, in _call_api
    return call()
  File "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/google/api_core/retry.py", line 281, in retry_wrapped_func
    return retry_target(
  File "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/google/api_core/retry.py", line 184, in retry_target
    return target()
  File "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/google/cloud/_http.py", line 423, in api_request
    raise exceptions.from_http_response(response)
google.api_core.exceptions.Forbidden: 403 POST https://bigquery.googleapis.com/bigquery/v2/projects/culdesac-labs/datasets: Access Denied: Project culdesac-labs: User does not have bigquery.datasets.create permission in project culdesac-labs.

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/main.py", line 81, in main
    results, succeeded = handle_and_check(args)
  File "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/main.py", line 159, in handle_and_check
    task, res = run_from_args(parsed)
  File "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/main.py", line 212, in run_from_args
    results = task.run()
  File "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/task/generate.py", line 208, in run
    compile_results = CompileTask.run(self)
  File "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/task/runnable.py", line 416, in run
    result = self.execute_with_hooks(selected_uids)
  File "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/task/runnable.py", line 376, in execute_with_hooks
    self.before_run(adapter, selected_uids)
  File "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/task/runnable.py", line 362, in before_run
    self.create_schemas(adapter, selected_uids)
  File "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/task/runnable.py", line 515, in create_schemas
    create_future.result()
  File "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/concurrent/futures/_base.py", line 432, in result
    return self.__get_result()
  File "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/concurrent/futures/_base.py", line 388, in __get_result
    raise self._exception
  File "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/concurrent/futures/thread.py", line 57, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/task/runnable.py", line 481, in create_schema
    adapter.create_schema(relation)
  File "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/adapters/bigquery/impl.py", line 266, in create_schema
    self.connections.create_dataset(database, schema)
  File "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/adapters/bigquery/connections.py", line 340, in create_dataset
    self._retry_and_handle(msg='create dataset', conn=conn, fn=fn)
  File "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/adapters/bigquery/connections.py", line 354, in _retry_and_handle
    return retry.retry_target(
  File "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/contextlib.py", line 131, in __exit__
    self.gen.throw(type, value, traceback)
  File "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/adapters/bigquery/connections.py", line 91, in exception_handler
    self.handle_error(e, message)
  File "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/adapters/bigquery/connections.py", line 75, in handle_error
    raise DatabaseException(error_msg)
dbt.exceptions.DatabaseException: Database Error
  Access Denied: Project culdesac-labs: User does not have bigquery.datasets.create permission in project culdesac-labs.

2020-07-23 18:08:25.455807 (MainThread): Running with dbt=0.17.0-rc1
2020-07-23 18:08:25.689799 (MainThread): running dbt with arguments Namespace(cls=<class 'dbt.task.generate.GenerateTask'>, compile=True, debug=False, exclude=None, log_cache_events=False, log_format='default', models=None, partial_parse=None, profile=None, profiles_dir='/Users/kristin/.dbt', project_dir=None, record_timing_info=None, rpc_method='docs.generate', single_threaded=False, strict=False, target=None, test_new_parser=False, threads=None, use_cache=True, vars='{}', version_check=True, warn_error=False, which='generate', write_json=True)
2020-07-23 18:08:25.690867 (MainThread): Tracking: tracking
2020-07-23 18:08:25.698522 (MainThread): Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'start', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x10ae04310>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x10b5eef10>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x10b5e8d30>]}
2020-07-23 18:08:25.719805 (MainThread): Partial parsing not enabled
2020-07-23 18:08:25.721524 (MainThread): Parsing macros/core.sql
2020-07-23 18:08:25.726334 (MainThread): Parsing macros/materializations/helpers.sql
2020-07-23 18:08:25.734669 (MainThread): Parsing macros/materializations/snapshot/snapshot_merge.sql
2020-07-23 18:08:25.736671 (MainThread): Parsing macros/materializations/snapshot/strategies.sql
2020-07-23 18:08:25.753335 (MainThread): Parsing macros/materializations/snapshot/snapshot.sql
2020-07-23 18:08:25.785517 (MainThread): Parsing macros/materializations/seed/seed.sql
2020-07-23 18:08:25.806029 (MainThread): Parsing macros/materializations/incremental/helpers.sql
2020-07-23 18:08:25.807859 (MainThread): Parsing macros/materializations/incremental/incremental.sql
2020-07-23 18:08:25.814461 (MainThread): Parsing macros/materializations/common/merge.sql
2020-07-23 18:08:25.829872 (MainThread): Parsing macros/materializations/table/table.sql
2020-07-23 18:08:25.838875 (MainThread): Parsing macros/materializations/view/view.sql
2020-07-23 18:08:25.845773 (MainThread): Parsing macros/materializations/view/create_or_replace_view.sql
2020-07-23 18:08:25.851159 (MainThread): Parsing macros/etc/get_custom_alias.sql
2020-07-23 18:08:25.852548 (MainThread): Parsing macros/etc/query.sql
2020-07-23 18:08:25.853839 (MainThread): Parsing macros/etc/is_incremental.sql
2020-07-23 18:08:25.855826 (MainThread): Parsing macros/etc/datetime.sql
2020-07-23 18:08:25.866212 (MainThread): Parsing macros/etc/get_custom_schema.sql
2020-07-23 18:08:25.868376 (MainThread): Parsing macros/etc/get_custom_database.sql
2020-07-23 18:08:25.869574 (MainThread): Parsing macros/adapters/common.sql
2020-07-23 18:08:25.921224 (MainThread): Parsing macros/schema_tests/relationships.sql
2020-07-23 18:08:25.922300 (MainThread): Parsing macros/schema_tests/not_null.sql
2020-07-23 18:08:25.923120 (MainThread): Parsing macros/schema_tests/unique.sql
2020-07-23 18:08:25.924353 (MainThread): Parsing macros/schema_tests/accepted_values.sql
2020-07-23 18:08:25.926969 (MainThread): Parsing macros/etc.sql
2020-07-23 18:08:25.927624 (MainThread): Parsing macros/catalog.sql
2020-07-23 18:08:25.934341 (MainThread): Parsing macros/adapters.sql
2020-07-23 18:08:25.951737 (MainThread): Parsing macros/materializations/seed.sql
2020-07-23 18:08:25.954317 (MainThread): Parsing macros/materializations/view.sql
2020-07-23 18:08:25.957285 (MainThread): Parsing macros/materializations/table.sql
2020-07-23 18:08:25.967998 (MainThread): Parsing macros/materializations/incremental.sql
2020-07-23 18:08:25.982749 (MainThread): Parsing macros/materializations/snapshot.sql
2020-07-23 18:08:26.043929 (MainThread): Partial parsing not enabled
2020-07-23 18:08:26.046070 (MainThread): Parsing macros/cross_db_utils/except.sql
2020-07-23 18:08:26.047094 (MainThread): Parsing macros/cross_db_utils/replace.sql
2020-07-23 18:08:26.048426 (MainThread): Parsing macros/cross_db_utils/concat.sql
2020-07-23 18:08:26.050509 (MainThread): Parsing macros/cross_db_utils/datatypes.sql
2020-07-23 18:08:26.056271 (MainThread): Parsing macros/cross_db_utils/_is_relation.sql
2020-07-23 18:08:26.057551 (MainThread): Parsing macros/cross_db_utils/length.sql
2020-07-23 18:08:26.058793 (MainThread): Parsing macros/cross_db_utils/dateadd.sql
2020-07-23 18:08:26.060921 (MainThread): Parsing macros/cross_db_utils/intersect.sql
2020-07-23 18:08:26.061885 (MainThread): Parsing macros/cross_db_utils/right.sql
2020-07-23 18:08:26.064466 (MainThread): Parsing macros/cross_db_utils/datediff.sql
2020-07-23 18:08:26.076261 (MainThread): Parsing macros/cross_db_utils/safe_cast.sql
2020-07-23 18:08:26.078171 (MainThread): Parsing macros/cross_db_utils/hash.sql
2020-07-23 18:08:26.079695 (MainThread): Parsing macros/cross_db_utils/identifier.sql
2020-07-23 18:08:26.081149 (MainThread): Parsing macros/cross_db_utils/position.sql
2020-07-23 18:08:26.082617 (MainThread): Parsing macros/cross_db_utils/literal.sql
2020-07-23 18:08:26.083440 (MainThread): Parsing macros/cross_db_utils/current_timestamp.sql
2020-07-23 18:08:26.113151 (MainThread): Parsing macros/cross_db_utils/width_bucket.sql
2020-07-23 18:08:26.120049 (MainThread): Parsing macros/cross_db_utils/last_day.sql
2020-07-23 18:08:26.123629 (MainThread): Parsing macros/cross_db_utils/split_part.sql
2020-07-23 18:08:26.126053 (MainThread): Parsing macros/cross_db_utils/date_trunc.sql
2020-07-23 18:08:26.128008 (MainThread): Parsing macros/cross_db_utils/_is_ephemeral.sql
2020-07-23 18:08:26.129763 (MainThread): Parsing macros/materializations/insert_by_period_materialization.sql
2020-07-23 18:08:26.161892 (MainThread): Parsing macros/logger/pretty_log_format.sql
2020-07-23 18:08:26.162913 (MainThread): Parsing macros/logger/pretty_time.sql
2020-07-23 18:08:26.163990 (MainThread): Parsing macros/logger/log_info.sql
2020-07-23 18:08:26.165124 (MainThread): Parsing macros/datetime/date_spine.sql
2020-07-23 18:08:26.169615 (MainThread): Parsing macros/web/get_url_host.sql
2020-07-23 18:08:26.171146 (MainThread): Parsing macros/web/get_url_path.sql
2020-07-23 18:08:26.173070 (MainThread): Parsing macros/web/get_url_parameter.sql
2020-07-23 18:08:26.174220 (MainThread): Parsing macros/geo/haversine_distance.sql
2020-07-23 18:08:26.175297 (MainThread): Parsing macros/schema_tests/equal_rowcount.sql
2020-07-23 18:08:26.177092 (MainThread): Parsing macros/schema_tests/relationships_where.sql
2020-07-23 18:08:26.179561 (MainThread): Parsing macros/schema_tests/recency.sql
2020-07-23 18:08:26.181123 (MainThread): Parsing macros/schema_tests/not_constant.sql
2020-07-23 18:08:26.182325 (MainThread): Parsing macros/schema_tests/test_unique_where.sql
2020-07-23 18:08:26.184257 (MainThread): Parsing macros/schema_tests/at_least_one.sql
2020-07-23 18:08:26.185431 (MainThread): Parsing macros/schema_tests/unique_combination_of_columns.sql
2020-07-23 18:08:26.186777 (MainThread): Parsing macros/schema_tests/cardinality_equality.sql
2020-07-23 18:08:26.188737 (MainThread): Parsing macros/schema_tests/expression_is_true.sql
2020-07-23 18:08:26.190020 (MainThread): Parsing macros/schema_tests/test_not_null_where.sql
2020-07-23 18:08:26.191763 (MainThread): Parsing macros/schema_tests/equality.sql
2020-07-23 18:08:26.195636 (MainThread): Parsing macros/schema_tests/mutually_exclusive_ranges.sql
2020-07-23 18:08:26.202415 (MainThread): Parsing macros/sql/nullcheck_table.sql
2020-07-23 18:08:26.203749 (MainThread): Parsing macros/sql/get_relations_by_pattern.sql
2020-07-23 18:08:26.206560 (MainThread): Parsing macros/sql/generate_series.sql
2020-07-23 18:08:26.210412 (MainThread): Parsing macros/sql/get_relations_by_prefix.sql
2020-07-23 18:08:26.214290 (MainThread): Parsing macros/sql/get_tables_by_prefix_sql.sql
2020-07-23 18:08:26.217303 (MainThread): Parsing macros/sql/star.sql
2020-07-23 18:08:26.220430 (MainThread): Parsing macros/sql/unpivot.sql
2020-07-23 18:08:26.227329 (MainThread): Parsing macros/sql/union.sql
2020-07-23 18:08:26.238479 (MainThread): Parsing macros/sql/groupby.sql
2020-07-23 18:08:26.239631 (MainThread): Parsing macros/sql/get_tables_by_pattern.sql
2020-07-23 18:08:26.240581 (MainThread): Parsing macros/sql/surrogate_key.sql
2020-07-23 18:08:26.243409 (MainThread): Parsing macros/sql/safe_add.sql
2020-07-23 18:08:26.244543 (MainThread): Parsing macros/sql/nullcheck.sql
2020-07-23 18:08:26.246029 (MainThread): Parsing macros/sql/get_column_values.sql
2020-07-23 18:08:26.250519 (MainThread): Parsing macros/sql/pivot.sql
2020-07-23 18:08:26.253059 (MainThread): Parsing macros/sql/get_query_results_as_dict.sql
2020-07-23 18:08:26.290194 (MainThread): Acquiring new bigquery connection "model.stripe.stripe_weekly_overview".
2020-07-23 18:08:26.290313 (MainThread): Opening a new connection, currently in state init
2020-07-23 18:08:26.308234 (MainThread): Acquiring new bigquery connection "model.stripe.stripe_daily_overview".
2020-07-23 18:08:26.308346 (MainThread): Opening a new connection, currently in state closed
2020-07-23 18:08:26.319974 (MainThread): Acquiring new bigquery connection "model.stripe.stripe_invoice_details".
2020-07-23 18:08:26.320087 (MainThread): Opening a new connection, currently in state closed
2020-07-23 18:08:26.334135 (MainThread): Acquiring new bigquery connection "model.stripe.stripe_customer_overview".
2020-07-23 18:08:26.334238 (MainThread): Opening a new connection, currently in state closed
2020-07-23 18:08:26.347195 (MainThread): Acquiring new bigquery connection "model.stripe.stripe_balance_transactions".
2020-07-23 18:08:26.347302 (MainThread): Opening a new connection, currently in state closed
2020-07-23 18:08:26.359155 (MainThread): Acquiring new bigquery connection "model.stripe.stripe_quarterly_overview".
2020-07-23 18:08:26.359321 (MainThread): Opening a new connection, currently in state closed
2020-07-23 18:08:26.371607 (MainThread): Acquiring new bigquery connection "model.stripe.stripe_monthly_overview".
2020-07-23 18:08:26.371739 (MainThread): Opening a new connection, currently in state closed
2020-07-23 18:08:26.384053 (MainThread): Acquiring new bigquery connection "model.stripe.stripe_subscription_details".
2020-07-23 18:08:26.384145 (MainThread): Opening a new connection, currently in state closed
2020-07-23 18:08:26.400584 (MainThread): Acquiring new bigquery connection "model.stripe.stripe_balance_transaction_joined".
2020-07-23 18:08:26.400722 (MainThread): Opening a new connection, currently in state closed
2020-07-23 18:08:26.417660 (MainThread): Acquiring new bigquery connection "model.stripe.stripe_incomplete_charges".
2020-07-23 18:08:26.417764 (MainThread): Opening a new connection, currently in state closed
2020-07-23 18:08:26.735710 (MainThread): Acquiring new bigquery connection "model.stripe_source.stg_stripe_card".
2020-07-23 18:08:26.735877 (MainThread): Opening a new connection, currently in state closed
2020-07-23 18:08:26.748881 (MainThread): Acquiring new bigquery connection "model.stripe_source.stg_stripe_invoice_line_item".
2020-07-23 18:08:26.749039 (MainThread): Opening a new connection, currently in state closed
2020-07-23 18:08:26.765367 (MainThread): Acquiring new bigquery connection "model.stripe_source.stg_stripe_payment_method_card".
2020-07-23 18:08:26.765508 (MainThread): Opening a new connection, currently in state closed
2020-07-23 18:08:26.780717 (MainThread): Acquiring new bigquery connection "model.stripe_source.stg_stripe_charge".
2020-07-23 18:08:26.780853 (MainThread): Opening a new connection, currently in state closed
2020-07-23 18:08:26.793758 (MainThread): Acquiring new bigquery connection "model.stripe_source.stg_stripe_payout".
2020-07-23 18:08:26.793872 (MainThread): Opening a new connection, currently in state closed
2020-07-23 18:08:26.806190 (MainThread): Acquiring new bigquery connection "model.stripe_source.stg_stripe_customer".
2020-07-23 18:08:26.806302 (MainThread): Opening a new connection, currently in state closed
2020-07-23 18:08:26.818717 (MainThread): Acquiring new bigquery connection "model.stripe_source.stg_stripe_refund".
2020-07-23 18:08:26.818851 (MainThread): Opening a new connection, currently in state closed
2020-07-23 18:08:26.830991 (MainThread): Acquiring new bigquery connection "model.stripe_source.stg_stripe_subscription".
2020-07-23 18:08:26.831090 (MainThread): Opening a new connection, currently in state closed
2020-07-23 18:08:26.843549 (MainThread): Acquiring new bigquery connection "model.stripe_source.stg_stripe_payment_method".
2020-07-23 18:08:26.843663 (MainThread): Opening a new connection, currently in state closed
2020-07-23 18:08:26.856021 (MainThread): Acquiring new bigquery connection "model.stripe_source.stg_stripe_payment_intent".
2020-07-23 18:08:26.856200 (MainThread): Opening a new connection, currently in state closed
2020-07-23 18:08:26.868591 (MainThread): Acquiring new bigquery connection "model.stripe_source.stg_stripe_invoice".
2020-07-23 18:08:26.868709 (MainThread): Opening a new connection, currently in state closed
2020-07-23 18:08:26.881193 (MainThread): Acquiring new bigquery connection "model.stripe_source.stg_stripe_fee".
2020-07-23 18:08:26.881283 (MainThread): Opening a new connection, currently in state closed
2020-07-23 18:08:26.892448 (MainThread): Acquiring new bigquery connection "model.stripe_source.stg_stripe_balance_transaction".
2020-07-23 18:08:26.892547 (MainThread): Opening a new connection, currently in state closed
2020-07-23 18:08:29.283606 (MainThread): WARNING: Found documentation for resource "payment_method_card" which was not found or is disabled
2020-07-23 18:08:29.895575 (MainThread): Found 23 models, 34 tests, 0 snapshots, 0 analyses, 278 macros, 0 operations, 0 seed files, 13 sources
2020-07-23 18:08:29.956511 (MainThread): 
2020-07-23 18:08:29.956925 (MainThread): Acquiring new bigquery connection "master".
2020-07-23 18:08:29.957006 (MainThread): Opening a new connection, currently in state closed
2020-07-23 18:08:29.994574 (ThreadPoolExecutor-0_0): Acquiring new bigquery connection "list_dbt-package-testing".
2020-07-23 18:08:29.994812 (ThreadPoolExecutor-0_0): Opening a new connection, currently in state init
2020-07-23 18:08:29.996119 (ThreadPoolExecutor-0_0): Your application has authenticated using end user credentials from Google Cloud SDK. We recommend that most server applications use service accounts instead. If your application continues to use end user credentials from Cloud SDK, you might receive a "quota exceeded" or "API not enabled" error. For more information about service accounts, see https://cloud.google.com/docs/authentication/
2020-07-23 18:08:31.573416 (ThreadPoolExecutor-1_0): Acquiring new bigquery connection "list_dbt-package-testing_dbt_kristin_2".
2020-07-23 18:08:31.573623 (ThreadPoolExecutor-1_0): Re-using an available connection from the pool (formerly list_dbt-package-testing).
2020-07-23 18:08:31.573745 (ThreadPoolExecutor-1_0): Client.dataset is deprecated and will be removed in a future version. Use a string like 'my_project.my_dataset' or a cloud.google.bigquery.DatasetReference object, instead.
2020-07-23 18:08:31.810497 (MainThread): 11:08:31 | Concurrency: 4 threads (target='dev_bigquery_dbt_testing')
2020-07-23 18:08:31.810714 (MainThread): 11:08:31 | 
2020-07-23 18:08:31.816417 (Thread-1): Began running node model.stripe_source.stg_stripe_charge
2020-07-23 18:08:31.816649 (Thread-2): Began running node model.stripe_source.stg_stripe_customer
2020-07-23 18:08:31.817032 (Thread-1): Acquiring new bigquery connection "model.stripe_source.stg_stripe_charge".
2020-07-23 18:08:31.817179 (Thread-3): Began running node model.stripe_source.stg_stripe_balance_transaction
2020-07-23 18:08:31.817380 (Thread-4): Began running node model.stripe_source.stg_stripe_card
2020-07-23 18:08:31.817686 (Thread-2): Acquiring new bigquery connection "model.stripe_source.stg_stripe_customer".
2020-07-23 18:08:31.817809 (Thread-1): Re-using an available connection from the pool (formerly list_dbt-package-testing_dbt_kristin_2).
2020-07-23 18:08:31.818219 (Thread-3): Acquiring new bigquery connection "model.stripe_source.stg_stripe_balance_transaction".
2020-07-23 18:08:31.818590 (Thread-4): Acquiring new bigquery connection "model.stripe_source.stg_stripe_card".
2020-07-23 18:08:31.818733 (Thread-2): Opening a new connection, currently in state init
2020-07-23 18:08:31.818883 (Thread-1): Compiling model.stripe_source.stg_stripe_charge
2020-07-23 18:08:31.818989 (Thread-3): Opening a new connection, currently in state init
2020-07-23 18:08:31.819141 (Thread-4): Opening a new connection, currently in state init
2020-07-23 18:08:31.819273 (Thread-2): Compiling model.stripe_source.stg_stripe_customer
2020-07-23 18:08:31.831092 (Thread-3): Compiling model.stripe_source.stg_stripe_balance_transaction
2020-07-23 18:08:31.848125 (Thread-4): Compiling model.stripe_source.stg_stripe_card
2020-07-23 18:08:31.852507 (Thread-1): Writing injected SQL for node "model.stripe_source.stg_stripe_charge"
2020-07-23 18:08:31.866756 (Thread-2): Writing injected SQL for node "model.stripe_source.stg_stripe_customer"
2020-07-23 18:08:31.885245 (Thread-3): Writing injected SQL for node "model.stripe_source.stg_stripe_balance_transaction"
2020-07-23 18:08:31.889221 (Thread-4): Writing injected SQL for node "model.stripe_source.stg_stripe_card"
2020-07-23 18:08:31.891227 (Thread-1): finished collecting timing info
2020-07-23 18:08:31.891540 (Thread-4): finished collecting timing info
2020-07-23 18:08:31.891872 (Thread-3): finished collecting timing info
2020-07-23 18:08:31.892117 (Thread-1): finished collecting timing info
2020-07-23 18:08:31.892368 (Thread-2): finished collecting timing info
2020-07-23 18:08:31.892581 (Thread-4): finished collecting timing info
2020-07-23 18:08:31.892929 (Thread-3): finished collecting timing info
2020-07-23 18:08:31.893352 (Thread-1): Finished running node model.stripe_source.stg_stripe_charge
2020-07-23 18:08:31.893538 (Thread-2): finished collecting timing info
2020-07-23 18:08:31.893930 (Thread-4): Finished running node model.stripe_source.stg_stripe_card
2020-07-23 18:08:31.894187 (Thread-3): Finished running node model.stripe_source.stg_stripe_balance_transaction
2020-07-23 18:08:31.894334 (Thread-1): Began running node model.stripe_source.stg_stripe_payment_intent
2020-07-23 18:08:31.894656 (Thread-2): Finished running node model.stripe_source.stg_stripe_customer
2020-07-23 18:08:31.895080 (Thread-4): Began running node model.stripe_source.stg_stripe_payout
2020-07-23 18:08:31.895227 (Thread-3): Began running node model.stripe_source.stg_stripe_refund
2020-07-23 18:08:31.895625 (Thread-1): Acquiring new bigquery connection "model.stripe_source.stg_stripe_payment_intent".
2020-07-23 18:08:31.895861 (Thread-2): Began running node model.stripe_source.stg_stripe_invoice
2020-07-23 18:08:31.896198 (Thread-4): Acquiring new bigquery connection "model.stripe_source.stg_stripe_payout".
2020-07-23 18:08:31.896506 (Thread-3): Acquiring new bigquery connection "model.stripe_source.stg_stripe_refund".
2020-07-23 18:08:31.896605 (Thread-1): Re-using an available connection from the pool (formerly model.stripe_source.stg_stripe_charge).
2020-07-23 18:08:31.896878 (Thread-2): Acquiring new bigquery connection "model.stripe_source.stg_stripe_invoice".
2020-07-23 18:08:31.897004 (Thread-4): Opening a new connection, currently in state closed
2020-07-23 18:08:31.897096 (Thread-3): Opening a new connection, currently in state closed
2020-07-23 18:08:31.897202 (Thread-1): Compiling model.stripe_source.stg_stripe_payment_intent
2020-07-23 18:08:31.897293 (Thread-2): Opening a new connection, currently in state closed
2020-07-23 18:08:31.897385 (Thread-4): Compiling model.stripe_source.stg_stripe_payout
2020-07-23 18:08:31.897472 (Thread-3): Compiling model.stripe_source.stg_stripe_refund
2020-07-23 18:08:31.910684 (Thread-1): Writing injected SQL for node "model.stripe_source.stg_stripe_payment_intent"
2020-07-23 18:08:31.910784 (Thread-2): Compiling model.stripe_source.stg_stripe_invoice
2020-07-23 18:08:31.921384 (Thread-4): Writing injected SQL for node "model.stripe_source.stg_stripe_payout"
2020-07-23 18:08:31.930607 (Thread-3): Writing injected SQL for node "model.stripe_source.stg_stripe_refund"
2020-07-23 18:08:31.944135 (Thread-2): Writing injected SQL for node "model.stripe_source.stg_stripe_invoice"
2020-07-23 18:08:31.944416 (Thread-1): finished collecting timing info
2020-07-23 18:08:31.944866 (Thread-1): finished collecting timing info
2020-07-23 18:08:31.945184 (Thread-1): Finished running node model.stripe_source.stg_stripe_payment_intent
2020-07-23 18:08:31.945293 (Thread-1): Began running node model.stripe_source.stg_stripe_invoice_line_item
2020-07-23 18:08:31.945656 (Thread-1): Acquiring new bigquery connection "model.stripe_source.stg_stripe_invoice_line_item".
2020-07-23 18:08:31.945741 (Thread-1): Re-using an available connection from the pool (formerly model.stripe_source.stg_stripe_payment_intent).
2020-07-23 18:08:31.945814 (Thread-1): Compiling model.stripe_source.stg_stripe_invoice_line_item
2020-07-23 18:08:31.951352 (Thread-2): finished collecting timing info
2020-07-23 18:08:31.956461 (Thread-1): Writing injected SQL for node "model.stripe_source.stg_stripe_invoice_line_item"
2020-07-23 18:08:31.956901 (Thread-2): finished collecting timing info
2020-07-23 18:08:31.957093 (Thread-4): finished collecting timing info
2020-07-23 18:08:31.957231 (Thread-3): finished collecting timing info
2020-07-23 18:08:31.957614 (Thread-2): Finished running node model.stripe_source.stg_stripe_invoice
2020-07-23 18:08:31.957725 (Thread-4): finished collecting timing info
2020-07-23 18:08:31.958007 (Thread-3): finished collecting timing info
2020-07-23 18:08:31.958242 (Thread-2): Began running node model.stripe_source.stg_stripe_subscription
2020-07-23 18:08:31.958523 (Thread-4): Finished running node model.stripe_source.stg_stripe_payout
2020-07-23 18:08:31.958962 (Thread-3): Finished running node model.stripe_source.stg_stripe_refund
2020-07-23 18:08:31.959118 (Thread-1): finished collecting timing info
2020-07-23 18:08:31.959604 (Thread-2): Acquiring new bigquery connection "model.stripe_source.stg_stripe_subscription".
2020-07-23 18:08:31.959876 (Thread-4): Began running node model.stripe_source.stg_stripe_fee
2020-07-23 18:08:31.960254 (Thread-3): Began running node model.stripe_source.stg_stripe_payment_method
2020-07-23 18:08:31.960464 (Thread-1): finished collecting timing info
2020-07-23 18:08:31.960930 (Thread-2): Opening a new connection, currently in state closed
2020-07-23 18:08:31.961137 (Thread-4): Acquiring new bigquery connection "model.stripe_source.stg_stripe_fee".
2020-07-23 18:08:31.961322 (Thread-3): Acquiring new bigquery connection "model.stripe_source.stg_stripe_payment_method".
2020-07-23 18:08:31.961520 (Thread-1): Finished running node model.stripe_source.stg_stripe_invoice_line_item
2020-07-23 18:08:31.961655 (Thread-2): Compiling model.stripe_source.stg_stripe_subscription
2020-07-23 18:08:31.961735 (Thread-4): Opening a new connection, currently in state closed
2020-07-23 18:08:31.961803 (Thread-3): Opening a new connection, currently in state closed
2020-07-23 18:08:31.961902 (Thread-1): Began running node model.stripe_source.stg_stripe_payment_method_card
2020-07-23 18:08:31.973282 (Thread-4): Compiling model.stripe_source.stg_stripe_fee
2020-07-23 18:08:31.974287 (Thread-2): Writing injected SQL for node "model.stripe_source.stg_stripe_subscription"
2020-07-23 18:08:31.974390 (Thread-3): Compiling model.stripe_source.stg_stripe_payment_method
2020-07-23 18:08:31.974635 (Thread-1): Acquiring new bigquery connection "model.stripe_source.stg_stripe_payment_method_card".
2020-07-23 18:08:31.985214 (Thread-4): Writing injected SQL for node "model.stripe_source.stg_stripe_fee"
2020-07-23 18:08:31.994687 (Thread-3): Writing injected SQL for node "model.stripe_source.stg_stripe_payment_method"
2020-07-23 18:08:31.994869 (Thread-1): Re-using an available connection from the pool (formerly model.stripe_source.stg_stripe_invoice_line_item).
2020-07-23 18:08:31.994995 (Thread-2): finished collecting timing info
2020-07-23 18:08:31.995357 (Thread-1): Compiling model.stripe_source.stg_stripe_payment_method_card
2020-07-23 18:08:31.995494 (Thread-2): finished collecting timing info
2020-07-23 18:08:32.003523 (Thread-1): Writing injected SQL for node "model.stripe_source.stg_stripe_payment_method_card"
2020-07-23 18:08:32.003937 (Thread-2): Finished running node model.stripe_source.stg_stripe_subscription
2020-07-23 18:08:32.004198 (Thread-4): finished collecting timing info
2020-07-23 18:08:32.004387 (Thread-3): finished collecting timing info
2020-07-23 18:08:32.004756 (Thread-2): Began running node test.stripe_source.source_not_null_stripe_balance_transaction_id
2020-07-23 18:08:32.005236 (Thread-1): finished collecting timing info
2020-07-23 18:08:32.005450 (Thread-4): finished collecting timing info
2020-07-23 18:08:32.005662 (Thread-3): finished collecting timing info
2020-07-23 18:08:32.006134 (Thread-2): Acquiring new bigquery connection "test.stripe_source.source_not_null_stripe_balance_transaction_id".
2020-07-23 18:08:32.006265 (Thread-1): finished collecting timing info
2020-07-23 18:08:32.006612 (Thread-4): Finished running node model.stripe_source.stg_stripe_fee
2020-07-23 18:08:32.006858 (Thread-3): Finished running node model.stripe_source.stg_stripe_payment_method
2020-07-23 18:08:32.006961 (Thread-2): Opening a new connection, currently in state closed
2020-07-23 18:08:32.007187 (Thread-1): Finished running node model.stripe_source.stg_stripe_payment_method_card
2020-07-23 18:08:32.007340 (Thread-4): Began running node test.stripe_source.source_not_null_stripe_card_id
2020-07-23 18:08:32.007544 (Thread-3): Began running node test.stripe_source.source_not_null_stripe_charge_id
2020-07-23 18:08:32.007664 (Thread-2): Compiling test.stripe_source.source_not_null_stripe_balance_transaction_id
2020-07-23 18:08:32.007840 (Thread-1): Began running node test.stripe_source.source_not_null_stripe_customer_id
2020-07-23 18:08:32.008236 (Thread-4): Acquiring new bigquery connection "test.stripe_source.source_not_null_stripe_card_id".
2020-07-23 18:08:32.008478 (Thread-3): Acquiring new bigquery connection "test.stripe_source.source_not_null_stripe_charge_id".
2020-07-23 18:08:32.020449 (Thread-1): Acquiring new bigquery connection "test.stripe_source.source_not_null_stripe_customer_id".
2020-07-23 18:08:32.023243 (Thread-2): Writing injected SQL for node "test.stripe_source.source_not_null_stripe_balance_transaction_id"
2020-07-23 18:08:32.023351 (Thread-4): Opening a new connection, currently in state closed
2020-07-23 18:08:32.023464 (Thread-3): Opening a new connection, currently in state closed
2020-07-23 18:08:32.023547 (Thread-1): Re-using an available connection from the pool (formerly model.stripe_source.stg_stripe_payment_method_card).
2020-07-23 18:08:32.023755 (Thread-4): Compiling test.stripe_source.source_not_null_stripe_card_id
2020-07-23 18:08:32.023863 (Thread-3): Compiling test.stripe_source.source_not_null_stripe_charge_id
2020-07-23 18:08:32.023952 (Thread-1): Compiling test.stripe_source.source_not_null_stripe_customer_id
2020-07-23 18:08:32.032181 (Thread-4): Writing injected SQL for node "test.stripe_source.source_not_null_stripe_card_id"
2020-07-23 18:08:32.039847 (Thread-3): Writing injected SQL for node "test.stripe_source.source_not_null_stripe_charge_id"
2020-07-23 18:08:32.045895 (Thread-2): finished collecting timing info
2020-07-23 18:08:32.048038 (Thread-1): Writing injected SQL for node "test.stripe_source.source_not_null_stripe_customer_id"
2020-07-23 18:08:32.048183 (Thread-4): finished collecting timing info
2020-07-23 18:08:32.048419 (Thread-2): finished collecting timing info
2020-07-23 18:08:32.048642 (Thread-3): finished collecting timing info
2020-07-23 18:08:32.048876 (Thread-4): finished collecting timing info
2020-07-23 18:08:32.049199 (Thread-2): Finished running node test.stripe_source.source_not_null_stripe_balance_transaction_id
2020-07-23 18:08:32.049301 (Thread-3): finished collecting timing info
2020-07-23 18:08:32.049576 (Thread-4): Finished running node test.stripe_source.source_not_null_stripe_card_id
2020-07-23 18:08:32.049742 (Thread-2): Began running node test.stripe_source.source_not_null_stripe_payment_intent_id
2020-07-23 18:08:32.050013 (Thread-3): Finished running node test.stripe_source.source_not_null_stripe_charge_id
2020-07-23 18:08:32.050187 (Thread-4): Began running node test.stripe_source.source_not_null_stripe_payout_id
2020-07-23 18:08:32.050255 (Thread-1): finished collecting timing info
2020-07-23 18:08:32.050547 (Thread-2): Acquiring new bigquery connection "test.stripe_source.source_not_null_stripe_payment_intent_id".
2020-07-23 18:08:32.050705 (Thread-3): Began running node test.stripe_source.source_not_null_stripe_refund_id
2020-07-23 18:08:32.050900 (Thread-4): Acquiring new bigquery connection "test.stripe_source.source_not_null_stripe_payout_id".
2020-07-23 18:08:32.051040 (Thread-1): finished collecting timing info
2020-07-23 18:08:32.051203 (Thread-2): Opening a new connection, currently in state closed
2020-07-23 18:08:32.051445 (Thread-3): Acquiring new bigquery connection "test.stripe_source.source_not_null_stripe_refund_id".
2020-07-23 18:08:32.051552 (Thread-4): Opening a new connection, currently in state closed
2020-07-23 18:08:32.051752 (Thread-1): Finished running node test.stripe_source.source_not_null_stripe_customer_id
2020-07-23 18:08:32.051848 (Thread-2): Compiling test.stripe_source.source_not_null_stripe_payment_intent_id
2020-07-23 18:08:32.051921 (Thread-3): Opening a new connection, currently in state closed
2020-07-23 18:08:32.051993 (Thread-4): Compiling test.stripe_source.source_not_null_stripe_payout_id
2020-07-23 18:08:32.052082 (Thread-1): Began running node test.stripe_source.source_unique_stripe_balance_transaction_id
2020-07-23 18:08:32.060659 (Thread-2): Writing injected SQL for node "test.stripe_source.source_not_null_stripe_payment_intent_id"
2020-07-23 18:08:32.060803 (Thread-3): Compiling test.stripe_source.source_not_null_stripe_refund_id
2020-07-23 18:08:32.069444 (Thread-4): Writing injected SQL for node "test.stripe_source.source_not_null_stripe_payout_id"
2020-07-23 18:08:32.069763 (Thread-1): Acquiring new bigquery connection "test.stripe_source.source_unique_stripe_balance_transaction_id".
2020-07-23 18:08:32.078361 (Thread-3): Writing injected SQL for node "test.stripe_source.source_not_null_stripe_refund_id"
2020-07-23 18:08:32.078482 (Thread-1): Re-using an available connection from the pool (formerly test.stripe_source.source_not_null_stripe_customer_id).
2020-07-23 18:08:32.078594 (Thread-2): finished collecting timing info
2020-07-23 18:08:32.079013 (Thread-1): Compiling test.stripe_source.source_unique_stripe_balance_transaction_id
2020-07-23 18:08:32.079144 (Thread-2): finished collecting timing info
2020-07-23 18:08:32.079455 (Thread-4): finished collecting timing info
2020-07-23 18:08:32.088542 (Thread-1): Writing injected SQL for node "test.stripe_source.source_unique_stripe_balance_transaction_id"
2020-07-23 18:08:32.088957 (Thread-2): Finished running node test.stripe_source.source_not_null_stripe_payment_intent_id
2020-07-23 18:08:32.089067 (Thread-3): finished collecting timing info
2020-07-23 18:08:32.089331 (Thread-4): finished collecting timing info
2020-07-23 18:08:32.089735 (Thread-2): Began running node test.stripe_source.source_unique_stripe_card_id
2020-07-23 18:08:32.090198 (Thread-3): finished collecting timing info
2020-07-23 18:08:32.090636 (Thread-4): Finished running node test.stripe_source.source_not_null_stripe_payout_id
2020-07-23 18:08:32.090962 (Thread-2): Acquiring new bigquery connection "test.stripe_source.source_unique_stripe_card_id".
2020-07-23 18:08:32.091084 (Thread-1): finished collecting timing info
2020-07-23 18:08:32.091428 (Thread-3): Finished running node test.stripe_source.source_not_null_stripe_refund_id
2020-07-23 18:08:32.091565 (Thread-4): Began running node test.stripe_source.source_unique_stripe_charge_id
2020-07-23 18:08:32.091739 (Thread-2): Opening a new connection, currently in state closed
2020-07-23 18:08:32.091843 (Thread-1): finished collecting timing info
2020-07-23 18:08:32.092060 (Thread-3): Began running node test.stripe_source.source_unique_stripe_customer_id
2020-07-23 18:08:32.092329 (Thread-4): Acquiring new bigquery connection "test.stripe_source.source_unique_stripe_charge_id".
2020-07-23 18:08:32.092523 (Thread-2): Compiling test.stripe_source.source_unique_stripe_card_id
2020-07-23 18:08:32.092762 (Thread-1): Finished running node test.stripe_source.source_unique_stripe_balance_transaction_id
2020-07-23 18:08:32.092990 (Thread-3): Acquiring new bigquery connection "test.stripe_source.source_unique_stripe_customer_id".
2020-07-23 18:08:32.093086 (Thread-4): Opening a new connection, currently in state closed
2020-07-23 18:08:32.102522 (Thread-2): Writing injected SQL for node "test.stripe_source.source_unique_stripe_card_id"
2020-07-23 18:08:32.102718 (Thread-1): Began running node test.stripe_source.source_unique_stripe_payment_intent_id
2020-07-23 18:08:32.103003 (Thread-3): Opening a new connection, currently in state closed
2020-07-23 18:08:32.103129 (Thread-4): Compiling test.stripe_source.source_unique_stripe_charge_id
2020-07-23 18:08:32.103533 (Thread-1): Acquiring new bigquery connection "test.stripe_source.source_unique_stripe_payment_intent_id".
2020-07-23 18:08:32.103657 (Thread-3): Compiling test.stripe_source.source_unique_stripe_customer_id
2020-07-23 18:08:32.113324 (Thread-4): Writing injected SQL for node "test.stripe_source.source_unique_stripe_charge_id"
2020-07-23 18:08:32.113521 (Thread-1): Re-using an available connection from the pool (formerly test.stripe_source.source_unique_stripe_balance_transaction_id).
2020-07-23 18:08:32.118903 (Thread-2): finished collecting timing info
2020-07-23 18:08:32.123170 (Thread-3): Writing injected SQL for node "test.stripe_source.source_unique_stripe_customer_id"
2020-07-23 18:08:32.123463 (Thread-1): Compiling test.stripe_source.source_unique_stripe_payment_intent_id
2020-07-23 18:08:32.123678 (Thread-2): finished collecting timing info
2020-07-23 18:08:32.123957 (Thread-4): finished collecting timing info
2020-07-23 18:08:32.132628 (Thread-1): Writing injected SQL for node "test.stripe_source.source_unique_stripe_payment_intent_id"
2020-07-23 18:08:32.133160 (Thread-2): Finished running node test.stripe_source.source_unique_stripe_card_id
2020-07-23 18:08:32.133445 (Thread-4): finished collecting timing info
2020-07-23 18:08:32.133712 (Thread-3): finished collecting timing info
2020-07-23 18:08:32.134031 (Thread-2): Began running node test.stripe_source.source_unique_stripe_payout_id
2020-07-23 18:08:32.134393 (Thread-4): Finished running node test.stripe_source.source_unique_stripe_charge_id
2020-07-23 18:08:32.134746 (Thread-3): finished collecting timing info
2020-07-23 18:08:32.135273 (Thread-2): Acquiring new bigquery connection "test.stripe_source.source_unique_stripe_payout_id".
2020-07-23 18:08:32.135420 (Thread-1): finished collecting timing info
2020-07-23 18:08:32.135653 (Thread-4): Began running node test.stripe_source.source_unique_stripe_refund_id
2020-07-23 18:08:32.136055 (Thread-3): Finished running node test.stripe_source.source_unique_stripe_customer_id
2020-07-23 18:08:32.136215 (Thread-2): Opening a new connection, currently in state closed
2020-07-23 18:08:32.136349 (Thread-1): finished collecting timing info
2020-07-23 18:08:32.136850 (Thread-4): Acquiring new bigquery connection "test.stripe_source.source_unique_stripe_refund_id".
2020-07-23 18:08:32.137013 (Thread-3): Began running node model.stripe.stripe_incomplete_charges
2020-07-23 18:08:32.137147 (Thread-2): Compiling test.stripe_source.source_unique_stripe_payout_id
2020-07-23 18:08:32.137477 (Thread-1): Finished running node test.stripe_source.source_unique_stripe_payment_intent_id
2020-07-23 18:08:32.137583 (Thread-4): Opening a new connection, currently in state closed
2020-07-23 18:08:32.137837 (Thread-3): Acquiring new bigquery connection "model.stripe.stripe_incomplete_charges".
2020-07-23 18:08:32.147522 (Thread-2): Writing injected SQL for node "test.stripe_source.source_unique_stripe_payout_id"
2020-07-23 18:08:32.147671 (Thread-1): Began running node test.stripe_source.not_null_stg_stripe_charge_charge_id
2020-07-23 18:08:32.147921 (Thread-4): Compiling test.stripe_source.source_unique_stripe_refund_id
2020-07-23 18:08:32.148033 (Thread-3): Opening a new connection, currently in state closed
2020-07-23 18:08:32.148434 (Thread-1): Acquiring new bigquery connection "test.stripe_source.not_null_stg_stripe_charge_charge_id".
2020-07-23 18:08:32.154642 (Thread-2): finished collecting timing info
2020-07-23 18:08:32.158905 (Thread-4): Writing injected SQL for node "test.stripe_source.source_unique_stripe_refund_id"
2020-07-23 18:08:32.159046 (Thread-3): Compiling model.stripe.stripe_incomplete_charges
2020-07-23 18:08:32.159142 (Thread-1): Re-using an available connection from the pool (formerly test.stripe_source.source_unique_stripe_payment_intent_id).
2020-07-23 18:08:32.159261 (Thread-2): finished collecting timing info
2020-07-23 18:08:32.166714 (Thread-3): Writing injected SQL for node "model.stripe.stripe_incomplete_charges"
2020-07-23 18:08:32.166886 (Thread-1): Compiling test.stripe_source.not_null_stg_stripe_charge_charge_id
2020-07-23 18:08:32.167341 (Thread-2): Finished running node test.stripe_source.source_unique_stripe_payout_id
2020-07-23 18:08:32.167512 (Thread-4): finished collecting timing info
2020-07-23 18:08:32.176871 (Thread-1): Writing injected SQL for node "test.stripe_source.not_null_stg_stripe_charge_charge_id"
2020-07-23 18:08:32.177075 (Thread-2): Began running node test.stripe_source.unique_stg_stripe_charge_charge_id
2020-07-23 18:08:32.177349 (Thread-4): finished collecting timing info
2020-07-23 18:08:32.177589 (Thread-3): finished collecting timing info
2020-07-23 18:08:32.178140 (Thread-2): Acquiring new bigquery connection "test.stripe_source.unique_stg_stripe_charge_charge_id".
2020-07-23 18:08:32.178565 (Thread-4): Finished running node test.stripe_source.source_unique_stripe_refund_id
2020-07-23 18:08:32.178785 (Thread-3): finished collecting timing info
2020-07-23 18:08:32.179162 (Thread-2): Opening a new connection, currently in state closed
2020-07-23 18:08:32.179301 (Thread-4): Began running node test.stripe_source.not_null_stg_stripe_balance_transaction_balance_transaction_id
2020-07-23 18:08:32.179390 (Thread-1): finished collecting timing info
2020-07-23 18:08:32.179761 (Thread-3): Finished running node model.stripe.stripe_incomplete_charges
2020-07-23 18:08:32.179962 (Thread-2): Compiling test.stripe_source.unique_stg_stripe_charge_charge_id
2020-07-23 18:08:32.180198 (Thread-4): Acquiring new bigquery connection "test.stripe_source.not_null_stg_stripe_balance_transaction_balance_transaction_id".
2020-07-23 18:08:32.180322 (Thread-1): finished collecting timing info
2020-07-23 18:08:32.180555 (Thread-3): Began running node test.stripe_source.not_null_stg_stripe_card_card_id
2020-07-23 18:08:32.192782 (Thread-2): Writing injected SQL for node "test.stripe_source.unique_stg_stripe_charge_charge_id"
2020-07-23 18:08:32.192960 (Thread-4): Opening a new connection, currently in state closed
2020-07-23 18:08:32.193330 (Thread-1): Finished running node test.stripe_source.not_null_stg_stripe_charge_charge_id
2020-07-23 18:08:32.193626 (Thread-3): Acquiring new bigquery connection "test.stripe_source.not_null_stg_stripe_card_card_id".
2020-07-23 18:08:32.193872 (Thread-4): Compiling test.stripe_source.not_null_stg_stripe_balance_transaction_balance_transaction_id
2020-07-23 18:08:32.194091 (Thread-1): Began running node test.stripe_source.unique_stg_stripe_balance_transaction_balance_transaction_id
2020-07-23 18:08:32.194329 (Thread-3): Opening a new connection, currently in state closed
2020-07-23 18:08:32.200170 (Thread-2): finished collecting timing info
2020-07-23 18:08:32.204341 (Thread-4): Writing injected SQL for node "test.stripe_source.not_null_stg_stripe_balance_transaction_balance_transaction_id"
2020-07-23 18:08:32.204747 (Thread-1): Acquiring new bigquery connection "test.stripe_source.unique_stg_stripe_balance_transaction_balance_transaction_id".
2020-07-23 18:08:32.204944 (Thread-3): Compiling test.stripe_source.not_null_stg_stripe_card_card_id
2020-07-23 18:08:32.205085 (Thread-2): finished collecting timing info
2020-07-23 18:08:32.205434 (Thread-1): Re-using an available connection from the pool (formerly test.stripe_source.not_null_stg_stripe_charge_charge_id).
2020-07-23 18:08:32.214452 (Thread-3): Writing injected SQL for node "test.stripe_source.not_null_stg_stripe_card_card_id"
2020-07-23 18:08:32.214877 (Thread-2): Finished running node test.stripe_source.unique_stg_stripe_charge_charge_id
2020-07-23 18:08:32.215059 (Thread-1): Compiling test.stripe_source.unique_stg_stripe_balance_transaction_balance_transaction_id
2020-07-23 18:08:32.215210 (Thread-4): finished collecting timing info
2020-07-23 18:08:32.215559 (Thread-2): Began running node test.stripe_source.unique_stg_stripe_card_card_id
2020-07-23 18:08:32.224507 (Thread-1): Writing injected SQL for node "test.stripe_source.unique_stg_stripe_balance_transaction_balance_transaction_id"
2020-07-23 18:08:32.224744 (Thread-4): finished collecting timing info
2020-07-23 18:08:32.225299 (Thread-2): Acquiring new bigquery connection "test.stripe_source.unique_stg_stripe_card_card_id".
2020-07-23 18:08:32.225447 (Thread-3): finished collecting timing info
2020-07-23 18:08:32.225987 (Thread-4): Finished running node test.stripe_source.not_null_stg_stripe_balance_transaction_balance_transaction_id
2020-07-23 18:08:32.226139 (Thread-2): Opening a new connection, currently in state closed
2020-07-23 18:08:32.226332 (Thread-3): finished collecting timing info
2020-07-23 18:08:32.226553 (Thread-1): finished collecting timing info
2020-07-23 18:08:32.226787 (Thread-4): Began running node test.stripe_source.not_null_stg_stripe_customer_id
2020-07-23 18:08:32.227013 (Thread-2): Compiling test.stripe_source.unique_stg_stripe_card_card_id
2020-07-23 18:08:32.227284 (Thread-3): Finished running node test.stripe_source.not_null_stg_stripe_card_card_id
2020-07-23 18:08:32.227428 (Thread-1): finished collecting timing info
2020-07-23 18:08:32.227847 (Thread-4): Acquiring new bigquery connection "test.stripe_source.not_null_stg_stripe_customer_id".
2020-07-23 18:08:32.236669 (Thread-2): Writing injected SQL for node "test.stripe_source.unique_stg_stripe_card_card_id"
2020-07-23 18:08:32.236836 (Thread-3): Began running node test.stripe_source.unique_stg_stripe_customer_id
2020-07-23 18:08:32.237255 (Thread-1): Finished running node test.stripe_source.unique_stg_stripe_balance_transaction_balance_transaction_id
2020-07-23 18:08:32.237374 (Thread-4): Opening a new connection, currently in state closed
2020-07-23 18:08:32.237696 (Thread-3): Acquiring new bigquery connection "test.stripe_source.unique_stg_stripe_customer_id".
2020-07-23 18:08:32.237888 (Thread-1): Began running node test.stripe_source.not_null_stg_stripe_payment_intent_payment_intent_id
2020-07-23 18:08:32.238027 (Thread-4): Compiling test.stripe_source.not_null_stg_stripe_customer_id
2020-07-23 18:08:32.238170 (Thread-3): Opening a new connection, currently in state closed
2020-07-23 18:08:32.238395 (Thread-1): Acquiring new bigquery connection "test.stripe_source.not_null_stg_stripe_payment_intent_payment_intent_id".
2020-07-23 18:08:32.247088 (Thread-4): Writing injected SQL for node "test.stripe_source.not_null_stg_stripe_customer_id"
2020-07-23 18:08:32.247244 (Thread-3): Compiling test.stripe_source.unique_stg_stripe_customer_id
2020-07-23 18:08:32.247344 (Thread-1): Re-using an available connection from the pool (formerly test.stripe_source.unique_stg_stripe_balance_transaction_balance_transaction_id).
2020-07-23 18:08:32.247463 (Thread-2): finished collecting timing info
2020-07-23 18:08:32.257249 (Thread-3): Writing injected SQL for node "test.stripe_source.unique_stg_stripe_customer_id"
2020-07-23 18:08:32.257359 (Thread-1): Compiling test.stripe_source.not_null_stg_stripe_payment_intent_payment_intent_id
2020-07-23 18:08:32.257565 (Thread-2): finished collecting timing info
2020-07-23 18:08:32.257891 (Thread-4): finished collecting timing info
2020-07-23 18:08:32.265802 (Thread-1): Writing injected SQL for node "test.stripe_source.not_null_stg_stripe_payment_intent_payment_intent_id"
2020-07-23 18:08:32.266235 (Thread-2): Finished running node test.stripe_source.unique_stg_stripe_card_card_id
2020-07-23 18:08:32.266465 (Thread-4): finished collecting timing info
2020-07-23 18:08:32.266707 (Thread-3): finished collecting timing info
2020-07-23 18:08:32.267011 (Thread-2): Began running node test.stripe_source.unique_stg_stripe_payment_intent_payment_intent_id
2020-07-23 18:08:32.267459 (Thread-4): Finished running node test.stripe_source.not_null_stg_stripe_customer_id
2020-07-23 18:08:32.267637 (Thread-3): finished collecting timing info
2020-07-23 18:08:32.268019 (Thread-2): Acquiring new bigquery connection "test.stripe_source.unique_stg_stripe_payment_intent_payment_intent_id".
2020-07-23 18:08:32.268104 (Thread-1): finished collecting timing info
2020-07-23 18:08:32.268339 (Thread-4): Began running node test.stripe_source.not_null_stg_stripe_invoice_invoice_id
2020-07-23 18:08:32.268759 (Thread-3): Finished running node test.stripe_source.unique_stg_stripe_customer_id
2020-07-23 18:08:32.268883 (Thread-2): Opening a new connection, currently in state closed
2020-07-23 18:08:32.269005 (Thread-1): finished collecting timing info
2020-07-23 18:08:32.269363 (Thread-4): Acquiring new bigquery connection "test.stripe_source.not_null_stg_stripe_invoice_invoice_id".
2020-07-23 18:08:32.269511 (Thread-3): Began running node test.stripe_source.unique_stg_stripe_invoice_invoice_id
2020-07-23 18:08:32.269751 (Thread-2): Compiling test.stripe_source.unique_stg_stripe_payment_intent_payment_intent_id
2020-07-23 18:08:32.270022 (Thread-1): Finished running node test.stripe_source.not_null_stg_stripe_payment_intent_payment_intent_id
2020-07-23 18:08:32.270150 (Thread-4): Opening a new connection, currently in state closed
2020-07-23 18:08:32.270466 (Thread-3): Acquiring new bigquery connection "test.stripe_source.unique_stg_stripe_invoice_invoice_id".
2020-07-23 18:08:32.279186 (Thread-2): Writing injected SQL for node "test.stripe_source.unique_stg_stripe_payment_intent_payment_intent_id"
2020-07-23 18:08:32.279367 (Thread-1): Began running node test.stripe_source.not_null_stg_stripe_payout_payout_id
2020-07-23 18:08:32.279612 (Thread-4): Compiling test.stripe_source.not_null_stg_stripe_invoice_invoice_id
2020-07-23 18:08:32.279712 (Thread-3): Opening a new connection, currently in state closed
2020-07-23 18:08:32.280072 (Thread-1): Acquiring new bigquery connection "test.stripe_source.not_null_stg_stripe_payout_payout_id".
2020-07-23 18:08:32.288131 (Thread-4): Writing injected SQL for node "test.stripe_source.not_null_stg_stripe_invoice_invoice_id"
2020-07-23 18:08:32.288332 (Thread-3): Compiling test.stripe_source.unique_stg_stripe_invoice_invoice_id
2020-07-23 18:08:32.288436 (Thread-1): Re-using an available connection from the pool (formerly test.stripe_source.not_null_stg_stripe_payment_intent_payment_intent_id).
2020-07-23 18:08:32.297673 (Thread-3): Writing injected SQL for node "test.stripe_source.unique_stg_stripe_invoice_invoice_id"
2020-07-23 18:08:32.297862 (Thread-2): finished collecting timing info
2020-07-23 18:08:32.298194 (Thread-1): Compiling test.stripe_source.not_null_stg_stripe_payout_payout_id
2020-07-23 18:08:32.298429 (Thread-4): finished collecting timing info
2020-07-23 18:08:32.298682 (Thread-2): finished collecting timing info
2020-07-23 18:08:32.304550 (Thread-3): finished collecting timing info
2020-07-23 18:08:32.307151 (Thread-1): Writing injected SQL for node "test.stripe_source.not_null_stg_stripe_payout_payout_id"
2020-07-23 18:08:32.307300 (Thread-4): finished collecting timing info
2020-07-23 18:08:32.307677 (Thread-2): Finished running node test.stripe_source.unique_stg_stripe_payment_intent_payment_intent_id
2020-07-23 18:08:32.307802 (Thread-3): finished collecting timing info
2020-07-23 18:08:32.308275 (Thread-4): Finished running node test.stripe_source.not_null_stg_stripe_invoice_invoice_id
2020-07-23 18:08:32.308488 (Thread-2): Began running node test.stripe_source.unique_stg_stripe_payout_payout_id
2020-07-23 18:08:32.308720 (Thread-1): finished collecting timing info
2020-07-23 18:08:32.309030 (Thread-3): Finished running node test.stripe_source.unique_stg_stripe_invoice_invoice_id
2020-07-23 18:08:32.309165 (Thread-4): Began running node model.stripe.stripe_balance_transaction_joined
2020-07-23 18:08:32.309542 (Thread-2): Acquiring new bigquery connection "test.stripe_source.unique_stg_stripe_payout_payout_id".
2020-07-23 18:08:32.309685 (Thread-1): finished collecting timing info
2020-07-23 18:08:32.309924 (Thread-3): Began running node test.stripe_source.not_null_stg_stripe_refund_refund_id
2020-07-23 18:08:32.310253 (Thread-4): Acquiring new bigquery connection "model.stripe.stripe_balance_transaction_joined".
2020-07-23 18:08:32.310364 (Thread-2): Opening a new connection, currently in state closed
2020-07-23 18:08:32.310659 (Thread-1): Finished running node test.stripe_source.not_null_stg_stripe_payout_payout_id
2020-07-23 18:08:32.310911 (Thread-3): Acquiring new bigquery connection "test.stripe_source.not_null_stg_stripe_refund_refund_id".
2020-07-23 18:08:32.311010 (Thread-4): Opening a new connection, currently in state closed
2020-07-23 18:08:32.311110 (Thread-2): Compiling test.stripe_source.unique_stg_stripe_payout_payout_id
2020-07-23 18:08:32.311231 (Thread-1): Began running node test.stripe_source.unique_stg_stripe_refund_refund_id
2020-07-23 18:08:32.311436 (Thread-3): Opening a new connection, currently in state closed
2020-07-23 18:08:32.311572 (Thread-4): Compiling model.stripe.stripe_balance_transaction_joined
2020-07-23 18:08:32.320922 (Thread-2): Writing injected SQL for node "test.stripe_source.unique_stg_stripe_payout_payout_id"
2020-07-23 18:08:32.321188 (Thread-1): Acquiring new bigquery connection "test.stripe_source.unique_stg_stripe_refund_refund_id".
2020-07-23 18:08:32.321325 (Thread-3): Compiling test.stripe_source.not_null_stg_stripe_refund_refund_id
2020-07-23 18:08:32.333794 (Thread-4): Writing injected SQL for node "model.stripe.stripe_balance_transaction_joined"
2020-07-23 18:08:32.333872 (Thread-1): Re-using an available connection from the pool (formerly test.stripe_source.not_null_stg_stripe_payout_payout_id).
2020-07-23 18:08:32.342105 (Thread-3): Writing injected SQL for node "test.stripe_source.not_null_stg_stripe_refund_refund_id"
2020-07-23 18:08:32.342286 (Thread-2): finished collecting timing info
2020-07-23 18:08:32.342569 (Thread-1): Compiling test.stripe_source.unique_stg_stripe_refund_refund_id
2020-07-23 18:08:32.342840 (Thread-2): finished collecting timing info
2020-07-23 18:08:32.350515 (Thread-1): Writing injected SQL for node "test.stripe_source.unique_stg_stripe_refund_refund_id"
2020-07-23 18:08:32.350618 (Thread-4): finished collecting timing info
2020-07-23 18:08:32.350791 (Thread-3): finished collecting timing info
2020-07-23 18:08:32.351117 (Thread-2): Finished running node test.stripe_source.unique_stg_stripe_payout_payout_id
2020-07-23 18:08:32.351497 (Thread-4): finished collecting timing info
2020-07-23 18:08:32.351774 (Thread-3): finished collecting timing info
2020-07-23 18:08:32.352057 (Thread-2): Began running node test.stripe_source.not_null_stg_stripe_invoice_line_item_unique_id
2020-07-23 18:08:32.352393 (Thread-4): Finished running node model.stripe.stripe_balance_transaction_joined
2020-07-23 18:08:32.352479 (Thread-1): finished collecting timing info
2020-07-23 18:08:32.352876 (Thread-3): Finished running node test.stripe_source.not_null_stg_stripe_refund_refund_id
2020-07-23 18:08:32.353099 (Thread-2): Acquiring new bigquery connection "test.stripe_source.not_null_stg_stripe_invoice_line_item_unique_id".
2020-07-23 18:08:32.353219 (Thread-4): Began running node test.stripe_source.unique_stg_stripe_invoice_line_item_unique_id
2020-07-23 18:08:32.353338 (Thread-1): finished collecting timing info
2020-07-23 18:08:32.353887 (Thread-3): Began running node model.stripe.stripe_invoice_details
2020-07-23 18:08:32.355580 (Thread-3): Acquiring new bigquery connection "model.stripe.stripe_invoice_details".
2020-07-23 18:08:32.354474 (Thread-4): Acquiring new bigquery connection "test.stripe_source.unique_stg_stripe_invoice_line_item_unique_id".
2020-07-23 18:08:32.354925 (Thread-1): Finished running node test.stripe_source.unique_stg_stripe_refund_refund_id
2020-07-23 18:08:32.354137 (Thread-2): Opening a new connection, currently in state closed
2020-07-23 18:08:32.356914 (Thread-3): Opening a new connection, currently in state closed
2020-07-23 18:08:32.357125 (Thread-4): Opening a new connection, currently in state closed
2020-07-23 18:08:32.357399 (Thread-1): Began running node model.stripe.stripe_subscription_details
2020-07-23 18:08:32.357689 (Thread-2): Compiling test.stripe_source.not_null_stg_stripe_invoice_line_item_unique_id
2020-07-23 18:08:32.357826 (Thread-3): Compiling model.stripe.stripe_invoice_details
2020-07-23 18:08:32.357942 (Thread-4): Compiling test.stripe_source.unique_stg_stripe_invoice_line_item_unique_id
2020-07-23 18:08:32.358256 (Thread-1): Acquiring new bigquery connection "model.stripe.stripe_subscription_details".
2020-07-23 18:08:32.368077 (Thread-2): Writing injected SQL for node "test.stripe_source.not_null_stg_stripe_invoice_line_item_unique_id"
2020-07-23 18:08:32.396411 (Thread-4): Writing injected SQL for node "test.stripe_source.unique_stg_stripe_invoice_line_item_unique_id"
2020-07-23 18:08:32.399139 (Thread-3): Writing injected SQL for node "model.stripe.stripe_invoice_details"
2020-07-23 18:08:32.399363 (Thread-1): Re-using an available connection from the pool (formerly test.stripe_source.unique_stg_stripe_refund_refund_id).
2020-07-23 18:08:32.399971 (Thread-1): Compiling model.stripe.stripe_subscription_details
2020-07-23 18:08:32.412880 (Thread-2): finished collecting timing info
2020-07-23 18:08:32.418269 (Thread-4): finished collecting timing info
2020-07-23 18:08:32.418623 (Thread-2): finished collecting timing info
2020-07-23 18:08:32.423435 (Thread-1): Writing injected SQL for node "model.stripe.stripe_subscription_details"
2020-07-23 18:08:32.423633 (Thread-4): finished collecting timing info
2020-07-23 18:08:32.423879 (Thread-3): finished collecting timing info
2020-07-23 18:08:32.424283 (Thread-2): Finished running node test.stripe_source.not_null_stg_stripe_invoice_line_item_unique_id
2020-07-23 18:08:32.424683 (Thread-4): Finished running node test.stripe_source.unique_stg_stripe_invoice_line_item_unique_id
2020-07-23 18:08:32.424932 (Thread-3): finished collecting timing info
2020-07-23 18:08:32.425189 (Thread-2): Began running node test.stripe_source.not_null_stg_stripe_payment_method_payment_method_id
2020-07-23 18:08:32.425279 (Thread-1): finished collecting timing info
2020-07-23 18:08:32.425503 (Thread-4): Began running node test.stripe_source.unique_stg_stripe_payment_method_payment_method_id
2020-07-23 18:08:32.425863 (Thread-3): Finished running node model.stripe.stripe_invoice_details
2020-07-23 18:08:32.426307 (Thread-2): Acquiring new bigquery connection "test.stripe_source.not_null_stg_stripe_payment_method_payment_method_id".
2020-07-23 18:08:32.426557 (Thread-1): finished collecting timing info
2020-07-23 18:08:32.427727 (Thread-4): Acquiring new bigquery connection "test.stripe_source.unique_stg_stripe_payment_method_payment_method_id".
2020-07-23 18:08:32.428211 (Thread-3): Began running node model.stripe.stripe_balance_transactions
2020-07-23 18:08:32.428702 (Thread-2): Opening a new connection, currently in state closed
2020-07-23 18:08:32.429276 (Thread-1): Finished running node model.stripe.stripe_subscription_details
2020-07-23 18:08:32.429507 (Thread-4): Opening a new connection, currently in state closed
2020-07-23 18:08:32.429995 (Thread-3): Acquiring new bigquery connection "model.stripe.stripe_balance_transactions".
2020-07-23 18:08:32.430234 (Thread-2): Compiling test.stripe_source.not_null_stg_stripe_payment_method_payment_method_id
2020-07-23 18:08:32.430436 (Thread-1): Began running node model.stripe.stripe_customer_overview
2020-07-23 18:08:32.430680 (Thread-4): Compiling test.stripe_source.unique_stg_stripe_payment_method_payment_method_id
2020-07-23 18:08:32.430811 (Thread-3): Opening a new connection, currently in state closed
2020-07-23 18:08:32.443952 (Thread-2): Writing injected SQL for node "test.stripe_source.not_null_stg_stripe_payment_method_payment_method_id"
2020-07-23 18:08:32.444454 (Thread-1): Acquiring new bigquery connection "model.stripe.stripe_customer_overview".
2020-07-23 18:08:32.456654 (Thread-4): Writing injected SQL for node "test.stripe_source.unique_stg_stripe_payment_method_payment_method_id"
2020-07-23 18:08:32.456971 (Thread-3): Compiling model.stripe.stripe_balance_transactions
2020-07-23 18:08:32.457292 (Thread-1): Re-using an available connection from the pool (formerly model.stripe.stripe_subscription_details).
2020-07-23 18:08:32.468992 (Thread-2): finished collecting timing info
2020-07-23 18:08:32.474918 (Thread-1): Compiling model.stripe.stripe_customer_overview
2020-07-23 18:08:32.485270 (Thread-4): finished collecting timing info
2020-07-23 18:08:32.487466 (Thread-3): Writing injected SQL for node "model.stripe.stripe_balance_transactions"
2020-07-23 18:08:32.488259 (Thread-2): finished collecting timing info
2020-07-23 18:08:32.499929 (Thread-4): finished collecting timing info
2020-07-23 18:08:32.512316 (Thread-2): Finished running node test.stripe_source.not_null_stg_stripe_payment_method_payment_method_id
2020-07-23 18:08:32.519402 (Thread-4): Finished running node test.stripe_source.unique_stg_stripe_payment_method_payment_method_id
2020-07-23 18:08:32.523154 (Thread-1): Writing injected SQL for node "model.stripe.stripe_customer_overview"
2020-07-23 18:08:32.523390 (Thread-3): finished collecting timing info
2020-07-23 18:08:32.523747 (Thread-2): Began running node model.stripe.stripe_daily_overview
2020-07-23 18:08:32.524018 (Thread-4): Began running node model.stripe.stripe_monthly_overview
2020-07-23 18:08:32.524648 (Thread-3): finished collecting timing info
2020-07-23 18:08:32.525416 (Thread-2): Acquiring new bigquery connection "model.stripe.stripe_daily_overview".
2020-07-23 18:08:32.525710 (Thread-4): Acquiring new bigquery connection "model.stripe.stripe_monthly_overview".
2020-07-23 18:08:32.526172 (Thread-3): Finished running node model.stripe.stripe_balance_transactions
2020-07-23 18:08:32.526366 (Thread-1): finished collecting timing info
2020-07-23 18:08:32.526671 (Thread-2): Opening a new connection, currently in state closed
2020-07-23 18:08:32.526810 (Thread-4): Opening a new connection, currently in state closed
2020-07-23 18:08:32.527008 (Thread-3): Began running node model.stripe.stripe_quarterly_overview
2020-07-23 18:08:32.527201 (Thread-1): finished collecting timing info
2020-07-23 18:08:32.527729 (Thread-2): Compiling model.stripe.stripe_daily_overview
2020-07-23 18:08:32.527886 (Thread-4): Compiling model.stripe.stripe_monthly_overview
2020-07-23 18:08:32.528270 (Thread-3): Acquiring new bigquery connection "model.stripe.stripe_quarterly_overview".
2020-07-23 18:08:32.528628 (Thread-1): Finished running node model.stripe.stripe_customer_overview
2020-07-23 18:08:32.557841 (Thread-3): Opening a new connection, currently in state closed
2020-07-23 18:08:32.566890 (Thread-4): Writing injected SQL for node "model.stripe.stripe_monthly_overview"
2020-07-23 18:08:32.572406 (Thread-2): Writing injected SQL for node "model.stripe.stripe_daily_overview"
2020-07-23 18:08:32.572729 (Thread-1): Began running node model.stripe.stripe_weekly_overview
2020-07-23 18:08:32.573037 (Thread-3): Compiling model.stripe.stripe_quarterly_overview
2020-07-23 18:08:32.573683 (Thread-1): Acquiring new bigquery connection "model.stripe.stripe_weekly_overview".
2020-07-23 18:08:32.584642 (Thread-2): finished collecting timing info
2020-07-23 18:08:32.592914 (Thread-3): Writing injected SQL for node "model.stripe.stripe_quarterly_overview"
2020-07-23 18:08:32.593148 (Thread-4): finished collecting timing info
2020-07-23 18:08:32.593437 (Thread-1): Re-using an available connection from the pool (formerly model.stripe.stripe_customer_overview).
2020-07-23 18:08:32.593611 (Thread-2): finished collecting timing info
2020-07-23 18:08:32.593998 (Thread-4): finished collecting timing info
2020-07-23 18:08:32.594274 (Thread-1): Compiling model.stripe.stripe_weekly_overview
2020-07-23 18:08:32.594800 (Thread-2): Finished running node model.stripe.stripe_daily_overview
2020-07-23 18:08:32.595239 (Thread-4): Finished running node model.stripe.stripe_monthly_overview
2020-07-23 18:08:32.595331 (Thread-3): finished collecting timing info
2020-07-23 18:08:32.613474 (Thread-1): Writing injected SQL for node "model.stripe.stripe_weekly_overview"
2020-07-23 18:08:32.613641 (Thread-3): finished collecting timing info
2020-07-23 18:08:32.614232 (Thread-3): Finished running node model.stripe.stripe_quarterly_overview
2020-07-23 18:08:32.614730 (Thread-1): finished collecting timing info
2020-07-23 18:08:32.614986 (Thread-1): finished collecting timing info
2020-07-23 18:08:32.615388 (Thread-1): Finished running node model.stripe.stripe_weekly_overview
2020-07-23 18:08:32.616353 (MainThread): Connection 'master' was properly closed.
2020-07-23 18:08:32.616471 (MainThread): Connection 'model.stripe.stripe_weekly_overview' was left open.
2020-07-23 18:08:32.616560 (MainThread): Connection 'model.stripe.stripe_daily_overview' was properly closed.
2020-07-23 18:08:32.616642 (MainThread): Connection 'model.stripe.stripe_quarterly_overview' was properly closed.
2020-07-23 18:08:32.616725 (MainThread): Connection 'model.stripe.stripe_monthly_overview' was properly closed.
2020-07-23 18:08:32.783763 (MainThread): 11:08:32 | Done.
2020-07-23 18:08:32.787230 (MainThread): Acquiring new bigquery connection "generate_catalog".
2020-07-23 18:08:32.787357 (MainThread): Opening a new connection, currently in state init
2020-07-23 18:08:32.787455 (MainThread): 11:08:32 | Building catalog
2020-07-23 18:08:32.932340 (MainThread): Your application has authenticated using end user credentials from Google Cloud SDK. We recommend that most server applications use service accounts instead. If your application continues to use end user credentials from Cloud SDK, you might receive a "quota exceeded" or "API not enabled" error. For more information about service accounts, see https://cloud.google.com/docs/authentication/
2020-07-23 18:08:34.463069 (ThreadPoolExecutor-2_0): Acquiring new bigquery connection "dbt-package-testing.information_schema".
2020-07-23 18:08:34.463587 (ThreadPoolExecutor-2_1): Acquiring new bigquery connection "dbt-package-testing.information_schema".
2020-07-23 18:08:34.463682 (ThreadPoolExecutor-2_0): Opening a new connection, currently in state init
2020-07-23 18:08:34.463877 (ThreadPoolExecutor-2_1): Opening a new connection, currently in state init
2020-07-23 18:08:34.513460 (ThreadPoolExecutor-2_1): Your application has authenticated using end user credentials from Google Cloud SDK. We recommend that most server applications use service accounts instead. If your application continues to use end user credentials from Cloud SDK, you might receive a "quota exceeded" or "API not enabled" error. For more information about service accounts, see https://cloud.google.com/docs/authentication/
2020-07-23 18:08:34.513750 (ThreadPoolExecutor-2_0): Your application has authenticated using end user credentials from Google Cloud SDK. We recommend that most server applications use service accounts instead. If your application continues to use end user credentials from Cloud SDK, you might receive a "quota exceeded" or "API not enabled" error. For more information about service accounts, see https://cloud.google.com/docs/authentication/
2020-07-23 18:08:35.659900 (ThreadPoolExecutor-2_0): On dbt-package-testing.information_schema: /* {"app": "dbt", "dbt_version": "0.17.0rc1", "profile_name": "integration_test", "target_name": "dev_bigquery_dbt_testing", "connection_name": "dbt-package-testing.information_schema"} */

    with tables as (
        select
            project_id as table_database,
            dataset_id as table_schema,
            table_id as original_table_name,

            concat(project_id, '.', dataset_id, '.', table_id) as relation_id,

            row_count,
            size_bytes as size_bytes,
            case
                when type = 1 then 'table'
                when type = 2 then 'view'
                else 'external'
            end as table_type,

            REGEXP_CONTAINS(table_id, '^.+[0-9]{8}$') and coalesce(type, 0) = 1 as is_date_shard,
            REGEXP_EXTRACT(table_id, '^(.+)[0-9]{8}$') as shard_base_name,
            REGEXP_EXTRACT(table_id, '^.+([0-9]{8})$') as shard_name

        from `dbt-package-testing`.`dbt_kristin_2`.__TABLES__
        where (upper(dataset_id) = upper('dbt_kristin_2'))
    ),

    extracted as (

        select *,
            case
                when is_date_shard then shard_base_name
                else original_table_name
            end as table_name

        from tables

    ),

    unsharded_tables as (

        select
            table_database,
            table_schema,
            table_name,
            coalesce(table_type, 'external') as table_type,
            is_date_shard,

            struct(
                min(shard_name) as shard_min,
                max(shard_name) as shard_max,
                count(*) as shard_count
            ) as table_shards,

            sum(size_bytes) as size_bytes,
            sum(row_count) as row_count,

            max(relation_id) as relation_id

        from extracted
        group by 1,2,3,4,5

    ),

    info_schema_columns as (

        select
            concat(table_catalog, '.', table_schema, '.', table_name) as relation_id,
            table_catalog as table_database,
            table_schema,
            table_name,

            -- use the "real" column name from the paths query below
            column_name as base_column_name,
            ordinal_position as column_index,
            cast(null as string) as column_comment,

            is_partitioning_column,
            clustering_ordinal_position

        from `dbt-package-testing`.`dbt_kristin_2`.INFORMATION_SCHEMA.COLUMNS
        where ordinal_position is not null

    ),

    info_schema_column_paths as (

        select
            concat(table_catalog, '.', table_schema, '.', table_name) as relation_id,
            field_path as column_name,
            data_type as column_type,
            column_name as base_column_name

        from `dbt-package-testing`.`dbt_kristin_2`.INFORMATION_SCHEMA.COLUMN_FIELD_PATHS
        where data_type not like 'STRUCT%'

    ),

    columns as (

        select * except (base_column_name)
        from info_schema_columns
        join info_schema_column_paths using (relation_id, base_column_name)

    ),

    column_stats as (

        select
            table_database,
            table_schema,
            table_name,
            max(relation_id) as relation_id,
            max(case when is_partitioning_column = 'YES' then 1 else 0 end) = 1 as is_partitioned,
            max(case when is_partitioning_column = 'YES' then column_name else null end) as partition_column,
            max(case when clustering_ordinal_position is not null then 1 else 0 end) = 1 as is_clustered,
            array_to_string(
                array_agg(
                    case
                        when clustering_ordinal_position is not null then column_name
                        else null
                    end ignore nulls
                    order by clustering_ordinal_position
                ), ', '
            ) as clustering_columns

        from columns
        group by 1,2,3

    )

    select
        unsharded_tables.table_database,
        unsharded_tables.table_schema,
        case
            when is_date_shard then concat(unsharded_tables.table_name, '*')
            else unsharded_tables.table_name
        end as table_name,
        unsharded_tables.table_type,

        -- coalesce name and type for External tables - these columns are not
        -- present in the COLUMN_FIELD_PATHS resultset
        coalesce(columns.column_name, '<unknown>') as column_name,
        -- invent a row number to account for nested fields -- BQ does
        -- not treat these nested properties as independent fields
        row_number() over (
            partition by relation_id
            order by columns.column_index, columns.column_name
        ) as column_index,
        coalesce(columns.column_type, '<unknown>') as column_type,
        columns.column_comment,

        'Shard count' as `stats__date_shards__label`,
        table_shards.shard_count as `stats__date_shards__value`,
        'The number of date shards in this table' as `stats__date_shards__description`,
        is_date_shard as `stats__date_shards__include`,

        'Shard (min)' as `stats__date_shard_min__label`,
        table_shards.shard_min as `stats__date_shard_min__value`,
        'The first date shard in this table' as `stats__date_shard_min__description`,
        is_date_shard as `stats__date_shard_min__include`,

        'Shard (max)' as `stats__date_shard_max__label`,
        table_shards.shard_max as `stats__date_shard_max__value`,
        'The last date shard in this table' as `stats__date_shard_max__description`,
        is_date_shard as `stats__date_shard_max__include`,

        '# Rows' as `stats__num_rows__label`,
        row_count as `stats__num_rows__value`,
        'Approximate count of rows in this table' as `stats__num_rows__description`,
        (unsharded_tables.table_type = 'table') as `stats__num_rows__include`,

        'Approximate Size' as `stats__num_bytes__label`,
        size_bytes as `stats__num_bytes__value`,
        'Approximate size of table as reported by BigQuery' as `stats__num_bytes__description`,
        (unsharded_tables.table_type = 'table') as `stats__num_bytes__include`,

        'Partitioned By' as `stats__partitioning_type__label`,
        partition_column as `stats__partitioning_type__value`,
        'The partitioning column for this table' as `stats__partitioning_type__description`,
        is_partitioned as `stats__partitioning_type__include`,

        'Clustered By' as `stats__clustering_fields__label`,
        clustering_columns as `stats__clustering_fields__value`,
        'The clustering columns for this table' as `stats__clustering_fields__description`,
        is_clustered as `stats__clustering_fields__include`

    -- join using relation_id (an actual relation, not a shard prefix) to make
    -- sure that column metadata is picked up through the join. This will only
    -- return the column information for the "max" table in a date-sharded table set
    from unsharded_tables
    left join columns using (relation_id)
    left join column_stats using (relation_id)
  
2020-07-23 18:08:35.744604 (ThreadPoolExecutor-2_1): On dbt-package-testing.information_schema: /* {"app": "dbt", "dbt_version": "0.17.0rc1", "profile_name": "integration_test", "target_name": "dev_bigquery_dbt_testing", "connection_name": "dbt-package-testing.information_schema"} */

    with tables as (
        select
            project_id as table_database,
            dataset_id as table_schema,
            table_id as original_table_name,

            concat(project_id, '.', dataset_id, '.', table_id) as relation_id,

            row_count,
            size_bytes as size_bytes,
            case
                when type = 1 then 'table'
                when type = 2 then 'view'
                else 'external'
            end as table_type,

            REGEXP_CONTAINS(table_id, '^.+[0-9]{8}$') and coalesce(type, 0) = 1 as is_date_shard,
            REGEXP_EXTRACT(table_id, '^(.+)[0-9]{8}$') as shard_base_name,
            REGEXP_EXTRACT(table_id, '^.+([0-9]{8})$') as shard_name

        from `dbt-package-testing`.`stripe`.__TABLES__
        where (upper(dataset_id) = upper('stripe'))
    ),

    extracted as (

        select *,
            case
                when is_date_shard then shard_base_name
                else original_table_name
            end as table_name

        from tables

    ),

    unsharded_tables as (

        select
            table_database,
            table_schema,
            table_name,
            coalesce(table_type, 'external') as table_type,
            is_date_shard,

            struct(
                min(shard_name) as shard_min,
                max(shard_name) as shard_max,
                count(*) as shard_count
            ) as table_shards,

            sum(size_bytes) as size_bytes,
            sum(row_count) as row_count,

            max(relation_id) as relation_id

        from extracted
        group by 1,2,3,4,5

    ),

    info_schema_columns as (

        select
            concat(table_catalog, '.', table_schema, '.', table_name) as relation_id,
            table_catalog as table_database,
            table_schema,
            table_name,

            -- use the "real" column name from the paths query below
            column_name as base_column_name,
            ordinal_position as column_index,
            cast(null as string) as column_comment,

            is_partitioning_column,
            clustering_ordinal_position

        from `dbt-package-testing`.`stripe`.INFORMATION_SCHEMA.COLUMNS
        where ordinal_position is not null

    ),

    info_schema_column_paths as (

        select
            concat(table_catalog, '.', table_schema, '.', table_name) as relation_id,
            field_path as column_name,
            data_type as column_type,
            column_name as base_column_name

        from `dbt-package-testing`.`stripe`.INFORMATION_SCHEMA.COLUMN_FIELD_PATHS
        where data_type not like 'STRUCT%'

    ),

    columns as (

        select * except (base_column_name)
        from info_schema_columns
        join info_schema_column_paths using (relation_id, base_column_name)

    ),

    column_stats as (

        select
            table_database,
            table_schema,
            table_name,
            max(relation_id) as relation_id,
            max(case when is_partitioning_column = 'YES' then 1 else 0 end) = 1 as is_partitioned,
            max(case when is_partitioning_column = 'YES' then column_name else null end) as partition_column,
            max(case when clustering_ordinal_position is not null then 1 else 0 end) = 1 as is_clustered,
            array_to_string(
                array_agg(
                    case
                        when clustering_ordinal_position is not null then column_name
                        else null
                    end ignore nulls
                    order by clustering_ordinal_position
                ), ', '
            ) as clustering_columns

        from columns
        group by 1,2,3

    )

    select
        unsharded_tables.table_database,
        unsharded_tables.table_schema,
        case
            when is_date_shard then concat(unsharded_tables.table_name, '*')
            else unsharded_tables.table_name
        end as table_name,
        unsharded_tables.table_type,

        -- coalesce name and type for External tables - these columns are not
        -- present in the COLUMN_FIELD_PATHS resultset
        coalesce(columns.column_name, '<unknown>') as column_name,
        -- invent a row number to account for nested fields -- BQ does
        -- not treat these nested properties as independent fields
        row_number() over (
            partition by relation_id
            order by columns.column_index, columns.column_name
        ) as column_index,
        coalesce(columns.column_type, '<unknown>') as column_type,
        columns.column_comment,

        'Shard count' as `stats__date_shards__label`,
        table_shards.shard_count as `stats__date_shards__value`,
        'The number of date shards in this table' as `stats__date_shards__description`,
        is_date_shard as `stats__date_shards__include`,

        'Shard (min)' as `stats__date_shard_min__label`,
        table_shards.shard_min as `stats__date_shard_min__value`,
        'The first date shard in this table' as `stats__date_shard_min__description`,
        is_date_shard as `stats__date_shard_min__include`,

        'Shard (max)' as `stats__date_shard_max__label`,
        table_shards.shard_max as `stats__date_shard_max__value`,
        'The last date shard in this table' as `stats__date_shard_max__description`,
        is_date_shard as `stats__date_shard_max__include`,

        '# Rows' as `stats__num_rows__label`,
        row_count as `stats__num_rows__value`,
        'Approximate count of rows in this table' as `stats__num_rows__description`,
        (unsharded_tables.table_type = 'table') as `stats__num_rows__include`,

        'Approximate Size' as `stats__num_bytes__label`,
        size_bytes as `stats__num_bytes__value`,
        'Approximate size of table as reported by BigQuery' as `stats__num_bytes__description`,
        (unsharded_tables.table_type = 'table') as `stats__num_bytes__include`,

        'Partitioned By' as `stats__partitioning_type__label`,
        partition_column as `stats__partitioning_type__value`,
        'The partitioning column for this table' as `stats__partitioning_type__description`,
        is_partitioned as `stats__partitioning_type__include`,

        'Clustered By' as `stats__clustering_fields__label`,
        clustering_columns as `stats__clustering_fields__value`,
        'The clustering columns for this table' as `stats__clustering_fields__description`,
        is_clustered as `stats__clustering_fields__include`

    -- join using relation_id (an actual relation, not a shard prefix) to make
    -- sure that column metadata is picked up through the join. This will only
    -- return the column information for the "max" table in a date-sharded table set
    from unsharded_tables
    left join columns using (relation_id)
    left join column_stats using (relation_id)
  
2020-07-23 18:08:40.712874 (MainThread): 11:08:40 | Catalog written to /Users/kristin/Documents/Github/dbt_stripe/target/catalog.json
2020-07-23 18:08:40.713645 (MainThread): Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'end', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x10ae04310>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x10b7149d0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x10b9f8220>]}
2020-07-23 18:08:40.713854 (MainThread): Flushing usage events
2020-07-23 18:08:41.059632 (MainThread): Connection 'generate_catalog' was left open.
2020-07-23 18:08:41.059838 (MainThread): Connection 'dbt-package-testing.information_schema' was left open.
2020-07-23 18:08:41.059938 (MainThread): Connection 'dbt-package-testing.information_schema' was left open.
